export = Parser;
declare class Parser {
    /**
     * @param {string} code
     * @param {[string, string][]} syntaxPairs
     * @param {AST.Range[]} skipRanges
     */
    constructor(code: string, syntaxPairs: [string, string][], skipRanges: AST.Range[]);
    /**
     * @type {string}
     */
    code: string;
    /**
     * @type {[string, string][]}
     */
    syntaxPairs: [string, string][];
    /**
     * @type {AST.Range[]}
     */
    skipRanges: AST.Range[];
    /**
     * @type {OpenSyntax[]}
     */
    syntaxStack: OpenSyntax[];
    /**
     * @type {TemplateSyntax[]}
     */
    result: TemplateSyntax[];
    /**
     * @private
     * @param {number} index
     * @returns {AST.Range | undefined}
     */
    private findSkipRange;
    /**
     * @param {string} syntax
     * @param {number} position
     * @returns {number}
     */
    indexOf(syntax: string, position: number): number;
    /**
     * @param {number} position
     * @returns {OpenSyntax | null}
     */
    findOpenSyntax(position: number): OpenSyntax | null;
    /**
     * @param {number} position
     * @returns {CloseSyntax | null}
     */
    findCloseSyntax(position: number): CloseSyntax | null;
    /**
     * @returns {OpenSyntax[]}
     */
    findAllOpenSyntax(): OpenSyntax[];
    /**
     * @returns {CloseSyntax[]}
     */
    findAllCloseSyntax(): CloseSyntax[];
    /**
     * @returns {(CloseSyntax | OpenSyntax)[]}
     */
    findAllSyntax(): (CloseSyntax | OpenSyntax)[];
    /**
     * @param {OpenSyntax} open
     * @returns {string}
     */
    getPossibleCloseValueOf(open: OpenSyntax): string;
    /**
     * @param {CloseSyntax | OpenSyntax} syntax
     */
    eatSyntax(syntax: CloseSyntax | OpenSyntax): void;
    /**
     * @returns {TemplateSyntaxParserResult}
     */
    parse(): TemplateSyntaxParserResult;
}
import type { AST } from "eslint";
import type { OpenSyntax } from "./types";
import type { TemplateSyntax } from "./types";
import type { CloseSyntax } from "./types";
import type { TemplateSyntaxParserResult } from "./types";
//# sourceMappingURL=parser.d.ts.map