{"version":3,"file":"sleep-DiuAJS4P.d.ts","names":["Interval","SleepOpts","AbortSignal","V","Partial","sleep","Promise","sleepWhile"],"sources":["../../core/dist/src/sleep.d.ts"],"sourcesContent":["import type { Interval } from './types.js';\nexport type SleepOpts<V> = Interval & Partial<{\n    readonly signal: AbortSignal;\n    readonly value: V;\n}>;\n/**\n * Returns after timeout period.\n *\n * @example In an async function\n * ```js\n * console.log(`Hello`);\n * await sleep(1000);\n * console.log(`There`); // Prints one second after\n * ```\n *\n * @example As a promise\n * ```js\n * console.log(`Hello`);\n * sleep({ millis: 1000 })\n *  .then(() => console.log(`There`)); // Prints one second after\n * ```\n *\n * If a timeout of 0 is given, `requestAnimationFrame` is used instead of `setTimeout`.\n *\n * `Flow.delay()` and {@link sleep} are similar. `Flow.delay()` takes a parameter of what code to execute after the timeout, while `sleep()` just resolves after the timeout.\n *\n * A value can be provided, which is returned on awaking:\n * ```js\n * const v = await sleep({ seconds: 1, value: `hello`);\n * // v = `hello`\n * ```\n *\n * Provide an AbortSignal to cancel the sleep and throwing an exception\n * so code after the sleep doesn't happen.\n *\n * ```js\n * const ac = new AbortController();\n * setTimeout(() => { ac.abort(); }, 1000); // Abort after 1s\n *\n * // Sleep for 1min\n * await sleep({ minutes: 1, signal: ac.signal });\n * console.log(`Awake`); // This line doesn't get called because an exception is thrown when aborting\n * ```\n * @param optsOrMillis Milliseconds to sleep, or options\n * @return\n */\nexport declare const sleep: <V>(optsOrMillis: SleepOpts<V>) => Promise<V | undefined>;\n/**\n * Delays until `predicate` returns true.\n * Can be useful for synchronising with other async activities.\n * ```js\n * // Delay until 'count' reaches 5\n * await sleepWhile(() => count >= 5, 100);\n * ```\n * @param predicate\n * @param checkInterval\n */\nexport declare const sleepWhile: (predicate: () => boolean, checkInterval?: Interval) => Promise<void>;\n//# sourceMappingURL=sleep.d.ts.map"],"mappings":";;;KACYC,eAAeD,WAAWI;mBACjBF;EADTD,SAAAA,KAAS,EAEDE,CAFC;CAAA,CAAA;;;;;AAAwB;AA6C7C;;;;;;AAAsE;AAWtE;;;;AAAgG;;;;;;;;;;;;;;;;;;;;;;;;;cAX3EE,yBAAyBJ,UAAUE,OAAOG,QAAQH;;;;;;;;;;;cAWlDI,uDAAuDP,aAAaM"}