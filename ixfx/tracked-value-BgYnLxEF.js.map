{"version":3,"file":"tracked-value-BgYnLxEF.js","names":[],"sources":["../../numbers/dist/src/quantise.js","../../trackers/dist/src/object-tracker.js","../../trackers/dist/src/tracked-value.js"],"sourcesContent":["import { integerTest, numberTest, resultThrow } from \"@ixfx/guards\";\n/**\n * Rounds `v` by `every`. Middle values are rounded up by default.\n *\n * ```js\n * quantiseEvery(11, 10);  // 10\n * quantiseEvery(25, 10);  // 30\n * quantiseEvery(0, 10);   // 0\n * quantiseEvery(4, 10);   // 0\n * quantiseEvery(100, 10); // 100\n * ```\n *\n * Also works with decimals\n * ```js\n * quantiseEvery(1.123, 0.1); // 1.1\n * quantiseEvery(1.21, 0.1);  // 1.2\n * ```\n *\n * @param v Value to quantise\n * @param every Number to quantise to\n * @param middleRoundsUp If _true_ (default), the exact middle rounds up to next step.\n * @returns\n */\nexport const quantiseEvery = (v, every, middleRoundsUp = true) => {\n    const everyString = every.toString();\n    const decimal = everyString.indexOf(`.`);\n    let multiplier = 1;\n    if (decimal >= 0) {\n        const d = everyString.substring(decimal + 1).length;\n        multiplier = 10 * d;\n        every = Math.floor(multiplier * every);\n        v = v * multiplier;\n    }\n    resultThrow(numberTest(v, ``, `v`), integerTest(every, ``, `every`));\n    let div = v / every;\n    const divModule = div % 1;\n    div = Math.floor(div);\n    if ((divModule === 0.5 && middleRoundsUp) || divModule > 0.5)\n        div++;\n    const vv = (every * div) / multiplier;\n    return vv;\n};\n","import { TrackerBase } from './tracker-base.js';\n/**\n * A tracked value of type `V`.\n */\nexport class ObjectTracker extends TrackerBase {\n    values;\n    constructor(opts = {}) {\n        super(opts);\n        this.values = [];\n    }\n    onTrimmed(reason) {\n        // no-op\n    }\n    /**\n     * Reduces size of value store to `limit`.\n     * Returns number of remaining items\n     * @param limit\n     */\n    trimStore(limit) {\n        if (limit >= this.values.length)\n            return this.values.length;\n        // Index 0 will be the oldest\n        this.values = this.values.slice(-limit);\n        return this.values.length;\n    }\n    /**\n     * Allows sub-classes to be notified when a reset happens\n     * @ignore\n     */\n    onReset() {\n        this.values = [];\n    }\n    /**\n     * Tracks a value\n     * @ignore\n     */\n    filterData(p) {\n        // Make sure values have a timestamp\n        const ts = p.map((v) => `at` in v\n            ? v\n            : {\n                ...v,\n                at: Date.now(),\n            });\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        const last = ts.at(-1);\n        if (this.storeIntermediate)\n            this.values.push(...ts);\n        else\n            switch (this.values.length) {\n                case 0: {\n                    // Add as initial value\n                    this.values.push(last);\n                    break;\n                }\n                case 1: {\n                    // Add last value\n                    this.values.push(last);\n                    break;\n                }\n                case 2: {\n                    // Replace last value\n                    this.values[1] = last;\n                    break;\n                }\n            }\n        return ts;\n    }\n    /**\n     * Last seen value. If no values have been added, it will return the initial value\n     */\n    get last() {\n        if (this.values.length === 1)\n            return this.values[0];\n        //eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        return this.values.at(-1);\n    }\n    /**\n     * Returns the oldest value in the buffer\n     */\n    get initial() {\n        return this.values.at(0);\n    }\n    /**\n     * Returns number of recorded values (includes the initial value in the count)\n     */\n    get size() {\n        return this.values.length;\n    }\n    /**\n     * Returns the elapsed time, in milliseconds since the initial value\n     */\n    get elapsed() {\n        return Date.now() - this.values[0].at;\n    }\n}\n","import { getOrGenerate } from '@ixfx/core/maps';\nimport { TrackerBase } from './tracker-base.js';\n/**\n * Keeps track of keyed values of type `V` (eg Point). It stores occurences in type `T`, which\n * must extend from `TrackerBase<V>`, eg `PointTracker`.\n *\n * The `creator` function passed in to the constructor is responsible for instantiating\n * the appropriate `TrackerBase` sub-class.\n *\n * @example Sub-class\n * ```js\n * export class PointsTracker extends TrackedValueMap<Points.Point> {\n *  constructor(opts:TrackOpts = {}) {\n *   super((key, start) => {\n *    if (start === undefined) throw new Error(`Requires start point`);\n *    const p = new PointTracker(key, opts);\n *    p.seen(start);\n *    return p;\n *   });\n *  }\n * }\n * ```\n *\n */\nexport class TrackedValueMap {\n    store;\n    gog;\n    constructor(creator) {\n        this.store = new Map();\n        this.gog = getOrGenerate(this.store, creator);\n    }\n    /**\n     * Number of named values being tracked\n     */\n    get size() {\n        return this.store.size;\n    }\n    /**\n     * Returns _true_ if `id` is stored\n     * @param id\n     * @returns\n     */\n    has(id) {\n        return this.store.has(id);\n    }\n    /**\n     * For a given id, note that we have seen one or more values.\n     * @param id Id\n     * @param values Values(s)\n     * @returns Information about start to last value\n     */\n    async seen(id, ...values) {\n        const trackedValue = await this.getTrackedValue(id, ...values);\n        // Pass it over to the TrackedValue\n        const result = trackedValue.seen(...values);\n        return result;\n    }\n    /**\n     * Creates or returns a TrackedValue instance for `id`.\n     * @param id\n     * @param values\n     * @returns\n     */\n    async getTrackedValue(id, ...values) {\n        if (id === null)\n            throw new Error(`id parameter cannot be null`);\n        if (id === undefined)\n            throw new Error(`id parameter cannot be undefined`);\n        // Create or recall TrackedValue by id\n        const trackedValue = await this.gog(id, values[0]);\n        return trackedValue;\n    }\n    /**\n     * Remove a tracked value by id.\n     * Use {@link reset} to clear them all.\n     * @param id\n     */\n    delete(id) {\n        this.store.delete(id);\n    }\n    /**\n     * Remove all tracked values.\n     * Use {@link delete} to remove a single value by id.\n     */\n    reset() {\n        this.store = new Map();\n    }\n    /**\n     * Enumerate ids\n     */\n    *ids() {\n        yield* this.store.keys();\n    }\n    /**\n     * Enumerate tracked values\n     */\n    *tracked() {\n        yield* this.store.values();\n    }\n    /**\n     * Iterates TrackedValues ordered with oldest first\n     * @returns\n     */\n    *trackedByAge() {\n        const tp = [...this.store.values()];\n        tp.sort((a, b) => {\n            const aa = a.elapsed;\n            const bb = b.elapsed;\n            if (aa === bb)\n                return 0;\n            if (aa > bb)\n                return -1;\n            return 1;\n        });\n        for (const t of tp) {\n            yield t;\n        }\n    }\n    /**\n     * Iterates underlying values, ordered by age (oldest first)\n     * First the named values are sorted by their `elapsed` value, and then\n     * we return the last value for that group.\n     */\n    *valuesByAge() {\n        for (const tb of this.trackedByAge()) {\n            yield tb.last;\n        }\n    }\n    /**\n     * Enumerate last received values\n     *\n     * @example Calculate centroid of latest-received values\n     * ```js\n     * const pointers = pointTracker();\n     * const c = Points.centroid(...Array.from(pointers.lastPoints()));\n     * ```\n     */\n    *last() {\n        for (const p of this.store.values()) {\n            yield p.last;\n        }\n    }\n    /**\n     * Enumerate starting values\n     */\n    *initialValues() {\n        for (const p of this.store.values()) {\n            yield p.initial;\n        }\n    }\n    /**\n     * Returns a tracked value by id, or undefined if not found\n     * @param id\n     * @returns\n     */\n    get(id) {\n        return this.store.get(id);\n    }\n}\n"],"mappings":"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"}