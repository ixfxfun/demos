{"version":3,"file":"index.js","names":["object","event","numberTracker","event","#initInProgress","#isPaused","#initialised","#sources","event","error","SerialDevice","NordicDefaults","resolve","randomString","event","start","startWithVideoEl","resolve","resolve","hasLast","elements","bind","init","mapFindBySomeKey","changes"],"sources":["../../core/dist/src/correlate.js","../../core/dist/src/filters.js","../../core/dist/src/is-equal-test.js","../../core/dist/src/platform.js","../../core/dist/src/util/zip.js","../../core/dist/src/resolve-fields.js","../../io/dist/src/codec.js","../../io/dist/src/string-receive-buffer.js","../../io/dist/src/string-write-buffer.js","../../io/dist/src/generic-state-transitions.js","../../io/dist/src/ble-device.js","../../io/dist/src/nordic-ble-device.js","../../io/dist/src/audio/visualiser.js","../../io/dist/src/audio/analyser.js","../../io/dist/src/audio/from-audio-element.js","../../io/dist/src/audio/from-oscillator.js","../../io/dist/src/audio/index.js","../../io/dist/src/espruino-ble-device.js","../../io/dist/src/json-device.js","../../io/dist/src/serial.js","../../io/dist/src/espruino-serial-device.js","../../io/dist/src/espruino.js","../../io/dist/src/camera.js","../../io/dist/src/video-file.js","../../io/dist/src/frame-processor.js","../../io/dist/src/reconnecting-web-socket.js","../../io/dist/src/index.js","../../ui/dist/src/rx/browser-resize.js","../../ui/dist/src/rx/browser-theme-change.js","../../ui/dist/src/rx/colour.js","../../ui/dist/src/rx/dom-source.js","../../ui/dist/src/rx/dom.js","../../ui/dist/src/rx/index.js","../../ui/dist/src/index.js"],"sourcesContent":["const orderScore = (a, b) => {\n    if (a.score > b.score)\n        return -1;\n    else if (a.score < b.score)\n        return 1;\n    return 0;\n};\n/**\n * Attempts to align prior data with new data, based on a provided similarity function.\n *\n * See also `alignById` for a version which encloses parameters.\n *\n * ```js\n * // Compare data based on x,y distance\n * const fn = (a, b) => {\n *  return 1-Points.distance(a, b);\n * }\n * const lastData = [\n *  { id:`1`, x:100, y:200 }\n *  ...\n * ]\n * const newData = [\n *  { id:`2`, x:101, y:200 }\n * ]\n * const aligned = Correlate.align(fn, lastdata, newData, opts);\n *\n * // Result:\n * [\n *  { id:`1`, x:101, y:200 }\n * ]\n * ```\n * @param similarityFunction Function to compute similarity\n * @param lastData Old data\n * @param newData New data\n * @param options Options\n * @returns\n */\nexport const align = (similarityFunction, lastData, newData, options = {}) => {\n    const matchThreshold = options.matchThreshold ?? 0;\n    const debug = options.debug ?? false;\n    const results = new Map();\n    const newThings = [];\n    const lastMap = new Map();\n    lastData?.forEach((d, index) => {\n        if (typeof d === `undefined`) {\n            throw new Error(`'lastData' contains undefined (index: ${index.toString()})`);\n        }\n        lastMap.set(d.id, d);\n    });\n    for (const newD of newData) { //let index = 0; index < newData.length; index++) {\n        //const newD = newData[ index ];\n        if (!lastData || lastData.length === 0) {\n            // No last data to compare to\n            if (debug)\n                console.debug(`Correlate.align() new id: ${newD.id}`);\n            newThings.push(newD);\n            continue;\n        }\n        // Which of the old data does the new data match up to best?\n        const scoredLastValues = Array.from(lastMap.values()).map((last) => ({\n            id: (last).id,\n            score: last === null ? -1 : similarityFunction(last, newD),\n            last,\n        }));\n        if (scoredLastValues.length === 0) {\n            if (debug) {\n                console.debug(`Correlate.align() no valid last values id: ${newD.id}`);\n            }\n            newThings.push(newD);\n            continue;\n        }\n        scoredLastValues.sort(orderScore);\n        // Top-ranked match is pretty low, must be something new\n        const top = scoredLastValues[0];\n        if (top.score < matchThreshold) {\n            if (debug) {\n                console.debug(`Correlate.align() new item does not reach threshold. Top score: ${top.score.toString()} id: ${newD.id}`);\n            }\n            newThings.push(newD);\n            continue;\n        }\n        // TODO: If there are close options to pick, need a pluggable\n        // function to determine which is the winner.\n        //    console.log(`updating prior ${top.score}. top: ${top.id} newD: ${newD.id}`);\n        // The new item is considered the same as top ranked\n        if (debug && top.id !== newD.id) {\n            console.log(`Correlate.align() Remapped ${newD.id} -> ${top.id} (score: ${top.score.toString()})`);\n        }\n        results.set(top.id, { ...newD, id: top.id });\n        // Remove that old one from the list\n        lastMap.delete(top.id);\n    }\n    newThings.forEach((t) => results.set(t.id, t));\n    return Array.from(results.values());\n};\n/**\n * Returns a function that attempts to align a series of data by its id.\n * See also {@link align} for a version with no internal storage.\n *\n * ```js\n * // Compare data based on x,y distance\n * const fn = (a, b) => {\n *  return 1-Points.distance(a, b);\n * }\n * const aligner = Correlate.alignById(fn, opts);\n *\n * const lastData = [\n *  { id:`1`, x:100, y:200 }\n *  ...\n * ]\n * const aligned = aligner(lastData);\n *\n * ```\n * @param fn Function to compute similarity\n * @param options Options\n * @returns\n */\nexport const alignById = (fn, options = {}) => {\n    let lastData = [];\n    const compute = (newData) => {\n        lastData = align(fn, lastData, newData, options);\n        return [...lastData];\n    };\n    return compute;\n};\n","/**\n * Returns `v` if `predicate` returns _true_,\n * alternatively returning `skipValue`.\n *\n * ```js\n * // Return true if value is less than 10\n * const p = v => v < 10;\n *\n * filterValue(5, p, 0);   // 5\n * filterValue(20, p, 0);  // 0\n * ```\n * @param v Value to test\n * @param predicate Predicate\n * @param skipValue Value to return if predicate returns false\n * @returns Input value if predicate is _true_, or `skipValue` if not.\n */\nexport const filterValue = (v, predicate, skipValue) => {\n    if (predicate(v))\n        return v;\n    return skipValue;\n};\n","import { toStringAbbreviate } from \"./text.js\";\n/**\n * Wraps the `eq` function, tracing the input data result\n * ```js\n * // Init trace\n * const traceEq = isEqualTrace(isEqualValueDefault);\n * // Use it in some function that takes IsEqual<T>\n * compare(a, b, eq);\n * ```\n * @param eq\n * @returns\n */\nexport const isEqualTrace = (eq) => {\n    return (a, b) => {\n        const result = eq(a, b);\n        // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n        console.log(`isEqualTrace eq: ${result} a: ${toStringAbbreviate(a)} b: ${toStringAbbreviate(b)}`);\n        return result;\n    };\n};\n","/**\n * Returns _true_ if it seems like the code is running on iOS (iPad/iPhone)\n * @returns\n */\nexport const runningiOS = () => [\n    `iPad Simulator`,\n    `iPhone Simulator`,\n    `iPod Simulator`,\n    `iPad`,\n    `iPhone`,\n    `iPod`,\n].includes(navigator.platform) ||\n    // iPad on iOS 13 detection\n    (navigator.userAgent.includes(`Mac`) && `ontouchend` in document);\n","export const zip = (...arrays) => {\n    if (arrays.some((a) => !Array.isArray(a))) {\n        throw new Error(`All parameters must be an array`);\n    }\n    const lengths = arrays.map((a) => a.length);\n    const returnValue = [];\n    const length = lengths[0];\n    for (let index = 0; index < length; index++) {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n        returnValue.push(arrays.map((a) => a[index]));\n    }\n    return returnValue;\n};\n","import { resolve, resolveSync } from \"@ixfx/core\";\nimport { zip } from \"./util/zip.js\";\n/**\n * Returns a copy of `object`, with the same properties. For each property\n * that has a basic value (string, number, boolean, object), the value is set\n * for the return object. If the property is a function or generator, its value\n * is used instead. Async functions and generators are also usable.\n *\n * Use {@link resolveFieldsSync} for a synchronous version.\n *\n * Not recursive.\n *\n * In the below example, the function for the property `random` is invoked.\n * ```js\n * const state = {\n *  length: 10,\n *  random: () => Math.random();\n * }\n * const x = resolveFields(state);\n * // { length: 10, random: 0.1235 }\n * ```\n *\n * It also works with generators. Probably best with those that are infinite.\n *\n * ```js\n * import { count } from './numbers.js';\n *\n * const state = {\n *  length: 10,\n *  index: count(2) // Generator that yields: 0, 1 and then ends\n * }\n * resolveFields(state); // { length: 10, index: 0 }\n * resolveFields(state); // { length: 10, index: 1 }\n * // Generator finishes after counting twice:\n * resolveFields(state); // { length: 10, index: undefined }\n * ```\n * @param object\n * @returns\n */\nexport async function resolveFields(object) {\n    const resolvers = [];\n    const keys = [];\n    for (const entry of Object.entries(object)) {\n        const resolvable = entry[1];\n        resolvers.push(resolve(resolvable));\n        keys.push(entry[0]);\n    }\n    const results = await Promise.all(resolvers);\n    const entries = zip(keys, results);\n    return Object.fromEntries(entries);\n}\n/**\n * 'Resolves' all the fields of `object` in a synchronous manner.\n * Uses {@link resolveSync} under-the-hood\n * @param object\n * @returns\n */\nexport function resolveFieldsSync(object) {\n    const entries = [];\n    for (const entry of Object.entries(object)) {\n        const resolvable = entry[1];\n        const value = resolveSync(resolvable);\n        entries.push([entry[0], value]);\n    }\n    return Object.fromEntries(entries);\n}\n/**\n * Returns a function that resolves `object`.\n *\n * Use {@link resolveFields} to resolve an object directly.\n * @param object\n * @returns\n */\n// export function resolverFields<V extends object>(object: V) {\n//   return () => resolveFields(object);\n// }\n","/**\n * Handles utf-8 text encoding/decoding\n */\nexport class Codec {\n    enc = new TextEncoder();\n    dec = new TextDecoder(`utf-8`);\n    /**\n     * Convert string to Uint8Array buffer\n     * @param text\n     * @returns\n     */\n    toBuffer(text) {\n        return this.enc.encode(text);\n    }\n    /**\n     * Returns a string from a provided buffer\n     * @param buffer\n     * @returns\n     */\n    fromBuffer(buffer) {\n        return this.dec.decode(buffer);\n    }\n}\n","/**\n * Receives text\n */\nexport class StringReceiveBuffer {\n    onData;\n    separator;\n    buffer = ``;\n    stream;\n    constructor(onData, separator = `\\n`) {\n        this.onData = onData;\n        this.separator = separator;\n    }\n    async close() {\n        const s = this.stream;\n        if (!s)\n            return;\n        await s.abort();\n        await s.close();\n    }\n    clear() {\n        this.buffer = ``;\n    }\n    writable() {\n        if (this.stream === undefined)\n            this.stream = this.createWritable();\n        return this.stream;\n    }\n    createWritable() {\n        //eslint-disable-next-line @typescript-eslint/no-this-alias\n        const b = this;\n        return new WritableStream({\n            write(chunk) {\n                b.add(chunk);\n            },\n            close() {\n                b.clear();\n            },\n        });\n    }\n    addImpl(string_) {\n        // Look for separator in new string\n        const pos = string_.indexOf(this.separator);\n        if (pos < 0) {\n            // Not found, just add to buffer and return\n            this.buffer += string_;\n            return ``;\n        }\n        // Found! Trigger callback for existing buffer and part of new string\n        const part = string_.substring(0, pos);\n        try {\n            this.onData(this.buffer + part);\n            string_ = string_.substring(part.length + this.separator.length);\n        }\n        catch (ex) {\n            console.warn(ex);\n        }\n        this.buffer = ``;\n        return string_;\n    }\n    add(string_) {\n        while (string_.length > 0) {\n            string_ = this.addImpl(string_);\n        }\n    }\n}\n","import { QueueMutable } from '@ixfx/collections/queue';\nimport { continuously } from '@ixfx/core';\nimport { splitByLength } from '@ixfx/core/text';\n/**\n * Buffers a queue of strings.\n *\n * When text is queued via {@link add}, it is chopped up\n * into chunks and sent in serial to the `dataHandler` function.\n * Data is processed at a set rate, by default 10ms.\n *\n * ```js\n * const dataHandler = (data:string) => {\n *  // Do something with queued data.\n *  // eg. send to serial port\n * }\n *\n * // Create a buffer with a chunk size of 100 characters\n * const b = new StringWriteBuffer(dataHandler, { chunkSize: 100 });\n * b.add('some text'); // Write to buffer\n * // dataHandler will be called until queued data is empty\n * ```\n *\n * It's also possible to get the buffer as a WritableStream<string>:\n * ```js\n * const dataHandler = (data:string) => { ... }\n * const b = new StringWriteBuffer(dataHandler, 100);\n * const s = b.writable();\n * ```\n *\n * Other functions:\n * ```js\n * b.close(); // Close buffer\n * b.clear(); // Clear queued data, but don't close anything\n * ```\n */\nexport class StringWriteBuffer {\n    dataHandler;\n    paused = false;\n    queue = new QueueMutable();\n    writer;\n    stream;\n    closed = false;\n    chunkSize;\n    /**\n     * Constructor\n     * @param dataHandler Calback to 'send' data onwards\n     * @param opts Options\n     */\n    constructor(dataHandler, opts = {}) {\n        this.dataHandler = dataHandler;\n        this.chunkSize = opts.chunkSize ?? -1;\n        this.writer = continuously(async () => {\n            await this.onWrite();\n        }, opts.interval ?? 10);\n    }\n    /**\n     * Close writer (async)\n     */\n    async close() {\n        if (this.closed)\n            return;\n        const w = this.stream?.getWriter();\n        w?.releaseLock();\n        await w?.close();\n        this.closed = true;\n    }\n    /**\n     * Clear queued data.\n     *\n     * Throws an error if {@link close} has been called.\n     */\n    clear() {\n        if (this.closed)\n            throw new Error(`Buffer closed`);\n        this.queue = new QueueMutable();\n    }\n    /**\n     * Gets the buffer as a writable stream.\n     *\n     * Do not close stream directly, use .close on this class instead.\n     *\n     * Throws an error if .close() has been called.\n     * @returns Underlying stream\n     */\n    writable() {\n        if (this.closed)\n            throw new Error(`Buffer closed`);\n        if (this.stream === undefined)\n            this.stream = this.createWritable();\n        return this.stream;\n    }\n    createWritable() {\n        // eslint-disable-next-line @typescript-eslint/no-this-alias\n        const b = this;\n        return new WritableStream({\n            write(chunk) {\n                b.add(chunk);\n            },\n            close() {\n                b.clear();\n            },\n        });\n    }\n    /**\n     * Run in a `continunously` loop to process queued data\n     * @returns _False_ if queue is empty and loop should stop. _True_ if it shoud continue.\n     */\n    async onWrite() {\n        if (this.queue.isEmpty) {\n            //console.warn(`WriteBuffer.onWrite: queue empty`);\n            return false; // Stop continuously\n        }\n        if (this.paused) {\n            console.warn(`WriteBuffer.onWrite: paused...`);\n            return true; // Keep going tho\n        }\n        // Dequeue and send\n        const s = this.queue.dequeue();\n        if (s === undefined)\n            return false;\n        await this.dataHandler(s);\n        return true;\n    }\n    /**\n     * Returns _true_ if {@link close} has been called.\n     */\n    get isClosed() {\n        return this.closed;\n    }\n    /**\n     * Adds some queued data to send.\n     * Longer strings are automatically chunked up according to the buffer's settings.\n     *\n     * Throws an error if {@link close} has been called.\n     * @param stringToQueue\n     */\n    add(stringToQueue) {\n        if (this.closed)\n            throw new Error(`Buffer closed`);\n        // Add whole string or chunked string\n        if (this.chunkSize > 0) {\n            this.queue.enqueue(...splitByLength(stringToQueue, this.chunkSize));\n        }\n        else {\n            this.queue.enqueue(stringToQueue);\n        }\n        // Run continuously loop if it's not already running\n        this.writer.start();\n    }\n}\n","export const genericStateTransitionsInstance = Object.freeze({\n    ready: `connecting`,\n    connecting: [`connected`, `closed`],\n    connected: [`closed`],\n    closed: `connecting`,\n});\n","import { SimpleEventEmitter } from '@ixfx/events';\nimport { StateMachineWithEvents } from '@ixfx/flow/state-machine';\nimport { retryFunction } from '@ixfx/flow';\nimport { indexOfCharCode, omitChars } from '@ixfx/core/text';\nimport { Codec } from './codec.js';\nimport { StringReceiveBuffer } from './string-receive-buffer.js';\nimport { StringWriteBuffer } from './string-write-buffer.js';\nimport {} from './types.js';\nimport { genericStateTransitionsInstance } from './generic-state-transitions.js';\nconst reconnect = async () => {\n    console.log(`Connect?`);\n    if (!(`bluetooth` in navigator))\n        return false;\n    if (!(`getDevices` in navigator.bluetooth))\n        return false;\n    const devices = await navigator.bluetooth.getDevices();\n    console.log(devices);\n    for (const device of devices) {\n        console.log(device);\n        // Start a scan for each device before connecting to check that they're in\n        // range.\n        const abortController = new AbortController();\n        await device.watchAdvertisements({ signal: abortController.signal });\n        device.addEventListener(`advertisementreceived`, async (event) => {\n            console.log(event);\n            // Stop the scan to conserve power on mobile devices.\n            abortController.abort();\n            // At this point, we know that the device is in range, and we can attempt\n            // to connect to it.\n            await event.device.gatt?.connect();\n            console.log(`Connected!`);\n        });\n    }\n};\nexport class BleDevice extends SimpleEventEmitter {\n    device;\n    config;\n    states;\n    codec;\n    rx;\n    tx;\n    gatt;\n    verboseLogging = false;\n    rxBuffer;\n    txBuffer;\n    constructor(device, config) {\n        super();\n        this.device = device;\n        this.config = config;\n        this.verboseLogging = config.debug;\n        this.txBuffer = new StringWriteBuffer(async (data) => {\n            await this.writeInternal(data);\n        }, config);\n        this.rxBuffer = new StringReceiveBuffer((line) => {\n            this.fireEvent(`data`, { data: line });\n        });\n        this.codec = new Codec();\n        this.states = new StateMachineWithEvents(genericStateTransitionsInstance, {\n            initial: `ready`,\n        });\n        this.states.addEventListener(`change`, (event) => {\n            this.fireEvent(`change`, event);\n            this.verbose(`${event.priorState} -> ${event.newState}`);\n            if (event.priorState === `connected`) {\n                // Clear out buffers\n                this.rxBuffer.clear();\n                this.txBuffer.clear();\n            }\n        });\n        device.addEventListener(`gattserverdisconnected`, () => {\n            if (this.isClosed)\n                return;\n            this.verbose(`GATT server disconnected`);\n            this.states.state = `closed`;\n        });\n        this.verbose(`ctor ${device.name} ${device.id}`);\n    }\n    get isConnected() {\n        return this.states.state === `connected`;\n    }\n    get isClosed() {\n        return this.states.state === `closed`;\n    }\n    write(txt) {\n        if (this.states.state !== `connected`) {\n            throw new Error(`Cannot write while state is ${this.states.state}`);\n        }\n        this.txBuffer.add(txt);\n    }\n    async writeInternal(txt) {\n        this.verbose(`writeInternal ${txt}`);\n        const tx = this.tx;\n        if (tx === undefined) {\n            throw new Error(`Unexpectedly without tx characteristic`);\n        }\n        try {\n            await tx.writeValue(this.codec.toBuffer(txt));\n        }\n        catch (error) {\n            this.warn(error);\n        }\n    }\n    disconnect() {\n        if (this.states.state !== `connected`)\n            return;\n        this.gatt?.disconnect();\n    }\n    async connect() {\n        const attempts = this.config.connectAttempts ?? 3;\n        this.states.state = `connecting`;\n        this.verbose(`connect`);\n        const gatt = this.device.gatt;\n        if (gatt === undefined)\n            throw new Error(`Gatt not available on device`);\n        await retryFunction(async () => {\n            this.verbose(`connect.retry`);\n            const server = await gatt.connect();\n            this.verbose(`Getting primary service`);\n            const service = await server.getPrimaryService(this.config.service);\n            this.verbose(`Getting characteristics`);\n            const rx = await service.getCharacteristic(this.config.rxGattCharacteristic);\n            const tx = await service.getCharacteristic(this.config.txGattCharacteristic);\n            rx.addEventListener(`characteristicvaluechanged`, (event) => { this.onRx(event); });\n            this.rx = rx;\n            this.tx = tx;\n            this.gatt = gatt;\n            this.states.state = `connected`;\n            await rx.startNotifications();\n            return true;\n        }, {\n            limitAttempts: attempts,\n            startAt: 200,\n        });\n    }\n    onRx(event) {\n        const rx = this.rx;\n        if (rx === undefined)\n            return;\n        const view = event.target.value;\n        if (view === undefined)\n            return;\n        let text = this.codec.fromBuffer(view.buffer);\n        // Check for flow control chars\n        const plzStop = indexOfCharCode(text, 19);\n        const plzStart = indexOfCharCode(text, 17);\n        // Remove if found\n        if (plzStart && plzStop < plzStart) {\n            this.verbose(`Tx plz start`);\n            text = omitChars(text, plzStart, 1);\n            this.txBuffer.paused = false;\n        }\n        if (plzStop && plzStop > plzStart) {\n            this.verbose(`Tx plz stop`);\n            text = omitChars(text, plzStop, 1);\n            this.txBuffer.paused = true;\n        }\n        this.rxBuffer.add(text);\n    }\n    verbose(m) {\n        if (this.verboseLogging)\n            console.info(this.config.name, m);\n    }\n    log(m) {\n        console.log(this.config.name, m);\n    }\n    warn(m) {\n        console.warn(this.config.name, m);\n    }\n}\n","import { BleDevice } from './ble-device.js';\nexport const defaultOpts = {\n    chunkSize: 20,\n    service: `6e400001-b5a3-f393-e0a9-e50e24dcca9e`,\n    txGattCharacteristic: `6e400002-b5a3-f393-e0a9-e50e24dcca9e`,\n    rxGattCharacteristic: `6e400003-b5a3-f393-e0a9-e50e24dcca9e`,\n    name: `NordicDevice`,\n    connectAttempts: 5,\n    debug: false,\n};\nexport class NordicBleDevice extends BleDevice {\n    constructor(device, opts = {}) {\n        super(device, { ...defaultOpts, ...opts });\n    }\n}\n","/**\n * Visualiser component\n *\n * Usage: import visualiser.js. Instantiate on document load, and pass in the\n * parent element into the constructor.\n *\n * eg: const v = new Visualiser(document.getElementById('renderer'));\n *\n * Data must be passed to the component via renderFreq or renderWave.\n *\n * Draws on https://developer.mozilla.org/en-US/docs/Web/API/Web_Audio_API/Visualizations_with_Web_Audio_API\n */\nimport { number as numberTracker } from '@ixfx/trackers';\nimport { AudioAnalyser } from './analyser.js';\nimport { numberArrayCompute } from '@ixfx/numbers';\n// TODO: This is an adaption of old code. Needs to be smartened up further\nexport class AudioVisualiser {\n    freqMaxRange = 200;\n    audio;\n    parent;\n    lastPointer = { x: 0, y: 0 };\n    pointerDown = false;\n    pointerClicking = false;\n    pointerClickDelayMs = 100;\n    pointerDelaying = false;\n    waveTracker;\n    freqTracker;\n    el;\n    constructor(parentElement, audio) {\n        this.audio = audio;\n        this.parent = parentElement;\n        this.waveTracker = numberTracker();\n        this.freqTracker = numberTracker();\n        // Add HTML\n        parentElement.innerHTML = `\n    <section>\n      <button id=\"rendererComponentToggle\">🔼</button>\n      <div>\n        <h1>Visualiser</h1>\n        <div style=\"display:flex; flex-wrap: wrap\">\n          <div class=\"visPanel\">\n            <h2>Frequency distribution</h2>\n            <br />\n            <canvas id=\"rendererComponentFreqData\" height=\"200\" width=\"400\"></canvas>\n          </div>\n          <div class=\"visPanel\">\n            <h2>Waveform</h2>\n            <button id=\"rendererComponentWaveReset\">Reset</button>\n            <div>\n              Press and hold on wave to measure\n            </div>\n            <br />\n            <canvas id=\"rendererComponentWaveData\" height=\"200\" width=\"400\"></canvas>\n          </div>\n        </div>\n      </div>\n    </section>\n    `;\n        this.el = parentElement.children[0];\n        document\n            .getElementById(`rendererComponentToggle`)\n            ?.addEventListener(`click`, () => {\n            this.setExpanded(!this.isExpanded());\n        });\n        this.el.addEventListener(`pointermove`, (e) => { this.onPointer(e); });\n        //this.el.addEventListener(`touchbegin`, (e) => this.onPointer(e));\n        this.el.addEventListener(`pointerup`, () => {\n            this.pointerDelaying = false;\n            this.pointerDown = false;\n        });\n        this.el.addEventListener(`pointerdown`, () => {\n            this.pointerDelaying = true;\n            setTimeout(() => {\n                if (this.pointerDelaying) {\n                    this.pointerDelaying = false;\n                    this.pointerDown = true;\n                }\n            }, this.pointerClickDelayMs);\n        });\n        this.el.addEventListener(`pointerleave`, () => {\n            this.pointerDelaying = false;\n            this.pointerDown = false;\n        });\n        document\n            .getElementById(`rendererComponentWaveReset`)\n            ?.addEventListener(`click`, () => {\n            this.clear();\n        });\n    }\n    renderFreq(freq) {\n        if (!this.isExpanded())\n            return; // Don't render if collapsed\n        if (!freq)\n            return; // Data is undefined/null\n        const canvas = document.getElementById(`rendererComponentFreqData`);\n        if (canvas === null)\n            throw new Error(`Cannot find canvas element`);\n        const g = canvas.getContext(`2d`);\n        if (g === null)\n            throw new Error(`Cannot create drawing context`);\n        const bins = freq.length;\n        const canvasWidth = canvas.clientWidth;\n        const canvasHeight = canvas.clientHeight;\n        g.clearRect(0, 0, canvasWidth, canvasHeight);\n        const pointer = this.getPointerRelativeTo(canvas);\n        const width = canvasWidth / bins;\n        const minMax = numberArrayCompute(freq);\n        for (let index = 0; index < bins; index++) {\n            if (!Number.isFinite(freq[index]))\n                continue;\n            const value = freq[index] - minMax.min;\n            const valueRelative = value / this.freqMaxRange;\n            const height = Math.abs(canvasHeight * valueRelative);\n            const offset = canvasHeight - height;\n            const hue = (index / bins) * 360;\n            const left = index * width;\n            g.fillStyle = `hsl(${hue}, 100%, 50%)`;\n            // Show info about data under pointer\n            if (pointer.y > 0 &&\n                pointer.y <= canvasHeight &&\n                pointer.x >= left &&\n                pointer.x <= left + width) {\n                // Keep track of data\n                if (this.freqTracker.id !== index.toString()) {\n                    this.freqTracker = numberTracker({ id: index.toString() });\n                }\n                this.freqTracker.seen(freq[index]);\n                const freqMma = this.freqTracker.getMinMaxAvg();\n                // Display\n                g.fillStyle = `black`;\n                if (this.audio) {\n                    g.fillText(`Frequency (${index}) at pointer: ${this.audio\n                        .getFrequencyAtIndex(index)\n                        .toLocaleString(`en`)} - ${this.audio\n                        .getFrequencyAtIndex(index + 1)\n                        .toLocaleString(`en`)}`, 2, 10);\n                }\n                g.fillText(`Raw value: ${freq[index].toFixed(2)}`, 2, 20);\n                g.fillText(`Min: ${freqMma.min.toFixed(2)}`, 2, 40);\n                g.fillText(`Max: ${freqMma.max.toFixed(2)}`, 60, 40);\n                g.fillText(`Avg: ${freqMma.avg.toFixed(2)}`, 120, 40);\n            }\n            g.fillRect(left, offset, width, height);\n        }\n    }\n    isExpanded() {\n        const contentsElement = this.el.querySelector(`div`);\n        if (contentsElement === null)\n            throw new Error(`contents div not found`);\n        return contentsElement.style.display === ``;\n    }\n    setExpanded(value) {\n        const contentsElement = this.el.querySelector(`div`);\n        const button = this.el.querySelector(`button`);\n        if (button === null)\n            throw new Error(`Button element not found`);\n        if (contentsElement === null)\n            throw new Error(`Contents element not found`);\n        if (value) {\n            contentsElement.style.display = ``;\n            button.innerText = `🔼`;\n        }\n        else {\n            contentsElement.style.display = `none`;\n            button.innerText = `🔽`;\n        }\n    }\n    clear() {\n        this.clearCanvas(document.getElementById(`rendererComponentFreqData`));\n        this.clearCanvas(document.getElementById(`rendererComponentWaveData`));\n    }\n    // Clears a canvas to white\n    clearCanvas(canvas) {\n        if (canvas === null)\n            throw new Error(`Canvas is null`);\n        const g = canvas.getContext(`2d`);\n        if (g === null)\n            throw new Error(`Cannot create drawing context`);\n        g.fillStyle = `white`;\n        g.fillRect(0, 0, canvas.clientWidth, canvas.clientHeight);\n    }\n    // Renders waveform data.\n    // Adapted from MDN's AnalyserNode.getFloatTimeDomainData() example\n    renderWave(wave, bipolar = true) {\n        if (!this.isExpanded())\n            return; // Don't render if collapsed\n        if (!wave)\n            return; // Undefined or null data\n        const canvas = document.getElementById(`rendererComponentWaveData`);\n        if (canvas === null)\n            throw new Error(`Cannot find wave canvas`);\n        const g = canvas.getContext(`2d`);\n        if (g === null)\n            throw new Error(`Cannot create drawing context for wave`);\n        const canvasWidth = canvas.clientWidth;\n        const canvasHeight = canvas.clientHeight;\n        const pointer = this.getPointerRelativeTo(canvas);\n        const infoAreaHeight = 20;\n        const infoAreaWidth = 60;\n        const bins = wave.length;\n        g.fillStyle = `white`;\n        g.fillRect(0, 0, infoAreaWidth, infoAreaHeight);\n        const width = canvasWidth / bins;\n        // Clears the screen with very light tint of white\n        // to fade out last waveform. Set this higher to remove effect\n        g.fillStyle = `rgba(255, 255, 255, 0.03)`;\n        g.fillRect(0, 20, canvasWidth, canvasHeight);\n        g.fillStyle = `red`;\n        if (bipolar) {\n            g.fillRect(0, canvasHeight / 2, canvasWidth, 1);\n        }\n        else {\n            g.fillRect(0, canvasHeight - 1, canvasWidth, 1);\n        }\n        g.lineWidth = 1;\n        g.strokeStyle = `black`;\n        g.beginPath();\n        //eslint-disable-next-line functional/no-let\n        let x = 0;\n        //eslint-disable-next-line functional/no-let\n        for (let index = 0; index < bins; index++) {\n            const height = wave[index] * canvasHeight;\n            const y = bipolar ? canvasHeight / 2 - height : canvasHeight - height;\n            if (index === 0) {\n                g.moveTo(x, y);\n            }\n            else {\n                g.lineTo(x, y);\n            }\n            x += width;\n            if (this.pointerDown)\n                this.waveTracker.seen(wave[index]);\n        }\n        g.lineTo(canvasWidth, bipolar ? canvasHeight / 2 : canvasHeight); //canvas.height / 2);\n        g.stroke();\n        // Draw\n        if (this.pointerDown) {\n            const waveMma = this.waveTracker.getMinMaxAvg();\n            g.fillStyle = `rgba(255,255,0,1)`;\n            g.fillRect(infoAreaWidth, 0, 150, 20);\n            g.fillStyle = `black`;\n            g.fillText(`Min: ` + waveMma.min.toFixed(2), 60, 10);\n            g.fillText(`Max: ` + waveMma.max.toFixed(2), 110, 10);\n            g.fillText(`Avg: ` + waveMma.avg.toFixed(2), 160, 10);\n        }\n        else {\n            this.waveTracker.reset();\n        }\n        // Show info about data under pointer\n        if (pointer.y > 0 &&\n            pointer.y <= canvasHeight &&\n            pointer.x >= 0 &&\n            pointer.x <= canvasWidth) {\n            g.fillStyle = `black`;\n            g.fillText(`Level: ` + (1.0 - pointer.y / canvasHeight).toFixed(2), 2, 10);\n        }\n    }\n    // Yields pointer position relative to given element\n    getPointerRelativeTo(elem) {\n        const rect = elem.getBoundingClientRect();\n        return {\n            x: this.lastPointer.x - rect.left - window.scrollX, //elem.offsetLeft + window.scrollX,\n            y: this.lastPointer.y - rect.top - window.scrollY, //elem.offsetTop + window.scrollY\n        };\n    }\n    // Keeps track of last pointer position in page coordinate space\n    onPointer(event) {\n        this.lastPointer = {\n            x: event.pageX,\n            y: event.pageY,\n        };\n        event.preventDefault();\n    }\n}\n","import { numberTest, integerTest, isPowerOfTwo, resultThrow } from '@ixfx/guards';\nimport { max, maxFast } from '@ixfx/numbers';\nimport { AudioVisualiser } from './visualiser.js';\n/**\n * Basic audio analyser. Returns back waveform and FFT analysis. Use {@link analyserPeakLevel} if you want sound level, or {@link analyserFrequency} if you just want FFT results.\n *\n * ```js\n * const onData = (freq, wave, analyser) => {\n *  // Demo: Get FFT results just for 100Hz-1KHz.\n *  const freqSlice = analyser.sliceByFrequency(100,1000,freq);\n *\n *  // Demo: Get FFT value for a particular frequency (1KHz)\n *  const amt = freq[analyser.getIndexForFrequency(1000)];\n * }\n * analyserBasic(onData, {fftSize: 512});\n * ```\n *\n * An `Analyser` instance is returned and can be controlled:\n * ```js\n * const analyser = analyserBasic(onData);\n * analyser.paused = true;\n * ```\n *\n * Note: Browers won't allow microphone access unless the call has come from a user-interaction, eg pointerup event handler.\n *\n* @param onData Handler for data\n * @param opts Options\n * @returns Analyser instance\n */\nexport const analyserBasic = (onData, opts = {}) => new AudioAnalyser((node, analyser) => {\n    // Get frequency and amplitude data\n    const freq = new Float32Array(node.frequencyBinCount);\n    const wave = new Float32Array(node.fftSize);\n    // Load arrays with data\n    node.getFloatFrequencyData(freq);\n    node.getFloatTimeDomainData(wave);\n    // Send back\n    onData(freq, wave, analyser);\n}, opts);\n/**\n * Basic audio analyser. Returns FFT analysis. Use {@link analyserPeakLevel} if you want the sound level, or {@link analyserBasic} if you also want the waveform.\n *\n * ```js\n * const onData = (freq, analyser) => {\n *  // Demo: Print out each sound frequency (Hz) and amount of energy in that band\n *  for (let i=0;i<freq.length;i++) {\n *    const f = analyser.getFrequencyAtIndex(0);\n *    console.log(`${i}. frequency: ${f} amount: ${freq[i]}`);\n *  }\n * }\n * analyserFrequency(onData, {fftSize:512});\n * ```\n *\n * Note: Browers won't allow microphone access unless the call has come from a user-interaction, eg pointerup event handler.\n *\n * @param onData\n * @param opts\n * @returns\n */\nexport const analyserFrequency = (onData, opts = {}) => new AudioAnalyser((node, analyser) => {\n    const freq = new Float32Array(node.frequencyBinCount);\n    node.getFloatFrequencyData(freq);\n    onData(freq, analyser);\n}, opts);\n/**\n * Basic audio analyser which reports the peak sound level.\n *\n * ```js\n * analyserPeakLevel(level => {\n *  console.log(level);\n * });\n * ```\n *\n * Note: Browers won't allow microphone access unless the call has come from a user-interaction, eg pointerup event handler.\n * @param onData\n * @param opts\n * @returns\n */\nexport const analyserPeakLevel = (onData, opts = {}) => new AudioAnalyser((node, analyser) => {\n    const wave = new Float32Array(node.fftSize);\n    node.getFloatTimeDomainData(wave);\n    onData(maxFast(wave), analyser);\n}, opts);\n/**\n * Helper for doing audio analysis. It takes case of connecting the audio stream, running in a loop and pause capability.\n *\n * Provide a function which works with an [AnalyserNode](https://developer.mozilla.org/en-US/docs/Web/API/AnalyserNode), and does something with the result.\n * ```js\n * const myAnalysis = (node, analyser) => {\n *  const freq = new Float32Array(node.frequencyBinCount);\n *  node.getFloatFrequencyData(freq);\n *  // Do something with frequency data...\n * }\n * const a = new Analyser(myAnalysis);\n * ```\n *\n * Helper functions provide ready-to-use Analysers:\n * * {@link analyserPeakLevel} peak decibel reading\n * * {@link analyserFrequency} FFT results\n * * {@link analyserBasic} FFT results and waveform\n *\n * Note: Browers won't allow microphone access unless the call has come from a user-interaction, eg pointerup event handler.\n *\n */\nexport class AudioAnalyser {\n    showVis;\n    fftSize;\n    smoothingTimeConstant;\n    #isPaused = false;\n    debug;\n    #initInProgress = false;\n    visualiser;\n    audioCtx;\n    analyserNode;\n    analyse;\n    constructor(analyse, opts = {}) {\n        this.showVis = opts.showVis ?? false;\n        this.fftSize = opts.fftSize ?? 1024;\n        this.debug = opts.debug ?? false;\n        this.smoothingTimeConstant = opts.smoothingTimeConstant ?? 0.8;\n        resultThrow(integerTest(this.fftSize, `positive`, `opts.fftSize`), numberTest(this.smoothingTimeConstant, `percentage`, `opts.smoothingTimeConstant`));\n        if (!isPowerOfTwo(this.fftSize)) {\n            throw new Error(`fftSize must be a power of two from 32 to 32768 (${this.fftSize})`);\n        }\n        if (this.fftSize < 32)\n            throw new Error(`fftSize must be at least 32`);\n        if (this.fftSize > 32_768) {\n            throw new Error(`fftSize must be no greater than 32768`);\n        }\n        this.analyse = analyse;\n        this.paused = false;\n        this.init();\n        // eslint-disable-next-line @typescript-eslint/no-unnecessary-type-assertion\n        const visualiserEl = document.querySelector(`#audio-visualiser`);\n        if (visualiserEl) {\n            const visualiser = new AudioVisualiser(visualiserEl, this);\n            visualiser.setExpanded(this.showVis);\n            this.visualiser = visualiser;\n        }\n    }\n    init() {\n        if (this.#initInProgress) {\n            if (this.debug)\n                console.debug(`Init already in progress`);\n            return;\n        }\n        this.#initInProgress = true;\n        // Initalise microphone\n        navigator.mediaDevices\n            .getUserMedia({ audio: true })\n            .then((stream) => {\n            this.onMicSuccess(stream);\n        })\n            .catch((error) => {\n            this.#initInProgress = false;\n            console.error(error);\n        });\n    }\n    get paused() {\n        return this.#isPaused;\n    }\n    set paused(v) {\n        if (v === this.#isPaused)\n            return;\n        this.#isPaused = v;\n        if (v) {\n            if (this.debug)\n                console.log(`Paused`);\n        }\n        else {\n            if (this.debug)\n                console.log(`Unpaused`);\n            window.requestAnimationFrame(this.analyseLoop.bind(this));\n        }\n    }\n    setup(context, stream) {\n        const analyser = context.createAnalyser();\n        // fftSize must be a power of 2. Higher values slower, more detailed\n        // Range is 32-32768\n        analyser.fftSize = this.fftSize;\n        // smoothingTimeConstant ranges from 0.0 to 1.0\n        // 0 = no averaging. Fast response, jittery\n        // 1 = maximum averaging. Slow response, smooth\n        analyser.smoothingTimeConstant = this.smoothingTimeConstant;\n        // Microphone -> analyser\n        const micSource = context.createMediaStreamSource(stream);\n        micSource.connect(analyser);\n        return analyser;\n    }\n    // Microphone successfully initalised, now have access to audio data\n    onMicSuccess(stream) {\n        try {\n            const context = new AudioContext();\n            context.addEventListener(`statechange`, () => {\n                if (this.debug)\n                    console.log(`Audio context state: ${context.state}`);\n            });\n            this.audioCtx = context;\n            this.analyserNode = this.setup(context, stream);\n            // Start loop\n            window.requestAnimationFrame(this.analyseLoop.bind(this));\n        }\n        catch (error) {\n            this.#initInProgress = false;\n            console.error(error);\n        }\n    }\n    analyseLoop() {\n        if (this.paused) {\n            if (this.debug)\n                console.log(`Paused`);\n            return;\n        }\n        const a = this.analyserNode;\n        if (a === undefined) {\n            console.warn(`Analyser undefined`);\n            return;\n        }\n        try {\n            // Perform analysis\n            this.analyse(a, this);\n        }\n        catch (error) {\n            console.error(error);\n        }\n        // Run again\n        window.requestAnimationFrame(this.analyseLoop.bind(this));\n    }\n    // visualise(wave, freq) {\n    //   if (!this.visualiser) return;\n    //   this.visualiser.renderWave(wave, true);\n    //   this.visualiser.renderFreq(freq);\n    // }\n    /**\n     * Returns the maximum FFT value within the given frequency range\n     */\n    getFrequencyRangeMax(lowFreq, highFreq, freqData) {\n        const samples = this.sliceByFrequency(lowFreq, highFreq, freqData);\n        return max(samples);\n    }\n    /**\n     * Returns a sub-sampling of frequency analysis data that falls between\n     * `lowFreq` and `highFreq`.\n     * @param lowFreq Low frequency\n     * @param highFreq High frequency\n     * @param freqData Full-spectrum frequency data\n     * @returns Sub-sampling of analysis\n     */\n    sliceByFrequency(lowFreq, highFreq, freqData) {\n        const lowIndex = this.getIndexForFrequency(lowFreq);\n        const highIndex = this.getIndexForFrequency(highFreq);\n        // Grab a 'slice' of the array between these indexes\n        const samples = freqData.slice(lowIndex, highIndex);\n        return samples;\n    }\n    /**\n     * Returns the starting frequency for a given binned frequency index.\n     * @param index Array index\n     * @returns Sound frequency\n     */\n    getFrequencyAtIndex(index) {\n        const a = this.analyserNode;\n        const ctx = this.audioCtx;\n        if (a === undefined)\n            throw new Error(`Analyser not available`);\n        if (ctx === undefined)\n            throw new Error(`Audio context not available`);\n        resultThrow(integerTest(index, `positive`, `index`));\n        if (index > a.frequencyBinCount) {\n            throw new Error(`Index ${index} exceeds frequency bin count ${a.frequencyBinCount}`);\n        }\n        return (index * ctx.sampleRate) / (a.frequencyBinCount * 2);\n    }\n    /**\n     * Returns a binned array index for a given frequency\n     * @param freq Sound frequency\n     * @returns Array index into frequency bins\n     */\n    getIndexForFrequency(freq) {\n        const a = this.analyserNode;\n        if (a === undefined)\n            throw new Error(`Analyser not available`);\n        const nyquist = a.context.sampleRate / 2;\n        const index = Math.round((freq / nyquist) * a.frequencyBinCount);\n        if (index < 0)\n            return 0;\n        if (index >= a.frequencyBinCount)\n            return a.frequencyBinCount - 1;\n        return index;\n    }\n}\n","import { resolveEl } from \"@ixfx/dom\";\nimport { shortGuid } from \"@ixfx/random\";\n/**\n * Scans page for <AUDIO> elements and creates playable controllers for them.\n * It uses the element's 'id' attribute as a way of fetching one later.\n *\n * ```js\n * const ae = new AudioElements();\n * ae.init(); // Initialise\n *\n * const a = ae.get('kick'); // Get the source that had id 'kick'\n * ```\n */\nexport class AudioElements {\n    #initialised = false;\n    #sources = new Map();\n    filterType = `lowpass`;\n    constructor() { }\n    init() {\n        if (this.#initialised)\n            return;\n        this.#initialised = true;\n        for (const element of document.querySelectorAll(`audio`)) {\n            this.#sources.set(element.id, createFromAudioElement(element, this.filterType));\n        }\n    }\n    /**\n     * Gets a BasicAudio instance by key\n     * @param key\n     * @returns BasicAudio instance, or undefined\n     */\n    get(key) {\n        this.init();\n        return this.#sources.get(key);\n    }\n}\n/**\n * Create a BasicAudioElement instance from an <AUDIO> tag in the HTML document.\n *\n * See {@link AudioElements} to automatically create sources from all <AUDIO> elements.\n * @param audioElementOrQuery Element or query (eg '#some-id')\n * @param filterType Filter type. Defaults to 'lowpass'\n * @returns\n */\nexport function createFromAudioElement(audioElementOrQuery, filterType = `lowpass`) {\n    const el = resolveEl(audioElementOrQuery);\n    const context = new AudioContext();\n    // Source from AUDIO element\n    const source = context.createMediaElementSource(el);\n    // Create stereo panner\n    const pan = context.createStereoPanner();\n    // Create gain node\n    const gain = context.createGain();\n    // Create filter\n    const filter = context.createBiquadFilter();\n    filter.type = filterType;\n    // Patch in\n    // AUDIO elem -> gain -> panner -> speakers\n    source.connect(gain);\n    gain.connect(pan);\n    pan.connect(filter);\n    filter.connect(context.destination);\n    return {\n        pan, gain, filter,\n        id: el.id,\n        ctx: context,\n        el\n    };\n}\n","import { shortGuid } from \"@ixfx/random\";\n/**\n * Initialise audio with an oscillator source\n * @param oscillatorOptions\n * @returns BasicAudio instance\n */\nexport function createOscillator(oscillatorOptions = {}) {\n    const context = new AudioContext();\n    const oscType = oscillatorOptions.type ?? `sawtooth`;\n    const oscFreq = oscillatorOptions.frequency ?? 440;\n    const id = oscillatorOptions.id ?? shortGuid();\n    // Source oscillator\n    const source = context.createOscillator();\n    source.type = oscType;\n    source.frequency.setValueAtTime(oscFreq, context.currentTime);\n    // Create stereo panner\n    const pan = context.createStereoPanner();\n    // Create gain node\n    const gain = context.createGain();\n    // Create filter\n    const filter = context.createBiquadFilter();\n    // Patch in\n    // Oscillator -> gain -> panner -> speakers\n    source.connect(gain);\n    gain.connect(pan);\n    pan.connect(filter);\n    filter.connect(context.destination);\n    return {\n        pan, gain, filter,\n        ctx: context,\n        osc: source,\n        id\n    };\n}\n","export * from './analyser.js';\nexport * from './visualiser.js';\nexport * from './from-audio-element.js';\nexport * from './from-oscillator.js';\n","import { deviceEval } from './espruino.js';\nimport { NordicBleDevice } from './nordic-ble-device.js';\n/**\n * An Espruino BLE-connection\n *\n * See [online demos](https://demos.ixfx.fun/io/)\n *\n * Use the `puck` function to initialise and connect to a Puck.js.\n * It must be called in a UI event handler for browser security reasons.\n *\n * ```js\n * const e = await Espruino.puck();\n * ```\n *\n * To connect to a particular device:\n *\n * ```js\n * const e = await Espruino.puck({name:`Puck.js a123`});\n * ```\n *\n * Listen for events:\n * ```js\n * // Received something\n * e.addEventListener(`data`, d => console.log(d.data));\n * // Monitor connection state\n * e.addEventListener(`change`, c => console.log(`${d.priorState} -> ${d.newState}`));\n * ```\n *\n * Write to the device (note the \\n for a new line at the end of the string). This will\n * execute the code on the Espruino.\n *\n * ```js\n * e.write(`digitalPulse(LED1,1,[10,500,10,500,10]);\\n`);\n * ```\n *\n * Run some code and return result:\n * ```js\n * const result = await e.eval(`2+2\\n`);\n * ```\n */\nexport class EspruinoBleDevice extends NordicBleDevice {\n    evalTimeoutMs;\n    evalReplyBluetooth = true;\n    /**\n     * Creates instance. You probably would rather use {@link puck} to create.\n     * @param device\n     * @param opts\n     */\n    constructor(device, opts = {}) {\n        super(device, opts);\n        this.evalTimeoutMs = opts.evalTimeoutMs ?? 5 * 1000;\n    }\n    /**\n     * Writes a script to Espruino.\n     *\n     * It will first send a CTRL+C to cancel any previous input, `reset()` to clear the board,\n     * and then the provided `code` followed by a new line.\n     *\n     * Use {@link eval} instead to execute remote code and get the result back.\n     *\n     * ```js\n     * // Eg from https://www.espruino.com/Web+Bluetooth\n     * writeScript(`\n     *  setInterval(() => Bluetooth.println(E.getTemperature()), 1000);\n     *  NRF.on('disconnect',()=>reset());\n     * `);\n     * ```\n     *\n     * @param code Code to send. A new line is added automatically.\n     */\n    // eslint-disable-next-line @typescript-eslint/require-await\n    async writeScript(code) {\n        this.write(`\\u0003\\u0010reset();\\n`);\n        this.write(`\\u0010${code}\\n`);\n    }\n    /**\n     * Sends some code to be executed on the Espruino. The result\n     * is packaged into JSON and sent back to your code. An exception is\n     * thrown if code can't be executed for some reason.\n     *\n     * ```js\n     * const sum = await e.eval(`2+2`);\n     * ```\n     *\n     * It will wait for a period of time for a well-formed response from the\n     * Espruino. This might not happen if there is a connection problem\n     * or a syntax error in the code being evaled. In cases like the latter,\n     * it will take up to `timeoutMs` (default 5 seconds) before we give up\n     * waiting for a correct response and throw an error.\n     *\n     * Tweaking of the timeout may be required if `eval()` is giving up too quickly\n     * or too slowly. A default timeout can be given when creating the class.\n     *\n     * Options:\n     *  timeoutMs: Timeout for execution. 5 seconds by default\n     *  assumeExclusive If true, eval assumes all replies from controller are in response to eval. True by default\n     *  debug: If true, execution is traced via `warn` callback\n     * @param code Code to run on the Espruino.\n     * @param opts Options\n     * @param warn Function to pass warning/trace messages to. If undefined, this.warn is used, printing to console.\n     */\n    async eval(code, opts = {}, warn) {\n        const debug = opts.debug ?? false;\n        const warnCallback = warn ?? ((m) => { this.warn(m); });\n        return deviceEval(code, opts, this, `Bluetooth.println`, debug, warnCallback);\n    }\n}\n","import { SimpleEventEmitter } from '@ixfx/events';\nimport { StateMachineWithEvents } from '@ixfx/flow/state-machine';\n//import { type StateChangeEvent } from '../flow/StateMachineWithEvents.js';\nimport { indexOfCharCode, omitChars } from '@ixfx/core/text';\nimport { retryFunction } from '@ixfx/flow';\nimport { Codec } from './codec.js';\nimport { StringReceiveBuffer } from './string-receive-buffer.js';\nimport { StringWriteBuffer } from './string-write-buffer.js';\nimport {} from './types.js';\nimport { genericStateTransitionsInstance } from './generic-state-transitions.js';\nexport class JsonDevice extends SimpleEventEmitter {\n    states;\n    codec;\n    verboseLogging = false;\n    name;\n    connectAttempts;\n    chunkSize;\n    rxBuffer;\n    txBuffer;\n    constructor(config = {}) {\n        super();\n        // Init\n        this.verboseLogging = config.debug ?? false;\n        this.chunkSize = config.chunkSize ?? 1024;\n        this.connectAttempts = config.connectAttempts ?? 3;\n        this.name = config.name ?? `JsonDevice`;\n        // Transmit buffer\n        this.txBuffer = new StringWriteBuffer(async (data) => {\n            // When we have data to actually write to device\n            // eslint-disable-next-line @typescript-eslint/await-thenable\n            await this.writeInternal(data);\n        }, config);\n        // Receive buffer\n        this.rxBuffer = new StringReceiveBuffer((line) => {\n            this.fireEvent(`data`, { data: line });\n        });\n        this.codec = new Codec();\n        this.states = new StateMachineWithEvents(genericStateTransitionsInstance, {\n            initial: `ready`,\n        });\n        this.states.addEventListener(`change`, (event) => {\n            this.fireEvent(`change`, event);\n            this.verbose(`${event.priorState} -> ${event.newState}`);\n            if (event.priorState === `connected`) {\n                // Clear out buffers\n                this.rxBuffer.clear();\n                this.txBuffer.clear();\n            }\n        });\n    }\n    get isConnected() {\n        return this.states.state === `connected`;\n    }\n    get isClosed() {\n        return this.states.state === `closed`;\n    }\n    write(txt) {\n        if (this.states.state !== `connected`) {\n            throw new Error(`Cannot write while state is ${this.states.state}`);\n        }\n        this.txBuffer.add(txt);\n    }\n    // eslint-disable-next-line @typescript-eslint/require-await\n    async close() {\n        if (this.states.state !== `connected`)\n            return;\n        // console.log(`rxBuffer closing`);\n        // try {\n        //   await this.rxBuffer.close();\n        // } catch (e) {\n        //   console.warn(e);\n        // }\n        // console.log(`txBuffer closing`);\n        // try {\n        //   await this.txBuffer.close();\n        // } catch (e) {\n        //   console.warn(e);\n        // }\n        // console.log(`calling onClose`);\n        this.onClosed();\n    }\n    async connect() {\n        const attempts = this.connectAttempts;\n        this.states.state = `connecting`;\n        await this.onPreConnect();\n        await retryFunction(async () => {\n            await this.onConnectAttempt();\n            this.states.state = `connected`;\n            return true;\n        }, {\n            limitAttempts: attempts,\n            startAt: 200,\n        });\n    }\n    onRx(event) {\n        //const rx = this.rx;\n        //if (rx === undefined) return;\n        const view = event.target.value;\n        if (view === undefined)\n            return;\n        let string_ = this.codec.fromBuffer(view.buffer);\n        // Check for flow control chars\n        const plzStop = indexOfCharCode(string_, 19);\n        const plzStart = indexOfCharCode(string_, 17);\n        // Remove if found\n        if (plzStart && plzStop < plzStart) {\n            this.verbose(`Tx plz start`);\n            string_ = omitChars(string_, plzStart, 1);\n            this.txBuffer.paused = false;\n        }\n        if (plzStop && plzStop > plzStart) {\n            this.verbose(`Tx plz stop`);\n            string_ = omitChars(string_, plzStop, 1);\n            this.txBuffer.paused = true;\n        }\n        this.rxBuffer.add(string_);\n    }\n    verbose(m) {\n        if (this.verboseLogging)\n            console.info(this.name, m);\n    }\n    log(m) {\n        console.log(this.name, m);\n    }\n    warn(m) {\n        console.warn(this.name, m);\n    }\n}\n","import { JsonDevice, } from './json-device.js';\n/**\n * Serial device. Assumes data is sent with new line characters (\\r\\n) between messages.\n *\n * ```\n * import { Serial } from '@ixfx/io.js'\n * const s = new Serial.Device();\n * s.addEventListener(`change`, evt => {\n *  console.log(`State change ${evt.priorState} -> ${evt.newState}`);\n *  if (evt.newState === `connected`) {\n *    // Do something when connected...\n *  }\n * });\n *\n * // In a UI event handler...\n * s.connect();\n * ```\n *\n * Reading incoming data:\n * ```\n * // Parse incoming data as JSON\n * s.addEventListener(`data`, evt => {\n *  try {\n *    const o = JSON.parse(evt.data);\n *    // If we get this far, JSON is legit\n *  } catch (ex) {\n *  }\n * });\n * ```\n *\n * Writing to the microcontroller\n * ```\n * s.write(JSON.stringify({msg:\"hello\"}));\n * ```\n */\nexport class Device extends JsonDevice {\n    config;\n    port;\n    tx;\n    abort;\n    baudRate;\n    constructor(config = {}) {\n        super(config);\n        this.config = config;\n        this.abort = new AbortController();\n        const eol = config.eol ?? `\\r\\n`;\n        this.baudRate = config.baudRate ?? 9600;\n        if (config.name === undefined)\n            this.name = `Serial.Device`;\n        // Serial.println on microcontroller == \\r\\n\n        this.rxBuffer.separator = eol;\n    }\n    /**\n     * Writes text collected in buffer\n     * @param txt\n     */\n    async writeInternal(txt) {\n        if (this.tx === undefined)\n            throw new Error(`tx not ready`);\n        try {\n            this.tx.write(txt);\n        }\n        catch (error) {\n            this.warn(error);\n        }\n    }\n    onClosed() {\n        this.tx?.releaseLock();\n        this.abort.abort(`closing port`);\n        // try {\n        //   this.port?.close();\n        // } catch (ex) {\n        //   this.warn(ex);\n        // }\n        this.states.state = `closed`;\n    }\n    onPreConnect() {\n        return Promise.resolve();\n    }\n    async onConnectAttempt() {\n        let reqOpts = {\n            filters: []\n        };\n        const openOpts = {\n            baudRate: this.baudRate,\n        };\n        if (this.config.filters)\n            reqOpts = { filters: [...this.config.filters] };\n        this.port = await navigator.serial.requestPort(reqOpts);\n        this.port.addEventListener(`disconnect`, (_) => {\n            this.close();\n        });\n        await this.port.open(openOpts);\n        const txW = this.port.writable;\n        const txText = new TextEncoderStream();\n        if (txW !== null) {\n            txText.readable\n                .pipeTo(txW, { signal: this.abort.signal })\n                .catch((error) => {\n                console.log(`Serial.onConnectAttempt txText pipe:`);\n                console.log(error);\n            });\n            this.tx = txText.writable.getWriter();\n        }\n        const rxR = this.port.readable;\n        const rxText = new TextDecoderStream();\n        if (rxR !== null) {\n            rxR\n                .pipeTo(rxText.writable, { signal: this.abort.signal })\n                .catch((error) => {\n                console.log(`Serial.onConnectAttempt rxR pipe:`);\n                console.log(error);\n            });\n            rxText.readable\n                .pipeTo(this.rxBuffer.writable(), { signal: this.abort.signal })\n                .catch((error) => {\n                console.log(`Serial.onConnectAttempt rxText pipe:`);\n                console.log(error);\n                try {\n                    this.port?.close();\n                }\n                catch (error) {\n                    console.log(error);\n                }\n            });\n        }\n    }\n}\nexport {} from './json-device.js';\n","import { deviceEval } from './espruino.js';\nimport { Device as SerialDevice } from './serial.js';\nexport class EspruinoSerialDevice extends SerialDevice {\n    evalTimeoutMs;\n    evalReplyBluetooth = false;\n    constructor(opts) {\n        super(opts);\n        if (opts === undefined)\n            opts = {};\n        this.evalTimeoutMs = opts.evalTimeoutMs ?? 5 * 1000;\n    }\n    async disconnect() {\n        return super.close();\n    }\n    /**\n     * Writes a script to Espruino.\n     *\n     * It will first send a CTRL+C to cancel any previous input, `reset()` to clear the board,\n     * and then the provided `code` followed by a new line.\n     *\n     * Use {@link eval} instead to execute remote code and get the result back.\n     *\n     * ```js\n     * // Eg from https://www.espruino.com/Web+Bluetooth\n     * writeScript(`\n     *  setInterval(() => Bluetooth.println(E.getTemperature()), 1000);\n     *  NRF.on('disconnect',()=>reset());\n     * `);\n     * ```\n     *\n     * @param code Code to send. A new line is added automatically.\n     */\n    writeScript(code) {\n        this.write(`\\u0003\\u0010reset();\\n`);\n        this.write(`\\u0010${code}\\n`);\n    }\n    /**\n     * Sends some code to be executed on the Espruino. The result\n     * is packaged into JSON and sent back to your code. An exception is\n     * thrown if code can't be executed for some reason.\n     *\n     * ```js\n     * const sum = await e.eval(`2+2`);\n     * ```\n     *\n     * It will wait for a period of time for a well-formed response from the\n     * Espruino. This might not happen if there is a connection problem\n     * or a syntax error in the code being evaled. In cases like the latter,\n     * it will take up to `timeoutMs` (default 5 seconds) before we give up\n     * waiting for a correct response and throw an error.\n     *\n     * Tweaking of the timeout may be required if `eval()` is giving up too quickly\n     * or too slowly. A default timeout can be given when creating the class.\n     *\n     * Options:\n     *  timeoutMs: Timeout for execution. 5 seconds by default\n     *  assumeExclusive: If true, eval assumes all replies from controller are in response to eval. True by default\n     *  debug: If true, execution is traced via `warn` callback\n     * @param code Code to run on the Espruino.\n     * @param opts Options\n     * @param warn Function to pass warning/trace messages to. If undefined, this.warn is used, printing to console.\n     */\n    async eval(code, opts = {}, warn) {\n        const debug = opts.debug ?? false;\n        const warner = warn ?? ((m) => { this.warn(m); });\n        return deviceEval(code, opts, this, `USB.println`, debug, warner);\n    }\n}\n","import {} from '@ixfx/flow/state-machine';\nimport {} from '@ixfx/events';\nimport { string as randomString } from '@ixfx/random';\nimport { waitFor } from '@ixfx/flow';\nimport { EspruinoBleDevice } from './espruino-ble-device.js';\nimport { defaultOpts as NordicDefaults } from './nordic-ble-device.js';\nimport { getErrorMessage } from '@ixfx/debug';\nimport { EspruinoSerialDevice, } from './espruino-serial-device.js';\nexport { EspruinoSerialDevice } from './espruino-serial-device.js';\nexport { EspruinoBleDevice } from './espruino-ble-device.js';\n/**\n * Instantiates a Puck.js. See {@link EspruinoBleDevice} for more info.\n * [Online demos](https://demos.ixfx.fun/io/)\n *\n * If `opts.name` is specified, this will the the Bluetooth device sought.\n *\n * ```js\n * import { Espruino } from '@ixfx/io.js'\n * const e = await Espruino.puck({ name:`Puck.js a123` });\n * ```\n *\n * If no name is specified, a list of all devices starting with `Puck.js` are shown.\n *\n * To get more control over filtering, pass in `opts.filter`. `opts.name` is not used as a filter in this scenario.\n *\n * ```js\n * import { Espruino } from '@ixfx/io.js'\n * const filters = [\n *  { namePrefix: `Puck.js` },\n *  { namePrefix: `Pixl.js` },\n *  {services: [NordicDefaults.service] }\n * ]\n * const e = await Espruino.puck({ filters });\n * ```\n *\n * @returns Returns a connected instance, or throws exception if user cancelled or could not connect.\n */\nexport const puck = async (opts = {}) => {\n    const name = opts.name ?? `Puck`;\n    const debug = opts.debug ?? false;\n    const device = await navigator.bluetooth.requestDevice({\n        filters: getFilters(opts, `Puck.js`),\n        optionalServices: [NordicDefaults.service],\n    });\n    if (opts.debug) {\n        console.info(`Espruino.puck device name: ${device.name}`);\n    }\n    const d = new EspruinoBleDevice(device, { name, debug });\n    await d.connect();\n    return d;\n};\nexport const bangle = async (opts = {}) => {\n    const name = opts.name ?? `Bangle`;\n    const debug = opts.debug ?? false;\n    const device = await navigator.bluetooth.requestDevice({\n        filters: getFilters(opts, `Bangle.js`),\n        optionalServices: [NordicDefaults.service],\n    });\n    if (opts.debug) {\n        console.info(`Espruino.bangle device name: ${device.name}`);\n    }\n    const d = new EspruinoBleDevice(device, { name, debug });\n    await d.connect();\n    return d;\n};\n/**\n * Create a serial-connected Espruino device.\n *\n * ```js\n * import { Espruino } from '@ixfx/io.js'\n * const e = await Espruio.serial();\n * e.connect();\n * ```\n *\n * Options:\n * ```js\n * import { Espruino } from '@ixfx/io.js'\n * const e = await Espruino.serial({ debug: true, evalTimeoutMs: 1000, name: `My Pico` });\n * e.connect();\n * ```\n *\n * Listen for events:\n * ```js\n * e.addEventListener(`change`, evt => {\n *  console.log(`State change ${evt.priorState} -> ${evt.newState}`);\n *  if (evt.newState === `connected`) {\n *    // Do something when connected...\n *  }\n * });\n * ```\n *\n * Reading incoming data:\n * ```\n * // Parse incoming data as JSON\n * s.addEventListener(`data`, evt => {\n *  try {\n *    const o = JSON.parse(evt.data);\n *    // If we get this far, JSON is legit\n *  } catch (ex) {\n *  }\n * });\n * ```\n *\n * Writing to the microcontroller\n * ```\n * s.write(JSON.stringify({msg:\"hello\"}));\n * ```\n * @param opts\n * @returns Returns a connected instance, or throws exception if user cancelled or could not connect.\n */\nexport const serial = async (opts = {}) => {\n    const d = new EspruinoSerialDevice(opts);\n    await d.connect();\n    return d;\n};\n/**\n * Returns a list of BLE scan filters, given the\n * connect options.\n * @param opts\n * @returns\n */\nconst getFilters = (opts, defaultNamePrefix) => {\n    const filters = [];\n    if (opts.filters) {\n        filters.push(...opts.filters);\n    }\n    else if (opts.name) {\n        // Name filter\n        filters.push({ name: opts.name });\n        console.info(`Filtering Bluetooth devices by name '${opts.name}'`);\n    }\n    else {\n        // Default filter\n        filters.push({ namePrefix: defaultNamePrefix }); //`Puck.js` });\n    }\n    // {namePrefix: 'Pixl.js'},\n    // {namePrefix: 'MDBT42Q'},\n    // {namePrefix: 'RuuviTag'},\n    // {namePrefix: 'iTracker'},\n    // {namePrefix: 'Thingy'},\n    // {namePrefix: 'Bangle.js'},\n    // {namePrefix: 'Espruino'},\n    //{services: [NordicDefaults.service]}\n    return filters;\n};\n/**\n * Connects to a generic Espruino BLE device. See  {@link EspruinoBleDevice} for more info.\n * Use {@link puck} if you're connecting to a Puck.js\n *\n * If `opts.name` is specified, only this BLE device will be shown.\n * ```js\n * const e = await connectBle({ name: `Puck.js a123` });\n * ```\n *\n * `opts.filters` overrides and sets arbitary filters.\n *\n * ```js\n * import { Espruino } from '@ixfx/io.js'\n * const filters = [\n *  { namePrefix: `Puck.js` },\n *  { namePrefix: `Pixl.js` },\n *  {services: [NordicDefaults.service] }\n * ]\n * const e = await Espruino.connectBle({ filters });\n * ```\n *\n * @returns Returns a connected instance, or throws exception if user cancelled or could not connect.\n */\nexport const connectBle = async (opts = {}) => {\n    const device = await navigator.bluetooth.requestDevice({\n        filters: getFilters(opts, `Puck.js`),\n        optionalServices: [NordicDefaults.service],\n    });\n    const d = new EspruinoBleDevice(device, { name: `Espruino`, ...opts });\n    await d.connect();\n    return d;\n};\n/**\n * Evaluates some code on an Espruino device.\n *\n * Options:\n * * timeoutMs: how many millis to wait before assuming code failed. If not specified, `device.evalTimeoutMs` is used as a default.\n * * assumeExlusive: assume device is not producing any other output than for our evaluation\n *\n * A random string is created to pair eval requests and responses. `code` will be run on the device, with the result\n * wrapped in JSON, and in turn wrapped in a object that is sent back.\n *\n * The actual code that gets sent to the device is then:\n * `\\x10${evalReplyPrefix}(JSON.stringify({reply:\"${id}\", result:JSON.stringify(${code})}))\\n`\n *\n * For example, it might end up being:\n * `\\x10Bluetooth.println(JSON.stringify({reply: \"a35gP\", result: \"{ 'x': '10' }\" }))\\n`\n *\n * @param code Code to evaluation\n * @param opts Options for evaluation\n * @param device Device to execute on\n * @param evalReplyPrefix How to send code back (eg `Bluetooth.println`, `console.log`)\n * @param debug If true, the full evaled code is printed locally to the console\n * @param warn Callback to display warnings\n * @returns\n */\nexport const deviceEval = async (code, opts = {}, device, evalReplyPrefix, debug, warn) => {\n    const timeoutMs = opts.timeoutMs ?? device.evalTimeoutMs;\n    const assumeExclusive = opts.assumeExclusive ?? true;\n    if (typeof code !== `string`) {\n        throw new TypeError(`Param 'code' should be a string. Got: ${typeof code}`);\n    }\n    return new Promise((resolve, reject) => {\n        // Generate a random id so reply can be matched up with this request\n        const id = randomString(5);\n        const onData = (d) => {\n            try {\n                let cleaned = d.data.trim();\n                // Prefixed with angled bracket sometimes?\n                if (cleaned.startsWith(`>{`) && cleaned.endsWith(`}`)) {\n                    cleaned = cleaned.slice(1);\n                }\n                // Parse reply, expecting JSON.\n                const dd = JSON.parse(cleaned);\n                // Check for reply field, and that it matches\n                if (`reply` in dd) {\n                    if (dd.reply === id) {\n                        done(); // Stop waiting for result\n                        if (`result` in dd) {\n                            resolve(dd.result);\n                        }\n                    }\n                    else {\n                        warn(`Expected reply ${id}, got ${dd.reply}`);\n                    }\n                }\n                else {\n                    warn(`Expected packet, missing 'reply' field. Got: ${d.data}`);\n                }\n            }\n            catch (error) {\n                // If there was a syntax error, response won't be JSON\n                if (assumeExclusive) {\n                    // Fail with unexpected reply as the message\n                    done(`Unexpected reply: ${d.data}. Error: ${getErrorMessage(error)}`);\n                }\n                else {\n                    // Unexpected reply, but we cannot be sure if it's in response to eval or\n                    // some other code running on board. So just warn and eventually timeout\n                    warn(getErrorMessage(error));\n                }\n            }\n        };\n        const onStateChange = (event) => {\n            if (event.newState !== `connected`) {\n                done(`State changed to '${event.newState}', aborting`);\n            }\n        };\n        device.addEventListener(`data`, onData);\n        device.addEventListener(`change`, onStateChange);\n        // Init waitFor\n        const done = waitFor(timeoutMs, (reason) => {\n            reject(new Error(reason));\n        }, (_success) => {\n            // If we got a response or there was a timeout, remove event listeners\n            device.removeEventListener(`data`, onData);\n            device.removeEventListener(`change`, onStateChange);\n        });\n        const source = `\\u0010${evalReplyPrefix}(JSON.stringify({reply:\"${id}\", result:JSON.stringify(${code})}))\\n`;\n        if (debug)\n            warn(source);\n        device.write(source);\n    });\n};\n","import { waitFor } from '@ixfx/flow';\nimport { getErrorMessage } from '@ixfx/debug';\nconst startTimeoutMs = 10_000;\n/**\n * Print available media devices to console\n *\n * ```js\n * camera.dumpDevices(); // Will print results to console\n * ```\n * @param filterKind Defaults `videoinput`\n */\nexport const dumpDevices = async (filterKind = `videoinput`) => {\n    const devices = await navigator.mediaDevices.enumerateDevices();\n    for (const d of devices) {\n        if (d.kind !== filterKind)\n            continue;\n        console.log(d.label);\n        console.log(` Kind: ${d.kind}`);\n        console.log(` Device id: ${d.deviceId}`);\n    }\n};\n/**\n * Attempts to start a video-only stream from a camera into a hidden\n * VIDEO element for frame capture. The VIDEO element is created automatically.\n *\n *\n * ```js\n * import { Camera } from '@ixfx/io.js'\n * import { Video } from '@ixfx/visual.js'\n * try {\n *  const { videoEl, dispose } = await Camera.start();\n *  for await (const frame of Video.frames(videoEl)) {\n *    // Do something with pixels...\n *  }\n * } catch (ex) {\n *  console.error(`Video could not be started`);\n * }\n * ```\n *\n * Be sure to call the dispose() function to stop the video stream and remov\n * the created VIDEO element.\n *\n * _Constraints_ can be specified to select a camera and resolution:\n * ```js\n * import { Camera } from '@ixfx/io.js'\n * import { Video } from '@ixfx/visual.js'\n *\n * try {\n *  const { videoEl, dispose } = await Camera.start({\n *    facingMode: `environment`,\n *    max: { width: 640, height: 480 }\n *  });\n *\n *  for await (const frame of Video.frames(videoEl)) {\n *    // Do something with pixels...\n *  }\n * } catch (ex) {\n *  // Can happen if user cancels camera request, for example.\n *  console.error(`Video could not be started`, ex);\n * }\n * ```\n *\n * An alternative to Video.frames is Video.capture.\n * @param constraints\n * @returns Returns `{ videoEl, dispose }`, where `videoEl` is the created VIDEO element, and `dispose` is a function for removing the element and stopping the video.\n */\nexport const start = async (constraints = {}) => {\n    const videoEl = document.createElement(`VIDEO`);\n    videoEl.style.display = `none`;\n    videoEl.playsInline = true;\n    videoEl.muted = true;\n    videoEl.classList.add(`ixfx-camera`);\n    document.body.append(videoEl);\n    let stopVideo = () => {\n        /* no-op */\n    };\n    const dispose = () => {\n        try {\n            // Stop source\n            stopVideo();\n        }\n        catch {\n            /* no-op */\n        }\n        // Remove the element we created\n        videoEl.remove();\n    };\n    try {\n        // Attempt to start video\n        const r = await startWithVideoEl(videoEl, constraints);\n        stopVideo = r.dispose;\n        return { videoEl, dispose };\n    }\n    catch (error) {\n        // If it didn't work, delete the created element\n        console.error(error);\n        dispose();\n        throw error;\n    }\n};\n/**\n * Attempts to start a video-only stream from a camera into the designated VIDEO element.\n * @param videoEl\n * @param constraints\n * @returns Result contains videoEl and dispose function\n */\nconst startWithVideoEl = async (videoEl, constraints = {}) => {\n    if (videoEl === undefined)\n        throw new Error(`videoEl undefined`);\n    if (videoEl === null)\n        throw new Error(`videoEl null`);\n    const maxResolution = constraints.max;\n    const minResolution = constraints.min;\n    const idealResolution = constraints.ideal;\n    // Setup constraints\n    const c = {\n        audio: false,\n        video: {\n            width: {},\n            height: {},\n        },\n    };\n    // Just in case some intuitive values are passed in...\n    if (constraints.facingMode === `front`) {\n        constraints = { ...constraints, facingMode: `user` };\n    }\n    if (constraints.facingMode === `back`) {\n        constraints = { ...constraints, facingMode: `environment` };\n    }\n    if (constraints.facingMode) {\n        c.video.facingMode = constraints.facingMode;\n    }\n    if (constraints.deviceId) {\n        c.video.deviceId = constraints.deviceId;\n    }\n    if (idealResolution) {\n        c.video.width = {\n            ...c.video.width,\n            ideal: idealResolution.width,\n        };\n        c.video.height = {\n            ...c.video.height,\n            ideal: idealResolution.height,\n        };\n    }\n    if (maxResolution) {\n        c.video.width = {\n            ...c.video.width,\n            max: maxResolution.width,\n        };\n        c.video.height = {\n            ...c.video.height,\n            max: maxResolution.height,\n        };\n    }\n    if (minResolution) {\n        c.video.width = {\n            ...c.video.width,\n            min: minResolution.width,\n        };\n        c.video.height = {\n            ...c.video.height,\n            min: minResolution.height,\n        };\n    }\n    // Request stream\n    const done = waitFor(constraints.startTimeoutMs ?? startTimeoutMs, (reason) => {\n        throw new Error(`Camera getUserMedia failed: ${reason}`);\n    });\n    try {\n        const stream = await navigator.mediaDevices.getUserMedia(c);\n        // Clean-up function\n        const dispose = () => {\n            videoEl.pause();\n            const t = stream.getTracks();\n            for (const track of t)\n                track.stop();\n        };\n        // Assign to VIDEO element\n        //eslint-disable-next-line functional/immutable-data\n        videoEl.srcObject = stream;\n        done();\n        const returnValue = { videoEl, dispose };\n        const p = new Promise((resolve, reject) => {\n            videoEl.addEventListener(`loadedmetadata`, () => {\n                videoEl\n                    .play()\n                    .then(() => {\n                    resolve(returnValue);\n                })\n                    .catch((error) => {\n                    reject(error);\n                });\n            });\n        });\n        return p;\n    }\n    catch (error) {\n        done(getErrorMessage(error));\n        throw error;\n    }\n};\n","/**\n * Starts video file playback, creating a VIDEO element automatically.\n * @param file File\n * @returns StartResult\n */\nexport const start = async (file) => {\n    const videoEl = document.createElement(`VIDEO`);\n    videoEl.style.display = `none`;\n    videoEl.playsInline = true;\n    videoEl.muted = true;\n    videoEl.classList.add(`ixfx-video`);\n    document.body.appendChild(videoEl);\n    //eslint-disable-next-line functional/no-let\n    let stopVideo = () => {\n        /* no-op */\n    };\n    const dispose = () => {\n        try {\n            // Stop source\n            stopVideo();\n        }\n        catch {\n            /* no-op */\n        }\n        // Remove the element we created\n        videoEl.remove();\n    };\n    try {\n        // Attempt to start video\n        const r = await startWithVideoEl(videoEl, file);\n        stopVideo = r.dispose;\n        return { videoEl, dispose };\n    }\n    catch (ex) {\n        // If it didn't work, delete the created element\n        console.error(ex);\n        dispose();\n        throw ex;\n    }\n};\n/**\n * Starts playback of a video file in the provided VIDEO element.\n * @param videoEl\n * @param file\n * @returns\n */\nconst startWithVideoEl = async (videoEl, file) => {\n    if (videoEl === undefined)\n        throw new Error(`videoEl undefined`);\n    if (videoEl === null)\n        throw new Error(`videoEl null`);\n    const url = URL.createObjectURL(file);\n    videoEl.src = url;\n    videoEl.loop = true;\n    // Clean-up function\n    const dispose = () => {\n        videoEl.pause();\n    };\n    const returnValue = { videoEl, dispose };\n    const p = new Promise((resolve, reject) => {\n        videoEl.addEventListener(`loadedmetadata`, () => {\n            videoEl\n                .play()\n                .then(() => {\n                resolve(returnValue);\n            })\n                .catch((ex) => {\n                reject(ex);\n            });\n        });\n    });\n    return p;\n};\n","import { Video } from '@ixfx/visual';\nimport * as Camera from './camera.js';\nimport * as VideoFile from './video-file.js';\n/**\n * Frame Processor\n * Simplifies grabbing frames from a camera or video file.\n *\n * First, create:\n * ```js\n * const fp = new FrameProcessor();\n * ```\n *\n * Then either use the camera or a video file:\n * ```js\n * fp.useCamera(constraints);\n * // or:\n * gp.useVideo(file);\n * ```\n *\n * With `useCamera`, optionally specify {@link Camera.Constraints} to pick which camera and resolution.\n *\n * ```js\n * fp.getFrame(); // Gets the last frame\n * fp.dispose(); // Close down camera/file\n * ```\n *\n * See {@link FrameProcessorOpts} for details on available options.\n */\nexport class FrameProcessor {\n    _source;\n    _state;\n    _teardownNeeded = false;\n    _cameraConstraints;\n    _cameraStartResult;\n    _videoSourceCapture;\n    _videoFile;\n    _videoStartResult;\n    _showCanvas;\n    _showPreview;\n    _postCaptureDraw;\n    _timer;\n    _captureCanvasEl;\n    /**\n     * Create a new frame processor\n     * @param opts\n     */\n    constructor(opts = {}) {\n        this._state = `ready`;\n        this._source = ``;\n        this._timer = performance.now();\n        this._showCanvas = opts.showCanvas ?? false;\n        this._showPreview = opts.showPreview ?? false;\n        this._cameraConstraints = opts.cameraConstraints ?? undefined;\n        this._captureCanvasEl = opts.captureCanvasEl ?? undefined;\n        this._postCaptureDraw = opts.postCaptureDraw;\n    }\n    /**\n     * Hides or shows the raw source in the DOM\n     * @param enabled Preview enabled\n     */\n    showPreview(enabled) {\n        if (this._state === `disposed`)\n            throw new Error(`Disposed`);\n        let el;\n        switch (this._source) {\n            case `camera`: {\n                el = this._cameraStartResult?.videoEl;\n                if (el !== undefined)\n                    el.style.display = enabled ? `block` : `none`;\n                break;\n            }\n        }\n        this._showPreview = enabled;\n    }\n    /**\n     * Shows or hides the Canvas we're capturing to\n     * @param enabled\n     */\n    showCanvas(enabled) {\n        if (this._state === `disposed`)\n            throw new Error(`Disposed`);\n        let el;\n        if (this._source === `camera` || this._source === `video`) {\n            el = this._videoSourceCapture?.canvasEl;\n            if (el !== undefined)\n                el.style.display = enabled ? `block` : `none`;\n        }\n        else\n            throw new Error(`Source not implemented: ${this._source}`);\n        this._showCanvas = enabled;\n    }\n    /**\n     * Returns the current capturer instance\n     * @returns\n     */\n    getCapturer() {\n        if (this._state === `disposed`)\n            throw new Error(`Disposed`);\n        if (this._source === `camera` || this._source === `video`) {\n            return this._videoSourceCapture;\n        }\n        throw new Error(`Source kind not supported ${this._source}`);\n    }\n    /**\n     * Grab frames from a video camera source and initialises\n     * frame processor.\n     *\n     * If `constraints` are not specified, it will use the ones\n     * provided when creating the class, or defaults.\n     *\n     * @param constraints Override of constraints when requesting camera access\n     */\n    async useCamera(constraints) {\n        if (this._state === `disposed`)\n            throw new Error(`Disposed`);\n        this._source = `camera`;\n        if (this._teardownNeeded)\n            this.teardown();\n        if (constraints)\n            this._cameraConstraints = constraints;\n        await this.init();\n    }\n    async useVideo(file) {\n        if (this._state === `disposed`)\n            throw new Error(`Disposed`);\n        this._source = `video`;\n        if (this._teardownNeeded)\n            this.teardown();\n        this._videoFile = file;\n        await this.init();\n    }\n    /**\n     * Initialises camera\n     */\n    async initCamera() {\n        const r = await Camera.start(this._cameraConstraints);\n        if (r === undefined)\n            throw new Error(`Could not start camera`);\n        this._cameraStartResult = r;\n        void this.postInit(r);\n    }\n    async initVideo() {\n        if (!this._videoFile)\n            throw new Error(`Video file not defined`);\n        const r = await VideoFile.start(this._videoFile);\n        this._videoStartResult = r;\n        void this.postInit(r);\n    }\n    async postInit(r) {\n        if (this._showPreview)\n            r.videoEl.style.display = `block`;\n        // Set up manual capturer\n        this._videoSourceCapture = Video.manualCapture(r.videoEl, {\n            postCaptureDraw: this._postCaptureDraw,\n            showCanvas: this._showCanvas,\n            canvasEl: this._captureCanvasEl,\n        });\n        this._teardownNeeded = true;\n        this._cameraStartResult = r;\n        return Promise.resolve();\n    }\n    /**\n     * Closes down connections and removes created elements.\n     * Once disposed, the frame processor cannot be used\n     * @returns\n     */\n    dispose() {\n        if (this._state === `disposed`)\n            return;\n        this.teardown();\n        this._state = `disposed`;\n    }\n    async init() {\n        this._timer = performance.now();\n        switch (this._source) {\n            case `camera`: {\n                await this.initCamera();\n                break;\n            }\n            case `video`: {\n                await this.initVideo();\n                break;\n            }\n        }\n        this._state = `initialised`;\n    }\n    teardown() {\n        if (!this._teardownNeeded)\n            return;\n        if (this._source === `camera` || this._source === `video`) {\n            this._videoSourceCapture?.dispose();\n        }\n        switch (this._source) {\n            case `camera`: {\n                this._cameraStartResult?.dispose();\n                break;\n            }\n            case `video`: {\n                this._videoStartResult?.dispose();\n                break;\n            }\n        }\n        this._teardownNeeded = false;\n    }\n    /**\n     * Get the last frame\n     * @returns\n     */\n    getFrame() {\n        if (this._state === `disposed`)\n            throw new Error(`Disposed`);\n        switch (this._source) {\n            case `camera`: {\n                return this.getFrameCamera();\n            }\n            case `video`: {\n                return this.getFrameCamera();\n            }\n            default: {\n                throw new Error(`source type unhandled ${this._source}`);\n            }\n        }\n    }\n    /**\n     * Get the timestamp of the processor (elapsed time since starting)\n     * @returns\n     */\n    getTimestamp() {\n        return performance.now() - this._timer;\n    }\n    getFrameCamera() {\n        return this._videoSourceCapture?.capture();\n    }\n}\n","import { retryTask, eventRace } from \"@ixfx/flow\";\nimport { intervalToMs } from \"@ixfx/core\";\nimport * as StateMachine from \"@ixfx/flow/state-machine\";\nimport { getErrorMessage } from \"@ixfx/debug\";\n/**\n * Maintains a web socket connection. Connects automatically.\n *\n * The essential usage is:\n * ```js\n * import { reconnectingWebsocket } from '@ixfx/io.js'\n * const ws = reconnectingWebsocket(`wss://somehost.com/ws`, {\n *  onMessage: (msg) => {\n *    // Do something with received message...\n *  }\n * }\n *\n * // Send some data\n * ws.send(JSON.stringify(someData));\n *\n * // Check state of connection\n * ws.isConnected();\n * ```\n *\n * More options can be provided to monitor state\n * ```js\n * import { reconnectingWebsocket } from '@ixfx/io.js'\n * const ws = reconnectingWebsocket(`wss://somehost.com/ws`, {\n *  onError: (err) => {\n *    console.error(err)\n *  },\n *  onMessage: (msg) => {\n *    // Received data\n *    console.log(msg);\n *  },\n *  onConnected: () => {\n *    // Connected!\n *  },\n *  onDisconnected: () => {\n *    // Disconnected :(\n *  }\n * });\n * ```\n * @param url\n * @param opts\n * @returns\n */\nexport const reconnectingWebsocket = (url, opts = {}) => {\n    const startDelayMs = intervalToMs(opts.startDelay, 2000);\n    const maxDelayMs = intervalToMs(opts.maxDelay, startDelayMs * 10);\n    const checkStateMs = intervalToMs(opts.checkStateMs, 5000);\n    if (startDelayMs > maxDelayMs)\n        throw new Error(`startDelay should be less than maxDelay`);\n    if (checkStateMs < 0)\n        throw new Error(`Param 'checkState' should be above zero`);\n    let reconnect = true;\n    let currentState = StateMachine.init({\n        closed: `connecting`,\n        open: `closed`,\n        connecting: [`closed`, `open`]\n    }); //`closed`;\n    let ws;\n    const onError = (event_) => {\n        if (opts.onError) {\n            opts.onError(event_);\n        }\n        else {\n            console.log(`rw on error`, event_);\n            console.error(` error: ${event_.error}`);\n            console.error(` type: ${event_.type}`);\n            console.error(` error msg: ${event_.message}`);\n        }\n    };\n    const onMessage = (message) => {\n        if (opts.onMessage)\n            opts.onMessage(message.data);\n    };\n    const connect = async () => {\n        if (currentState.value === `connecting`)\n            throw new Error(`Cannot connect twice`);\n        currentState = StateMachine.to(currentState, `connecting`);\n        if (ws !== undefined) {\n            ws.removeEventListener(`error`, onError);\n            if (opts.onMessage) {\n                ws.removeEventListener(`message`, onMessage);\n            }\n            ws = undefined;\n        }\n        // Keep trying to connect\n        const retry = await retryTask({\n            async probe(_attempts) {\n                try {\n                    const wss = new WebSocket(url);\n                    const r = await eventRace(wss, [`open`, `error`], { timeoutMs: 1000 });\n                    return r.type === `open` ? { success: true, value: wss } : { success: false, error: `Could not open` };\n                }\n                catch (error) {\n                    return { success: false, error: getErrorMessage(error) };\n                }\n            },\n        }, { predelayMs: startDelayMs, limitAttempts: opts.limitAttempts });\n        // Final result\n        ws = retry.value;\n        let result = false;\n        if (retry.success && ws) {\n            //      ws.addEventListener(`error`, onError);\n            if (opts.onMessage) {\n                //        ws.addEventListener(`message`, onMessage);\n            }\n            result = true;\n            currentState = StateMachine.to(currentState, `open`);\n            if (opts.onConnected)\n                opts.onConnected();\n        }\n        else {\n            currentState = StateMachine.to(currentState, `closed`);\n        }\n        return result;\n    };\n    const send = (data) => {\n        if (ws) {\n            if (ws.readyState === ws.OPEN) {\n                ws.send(data);\n            }\n            else {\n                onDisconnected();\n            }\n        }\n        else {\n            throw new Error(`Not connected`);\n        }\n    };\n    const onDisconnected = () => {\n        if (currentState.value === `closed`)\n            return;\n        if (currentState.value === `open`) {\n            currentState = StateMachine.to(currentState, `closed`);\n            if (opts.onDisconnected)\n                opts.onDisconnected();\n        }\n        if (reconnect && currentState.value !== `connecting`) {\n            console.log(`Scheduling connect`);\n            setTimeout(() => {\n                void connect();\n            }, 100);\n        }\n    };\n    const isConnected = () => {\n        if (!ws)\n            return false;\n        return ws.readyState === ws.OPEN;\n    };\n    const close = () => {\n        reconnect = false;\n        currentState = StateMachine.to(currentState, `closed`);\n        ws?.close();\n        if (opts.onDisconnected)\n            opts.onDisconnected();\n    };\n    const open = () => {\n        reconnect = true;\n        if (currentState.value === `open`)\n            return Promise.resolve(true);\n        if (currentState.value === `connecting`)\n            return Promise.resolve(false);\n        return connect();\n    };\n    void connect();\n    setInterval(() => {\n        if (!ws)\n            return;\n        switch (ws.readyState) {\n            case ws.CLOSED: {\n                if (currentState.value === `open`) {\n                    onDisconnected();\n                }\n                break;\n            }\n        }\n    }, checkStateMs);\n    return { send, isConnected, close, open };\n};\n","/**\n * Generic support for Bluetooth LE devices\n */\nexport * as Bluetooth from './nordic-ble-device.js';\nexport * as Audio from './audio/index.js';\nexport * from './types.js';\nexport * from './generic-state-transitions.js';\nexport { StringReceiveBuffer } from './string-receive-buffer.js';\nexport { StringWriteBuffer, } from './string-write-buffer.js';\nexport { Codec } from './codec.js';\n/**\n * Espruino-based devices connected via Bluetooth LE\n *\n * See [demos](https://demos.ixfx.fun/io/)\n *\n * Overview:\n * * {@link puck}: Connects a {@link Espruino.EspruinoBleDevice | Espruino BLE Device}.\n * * {@link Espruino.connectBle}: Connect to a generic Espruino via BLE\n */\nexport * as Espruino from './espruino.js';\nexport * as Camera from './camera.js';\nexport * as VideoFile from './video-file.js';\nexport { FrameProcessor } from './frame-processor.js';\n/**\n * Microcontrollers such as Arduinos connected via USB serial\n *\n * Overview\n * * {@link Serial.Device}\n *\n */\nexport * as Serial from './serial.js';\nexport * from './reconnecting-web-socket.js';\n","import { observable } from \"@ixfx/rx/from\";\nimport { debounce } from \"@ixfx/rx/op/debounce\";\nimport * as Rx from \"@ixfx/rx\";\n/**\n * Observe when element resizes. Specify `interval` to debounce, uses 100ms by default.\n *\n * ```\n * const o = resizeObservable(myEl, 500);\n * o.subscribe(() => {\n *  // called 500ms after last resize\n * });\n * ```\n * @param elem\n * @param interval Tiemout before event gets triggered\n * @returns\n */\nexport const browserResizeObservable = (elem, interval) => {\n    if (elem === null) {\n        throw new Error(`Param 'elem' is null. Expected element to observe`);\n    }\n    if (elem === undefined) {\n        throw new Error(`Param 'elem' is undefined. Expected element to observe`);\n    }\n    const m = observable(stream => {\n        const ro = new ResizeObserver((entries) => {\n            stream.set(entries);\n        });\n        ro.observe(elem);\n        return () => {\n            ro.unobserve(elem);\n        };\n    });\n    //return debounce({ elapsed: interval ?? 100 })(m);\n    return debounce({ elapsed: interval ?? 100 })(m);\n};\n/**\n * Returns an Reactive for window resize. Default 100ms debounce.\n * @param elapsed\n * @returns\n */\nexport const windowResize = (elapsed) => debounce({ elapsed: elapsed ?? 100 })(Rx.From.event(window, `resize`, { innerWidth: 0, innerHeight: 0 }));\n","import { observable } from \"@ixfx/rx/from/observable\";\n/**\n * Observe when a class changes on a target element, by default the document.\n * Useful for tracking theme changes.\n *\n * ```js\n * const c = cssClassChange();\n * c.on(msg => {\n *  // some class has changed on the document\n * });\n * ```\n */\nexport const cssClassChange = (target = document.documentElement) => {\n    const m = observable(stream => {\n        const ro = new MutationObserver((entries) => {\n            stream.set(entries);\n        });\n        const opts = {\n            attributeFilter: [`class`],\n            attributes: true,\n        };\n        ro.observe(target, opts);\n        return () => {\n            ro.disconnect();\n        };\n    });\n    return m;\n};\n","import { initStream } from \"@ixfx/rx\";\nexport function colour(initialValue) {\n    let value = initialValue;\n    const events = initStream();\n    const set = (v) => {\n        value = v;\n        events.set(v);\n    };\n    return {\n        dispose: events.dispose,\n        isDisposed: events.isDisposed,\n        last: () => value,\n        on: events.on,\n        onValue: events.onValue,\n        set,\n        setHsl: (hsl) => {\n            set(hsl);\n        }\n    };\n}\n","import { resolveEl } from '@ixfx/dom';\nimport { transform } from '@ixfx/rx';\nimport { hasLast } from '@ixfx/rx';\nimport { Colour } from \"@ixfx/visual\";\nimport { eventTrigger } from \"@ixfx/rx/from\";\n//import type { Colourish } from '@ixfx/visual/colour';\n/**\n * Reactive getting/setting of values to a HTML INPUT element.\n *\n * Options:\n * - relative: if _true_, values are 0..1 (default: false)\n * - inverted: if _true_, values are 1..0 (default: false)\n *\n * If element is missing a 'type' attribute, this will be set to 'range'.\n * @param targetOrQuery\n * @param options\n * @returns\n */\nexport function domNumberInputValue(targetOrQuery, options = {}) {\n    const input = domInputValue(targetOrQuery, options);\n    const el = input.el;\n    const relative = options.relative ?? false;\n    const inverted = options.inverted ?? false;\n    const rx = transform(input, v => {\n        return Number.parseFloat(v);\n    });\n    if (relative) {\n        //el.setAttribute(`max`, inverted ? \"0\" : \"1\");\n        el.max = inverted ? \"0\" : \"1\";\n        //el.setAttribute(`min`, inverted ? \"1\" : \"0\");\n        el.min = inverted ? \"1\" : \"0\";\n        if (!el.hasAttribute(`step`)) {\n            //el.setAttribute(`step`, \"0.1\");\n            el.step = \"0.1\";\n        }\n    }\n    if (el.getAttribute(`type`) === null) {\n        el.type = `range`;\n    }\n    const set = (value) => {\n        input.set(value.toString());\n    };\n    return {\n        ...rx,\n        last() {\n            //console.log(`domNumberInputValue last: ${ input.last() }`);\n            return Number.parseFloat(input.last());\n        },\n        set\n    };\n}\nexport function domHslInputValue(targetOrQuery, options = {}) {\n    const input = domInputValue(targetOrQuery, {\n        ...options,\n        upstreamFilter: (value) => {\n            return (typeof value === `object`) ? Colour.toCssColour(value) : value;\n        },\n    });\n    const rx = transform(input, v => {\n        return Colour.HslSpace.fromCss(v, { scalar: true, ensureSafe: true });\n    });\n    return {\n        ...rx,\n        last() {\n            return Colour.HslSpace.fromCss(input.last(), { scalar: true, ensureSafe: true });\n        },\n        set(value) {\n            input.set(Colour.HslSpace.toCssString(value));\n        },\n    };\n}\n/**\n * A stream of values when the a HTMLInputElement changes. Eg a <input type=\"range\">\n * ```js\n * const r = Rx.From.domInputValue(`#myEl`);\n * r.onValue(value => {\n *  // value will be string\n * });\n * ```\n *\n * Options:\n * * emitInitialValue: If _true_ emits the HTML value of element (default: false)\n * * attributeName: If set, this is the HTML attribute value is set to when writing to stream (default: 'value')\n * * fieldName: If set, this is the DOM object field set when writing to stream (default: 'value')\n * * when: 'changed'|'changing' when values are emitted. (default: 'changed')\n * * fallbackValue:  Fallback value to use if field/attribute cannot be read (default: '')\n * @param targetOrQuery\n * @param options\n * @returns\n */\nexport function domInputValue(targetOrQuery, options = {}) {\n    const target = (typeof targetOrQuery === `string` ? document.querySelector(targetOrQuery) : targetOrQuery);\n    if (target === null && typeof targetOrQuery === `string`)\n        throw new Error(`Element query could not be resolved '${targetOrQuery}'`);\n    if (target === null)\n        throw new Error(`targetOrQuery is null`);\n    const el = resolveEl(targetOrQuery);\n    const when = options.when ?? `changed`;\n    const eventName = when === `changed` ? `change` : `input`;\n    const emitInitialValue = options.emitInitialValue ?? false;\n    const fallbackValue = options.fallbackValue ?? ``;\n    const upstreamSource = options.upstreamSource;\n    let upstreamSourceUnsub = () => { };\n    let attribName = options.attributeName;\n    let fieldName = options.fieldName;\n    if (fieldName === undefined && attribName === undefined) {\n        attribName = fieldName = `value`;\n    }\n    const readValue = () => {\n        let value;\n        if (attribName) {\n            value = el.getAttribute(attribName);\n            //console.log(`  attrib: ${ attribName } value: ${ value }`);\n        }\n        if (fieldName) {\n            value = el[fieldName];\n        }\n        if (value === undefined || value === null)\n            value = fallbackValue;\n        //console.log(`domInputValue readValue: ${ value }. attrib: ${ attribName } field: ${ fieldName }`);\n        return value;\n    };\n    const setValue = (value) => {\n        if (attribName) {\n            el.setAttribute(attribName, value);\n        }\n        if (fieldName) {\n            el[fieldName] = value;\n        }\n    };\n    const setUpstream = (v) => {\n        v = options.upstreamFilter ? options.upstreamFilter(v) : v;\n        setValue(v);\n    };\n    if (upstreamSource) {\n        upstreamSourceUnsub = upstreamSource.onValue(setUpstream);\n        if (hasLast(upstreamSource)) {\n            setUpstream(upstreamSource.last());\n        }\n    }\n    // Input element change event stream\n    const rxEvents = eventTrigger(el, eventName, {\n        fireInitial: emitInitialValue,\n        debugFiring: options.debugFiring ?? false,\n        debugLifecycle: options.debugLifecycle ?? false,\n    });\n    // Transform to get values\n    const rxValues = transform(rxEvents, _trigger => readValue());\n    return {\n        ...rxValues,\n        el,\n        last() {\n            return readValue();\n        },\n        set(value) {\n            setValue(value);\n        },\n        dispose(reason) {\n            upstreamSourceUnsub();\n            rxValues.dispose(reason);\n            rxEvents.dispose(reason);\n        },\n    };\n}\n/**\n * Listens for data changes from elements within a HTML form element.\n * Input elements must have a 'name' attribute.\n *\n * Simple usage:\n * ```js\n * const rx = Rx.From.domForm(`#my-form`);\n * rx.onValue(value => {\n *  // Object containing values from form\n * });\n *\n * rx.last(); // Read current values of form\n * ```\n *\n * UI can be updated\n * ```js\n * // Set using an object of key-value pairs\n * rx.set({\n *  size: 'large'\n * });\n *\n * // Or set a single name-value pair\n * rx.setNamedValue(`size`, `large`);\n * ```\n *\n * If an 'upstream' reactive is provided, this is used to set initial values of the UI, overriding\n * whatever may be in the HTML. Upstream changes modify UI elements, but UI changes do not modify the upstream\n * source.\n *\n * ```js\n * // Create a reactive object\n * const obj = Rx.From.object({\n *  when: `2024-10-03`,\n *  size: 12,\n *  checked: true\n * });\n *\n * // Use this as initial values for a HTML form\n * // (assuming appropriate INPUT/SELECT elements exist)\n * const rx = Rx.From.domForm(`form`, {\n *  upstreamSource: obj\n * });\n *\n * // Listen for changes in the UI\n * rx.onValue(value => {\n *\n * });\n * ```\n * @param formElOrQuery\n * @param options\n * @returns\n */\nexport function domForm(formElOrQuery, options = {}) {\n    const formEl = resolveEl(formElOrQuery);\n    const when = options.when ?? `changed`;\n    const eventName = when === `changed` ? `change` : `input`;\n    const emitInitialValue = options.emitInitialValue ?? false;\n    const upstreamSource = options.upstreamSource;\n    const typeHints = new Map();\n    let upstreamSourceUnsub = () => { };\n    const readValue = () => {\n        const fd = new FormData(formEl);\n        const entries = [];\n        for (const [k, v] of fd.entries()) {\n            const vString = v.toString();\n            // Get type hint for key\n            let typeHint = typeHints.get(k);\n            if (!typeHint) {\n                // If not found, use the kind of input element as a hint\n                const el = getFormElement(k, vString);\n                if (el) {\n                    if (el.type === `range` || el.type === `number`) {\n                        typeHint = `number`;\n                    }\n                    else if (el.type === `color`) {\n                        typeHint = `colour`;\n                    }\n                    else if (el.type === `checkbox` && (v === `true` || v === `on`)) {\n                        typeHint = `boolean`;\n                    }\n                    else {\n                        typeHint = `string`;\n                    }\n                    typeHints.set(k, typeHint);\n                }\n            }\n            if (typeHint === `number`) {\n                entries.push([k, Number.parseFloat(vString)]);\n            }\n            else if (typeHint === `boolean`) {\n                const vBool = (vString === `true`) ? true : false;\n                entries.push([k, vBool]);\n            }\n            else if (typeHint === `colour`) {\n                const vRgb = Colour.toCssColour(vString);\n                entries.push([k, Colour.SrgbSpace.fromCss(vRgb, { scalar: false })]);\n            }\n            else {\n                entries.push([k, v.toString()]);\n            }\n        }\n        // Checkboxes that aren't checked don't give a value, so find those\n        for (const el of formEl.querySelectorAll(`input[type=\"checkbox\"]`)) {\n            if (!el.checked && el.value === `true`) {\n                entries.push([el.name, false]);\n            }\n        }\n        const asObject = Object.fromEntries(entries);\n        //console.log(`readValue`, asObj);\n        return asObject;\n    };\n    const getFormElement = (name, value) => {\n        const el = formEl.querySelector(`[name=\"${name}\"]`);\n        if (!el) {\n            console.warn(`Form does not contain an element with name=\"${name}\"`);\n            return;\n        }\n        if (el.type === `radio`) {\n            // Get right radio option\n            const radioEl = formEl.querySelector(`[name=\"${name}\"][value=\"${value}\"]`);\n            if (!radioEl) {\n                console.warn(`Form does not contain radio option for name=${name} value=${value}`);\n                return;\n            }\n            return radioEl;\n        }\n        return el;\n    };\n    const setNamedValue = (name, value) => {\n        const el = getFormElement(name, value);\n        if (!el)\n            return;\n        //let typeHint = typeHints.get(name);\n        // if (typeHint) {\n        //   console.log(`${ name } hint: ${ typeHint } input type: ${ el.type }`);\n        // } else {\n        //   console.warn(`Rx.Sources.Dom.domForm no type hint for: ${ name }`);\n        // }\n        if (el.nodeName === `INPUT` || el.nodeName === `SELECT`) {\n            if (el.type === `color`) {\n                if (typeof value === `object`) {\n                    // Try to parse colour if value is an object\n                    value = Colour.toCssColour(value);\n                }\n            }\n            else if (el.type === `checkbox`) {\n                if (typeof value === `boolean`) {\n                    el.checked = value;\n                    return;\n                }\n                else {\n                    console.warn(`Rx.Sources.domForm: Trying to set non boolean type to a checkbox. Name: ${name} Value: ${value} (${typeof value})`);\n                }\n            }\n            else if (el.type === `radio`) {\n                el.checked = true;\n                return;\n            }\n            el.value = value;\n        }\n    };\n    const setFromUpstream = (value) => {\n        //console.log(`setUpstream`, value);\n        for (const [name, v] of Object.entries(value)) {\n            let hint = typeHints.get(name);\n            if (!hint) {\n                hint = typeof v;\n                if (hint === `object`) {\n                    const rgb = Colour.toColour(v);\n                    hint = `colour`;\n                    // const rgb = Colour.toColour(v);\n                    // if (rgb.success) {\n                    //   hint = `colour`;\n                    // }\n                }\n                typeHints.set(name, hint);\n            }\n            const valueFiltered = options.upstreamFilter ? options.upstreamFilter(name, v) : v;\n            setNamedValue(name, valueFiltered);\n        }\n    };\n    if (upstreamSource) {\n        upstreamSourceUnsub = upstreamSource.onValue(setFromUpstream);\n        if (hasLast(upstreamSource)) {\n            setFromUpstream(upstreamSource.last());\n        }\n    }\n    // Input element change event stream\n    const rxEvents = eventTrigger(formEl, eventName, {\n        fireInitial: emitInitialValue,\n        debugFiring: options.debugFiring ?? false,\n        debugLifecycle: options.debugLifecycle ?? false,\n    });\n    // Transform to get values\n    const rxValues = transform(rxEvents, _trigger => readValue());\n    return {\n        ...rxValues,\n        el: formEl,\n        last() {\n            return readValue();\n        },\n        set: setFromUpstream,\n        setNamedValue,\n        dispose(reason) {\n            upstreamSourceUnsub();\n            rxValues.dispose(reason);\n            rxEvents.dispose(reason);\n        },\n    };\n}\n","import { resolveEl } from \"@ixfx/dom\";\nimport { Pathed } from \"@ixfx/core\";\nimport * as Rx from \"@ixfx/rx\";\nimport * as RxFrom from \"@ixfx/rx/from\";\nimport { findBySomeKey as mapFindBySomeKey } from \"@ixfx/core/maps\";\nimport { afterMatch, beforeMatch, stringSegmentsWholeToEnd, stringSegmentsWholeToFirst } from \"@ixfx/core/text\";\nimport { QueueMutable } from \"@ixfx/collections\";\n/**\n * Reactive stream of array of elements that match `query`.\n * @param query\n * @returns\n */\nexport function fromDomQuery(query) {\n    const elements = [...document.querySelectorAll(query)];\n    return Rx.From.object(elements);\n    /// TODO: MutationObserver to update element list\n}\n/**\n * Updates an element's `textContent` when the source value changes.\n * ```js\n * bindText(source, `#blah`);\n * ```\n * @param elOrQuery\n * @param source\n * @param bindOpts\n */\nexport const bindText = (source, elOrQuery, bindOpts = {}) => {\n    return bindElement(source, elOrQuery, { ...bindOpts, elField: `textContent` });\n};\n/**\n * Updates an element's `value` (as well as the 'value' attribute) when the source value changes.s\n * @param source\n * @param elOrQuery\n * @param bindOpts\n * @returns\n */\nexport const bindValueText = (source, elOrQuery, bindOpts = {}) => {\n    return bindElement(source, elOrQuery, { ...bindOpts, elField: `value`, attribName: `value` });\n};\n/**\n * Updates an element's `valueAsNumber` (as well as the 'value' attribute) when the source value changes.\n * ```js\n * // Create a reactive number, with a default value of 10\n * const r1 = Rx.From.number(10);\n * // Bind reactive to HTML input element with id 'inputRange'\n * const b1 = Rx.Dom.bindValueRange(r1,`#inputRange`);\n *\n * // Demo: Change the reactive value every second\n * // ...changing the reactive in turn updates the HTML\n * setInterval(() => {\n *  r1.set(Math.floor(Math.random()*100));\n * }, 1000);\n * ```\n * @param source\n * @param elOrQuery\n * @param bindOpts\n * @returns\n */\n// export const bindValueRange = (source: Rx.Reactive<number>, elOrQuery: string | HTMLInputElement | null, bindOpts: Partial<Rx.DomBindInputOptions<number, number>> = {}) => {\n//   const el = validateElement(elOrQuery, `range`);\n//   const b = bindElement<number, number>(source, el, { ...bindOpts, elField: `valueAsNumber`, attribName: `value` });\n//   const twoway = bindOpts.twoway ?? false;\n//   const transformFromInput = bindOpts.transformFromInput ?? ((value) => {\n//     if (typeof value === `number`) return value;\n//     return Number.parseFloat(value);\n//   });\n//   const input = Rx.From.domValueAsNumber(el);\n//   return setupInput(b, input, source, twoway, transformFromInput);\n// }\n// export const bindValueColour = (source: Rx.Reactive<Colour.Colourish>, elOrQuery: string | HTMLInputElement | null, bindOpts: Partial<Rx.DomBindInputOptions<Colour.Colourish, string>> = {}) => {\n//   const el = validateElement(elOrQuery, `color`);\n//   const b = bindElement<Colour.Colourish, string>(source, el, {\n//     ...bindOpts,\n//     elField: `value`,\n//     attribName: `value`,\n//     transform(input) {\n//       console.log(`transform from: ${ JSON.stringify(input) } to hex`);\n//       const c = Colour.resolve(input);\n//       return c.to(`srgb`).toString({ format: `hex`, collapse: false });\n//     },\n//   });\n//   const twoway = bindOpts.twoway ?? false;\n//   const transformFromInput = bindOpts.transformFromInput ?? ((value) => {\n//     const x = Colour.toHsl(value);\n//     console.log(`transformFromInput: ${ value } x: ${ JSON.stringify(x) }`);\n//     return x;\n//   });\n//   const input = Rx.From.domValue<Colour.Hsl>(el, {\n//     domToValue: transformFromInput\n//   });\n//   return setupInput(b, input, source, twoway, transformFromInput);\n// }\nconst setupInput = (b, input, source, twoway, transformFromInput) => {\n    input.onValue(value => {\n        const v = transformFromInput(value);\n        if (twoway && Rx.isWritable(source)) {\n            source.set(v);\n        }\n    });\n    const dispose = () => {\n        input.dispose(`bindInput twoway dispose`);\n        b.remove(false);\n    };\n    return { ...b, dispose, input };\n};\nconst validateElement = (elOrQuery, type) => {\n    const el = resolveEl(elOrQuery);\n    if (el.nodeName !== `INPUT`)\n        throw new Error(`HTML INPUT element expected. Got: ${el.nodeName}`);\n    if (type !== undefined && el.type !== type)\n        throw new Error(`HTML INPUT element expected with type 'range'. Got: ${el.type}`);\n    return el;\n};\n/**\n * Updates an element's `innerHTML` when the source value changes\n * ```js\n * bindHtml(source, `#blah`);\n * ```\n *\n * Uses {@link bindElement}, with `{elField:'innerHTML'}` as the options.\n * @param elOrQuery\n * @param source\n * @param bindOpts\n * @returns\n */\nexport const bindHtml = (source, elOrQuery, bindOpts = {}) => {\n    return bindElement(source, elOrQuery, { ...bindOpts, elField: `innerHTML` });\n};\n/**\n * Shortcut to bind to an elements attribute\n * @param elOrQuery\n * @param source\n * @param attribute\n * @param bindOpts\n * @returns\n */\n// export const bindAttribute = <V>(elOrQuery: string | HTMLElement, source: Rx.Reactive<V>, attribute: string, bindOpts: Partial<DomBindOptions<V>> = {}) => {\n//   return bind(elOrQuery, source, { ...bindOpts, attribName: attribute });\n// }\n/**\n * Shortcut to bind to a CSS variable\n * @param elOrQuery\n * @param source\n * @param cssVariable\n * @param bindOpts\n * @returns\n */\n// export const bindCssVariable = <V>(elOrQuery: string | HTMLElement, source: Rx.Reactive<V>, cssVariable: string, bindOpts: Partial<DomBindOptions<V>> = {}) => {\n//   return bind(elOrQuery, source, { ...bindOpts, cssVariable: cssVariable });\n// }\n/**\n * Creates a new HTML element, calling {@link bind} on it to update when `source` emits new values.\n *\n *\n * ```js\n * // Set textContent of a SPAN with values from `source`\n * create(source, { tagName: `span`, parentEl: document.body })\n * ```\n *\n * If `parentEl` is not given in the options, the created element needs to be manually added\n * ```js\n * const b = create(source);\n * someEl.append(b.el); // Append manually\n * ```\n *\n * ```\n * // Set 'title' attribute based on values from `source`\n * create(source, { parentEl: document.body, attribName: `title` })\n * ```\n * @param source\n * @param options\n * @returns\n */\n// export const create = <V>(source: Rx.Reactive<V>, options: Partial<DomCreateOptions> & Partial<DomBindOptions<V>> = {}): PipeDomBinding => {\n//   const nodeType = options.tagName ?? `DIV`;\n//   const el = document.createElement(nodeType);\n//   const b = bind(el, source, options);\n//   if (options.parentEl) {\n//     const parentElementOrQuery = resolveEl(options.parentEl);\n//     if (parentElementOrQuery === undefined) throw new Error(`Parent element could not be resolved`);\n//     parentElementOrQuery.append(el);\n//   }\n//   return b;\n// }\n/**\n * Update a DOM element's field, attribute or CSS variable when `source` produces a value.\n *\n * ```js\n * // Access via DOM query. Binds to 'textContent' by default\n * bind(readableSource, `#someEl`);\n *\n * // Set innerHTML instead\n * bind(readableSource, someEl, { elField: `innerHTML` });\n *\n * // An attribute\n * bind(readableSource, someEl, { attribName: `width` });\n *\n * // A css variable ('--' optiona)\n * bind(readableSource, someEl, { cssVariable: `hue` });\n *\n * // Pluck a particular field from source data.\n * // Ie someEl.textContent = value.colour\n * bind(readableSource, someEl, { sourceField: `colour` });\n *\n * // Transform value before setting it to field\n * bind(readableSource, someEl, {\n *  field: `innerHTML`,\n *  transform: (v) => `Colour: ${v.colour}`\n * })\n * ```\n *\n * If `source` has an initial value, this is used when first bound.\n *\n * Returns {@link PipeDomBinding} to control binding:\n * ```js\n * const bind = bind(source, `#someEl`);\n * bind.remove();     // Unbind\n * bind.remove(true); // Unbind and remove HTML element\n * ```\n *\n * If several fields need to be updated based on a new value, consider using {@link bindUpdate} instead.\n * @param elOrQuery Element to update to, or query string such as '#someid'\n * @param source Source of data\n * @param binds Bindings\n */\nexport const bindElement = (source, elOrQuery, ...binds) => {\n    if (elOrQuery === null)\n        throw new Error(`Param 'elOrQuery' is null`);\n    if (elOrQuery === undefined)\n        throw new Error(`Param 'elOrQuery' is undefined`);\n    const el = resolveEl(elOrQuery);\n    let b = [];\n    if (binds.length === 0) {\n        b.push({ elField: `textContent` });\n    }\n    else {\n        b = [...binds];\n    }\n    const bb = b.map(bind => {\n        if (`element` in bind)\n            return bind;\n        return { ...bind, element: el };\n    });\n    return bind(source, ...bb);\n};\nconst resolveBindUpdater = (bind, element) => {\n    const b = resolveBindUpdaterBase(bind);\n    return (value) => {\n        b(value, element);\n    };\n};\nconst resolveBindUpdaterBase = (bind) => {\n    if (bind.elField !== undefined || (bind.cssVariable === undefined && bind.attribName === undefined && bind.cssProperty === undefined && bind.textContent === undefined && bind.htmlContent === undefined)) {\n        const field = bind.elField ?? `textContent`;\n        return (v, element) => {\n            element[field] = v;\n        };\n    }\n    if (bind.attribName !== undefined) {\n        const attrib = bind.attribName;\n        return (v, element) => {\n            element.setAttribute(attrib, v);\n        };\n    }\n    if (bind.textContent) {\n        return (v, element) => {\n            element.textContent = v;\n        };\n    }\n    if (bind.htmlContent) {\n        return (v, element) => {\n            element.innerHTML = v;\n        };\n    }\n    if (bind.cssVariable !== undefined) {\n        let css = bind.cssVariable;\n        if (!css.startsWith(`--`))\n            css = `--` + css;\n        return (v, element) => {\n            element.style.setProperty(css, v);\n        };\n    }\n    if (bind.cssProperty !== undefined) {\n        return (v, element) => {\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            element.style[bind.cssProperty] = v;\n        };\n    }\n    return (_, _element) => {\n        /** no-op */\n    };\n};\nconst resolveTransform = (bind) => {\n    if (!bind.transform && !bind.transformValue)\n        return;\n    if (bind.transformValue) {\n        if (bind.sourceField === undefined)\n            throw new Error(`Expects 'sourceField' to be set when 'transformValue' is set`);\n        return (value) => {\n            const fieldValue = value[bind.sourceField];\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            return bind.transformValue(fieldValue);\n        };\n    }\n    else if (bind.transform) {\n        if (bind.sourceField !== undefined)\n            throw new Error(`If 'transform' is set, 'sourceField' is ignored`);\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        return (value) => bind.transform(value);\n    }\n};\n/**\n * Binds `source` to one or more element(s). One or more bindings for the same source\n * can be provided.\n *\n * ```js\n * bind(source,\n *  // Binds .name field of source values to textContent of #some-element\n *  { query: `#some-element`, sourceField: `name` },\n *  { query: `section`, }\n * );\n * ```\n *\n * Can update\n * * CSS variables\n * * CSS styles\n * * textContent / innerHTML\n * * HTML DOM attributes and object fields\n *\n * Can use a particular field on source values, or use the whole value. These can\n * pass through `transformValue` or `transform` respectively.\n *\n * Returns a function to unbind from source and optionally remove HTML element\n * ```js\n * const unbind = bind( . . . );\n * unbind();     // Unbind\n * unbind(true); // Unbind and remove HTML element(s)\n * ```\n * @param source\n * @param bindsUnresolvedElements\n * @returns\n */\nexport const bind = (source, ...bindsUnresolvedElements) => {\n    const binds = bindsUnresolvedElements.map(bind => {\n        if (bind.element && bind.element !== undefined)\n            return bind;\n        if (bind.query)\n            return {\n                ...bind,\n                element: resolveEl(bind.query)\n            };\n        throw new Error(`Unable to resolve element. Missing 'element' or 'query' values on bind. ${JSON.stringify(bind)}`);\n    });\n    const bindsResolved = binds.map(bind => ({\n        update: resolveBindUpdater(bind, bind.element),\n        transformer: resolveTransform(bind),\n        sourceField: bind.sourceField\n    }));\n    const update = (value) => {\n        for (const bind of bindsResolved) {\n            if (bind.transformer) {\n                bind.update(bind.transformer(value));\n            }\n            else {\n                const v = (bind.sourceField) ? value[bind.sourceField] : value;\n                if (typeof v === `object`) {\n                    if (bind.sourceField) {\n                        bind.update(JSON.stringify(v));\n                    }\n                    else {\n                        bind.update(JSON.stringify(v));\n                    }\n                }\n                else\n                    bind.update(v);\n            }\n        }\n    };\n    const unsub = source.on(message => {\n        if (Rx.messageHasValue(message)) {\n            update(message.value);\n        }\n        else if (Rx.messageIsSignal(message)) {\n            console.warn(message);\n        }\n    });\n    if (Rx.hasLast(source)) {\n        update(source.last());\n    }\n    return {\n        remove: (removeElements) => {\n            unsub();\n            if (removeElements) {\n                for (const bind of binds) {\n                    bind.element.remove();\n                }\n            }\n        }\n    };\n};\n/**\n * Calls `updater` whenever `source` produces a value. Useful when several fields from a value\n * are needed to update an element.\n * ```js\n * bindUpdate(source, `#someEl`, (v, el) => {\n *  el.setAttribute(`width`, v.width);\n *  el.setAttribute(`height`, v.height);\n * });\n * ```\n *\n * Returns a {@link PipeDomBinding} to manage binding\n * ```js\n * const b = bindUpdate(...);\n * b.remove();     // Disconnect binding\n * b.remove(true); // Disconnect binding and remove element\n * b.el;           // HTML element\n * ```\n * @param elOrQuery\n * @param source\n * @param updater\n * @returns\n */\nexport const bindUpdate = (source, elOrQuery, updater) => {\n    const el = resolveEl(elOrQuery);\n    const update = (value) => {\n        updater(value, el);\n    };\n    const unsub = source.on(message => {\n        if (Rx.messageHasValue(message)) {\n            console.log(message);\n            update(message.value);\n        }\n        else {\n            console.warn(message);\n        }\n    });\n    if (Rx.hasLast(source)) {\n        update(source.last());\n    }\n    return {\n        remove: (removeElement) => {\n            unsub();\n            if (removeElement) {\n                el.remove();\n            }\n        }\n    };\n};\n/**\n * Updates a HTML element based on diffs on an object.\n * ```js\n * // Wrap an object\n * const o = Rx.object({ name: `Jane`, ticks: 0 });\n * const b = bindDiffUpdate(`#test`, o, (diffs, el) => {\n *  // el = reference to #test\n * // diff = Array of Changes,\n * //  eg [ { path: `ticks`, value: 797, previous: 0 } ]\n *  for (const diff of diffs) {\n *    if (diff.path === `ticks`) el.textContent = `${diff.previous} -> ${diff.value}`\n *  }\n * })\n *\n * // Eg. update field\n * o.updateField(`ticks`, Math.floor(Math.random()*1000));\n * ```\n *\n * If `initial` is provided as an option, this will be called if `source` has an initial value. Without this, the DOM won't be updated until the first data\n * update happens.\n * ```js\n * bindDiffUpdate(el, source, updater, {\n *  initial: (v, el) => {\n *    el.innerHTML = v.name;\n *  }\n * })\n * ```\n * @param elOrQuery\n * @param source\n * @param updater\n * @param opts\n * @returns\n */\nexport const bindDiffUpdate = (source, elOrQuery, updater, opts = {}) => {\n    if (elOrQuery === null)\n        throw new Error(`Param 'elOrQuery' is null`);\n    if (elOrQuery === undefined)\n        throw new Error(`Param 'elOrQuery' is undefined`);\n    const el = resolveEl(elOrQuery);\n    //const binds = opts.binds;\n    const update = (value) => {\n        updater(value, el);\n    };\n    const unsub = source.onDiff(value => {\n        update(value);\n    });\n    const init = () => {\n        if (Rx.hasLast(source) && opts.initial)\n            opts.initial(source.last(), el);\n    };\n    init();\n    return {\n        refresh: () => {\n            init();\n        },\n        remove: (removeElement) => {\n            unsub();\n            if (removeElement) {\n                el.remove();\n            }\n        }\n    };\n};\n/**\n * Creates a new HTML element and calls `bindUpdate` so values from `source` can be used\n * to update it.\n *\n *\n * ```js\n * // Creates a span, adding it to <body>\n * const b = createUpdate(dataSource, (value, el) => {\n *  el.width = value.width;\n *  el.height = value.height;\n * }, {\n *  tagName: `SPAN`,\n *  parentEl: document.body\n * })\n * ```\n * @param source\n * @param updater\n * @param options\n * @returns\n */\n// export const createUpdate = <V>(source: Rx.Reactive<V>, updater: (v: V, el: HTMLElement) => void, options: Partial<DomCreateOptions> = {}): PipeDomBinding => {\n//   const tag = options.tagName ?? `DIV`;\n//   const el = document.createElement(tag);\n//   if (options.parentEl) {\n//     const parent = resolveEl(options.parentEl);\n//     parent.append(el);\n//   }\n//   const b = bindUpdate(source, el, updater);\n//   return b;\n// }\n/**\n * Creates, updates & deletes elements based on pathed values from a reactive.\n *\n * This means that elements are only manipulated if its associated data changes,\n * and elements are not modified if there's no need to.\n * @param source\n * @param options\n */\nexport const elements = (source, options) => {\n    const containerEl = options.container ? resolveEl(options.container) : document.body;\n    const defaultTag = options.defaultTag ?? `div`;\n    const elByField = new Map();\n    const binds = new Map();\n    for (const [key, value] of Object.entries(options.binds ?? {})) {\n        const tagName = value.tagName ?? defaultTag;\n        //console.log(`key: ${ key }`);\n        binds.set(key, {\n            ...value,\n            update: resolveBindUpdaterBase(value),\n            transform: resolveTransform(value),\n            tagName,\n            path: key\n        });\n    }\n    const findBind = (path) => {\n        const bind = mapFindBySomeKey(binds, stringSegmentsWholeToEnd(path));\n        if (bind !== undefined)\n            return bind;\n        if (!path.includes(`.`))\n            return binds.get(`_root`);\n    };\n    function* ancestorBinds(path) {\n        for (const p of stringSegmentsWholeToFirst(path)) {\n            //console.log(` ancestorBinds path: ${ path } segment: ${ p }`)\n            if (binds.has(p)) {\n                //console.log(`  bind: ${ p } found: ${ JSON.stringify(binds.get(p)) }`);\n                yield binds.get(p);\n            }\n            else {\n                //console.log(` bind: ${ p } not found`);\n            }\n        }\n        if (binds.has(`_root`) && path.includes(`.`))\n            yield binds.get(`_root`);\n    }\n    const create = (path, value) => {\n        const rootedPath = getRootedPath(path);\n        console.log(`Rx.Dom.elements.create: ${path} rooted: ${rootedPath} value: ${JSON.stringify(value)}`);\n        // Create\n        const bind = findBind(getRootedPath(path));\n        let tagName = defaultTag;\n        if (bind?.tagName)\n            tagName = bind.tagName;\n        const el = document.createElement(tagName);\n        el.setAttribute(`data-path`, path);\n        update(path, el, value);\n        let parentForEl;\n        for (const b of ancestorBinds(rootedPath)) {\n            //console.log(`  path: ${ rootedPath } b: ${ JSON.stringify(b) }`);\n            if (b?.nestChildren) {\n                // Get root of path\n                const absoluteRoot = beforeMatch(path, `.`);\n                const findBy = b.path.replace(`_root`, absoluteRoot);\n                parentForEl = elByField.get(findBy);\n                if (parentForEl === undefined) {\n                    //console.log(`    could not find parent. path: ${ path } b.path: ${ b.path } findBy: ${ findBy }`);\n                }\n                else {\n                    //console.log(`    found parent`);\n                    break;\n                }\n            }\n        }\n        (parentForEl ?? containerEl).append(el);\n        elByField.set(path, el);\n        console.log(`Added el: ${path}`);\n    };\n    const update = (path, el, value) => {\n        console.log(`Rx.dom.update path: ${path} value:`, value);\n        const bind = findBind(getRootedPath(path));\n        if (bind === undefined) {\n            //console.log(`Rx.dom.update   no bind for ${ path }`)\n            if (typeof value === `object`)\n                value = JSON.stringify(value);\n            el.textContent = value;\n        }\n        else {\n            //console.log(`Rx.dom.update   got bind! ${ path } `);\n            if (bind.transform)\n                value = bind.transform(value);\n            bind.update(value, el);\n        }\n    };\n    const changes = (changes) => {\n        const queue = new QueueMutable({}, changes);\n        let d = queue.dequeue();\n        const seenPaths = new Set();\n        while (d !== undefined) {\n            //for (const d of changes) {\n            const path = d.path;\n            if (!(`previous` in d) || d.previous === undefined) {\n                // Create\n                console.log(`Rx.Dom.elements.changes no previous. path: ${path}`);\n                create(path, d.value);\n                const subdata = [...Pathed.getPathsAndData(d.value, false, Number.MAX_SAFE_INTEGER, path)];\n                console.log(subdata);\n                for (const dd of subdata) {\n                    if (!seenPaths.has(dd.path)) {\n                        queue.enqueue(dd);\n                        seenPaths.add(dd.path);\n                    }\n                }\n            }\n            else if (d.value === undefined) {\n                // Delete\n                const el = elByField.get(path);\n                if (el === undefined) {\n                    console.warn(`No element to delete? ${path} `);\n                }\n                else {\n                    console.log(`Rx.Dom.elements.changes delete ${path}`);\n                    el.remove();\n                }\n            }\n            else {\n                // Update\n                const el = elByField.get(path);\n                if (el === undefined) {\n                    console.warn(`Rx.Dom.elements.changes No element to update ? ${path} `);\n                    create(path, d.value);\n                }\n                else {\n                    //console.log(`Rx.Dom.elements.changes Updating ${ path } `, el);\n                    update(path, el, d.value);\n                }\n            }\n            d = queue.dequeue();\n        }\n    };\n    /**\n     * Source has changed\n     */\n    source.onDiff(value => {\n        //console.log(`Rx.Dom.elements diff ${ JSON.stringify(value) } `);\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n        changes(value);\n    });\n    // Source has an initial value, use that\n    if (Rx.hasLast(source)) {\n        const last = source.last();\n        // Get data of value as a set of paths and data\n        // but only at first level of depth, because changes() will probe\n        // deeper itself\n        changes([...Pathed.getPathsAndData(last, false, 1)]);\n    }\n};\n/**\n * Replaces the root portion of `path` with the magic keyword `_root`\n * @param path\n * @returns\n */\nconst getRootedPath = (path) => {\n    const after = afterMatch(path, `.`);\n    return after === path ? `_root` : `_root.` + after;\n};\nexport function win() {\n    const generateRect = () => ({ width: window.innerWidth, height: window.innerHeight });\n    const size = RxFrom.event(window, `resize`, {\n        lazy: `very`,\n        transform: () => generateRect(),\n    });\n    const pointer = RxFrom.event(window, `pointermove`, {\n        lazy: `very`,\n        transform: (args) => {\n            if (args === undefined)\n                return { x: 0, y: 0 };\n            const pe = args;\n            return { x: pe.x, y: pe.y };\n        }\n    });\n    const dispose = (reason = `Reactive.win.dispose`) => {\n        size.dispose(reason);\n        pointer.dispose(reason);\n    };\n    return { dispose, size, pointer };\n}\n","export * from './browser-resize.js';\nexport * from './browser-theme-change.js';\nexport * from './colour.js';\nexport * from './dom-source.js';\nexport * from './dom.js';\n","export * as RxUi from './rx/index.js';\n"],"mappings":"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"}