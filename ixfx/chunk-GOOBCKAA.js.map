{"version":3,"sources":["../src/visual/svg/index.ts","../src/visual/svg/Apply.ts","../src/visual/svg/Bounds.ts","../src/visual/svg/Create.ts","../src/visual/svg/Elements.ts","../src/visual/svg/Stroke.ts","../src/visual/svg/Markers.ts","../src/visual/svg/Path.ts","../src/visual/svg/Geometry.ts","../src/visual/svg/Remove.ts","../src/visual/svg/Helper.ts"],"sourcesContent":["export * from './Apply.js'\nexport * from './Bounds.js'\nexport * from './Create.js'\nexport * as Elements from './Elements.js';\nexport * from './Geometry.js';\nexport * from './Helper.js';\nexport * from './Markers.js';\nexport * from './Path.js'\nexport * from './Remove.js';\nexport * from './Stroke.js'\nexport type * from './Types.js';\n","import type { DrawingOpts } from \"./Types.js\";\n\n/**\n * Applies drawing options to given SVG element.\n * Applies: fillStyle\n * @param elem Element\n * @param opts Drawing options\n */\nexport const applyOpts = (elem: SVGElement, opts: DrawingOpts) => {\n  if (opts.fillStyle) elem.setAttributeNS(null, `fill`, opts.fillStyle);\n  if (opts.opacity) {\n    elem.setAttributeNS(null, `opacity`, opts.opacity.toString());\n  }\n\n};","import type { Rect } from '../../geometry/rect/index.js';\n/**\n * Get the bounds of an SVG element (determined by its width/height attribs)\n * @param svg\n * @returns\n */\nexport const getBounds = (svg: SVGElement): Rect => {\n  const w = svg.getAttributeNS(null, `width`);\n  const width = w === null ? 0 : Number.parseFloat(w);\n  const h = svg.getAttributeNS(null, `height`);\n  const height = h === null ? 0 : Number.parseFloat(h);\n  return { width, height };\n};\n\n/**\n * Set the bounds of an element, using its width/height attribs.\n * @param svg\n * @param bounds\n */\nexport const setBounds = (svg: SVGElement, bounds: Rect): void => {\n  svg.setAttributeNS(null, `width`, bounds.width.toString());\n  svg.setAttributeNS(null, `height`, bounds.height.toString());\n};","/**\n * Creates an element of `type` and with `id` (if specified)\n * @param type Element type, eg `circle`\n * @param id Optional id to assign to element\n * @returns Element\n */\nexport const createEl = <V extends SVGElement>(\n  type: string,\n  id?: string\n): V => {\n  const m = document.createElementNS(`http://www.w3.org/2000/svg`, type) as V;\n  if (id) {\n    m.id = id;\n  }\n  return m;\n};\n\n\n/**\n * Creates and appends a SVG element.\n *\n * ```js\n * // Create a circle\n * const circleEl = createOrResolve(parentEl, `SVGCircleElement`);\n * ```\n *\n * If `queryOrExisting` is specified, it is used as a query to find an existing element. If\n * query starts with `#`, this will be set as the element id, if created.\n *\n * ```js\n * // Creates an element with id 'myCircle' if it doesn't exist\n * const circleEl = createOrResolve(parentEl, `SVGCircleElement`, `#myCircle`);\n * ```\n * @param parent Parent element\n * @param type Type of SVG element\n * @param queryOrExisting Query, eg `#id`\n * @returns\n */\nexport const createOrResolve = <V extends SVGElement>(\n  parent: SVGElement,\n  type: string,\n  queryOrExisting?: string | V,\n  suffix?: string\n): V => {\n  let existing = null;\n  if (queryOrExisting !== undefined) {\n    existing = typeof queryOrExisting === `string` ? parent.querySelector(queryOrExisting) : queryOrExisting;\n  }\n  if (existing === null) {\n    const p = document.createElementNS(`http://www.w3.org/2000/svg`, type) as V;\n    parent.append(p);\n    if (queryOrExisting && typeof queryOrExisting === `string` &&\n      queryOrExisting.startsWith(`#`)) {\n      p.id = suffix !== undefined && !queryOrExisting.endsWith(suffix) ? queryOrExisting.slice(1) + suffix : queryOrExisting.slice(1);\n    }\n    return p;\n  }\n  return existing as V;\n};","\nimport type { CirclePositioned } from '../../geometry/circle/CircleType.js';\nimport type { Point } from '../../geometry/point/PointType.js';\nimport type { Line } from '../../geometry/line/LineType.js';\n//import * as Lines from '../geometry/line/index.js';\nimport { fromNumbers as LinesFromNumbers } from '../../geometry/line/FromNumbers.js';\n//import * as Svg from './index.js';\n\nimport { getCssVariable } from '../colour/index.js';\nimport type { CircleDrawingOpts, LineDrawingOpts, PathDrawingOpts, TextDrawingOpts, TextPathDrawingOpts } from './Types.js';\nimport { applyOpts } from './Apply.js';\nimport { applyStrokeOpts } from './Stroke.js';\nimport { createEl, createOrResolve } from './Create.js';\nimport { applyPathOpts } from './Path.js';\nimport type { PolarRay } from 'src/geometry/polar/Types.js';\nimport { toCartesian as polarRayToCartesian } from 'src/geometry/polar/Ray.js';\n//import {Palette} from \".\";\n\nconst numberOrPercentage = (v: number): string => {\n  if (v >= 0 && v <= 1) return `${ v * 100 }%`;\n  return v.toString();\n};\n\n/**\n * Creates and adds an SVG path element\n * @example\n * ```js\n * const paths = [\n *  `M300,200`,\n *  `a25,25 -30 0,1 50, -25 l 50,-25`\n * ]\n * const pathEl = path(paths, parentEl);\n * ```\n * @param svgOrArray Path syntax, or array of paths. Can be empty if path data will be added later\n * @param parent SVG parent element\n * @param opts Options Drawing options\n * @returns\n */\nexport const path = (\n  svgOrArray: string | ReadonlyArray<string>,\n  parent: SVGElement,\n  opts?: PathDrawingOpts,\n  queryOrExisting?: string | SVGPathElement\n): SVGPathElement => {\n  const elem = createOrResolve<SVGPathElement>(\n    parent,\n    `path`,\n    queryOrExisting\n  );\n  const svg =\n    typeof svgOrArray === `string` ? svgOrArray : svgOrArray.join(`\\n`);\n\n  elem.setAttributeNS(null, `d`, svg);\n  parent.append(elem);\n  return pathUpdate(elem, opts);\n};\n\nexport const pathUpdate = (\n  elem: SVGPathElement,\n  opts?: PathDrawingOpts\n) => {\n  if (opts) applyOpts(elem, opts);\n  if (opts) applyStrokeOpts(elem, opts);\n  return elem;\n};\n\n/**\n * Updates an existing `SVGCircleElement` with potentially updated circle data and drawing options\n * @param elem Element\n * @param circle Circle\n * @param opts Drawing options\n * @returns SVGCircleElement\n */\nexport const circleUpdate = (\n  elem: SVGCircleElement,\n  circle: CirclePositioned,\n  opts?: CircleDrawingOpts\n) => {\n  elem.setAttributeNS(null, `cx`, circle.x.toString());\n  elem.setAttributeNS(null, `cy`, circle.y.toString());\n  elem.setAttributeNS(null, `r`, circle.radius.toString());\n  if (opts) applyOpts(elem, opts);\n  if (opts) applyStrokeOpts(elem, opts);\n\n  return elem;\n};\n\n/**\n * Creates or reuses a `SVGCircleElement`.\n *\n * To update an existing element, use `circleUpdate`\n * @param circle\n * @param parent\n * @param opts\n * @param queryOrExisting\n * @returns\n */\nexport const circle = (\n  circle: CirclePositioned,\n  parent: SVGElement,\n  opts?: CircleDrawingOpts,\n  queryOrExisting?: string | SVGCircleElement\n): SVGCircleElement => {\n  const p = createOrResolve<SVGCircleElement>(\n    parent,\n    `circle`,\n    queryOrExisting\n  );\n  return circleUpdate(p, circle, opts);\n};\n\n/**\n * Creates or resuses a `SVGGElement` (group)\n *\n * To update an existing elemnet, use `groupUpdate`\n * @param children\n * @param parent\n * @param queryOrExisting\n * @returns\n */\nexport const group = (\n  children: ReadonlyArray<SVGElement>,\n  parent: SVGElement,\n  queryOrExisting?: string | SVGGElement\n): SVGGElement => {\n  const p = createOrResolve<SVGGElement>(parent, `g`, queryOrExisting);\n  return groupUpdate(p, children);\n};\n\nexport const groupUpdate = (\n  elem: SVGGElement,\n  children: ReadonlyArray<SVGElement>\n) => {\n  for (const c of children) {\n    if (c.parentNode !== elem) {\n      elem.append(c);\n    }\n  }\n\n  return elem;\n};\n\n/**\n * Creates or reuses a SVGLineElement.\n *\n * @param line\n * @param parent\n * @param opts\n * @param queryOrExisting\n * @returns\n */\nexport const line = (\n  line: Line,\n  parent: SVGElement,\n  opts?: LineDrawingOpts,\n  queryOrExisting?: string | SVGLineElement\n): SVGLineElement => {\n  const lineEl = createOrResolve<SVGLineElement>(\n    parent,\n    `line`,\n    queryOrExisting\n  );\n  return lineUpdate(lineEl, line, opts);\n};\n\n/**\n * Updates a SVGLineElement instance with potentially changed line and drawing data\n * @param lineEl\n * @param line\n * @param opts\n * @returns\n */\nexport const lineUpdate = (\n  lineEl: SVGLineElement,\n  line: Line,\n  opts?: LineDrawingOpts\n) => {\n  lineEl.setAttributeNS(null, `x1`, line.a.x.toString());\n  lineEl.setAttributeNS(null, `y1`, line.a.y.toString());\n  lineEl.setAttributeNS(null, `x2`, line.b.x.toString());\n  lineEl.setAttributeNS(null, `y2`, line.b.y.toString());\n  if (opts) applyOpts(lineEl, opts);\n  if (opts) applyPathOpts(lineEl, opts);\n  if (opts) applyStrokeOpts(lineEl, opts);\n  return lineEl;\n};\n\nexport const polarRayUpdate = (lineEl: SVGLineElement, ray: PolarRay, opts?: LineDrawingOpts) => {\n  const l = polarRayToCartesian(ray);\n  lineEl.setAttributeNS(null, `x1`, l.a.x.toString());\n  lineEl.setAttributeNS(null, `y1`, l.a.y.toString());\n  lineEl.setAttributeNS(null, `x2`, l.b.x.toString());\n  lineEl.setAttributeNS(null, `y2`, l.b.y.toString());\n  if (opts) applyOpts(lineEl, opts);\n  if (opts) applyPathOpts(lineEl, opts);\n  if (opts) applyStrokeOpts(lineEl, opts);\n  return lineEl;\n}\n\n/**\n * Updates an existing SVGTextPathElement instance with text and drawing options\n * @param el\n * @param text\n * @param opts\n * @returns\n */\nexport const textPathUpdate = (\n  el: SVGTextPathElement,\n  text?: string,\n  opts?: TextPathDrawingOpts\n) => {\n  if (opts?.method) el.setAttributeNS(null, `method`, opts.method);\n  if (opts?.side) el.setAttributeNS(null, `side`, opts.side);\n  if (opts?.spacing) el.setAttributeNS(null, `spacing`, opts.spacing);\n  if (opts?.startOffset) {\n    el.setAttributeNS(null, `startOffset`, numberOrPercentage(opts.startOffset));\n  }\n  if (opts?.textLength) {\n    el.setAttributeNS(null, `textLength`, numberOrPercentage(opts.textLength));\n  }\n\n  if (text) {\n    el.textContent = text;\n  }\n  if (opts) applyOpts(el, opts);\n  if (opts) applyStrokeOpts(el, opts);\n  return el;\n};\n\n/**\n * Creates or reuses a SVGTextPathElement.\n * @param pathReference\n * @param text\n * @param parent\n * @param opts\n * @param textQueryOrExisting\n * @param pathQueryOrExisting\n * @returns\n */\nexport const textPath = (\n  pathReference: string,\n  text: string,\n  parent: SVGElement,\n  opts?: TextPathDrawingOpts,\n  textQueryOrExisting?: string | SVGTextElement,\n  pathQueryOrExisting?: string | SVGTextPathElement\n): SVGTextPathElement => {\n  const textEl = createOrResolve<SVGTextElement>(\n    parent,\n    `text`,\n    textQueryOrExisting, `-text`\n  );\n  // Update text properties, but don't pass in position or text\n  textUpdate(textEl, undefined, undefined, opts);\n\n  const p = createOrResolve<SVGTextPathElement>(\n    textEl,\n    `textPath`,\n    pathQueryOrExisting\n  );\n  p.setAttributeNS(null, `href`, pathReference);\n  return textPathUpdate(p, text, opts);\n};\n\n/**\n * Updates an existing SVGTextElement instance with position, text and drawing options\n * @param el\n * @param pos\n * @param text\n * @param opts\n * @returns\n */\nexport const textUpdate = (\n  el: SVGTextElement,\n  pos?: Point,\n  text?: string,\n  opts?: TextDrawingOpts\n) => {\n  if (pos) {\n    el.setAttributeNS(null, `x`, pos.x.toString());\n    el.setAttributeNS(null, `y`, pos.y.toString());\n  }\n  if (text) {\n    el.textContent = text;\n  }\n\n  if (opts) {\n    applyOpts(el, opts);\n    if (opts) applyStrokeOpts(el, opts);\n\n    if (opts.anchor) el.setAttributeNS(null, `text-anchor`, opts.anchor);\n    if (opts.align) el.setAttributeNS(null, `alignment-baseline`, opts.align);\n\n    const userSelect = opts.userSelect ?? true;\n\n    if (!userSelect) {\n      el.style.userSelect = `none`;\n      el.style.webkitUserSelect = `none`;\n    }\n  }\n  return el;\n};\n\n/**\n * Creates or reuses a SVGTextElement\n * @param pos Position of text\n * @param text Text\n * @param parent\n * @param opts\n * @param queryOrExisting\n * @returns\n */\nexport const text = (\n  text: string,\n  parent: SVGElement,\n  pos?: Point,\n  opts?: TextDrawingOpts,\n  queryOrExisting?: string | SVGTextElement\n): SVGTextElement => {\n  const p = createOrResolve<SVGTextElement>(\n    parent,\n    `text`,\n    queryOrExisting\n  );\n  return textUpdate(p, pos, text, opts);\n};\n\n/**\n * Creates a square grid based at a center point, with cells having `spacing` height and width.\n *\n * It fits in as many cells as it can within `width` and `height`.\n *\n * Returns a SVG group, consisting of horizontal and vertical lines\n * @param parent Parent element\n * @param center Center point of grid\n * @param spacing Width/height of cells\n * @param width How wide grid should be\n * @param height How high grid should be\n * @param opts\n */\nexport const grid = (\n  parent: SVGElement,\n  center: Point,\n  spacing: number,\n  width: number,\n  height: number,\n  opts: LineDrawingOpts = {}\n) => {\n  if (!opts.strokeStyle) {\n    opts = { ...opts, strokeStyle: getCssVariable(`bg-dim`, `silver`) };\n  }\n  if (!opts.strokeWidth) opts = { ...opts, strokeWidth: 1 };\n\n  const g = createEl<SVGGElement>(`g`);\n  applyOpts(g, opts);\n  applyPathOpts(g, opts);\n  applyStrokeOpts(g, opts);\n\n  // Horizontals\n  let y = 0;\n  while (y < height) {\n    const horiz = LinesFromNumbers(0, y, width, y);\n    line(horiz, g);\n    y += spacing;\n  }\n\n  // Verticals\n  let x = 0;\n  while (x < width) {\n    const vert = LinesFromNumbers(x, 0, x, height);\n    line(vert, g);\n    x += spacing;\n  }\n  parent.append(g);\n  return g;\n};\n","import type { StrokeOpts } from \"./Types.js\";\n\n/**\n * Applies drawing options to given SVG element.\n * Applies: strokeStyle, strokeWidth, strokeDash, strokeLineCap\n * @param elem Element\n * @param opts\n */\nexport const applyStrokeOpts = (elem: SVGElement, opts: StrokeOpts) => {\n  if (opts.strokeStyle) elem.setAttributeNS(null, `stroke`, opts.strokeStyle);\n  if (opts.strokeWidth) {\n    elem.setAttributeNS(null, `stroke-width`, opts.strokeWidth.toString());\n  }\n  if (opts.strokeDash) elem.setAttribute(`stroke-dasharray`, opts.strokeDash);\n  if (opts.strokeLineCap) {\n    elem.setAttribute(`stroke-linecap`, opts.strokeLineCap);\n  }\n};","import { applyOpts } from \"./Apply.js\";\nimport { createEl, createOrResolve } from \"./Create.js\";\nimport type { DrawingOpts, MarkerOpts } from \"./Types.js\";\n\nexport const createMarker = (\n  id: string,\n  opts: MarkerOpts,\n  childCreator?: () => SVGElement\n): SVGMarkerElement => {\n  const m = createEl<SVGMarkerElement>(`marker`, id);\n\n  if (opts.markerWidth) {\n    m.setAttribute(`markerWidth`, opts.markerWidth?.toString());\n  }\n  if (opts.markerHeight) {\n    m.setAttribute(`markerHeight`, opts.markerHeight?.toString());\n  }\n  if (opts.orient) m.setAttribute(`orient`, opts.orient.toString());\n  else m.setAttribute(`orient`, `auto-start-reverse`);\n\n  if (opts.viewBox) m.setAttribute(`viewBox`, opts.viewBox.toString());\n  if (opts.refX) m.setAttribute(`refX`, opts.refX.toString());\n  if (opts.refY) m.setAttribute(`refY`, opts.refY.toString());\n\n  if (childCreator) {\n    const c = childCreator();\n    m.appendChild(c);\n  }\n  return m;\n};\n\nexport const markerPrebuilt = (\n  elem: SVGElement | null,\n  opts: MarkerOpts,\n  _context: DrawingOpts\n): string => {\n  if (elem === null) return `(elem null)`;\n\n  const parent = elem.ownerSVGElement;\n  if (parent === null) throw new Error(`parent for elem is null`);\n  const defsEl = createOrResolve<SVGDefsElement>(parent, `defs`, `defs`);\n\n  //eslint-disable-next-line functional/no-let\n  let defEl = defsEl.querySelector(`#${ opts.id }`) as SVGElement | null;\n\n  if (defEl !== null) {\n    return `url(#${ opts.id })`;\n  }\n\n  if (opts.id === `triangle`) {\n    opts = { ...opts, strokeStyle: `transparent` };\n    if (!opts.markerHeight) opts = { ...opts, markerHeight: 6 };\n    if (!opts.markerWidth) opts = { ...opts, markerWidth: 6 };\n    if (!opts.refX) opts = { ...opts, refX: opts.markerWidth };\n    if (!opts.refY) opts = { ...opts, refY: opts.markerHeight };\n    if (!opts.fillStyle || opts.fillStyle === `none`) {\n      opts = { ...opts, fillStyle: `black` };\n    }\n    if (!opts.viewBox) opts = { ...opts, viewBox: `0 0 10 10` };\n\n    defEl = createMarker(opts.id, opts, () => {\n      const tri = createEl<SVGPathElement>(`path`);\n      tri.setAttribute(`d`, `M 0 0 L 10 5 L 0 10 z`);\n      if (opts) applyOpts(tri, opts);\n      return tri;\n    });\n  } else throw new Error(`Do not know how to make ${ opts.id }`);\n\n  //eslint-disable-next-line functional/immutable-data\n  defEl.id = opts.id;\n  defsEl.appendChild(defEl);\n\n  return `url(#${ opts.id })`;\n};\n","import type { DrawingOpts } from \"../Drawing.js\";\nimport { markerPrebuilt } from \"./Markers.js\";\nimport type { PathDrawingOpts } from \"./Types.js\";\n\n/**\n * Applies path drawing options to given element\n * Applies: markerEnd, markerStart, markerMid\n * @param elem Element (presumed path)\n * @param opts Options\n */\nexport const applyPathOpts = (elem: SVGElement, opts: PathDrawingOpts) => {\n  if (opts.markerEnd) {\n    elem.setAttribute(\n      `marker-end`,\n      markerPrebuilt(elem, opts.markerEnd, opts as DrawingOpts)\n    );\n  }\n  if (opts.markerStart) {\n    elem.setAttribute(\n      `marker-start`,\n      markerPrebuilt(elem, opts.markerStart, opts as DrawingOpts)\n    );\n  }\n  if (opts.markerMid) {\n    elem.setAttribute(\n      `marker-mid`,\n      markerPrebuilt(elem, opts.markerMid, opts as DrawingOpts)\n    );\n  }\n};","import type { PolarRay } from \"src/geometry/polar/Types.js\";\nimport type { Line } from \"../../geometry/line/LineType.js\";\nimport type { Point } from \"../../geometry/point/PointType.js\";\nimport { fromLine as polarRayFromLine } from \"../../geometry/polar/Ray.js\";\n\n/**\n * Returns a Line type from an SVGLineElement\n * @param el SVG Line Element\n * @returns \n */\nexport const lineFromSvgLine = (el: SVGLineElement): Line => {\n  if (!el) throw new Error(`Param 'el' is undefined`);\n  const a = { x: el.x1.baseVal.value, y: el.y1.baseVal.value };\n  const b = { x: el.x2.baseVal.value, y: el.y2.baseVal.value };\n  return { a, b }\n}\n\nexport const polarRayFromSvgLine = (el: SVGLineElement, origin: Point): PolarRay => {\n  const l = lineFromSvgLine(el);\n  return polarRayFromLine(l, origin);\n}","/**\n * Removes an SVG element from a parent\n * @param parent Parent\n * @param queryOrExisting Query or existing element \n * @returns \n */\nexport const remove = <V extends SVGElement>(\n  parent: SVGElement,\n  queryOrExisting: string | V\n) => {\n  if (typeof queryOrExisting === `string`) {\n    const elem = parent.querySelector(queryOrExisting);\n    if (elem === null) return;\n    elem.remove();\n  } else {\n    queryOrExisting.remove();\n  }\n};\n\n/**\n * Removes all children of `parent`, but not `parent` itself.\n * @param parent \n */\nexport const clear = (parent: SVGElement) => {\n  let c = parent.lastElementChild;\n  while (c) {\n    c.remove();\n    c = parent.lastElementChild;\n  }\n};","import type { Point } from '../../geometry/point/PointType.js';\nimport type { Line } from '../../geometry/line/LineType.js';\nimport type { CirclePositioned } from '../../geometry/circle/CircleType.js';\nimport type { CircleDrawingOpts, DrawingOpts, LineDrawingOpts, PathDrawingOpts, StrokeOpts, TextDrawingOpts } from './Types.js';\nimport { applyOpts } from './Apply.js';\nimport { applyStrokeOpts } from './Stroke.js';\nimport { remove } from './Remove.js';\nimport * as Elements from './Elements.js';\n\n/**\n * Helper to make SVG elements with a common parent.\n *\n * Create with {@link makeHelper}.\n */\nexport type SvgHelper = {\n  remove(queryOrExisting: string | SVGElement): void;\n  /**\n   * Creates a text element\n   * @param text Text\n   * @param pos Position\n   * @param opts Drawing options\n   * @param queryOrExisting DOM query to look up existing element, or the element instance\n   */\n  text(\n    text: string,\n    pos: Point,\n    opts?: TextDrawingOpts,\n    queryOrExisting?: string | SVGTextElement\n  ): SVGTextElement;\n  /**\n   * Creates text on a path\n   * @param pathReference Reference to path element\n   * @param text Text\n   * @param opts Drawing options\n   * @param textQueryOrExisting DOM query to look up existing element, or the element instance\n   * @param pathQueryOrExisting DOM query to look up existing element, or the element instance\n   */\n  textPath(\n    pathReference: string,\n    text: string,\n    opts?: TextDrawingOpts,\n    textQueryOrExisting?: string | SVGTextElement,\n    pathQueryOrExisting?: string | SVGTextPathElement\n  ): SVGTextPathElement;\n  /**\n   * Creates a line\n   * @param line Line\n   * @param opts Drawing options\n   * @param queryOrExisting DOM query to look up existing element, or the element instance\n   */\n  line(\n    line: Line,\n    opts?: LineDrawingOpts,\n    queryOrExisting?: string | SVGLineElement\n  ): SVGLineElement;\n  /**\n   * Creates a circle\n   * @param circle Circle\n   * @param opts Drawing options\n   * @param queryOrExisting DOM query to look up existing element, or the element instance\n   */\n  circle(\n    circle: CirclePositioned,\n    opts?: CircleDrawingOpts,\n    queryOrExisting?: string | SVGCircleElement\n  ): SVGCircleElement;\n  /**\n   * Creates a path\n   * @param svgString Path description, or empty string\n   * @param opts Drawing options\n   * @param queryOrExisting DOM query to look up existing element, or the element instance\n   */\n  path(\n    svgString: string | ReadonlyArray<string>,\n    opts?: PathDrawingOpts,\n    queryOrExisting?: string | SVGPathElement\n  ): SVGPathElement;\n  /**\n   * Creates a grid of horizontal and vertical lines inside of a group\n   * @param center Grid origin\n   * @param spacing Cell size\n   * @param width Width of grid\n   * @param height Height of grid\n   * @param opts Drawing options\n   */\n  grid(\n    center: Point,\n    spacing: number,\n    width: number,\n    height: number,\n    opts?: LineDrawingOpts\n  ): SVGGElement;\n  /**\n   * Returns an element if it exists in parent\n   * @param selectors Eg `#path`\n   */\n  query<V extends SVGElement>(selectors: string): V | null;\n  /**\n   * Gets/sets the width of the parent\n   */\n  get width(): number;\n  set width(width: number);\n  /**\n   * Gets the parent\n   */\n  get parent(): SVGElement;\n  /**\n   * Gets/sets the height of the parent\n   */\n  get height(): number;\n  set height(height: number);\n  /**\n   * Deletes all child elements\n   */\n  clear(): void;\n};\n\n/**\n * Creates a {@link SvgHelper} for the creating and management of SVG elements.\n * @param parent\n * @param parentOpts\n * @returns\n */\nexport const makeHelper = (\n  parent: SVGElement,\n  parentOpts?: DrawingOpts & StrokeOpts\n): SvgHelper => {\n  if (parentOpts) {\n    applyOpts(parent, parentOpts);\n    applyStrokeOpts(parent, parentOpts);\n  }\n\n  const o: SvgHelper = {\n    remove: (queryOrExisting: string | SVGElement) => { remove(parent, queryOrExisting); },\n    text: (\n      text: string,\n      pos: Point,\n      opts?: TextDrawingOpts,\n      queryOrExisting?: string | SVGTextElement\n    ) => Elements.text(text, parent, pos, opts, queryOrExisting),\n    textPath: (\n      pathReference: string,\n      text: string,\n      opts?: TextDrawingOpts,\n      textQueryOrExisting?: string | SVGTextElement,\n      pathQueryOrExisting?: string | SVGTextPathElement\n    ) => Elements.textPath(pathReference, text, parent, opts, textQueryOrExisting, pathQueryOrExisting),\n    line: (\n      line: Line,\n      opts?: LineDrawingOpts,\n      queryOrExisting?: string | SVGLineElement\n    ) => Elements.line(line, parent, opts, queryOrExisting),\n    circle: (\n      circle: CirclePositioned,\n      opts?: CircleDrawingOpts,\n      queryOrExisting?: string | SVGCircleElement\n    ) => Elements.circle(circle, parent, opts, queryOrExisting),\n    path: (\n      svgString: string | ReadonlyArray<string>,\n      opts?: PathDrawingOpts,\n      queryOrExisting?: string | SVGPathElement\n    ) => Elements.path(svgString, parent, opts, queryOrExisting),\n    grid: (\n      center: Point,\n      spacing: number,\n      width: number,\n      height: number,\n      opts?: LineDrawingOpts\n    ) => Elements.grid(parent, center, spacing, width, height, opts),\n    query: <V extends SVGElement>(selectors: string): V | null =>\n      parent.querySelector(selectors),\n    get width(): number {\n      const w = parent.getAttributeNS(null, `width`);\n      if (w === null) return 0;\n      return Number.parseFloat(w);\n    },\n    set width(width: number) {\n      parent.setAttributeNS(null, `width`, width.toString());\n    },\n    get parent(): SVGElement {\n      return parent;\n    },\n    get height(): number {\n      const w = parent.getAttributeNS(null, `height`);\n      if (w === null) return 0;\n      return Number.parseFloat(w);\n    },\n    set height(height: number) {\n      parent.setAttributeNS(null, `height`, height.toString());\n    },\n    clear: () => {\n      while (parent.firstChild) {\n        (parent.lastChild as HTMLElement).remove();\n      }\n    },\n  };\n  return o;\n};\n"],"mappings":"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","names":["circle","line","text","text","line","circle"]}