{"version":3,"file":"object-tracker-B7TL2DtX.js","names":["opts: TrackedValueOpts","reason: TrimReason","limit: number","p: Array<V> | Array<TimestampedObject<V>>"],"sources":["../../packages/core/src/trackers/object-tracker.ts"],"sourcesContent":["import type { TimestampedObject, TrackedValueOpts } from './tracked-value.js';\nimport { TrackerBase, type TrimReason } from './tracker-base.js';\n\n/**\n * A tracked value of type `V`.\n */\nexport abstract class ObjectTracker<V extends object, SeenResultType> extends TrackerBase<V, SeenResultType> {\n  values: Array<TimestampedObject<V>>;\n\n  constructor(opts: TrackedValueOpts = {}) {\n    super(opts);\n    this.values = [];\n  }\n\n  onTrimmed(reason: TrimReason) {\n    // no-op\n  }\n\n  /**\n   * Reduces size of value store to `limit`. \n   * Returns number of remaining items\n   * @param limit\n   */\n  trimStore(limit: number): number {\n    if (limit >= this.values.length) return this.values.length;\n    // Index 0 will be the oldest\n    this.values = this.values.slice(-limit);\n    return this.values.length;\n  }\n\n  /**\n   * Allows sub-classes to be notified when a reset happens\n   * @ignore\n   */\n  onReset() {\n    this.values = [];\n  }\n\n  /**\n   * Tracks a value\n   * @ignore\n   */\n  filterData(p: Array<V> | Array<TimestampedObject<V>>): Array<TimestampedObject<V>> {\n    // Make sure values have a timestamp\n    const ts = p.map((v) =>\n      `at` in v\n        ? v\n        : {\n          ...v,\n          at: Date.now(),\n        }\n    );\n\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    const last = ts.at(-1)!;\n\n    if (this.storeIntermediate) this.values.push(...ts);\n    else switch (this.values.length) {\n      case 0: {\n        // Add as initial value\n        this.values.push(last);\n        break;\n      }\n      case 1: {\n        // Add last value\n        this.values.push(last);\n        break;\n      }\n      case 2: {\n        // Replace last value\n        this.values[ 1 ] = last;\n        break;\n      }\n    }\n    return ts;\n  }\n\n  /**\n   * Last seen value. If no values have been added, it will return the initial value\n   */\n  get last() {\n    if (this.values.length === 1) return this.values[ 0 ];\n    //eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    return this.values.at(-1)!;\n  }\n\n  /**\n   * Returns the oldest value in the buffer\n   */\n  get initial() {\n    return this.values.at(0);\n  }\n\n  /**\n   * Returns number of recorded values (includes the initial value in the count)\n   */\n  get size() {\n    return this.values.length;\n  }\n\n  /**\n   * Returns the elapsed time, in milliseconds since the initial value\n   */\n  get elapsed(): number {\n    return Date.now() - this.values[ 0 ].at;\n  }\n\n}\n"],"mappings":";;;;;;AAMA,IAAsB,gBAAtB,cAA8E,YAA+B;CAC3G;CAEA,YAAYA,OAAyB,CAAE,GAAE;AACvC,QAAM,KAAK;AACX,OAAK,SAAS,CAAE;CACjB;CAED,UAAUC,QAAoB,CAE7B;;;;;;CAOD,UAAUC,OAAuB;AAC/B,MAAI,SAAS,KAAK,OAAO,OAAQ,QAAO,KAAK,OAAO;AAEpD,OAAK,SAAS,KAAK,OAAO,OAAO,MAAM;AACvC,SAAO,KAAK,OAAO;CACpB;;;;;CAMD,UAAU;AACR,OAAK,SAAS,CAAE;CACjB;;;;;CAMD,WAAWC,GAAwE;EAEjF,MAAM,KAAK,EAAE,IAAI,CAAC,OACf,OAAO,IACJ,IACA;GACA,GAAG;GACH,IAAI,KAAK,KAAK;EACf,EACJ;EAGD,MAAM,OAAO,GAAG,GAAG,GAAG;AAEtB,MAAI,KAAK,kBAAmB,MAAK,OAAO,KAAK,GAAG,GAAG;MAC9C,SAAQ,KAAK,OAAO,QAApB;GACH,KAAK,GAAG;AAEN,SAAK,OAAO,KAAK,KAAK;AACtB;GACD;GACD,KAAK,GAAG;AAEN,SAAK,OAAO,KAAK,KAAK;AACtB;GACD;GACD,KAAK,GAAG;AAEN,SAAK,OAAQ,KAAM;AACnB;GACD;EACF;AACD,SAAO;CACR;;;;CAKD,IAAI,OAAO;AACT,MAAI,KAAK,OAAO,WAAW,EAAG,QAAO,KAAK,OAAQ;AAElD,SAAO,KAAK,OAAO,GAAG,GAAG;CAC1B;;;;CAKD,IAAI,UAAU;AACZ,SAAO,KAAK,OAAO,GAAG,EAAE;CACzB;;;;CAKD,IAAI,OAAO;AACT,SAAO,KAAK,OAAO;CACpB;;;;CAKD,IAAI,UAAkB;AACpB,SAAO,KAAK,KAAK,GAAG,KAAK,OAAQ,GAAI;CACtC;AAEF"}