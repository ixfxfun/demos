{"version":3,"file":"dom.js","names":["domQueryOrEl: string | V | null | undefined","el","selectors: QueryOrElements","v: string","options: NumberFormattingOptions","v: number","o: NumberFormattingOptions","v: any","options: FormattingOptions","JSON5","v: object","parentOrQuery: HTMLElement | string","data: Map<string, object>","resolveElement","container: HTMLDivElement | undefined","options: DataTableOpts","data: ReadonlyMap<string, object>","data","t: HTMLElement | null","t: HTMLTableElement","data: object","valueHTML: string | undefined","data?: object","opts: Partial<DataTableOpts>","t: HTMLTableElement | undefined","d: object","elemOrQuery: SVGElement | HTMLElement | string","listener: DragListener","options: Partial<DragOptions>","PointsPlaceholder","token: object | undefined","RectsPlaceholderPositioned","event: Event","offset: Point","x: number","y: number","RectsIsPlaceholder","lastMoveOffset: Point","PointsEmpty","moveEvent: PointerEvent","PointsIsPlaceholder","state: DragState","upEvent: PointerEvent","event: PointerEvent | MouseEvent | undefined","el: HTMLTextAreaElement","el","domIdOrEl: string | HTMLInputElement","onChanged?: (currentValue: boolean) => void","value: boolean","onChanged?: (currentValue: number) => void","live?: boolean","value: number","domQueryOrEl: string | HTMLButtonElement","onClickHandler?: () => void","value: string","handler?: () => void","title: string","onClick?: () => void","domQueryOrEl: string | HTMLSelectElement","onChanged?: (currentValue: string) => void","options: SelectOpts","opts: string[]","preSelect?: string","o: any","options: (string | string[])[]","context: HTMLElement | string","query: string | undefined","query","el","fallback: T","elt?: Element","cssVariable: string","fallbackValue: string","variables: T","stylesOrEl?: CSSStyleDeclaration | HTMLElement","styles: CSSStyleDeclaration","name: string","elOrQuery: SVGElement | HTMLElement | string","el","elOrQuery: HTMLElement | string","selectors: QueryOrElements","value: boolean","cssClass: string","value: string","options: Partial<DataDisplayOptions>","data: object","selectors: QueryOrElements","value?: any","property: string","elements: HTMLElement[]","v: any","selectors: QueryOrElements","value: string","value: boolean","cssClass: string","selectors: string","value: string | number","callback: () => void","interval: Interval | undefined","elOrQuery: T | string","options: ElementSizerOptions<T>","#el","#containerEl","#stretch","#onSizeChanging","#size","#sizeDebounce","#naturalRatio","#naturalSize","#viewport","#byViewport","#byContainer","reason?: string","#disposed","#resizeObservable","canvasElementOrQuery: HTMLCanvasElement | string","options: ElementSizerOptions<HTMLCanvasElement>","el","options: { zIndex?: number } & ElementSizerOptions<HTMLCanvasElement>","opts: ElementSizerOptions<HTMLCanvasElement>","svg: SVGElement","onSizeSet?: (size: Rects.Rect) => void","#onParentResize","#computeSizeBasedOnParent","#onViewportResize","size: Rect","parentSize: Rects.Rect","args: ResizeObserverEntry[]","size: Rects.Rect","b: HTMLButtonElement","ex: Error | string | Event","parentEl: Readonly<HTMLElement>","styles: string","domQueryOrElement: HTMLElement | string","opts: LogOpts","lastLog: string | undefined","el","messageOrError: string | Error","whatToLog: unknown","log","message: string | undefined","line: HTMLElement","timestamp","clear","options: InlineConsoleOptions","logElement: HTMLElement | undefined","show: boolean","message?: any","queryOrElement: string | HTMLElement | (string | HTMLElement)[] | AsyncGenerator<string | HTMLElement>","options: Partial<ElementQueryOptions>","_: HTMLElement","options: {\n  panels: Panel<TNotifyArgs>[],\n  parent: HTMLElement | string,\n  preselectId?: string,\n  onPanelChanging?: (priorPanel: Panel<TNotifyArgs> | undefined, newPanel: Panel<TNotifyArgs> | undefined) => boolean | void,\n  onPanelChange?: (priorPanel: Panel<TNotifyArgs> | undefined, newPanel: Panel<TNotifyArgs> | undefined) => void\n}","el","select","currentPanel: Panel<any> | undefined","id: string","name: string","args: TNotifyArgs","reference: PointSpaces","a: Readonly<Point | number | number[]>","b?: number","domQueryOrEl: Readonly<string | HTMLElement>","options: ElPositionOpts","el","anchor: GridCardinalDirection | `center`","target: PointSpaces","targetSpace: PointSpaces","a: Readonly<Point | number[] | number>","domQueryOrEl: string | HTMLElement","relativePos: Point","relativeTo: `window` | `screen`","el: Readonly<HTMLElement>","list: readonly string[]","sibling: Readonly<HTMLElement>","tagName: string","parent: Readonly<HTMLElement>","object: object","JSON5","parent: HTMLElement","element: HTMLElement","elAfter: HTMLElement | undefined","elBefore: HTMLElement | undefined","parentEl: HTMLElement","list: Map<string, V>","createUpdate: CreateUpdateElement<V>","prune: HTMLElement[]","id: string"],"sources":["../../dom/src/resolve-el.ts","../../dom/src/data-table.ts","../../dom/src/drag-drop.ts","../../dom/src/forms.ts","../../dom/src/ts-util.ts","../../dom/src/css-variables.ts","../../dom/src/css.ts","../../dom/src/data-display.ts","../../dom/src/set-property.ts","../../dom/src/el.ts","../../dom/src/internal/debounce.ts","../../dom/src/element-sizing.ts","../../dom/src/error-handler.ts","../../dom/src/shadow-dom.ts","../../dom/src/log.ts","../../dom/src/inline-console.ts","../../dom/src/query.ts","../../dom/src/tabbed-panel.ts","../../dom/src/utility.ts"],"sourcesContent":["import { resultToError, type Result } from \"@ixfx/guards\";\n\n/**\n * Resolves either a string or HTML element to an element.\n * Useful when an argument is either an HTML element or query.\n *\n * ```js\n * resolveEl(`#someId`);\n * resolveEl(someElement);\n * ```\n * @param domQueryOrEl\n * @returns\n */\nexport const resolveEl = <V extends Element>(domQueryOrEl: string | V | null | undefined): V => {\n  const r = resolveElementTry(domQueryOrEl);\n  if (r.success) return r.value;\n  throw resultToError(r);\n}\n\n/**\n * Tries to resolve a query, returning a `Result`.\n * \n * ```js\n * const { success, value, error } = resolveElementTry(`#some-element`);\n * if (success) {\n *  // Do something with value\n * } else {\n *  console.error(error);\n * }\n * ```\n * @param domQueryOrEl \n * @returns \n */\nexport const resolveElementTry = <V extends Element>(domQueryOrEl: string | V | null | undefined): Result<V, string> => {\n  if (typeof domQueryOrEl === `string`) {\n    const d = document.querySelector(domQueryOrEl);\n    if (d === null) {\n      const error = domQueryOrEl.startsWith(`#`) ? `Query '${ domQueryOrEl }' did not match anything. Try '#id', 'div', or '.class'`\n        : `Query '${ domQueryOrEl }' did not match anything. Did you mean '#${ domQueryOrEl }?`;\n      return { success: false, error };\n\n    }\n    domQueryOrEl = d as V;\n  } else if (domQueryOrEl === null) {\n    return { success: false, error: `Param 'domQueryOrEl' is null` };\n  } else if (domQueryOrEl === undefined) {\n    return { success: false, error: `Param 'domQueryOrEl' is undefined` };\n  }\n  const el = domQueryOrEl;\n  return { success: true, value: el };\n};\n\nexport type QueryOrElements = string | Element[] | HTMLElement[] | HTMLElement | Element\n\n/**\n * Returns a set of elements.\n * \n * Returns an empty list if `selectors` is undefined or null.\n * \n * @param selectors \n * @returns \n */\nexport const resolveEls = (selectors: QueryOrElements): HTMLElement[] => {\n  if (selectors === undefined) return [];\n  if (selectors === null) return [];\n  if (Array.isArray(selectors)) return selectors as HTMLElement[];\n  if (typeof selectors === `string`) {\n    const elements = [ ...document.querySelectorAll(selectors) ]\n    return elements as HTMLElement[]\n  }\n  return [ selectors as HTMLElement ];\n}","import { round } from '@ixfx/numbers';\nimport { resolveEl as resolveElement } from './resolve-el.js';\nimport JSON5 from 'json5';\n\nexport type NumberFormattingOptions = Readonly<{\n  precision?: number\n  roundNumbers?: number\n  leftPadding?: number\n}>\n\nexport type FormattingOptions = Readonly<{\n  numbers: NumberFormattingOptions\n}>\n\nexport type DataTableOpts = FormattingOptions & {\n  readonly formatter?: DataFormatter\n  readonly objectsAsTables?: boolean\n  readonly idPrefix?: string\n};\n\nexport type DataTable<V> = {\n  update(data: V): void;\n  remove(): boolean;\n};\n\nconst padding = (v: string, options: NumberFormattingOptions): string => {\n  if (options.leftPadding) {\n    if (v.length < options.leftPadding) return '&nbsp;'.repeat(options.leftPadding - v.length) + v;\n  }\n  return v;\n}\n\nconst convertNumber = (v: number, o: NumberFormattingOptions): string => {\n  v = (o.roundNumbers !== undefined) ? round(o.roundNumbers, v) : v;\n  let asString = (o.precision !== undefined) ? v.toFixed(o.precision) : v.toString();\n  asString = padding(asString.toString(), o);\n  return asString;\n}\n\nconst toHtmlSimple = (v: any, options: FormattingOptions): string => {\n  if (v === null) return `(null)`;\n  if (v === undefined) return `(undefined)`;\n  if (typeof v === `boolean`) return v ? `true` : `false`;\n  if (typeof v === `string`) return `\"${ v }\"`;\n  if (typeof v === `number`) return convertNumber(v, options.numbers);\n  if (typeof v === `object`) return toTableSimple(v, options);\n  return JSON5.stringify(v);\n}\n\nconst toTableSimple = (v: object, options: FormattingOptions): string => {\n  let html = `<div style=\"display:grid; grid-template-columns: repeat(2, 1fr)\">`;\n  for (const entry of Object.entries(v)) {\n    const value = toHtmlSimple(entry[ 1 ], options);\n    html += `<div class=\"label\" style=\"display:table-cell\">${ entry[ 0 ] }</div>\n      <div class=\"data\" style=\"display:table-cell\">${ value }</div>`\n  }\n  html += `</div>`;\n  return html;\n}\n\n/**\n * Creates a table of data points for each object in the map\n * ```\n * const t = DataTable.fromList(parentEl, map);\n * t.update(newMap);\n * ```\n */\nexport const fromList = (\n  parentOrQuery: HTMLElement | string,\n  data: Map<string, object>\n): DataTable<Map<string, object>> => {\n  const parent = resolveElement(parentOrQuery);\n  let container: HTMLDivElement | undefined = document.createElement(\n    `DIV`\n  ) as HTMLDivElement;\n  parent.append(container);\n\n  const options: DataTableOpts = {\n    numbers: {},\n    objectsAsTables: true\n  }\n  const remove = () => {\n    if (!container) return false;\n    container.remove();\n    container = undefined;\n    return true;\n  };\n\n  const update = (data: ReadonlyMap<string, object>) => {\n    const seenTables = new Set();\n\n    for (const [ key, value ] of data) {\n      const tKey = `table-${ key }`;\n      seenTables.add(tKey);\n      let t: HTMLElement | null = parent.querySelector(`#${ tKey }`);\n      if (t === null) {\n        t = document.createElement(`table`);\n        if (!t) throw new Error(`Could not create table element`);\n        t.id = tKey;\n        parent.append(t);\n      }\n\n      updateElement(t as HTMLTableElement, value, options);\n    }\n\n    // Remove tables that aren't present in map\n\n    const tables = Array.from(parent.querySelectorAll(`table`));\n    for (const t of tables) {\n      if (!seenTables.has(t.id)) {\n        t.remove();\n      }\n    }\n  };\n\n  if (data) update(data);\n  return { update, remove };\n  // return (d: ReadonlyMap<string, object>) => {\n  //   update(d);\n  // };\n};\n\n/**\n * Format data. Return _undefined_ to signal that\n * data was not handled.\n */\nexport type DataFormatter = (data: object, path: string) => string | undefined;\n\n/**\n * Updates the given table element so each entry in the map is a\n * row in the table.\n *\n * Rows are keyed by the map key. Rows with keys not found in the map are deleted.\n * @param t Table\n * @param data Map of data\n * @param options Options\n * @returns\n */\nconst updateElement = (\n  t: HTMLTableElement,\n  data: object,\n  options: DataTableOpts\n) => {\n  const numberFormatting = options.numbers ?? {}\n  //const precision = options.precision ?? 2;\n  const idPrefix = options.idPrefix ?? ``;\n  const objectsAsTables = options.objectsAsTables ?? false;\n\n  if (data === undefined) {\n    t.innerHTML = ``;\n    return;\n  }\n  const seenRows = new Set();\n\n  for (const [ key, value ] of Object.entries(data)) {\n    const domKey = `${ idPrefix }-row-${ key }`;\n    // Keep track of keys currently in object\n    seenRows.add(domKey);\n\n    // Is there already a row for this key?\n    let rowEl = t.querySelector(`tr[data-key='${ domKey }']`);\n    if (rowEl === null) {\n      // No row, add it\n      rowEl = document.createElement(`tr`);\n      t.append(rowEl);\n      rowEl.setAttribute(`data-key`, domKey);\n\n      const keyEl = document.createElement(`td`);\n      keyEl.textContent = key;\n      keyEl.classList.add(`label`);\n      rowEl.append(keyEl);\n    }\n\n    // Is there already a cell for the value?\n    let valEl = rowEl.querySelector(`td[data-key='${ domKey }-val']`);\n\n    if (valEl === null) {\n      // No, create the cell\n      valEl = document.createElement(`td`);\n      valEl.classList.add(`data`);\n      valEl.setAttribute(`data-key`, `${ domKey }-val`);\n      rowEl.append(valEl);\n    }\n\n    // Format the value as HTML\n    let valueHTML: string | undefined;\n    if (options.formatter) {\n      valueHTML = options.formatter(value, key);\n    }\n    // If there's no formatter, or not handled...\n    if (valueHTML === undefined) {\n      if (typeof value === `object`) {\n        valueHTML = objectsAsTables ? toTableSimple(value, options) : JSON5.stringify(value);\n      } else if (typeof value === `number`) {\n        valueHTML = convertNumber(value, numberFormatting);\n        //let vv = (options.roundNumbers) ? round(options.roundNumbers, value) : value;\n        //let vvStr = vv.toFixed(precision);\n        //valueHTML = padding(vvStr, options);\n      } else if (typeof value === `boolean`) {\n        valueHTML = value ? `true` : `false`;\n      } else if (typeof value === `string`) {\n        valueHTML = `\"${ value }\"`;\n      } else {\n        valueHTML = JSON.stringify(value);\n      }\n    }\n\n    // Set the cell value\n    (valEl as HTMLElement).innerHTML = valueHTML;\n  }\n\n  // Remove rows that aren't present in data\n\n  const rows = Array.from(t.querySelectorAll(`tr`));\n  for (const r of rows) {\n    const key = r.getAttribute(`data-key`);\n    if (!seenRows.has(key)) {\n      r.remove();\n    }\n  }\n};\n\n/**\n * Creates a HTML table where each row is a key-value pair from `data`.\n * First column is the key, second column data.\n *\n * ```js\n * const dt = fromObject(`#hostDiv`);\n * ```\n *\n * `dt` is a function to call when you want to update data:\n *\n * ```js\n * dt({\n *  name: `Blerg`,\n *  height: 120\n * });\n * ```\n */\nexport const fromObject = (\n  parentOrQuery: HTMLElement | string,\n  data?: object,\n  opts: Partial<DataTableOpts> = {}\n): DataTable<object> => {\n\n  const parent = resolveElement(parentOrQuery);\n  const idPrefix = opts.idPrefix ?? Math.floor(Math.random() * 1000).toString();\n  const options: DataTableOpts = {\n    numbers: {},\n    objectsAsTables: true,\n    idPrefix: ``,\n    ...opts\n  }\n\n  let t: HTMLTableElement | undefined = document.createElement(`table`);\n  parent.append(t);\n\n  const remove = () => {\n    if (!t) return false;\n    t.remove();\n    t = undefined;\n    return true;\n  };\n\n  // Update already if there's initial data\n  if (data) updateElement(t, data, options);\n\n  const update = (d: object) => {\n    if (!t) throw new Error(`Table disposed`);\n    updateElement(t, d, { ...options, idPrefix });\n  };\n\n  return { remove, update };\n};\n","\nimport type { Point } from '@ixfx/geometry/point';\nimport { resolveEl } from './resolve-el.js';\nimport type { RectPositioned } from '@ixfx/geometry/rect';\nimport { isPlaceholder as RectsIsPlaceholder } from '@ixfx/geometry/rect';\nimport { Placeholder as PointsPlaceholder, isPlaceholder as PointsIsPlaceholder, Empty as PointsEmpty } from '@ixfx/geometry/point';\nimport { PlaceholderPositioned as RectsPlaceholderPositioned } from '@ixfx/geometry/rect';\nimport { clamp } from '@ixfx/numbers';\n/**\n * State of drag\n */\nexport type DragState = Readonly<{\n  /**\n   * Optional data, if this was given during drag start\n   */\n  token?: object\n  /**\n   * Initial pointer position in viewport coordinates\n   */\n  initial: Point\n  /**\n   * Delta of movement from initial position\n   */\n  delta: Point\n  /**\n   * Viewport-relative current position\n   */\n  viewport: Point\n}>;\n\n/**\n * Return data for `start` function\n */\nexport type DragStart = Readonly<{\n  /**\n   * If _true_, drag start is allowed\n   */\n  allow: boolean,\n  /**\n   * Optional data to associate with drag\n   */\n  token?: object\n}>;\n\n/**\n * Return data for `progress` function\n */\nexport type DragProgress = Readonly<{\n  /**\n   * If true, aborts drag operation\n   */\n  abort?: boolean\n  /**\n   * If returned, this will be viewport coordinates\n   * to snap the drag to\n   */\n  viewport?: Point\n}>\n\nexport type DragListener = Readonly<{\n  start?: () => DragStart;\n  progress?: (state: DragState) => DragProgress;\n  abort?: (reason: string, state: DragState) => void;\n  success?: (state: DragState) => void;\n}>;\n\nexport type DragOptions = {\n  autoTranslate: boolean\n  /**\n   * If true, it's not necessary to select item first\n   */\n  quickDrag: boolean\n  fence: HTMLElement | string\n  fenceViewport: RectPositioned\n}\n\nexport const draggable = (elemOrQuery: SVGElement | HTMLElement | string, listener: DragListener, options: Partial<DragOptions> = {}) => {\n  const elem = resolveEl(elemOrQuery);\n\n  /**\n   * Viewport location at drag start\n   */\n  let initialPointerPosition = PointsPlaceholder;\n  let token: object | undefined;\n  const autoTranslate = options.autoTranslate ?? false;\n  const quickDrag = options.quickDrag ?? false;\n  const fence = options.fence ? resolveEl(options.fence) : undefined;\n  const fenceViewport = options.fenceViewport;\n  let fenceOffset = RectsPlaceholderPositioned;\n  const relativePosition = window.getComputedStyle(elem).position === `relative`;\n\n  // De-select if there's a click elsewhere\n  const onParentClick = () => {\n    const selected = elem.classList.contains(`drag-sel`);\n    if (selected) {\n      elem.classList.remove(`drag-sel`);\n    }\n  };\n\n  // Click to select\n  const onElementClick = (event: Event) => {\n    const selected = elem.classList.contains(`drag-sel`);\n    if (selected) {\n      elem.classList.remove(`drag-sel`);\n    } else {\n      elem.classList.add(`drag-sel`);\n    }\n    event.stopPropagation();\n  };\n\n  elem.ownerDocument.addEventListener(`click`, onParentClick);\n  elem.addEventListener(`click`, onElementClick);\n\n  // Remove event handlers\n  const dragCleanup = () => {\n    elem.classList.remove(`drag-progress`);\n\n    elem.ownerDocument.removeEventListener(`pointermove`, onPointerMove);\n    elem.ownerDocument.removeEventListener(`pointerup`, onPointerUp);\n    elem.ownerDocument.removeEventListener(`pointercancel`, onDragCancel);\n  };\n\n  const dispose = () => {\n    if (elem.classList.contains(`drag-progress`)) {\n      onDragCancel(undefined, `dispose`);\n    } else {\n      dragCleanup();\n    }\n    elem.ownerDocument.removeEventListener(`click`, onParentClick);\n    elem.removeEventListener(`click`, onElementClick);\n  };\n\n  const validateOffsetAndPoint = (offset: Point, x: number, y: number): [ offset: Point, viewport: Point ] => {\n    if (!RectsIsPlaceholder(fenceOffset)) {\n      offset = {\n        x: clamp(offset.x, fenceOffset.x, fenceOffset.width),\n        y: clamp(offset.y, fenceOffset.y, fenceOffset.height)\n      }\n      if (fenceViewport) {\n        x = clamp(x, fenceViewport.x, fenceViewport.x + fenceViewport.width);\n        y = clamp(y, fenceViewport.y, fenceViewport.y + fenceViewport.height);\n      }\n    }\n\n    return [ offset, { x, y } ];\n  }\n\n  // Dragging\n  let lastMoveOffset: Point = PointsEmpty;\n  const onPointerMove = (moveEvent: PointerEvent) => {\n    moveEvent.preventDefault();\n    moveEvent.stopPropagation();\n\n    const { x, y } = moveEvent;\n    let offset = PointsIsPlaceholder(initialPointerPosition)\n      ? { x: moveEvent.offsetX, y: moveEvent.offsetY }\n      : {\n        x: x - initialPointerPosition.x,\n        y: y - initialPointerPosition.y,\n      };\n\n    const r = validateOffsetAndPoint(offset, x, y);\n    offset = r[ 0 ];\n\n    const state: DragState = {\n      delta: offset,\n      initial: initialPointerPosition,\n      token,\n      viewport: r[ 1 ]\n    };\n\n    if (typeof listener.progress !== `undefined`) {\n      const p = listener.progress(state);\n      if (p.abort) { onDragCancel(undefined, `discontinued`); return; }\n      if (p.viewport) {\n        offset = {\n          x: p.viewport.x - initialPointerPosition.x,\n          y: p.viewport.y - initialPointerPosition.y\n        }\n      }\n    }\n    lastMoveOffset = offset;\n    if (autoTranslate) {\n      const offsetX = offset.x;\n      const offsetY = offset.y;\n\n      elem.style.translate = `${ offsetX }px ${ offsetY }px`;\n    }\n  };\n\n  // Done dragging\n  const onPointerUp = (upEvent: PointerEvent) => {\n    const bounds = elem.getBoundingClientRect();\n\n    dragCleanup();\n    const { x, y } = upEvent;\n    // let offset = {\n    //   x: upEvent.x - initialPointerPosition.x,\n    //   y: upEvent.y - initialPointerPosition.y,\n    // };\n\n    const r = validateOffsetAndPoint(lastMoveOffset, x, y);\n\n    const state: DragState = {\n      initial: initialPointerPosition,\n      token,\n      delta: r[ 0 ],\n      viewport: r[ 1 ]\n    };\n    if (autoTranslate) {\n      elem.style.translate = `none`;\n      if (relativePosition) {\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion, @typescript-eslint/no-non-null-asserted-optional-chain\n        const parent = elem.parentElement?.getBoundingClientRect()!;\n        elem.style.left = `${ bounds.x - parent.left }px`;\n        elem.style.top = `${ bounds.y - parent.top }px`;\n      } else {\n        elem.style.left = `${ bounds.x }px`;\n        elem.style.top = `${ bounds.y }px`;\n      }\n    }\n\n    if (typeof listener.success !== `undefined`) {\n      listener.success(state);\n    }\n  };\n\n  // Drag is cancelled\n  const onDragCancel = (\n    event: PointerEvent | MouseEvent | undefined,\n    reason = `pointercancel`\n  ) => {\n    dragCleanup();\n\n    let viewport = PointsPlaceholder;\n    if (event && `x` in event && `y` in event) {\n      viewport = { x: (event as MouseEvent).x, y: (event as MouseEvent).y }\n    }\n    const state: DragState = {\n      token,\n      initial: initialPointerPosition,\n      delta: { x: -1, y: -1 },\n      viewport\n    };\n    if (typeof listener.abort !== `undefined`) {\n      listener.abort(reason, state);\n    }\n  };\n\n  elem.addEventListener(`pointerdown`, (event) => {\n    const selected = elem.classList.contains(`drag-sel`);\n    if (!selected && !quickDrag) return;\n    const event_ = event as PointerEvent;\n    initialPointerPosition = { x: event_.x, y: event_.y };\n    const s =\n      typeof listener.start === `undefined`\n        ? { allow: true, token }\n        : listener.start();\n    if (!s.allow) return;\n\n    token = s.token;\n    if (fence) {\n      const fenceBounds = fence.getBoundingClientRect();\n      fenceOffset = {\n        x: fenceBounds.x - initialPointerPosition.x,\n        y: fenceBounds.y - initialPointerPosition.y,\n        width: fenceBounds.x + fenceBounds.width - initialPointerPosition.x,\n        height: fenceBounds.y + fenceBounds.height - initialPointerPosition.y,\n      }\n    } else if (fenceViewport) {\n      fenceOffset = {\n        x: fenceViewport.x - initialPointerPosition.x,\n        y: fenceViewport.y - initialPointerPosition.y,\n        width: (fenceViewport.width + fenceViewport.x) - initialPointerPosition.x,\n        height: (fenceViewport.height + fenceViewport.y) - initialPointerPosition.y\n      }\n    }\n    elem.classList.add(`drag-progress`);\n    elem.ownerDocument.addEventListener(`pointermove`, onPointerMove);\n    elem.ownerDocument.addEventListener(`pointerup`, onPointerUp);\n    elem.ownerDocument.addEventListener(`pointercancel`, onDragCancel);\n  });\n\n  return dispose;\n};\n","import { resolveEl } from './resolve-el.js';\n\n\n/**\n * Adds tab and shift+tab to TEXTAREA\n * @param el\n */\nexport const textAreaKeyboard = (el: HTMLTextAreaElement) => {\n  el.addEventListener(`keydown`, (event) => {\n    const elementValue = el.value;\n    const start = el.selectionStart;\n    const end = el.selectionEnd;\n\n    if (event.key === `Tab` && event.shiftKey) {\n\n      if (el.value.substring(start - 2, start) === `  `) {\n        el.value = elementValue.slice(0, Math.max(0, start - 2)) + elementValue.slice(Math.max(0, end));\n      }\n      el.selectionStart = el.selectionEnd = start - 2;\n      event.preventDefault();\n      return false;\n    } else if (event.key === `Tab`) {\n      el.value = elementValue.slice(0, Math.max(0, start)) + `  ` + elementValue.slice(Math.max(0, end));\n      el.selectionStart = el.selectionEnd = start + 2;\n      event.preventDefault();\n      return false;\n    }\n  });\n};\n\n/**\n * Quick access to <input type=\"checkbox\"> value.\n * Provide a checkbox by string id or object reference. If a callback is\n * supplied, it will be called when the checkbox changes value.\n *\n * ```\n * const opt = checkbox(`#chkMate`);\n * opt.checked; // Gets/sets\n *\n * const opt = checkbox(document.getElementById(`#chkMate`), newVal => {\n *  if (newVal) ...\n * });\n * ```\n * @param {(string | HTMLInputElement)} domIdOrEl\n * @param {(currentVal:boolean) => void} [onChanged]\n * @returns\n */\nexport const checkbox = (\n  domIdOrEl: string | HTMLInputElement,\n  onChanged?: (currentValue: boolean) => void\n) => {\n  const el = resolveEl<HTMLInputElement>(domIdOrEl);\n\n  if (onChanged) {\n    el.addEventListener(`change`, () => {\n      onChanged(el.checked);\n    });\n  }\n  return {\n    get checked(): boolean {\n      return el.checked;\n    },\n    set checked(value: boolean) {\n      el.checked = value;\n    },\n  };\n};\n\n/**\n * Numeric INPUT\n *\n * ```\n * const el = numeric(`#num`, (currentValue) => {\n *  // Called when input changes\n * })\n * ```\n *\n * Get/set value\n * ```\n * el.value = 10;\n * ```\n * @param domIdOrEl\n * @param onChanged\n * @param live If true, event handler fires based on `input` event, rather than `change`\n * @returns\n */\nexport const numeric = (\n  domIdOrEl: string | HTMLInputElement,\n  onChanged?: (currentValue: number) => void,\n  live?: boolean\n) => {\n  const el = resolveEl<HTMLInputElement>(domIdOrEl);\n  const eventName = live ? `change` : `input`;\n  if (onChanged) {\n    el.addEventListener(eventName, () => {\n      onChanged(Number.parseInt(el.value));\n    });\n  }\n  return {\n    get value(): number {\n      return Number.parseInt(el.value);\n    },\n    set value(value: number) {\n      el.value = value.toString();\n    },\n  };\n};\n\n/**\n * SELECT options\n */\nexport type SelectOpts = {\n  /**\n   * Placeholder item\n   */\n  readonly placeholderOpt?: string;\n  /**\n   * If true, a placeholder option 'Choose' is added to the list\n   */\n  readonly shouldAddChoosePlaceholder?: boolean;\n  /**\n   * Item to choose after a selection is made\n   */\n  readonly autoSelectAfterChoice?: number;\n};\n\n/**\n * Button\n *\n * ```\n * const b = button(`#myButton`, () => {\n *  console.log(`Button clicked`);\n * });\n * ```\n *\n * ```\n * b.click(); // Call the click handler\n * b.disabled = true / false;\n * ```\n * @param domQueryOrEl Query string or element instance\n * @param onClickHandler Callback when button is clicked\n * @returns\n */\nexport const button = (\n  domQueryOrEl: string | HTMLButtonElement,\n  onClickHandler?: () => void\n) => {\n  const el = resolveEl(domQueryOrEl);\n\n  const addEvent = () => {\n    if (onClickHandler) {\n      el.addEventListener(`click`, onClickHandler);\n    }\n  }\n\n  const removeEvent = () => {\n    if (onClickHandler) {\n      el.removeEventListener(`click`, onClickHandler)\n    }\n  }\n\n  addEvent();\n\n  return {\n    /**\n     * Gets text content of button\n     */\n    get title(): string | null {\n      return el.textContent;\n    },\n    /**\n     * Sets text content of button\n     */\n    set title(value: string) {\n      el.textContent = value;\n    },\n    /**\n     * Disposes the button.\n     * Removes event handler and optionally removes from document\n     * @param deleteElement \n     */\n    dispose(deleteElement = false) {\n      removeEvent();\n      if (deleteElement) el.remove();\n    },\n    /**\n     * Sets the click handler, overwriting existing.\n     * @param handler \n     */\n    onClick(handler?: () => void) {\n      removeEvent();\n      onClickHandler = handler;\n      addEvent();\n    },\n    /**\n     * Trigger onClick handler\n     */\n    click() {\n      if (onClickHandler) onClickHandler();\n    },\n    /**\n     * Sets disabled state of button\n     */\n    set disabled(value: boolean) {\n      el.disabled = value;\n    },\n    /**\n     * Gets the button element\n     */\n    get el(): HTMLButtonElement {\n      return el\n    }\n  };\n};\n\n/**\n * Creates a BUTTON element, wrapping it via {@link button} and returning it.\n * ```js\n * const b = buttonCreate(`Stop`, () => console.log(`Stop`));\n * someParent.addNode(b.el);\n * ```\n * @param title \n * @param onClick \n * @returns \n */\nexport const buttonCreate = (title: string, onClick?: () => void) => {\n  const el = document.createElement(`button`);\n  const w = button(el, onClick);\n  w.title = title;\n  return w;\n}\n\n/**\n * SELECT handler\n */\nexport type SelectHandler = {\n  /**\n   * Gets/Sets disabled\n   */\n  set disabled(value: boolean);\n\n  get disabled(): boolean;\n  /**\n   * Gets value\n   */\n  get value(): string;\n  /**\n   * Sets selected index\n   */\n  get index(): number;\n  /**\n   * _True_ if currently selected item is the placeholder\n   */\n  get isSelectedPlaceholder(): boolean;\n  /**\n   * Set options\n   * @param options Options\n   * @param preSelect Item to preselect\n   */\n  setOpts(options: readonly string[], preSelect?: string): void;\n  /**\n   * Select item by index\n   * @param index Index\n   * @param trigger If true, triggers change event\n   */\n  select(index?: number, trigger?: boolean): void;\n}\n\n/**\n * SELECT element.\n *\n * Handle changes in value:\n * ```\n * const mySelect = select(`#mySelect`, (newValue) => {\n *  console.log(`Value is now ${newValue}`);\n * });\n * ```\n *\n * Enable/disable:\n * ```\n * mySelect.disabled = true / false;\n * ```\n *\n * Get currently selected index or value:\n * ```\n * mySelect.value / mySelect.index\n * ```\n *\n * Is the currently selected value a placeholder?\n * ```\n * mySelect.isSelectedPlaceholder\n * ```\n *\n * Set list of options\n * ```\n * // Adds options, preselecting `opt2`.\n * mySelect.setOpts([`opt1`, `opt2 ...], `opt2`);\n * ```\n *\n * Select an element\n * ```\n * mySelect.select(1); // Select second item\n * mySelect.select(1, true); // If true is added, change handler fires as well\n * ```\n * @param domQueryOrEl Query (eg `#id`) or element\n * @param onChanged Callback when a selection is made\n * @param options Options\n * @return\n */\nexport const select = (\n  domQueryOrEl: string | HTMLSelectElement,\n  onChanged?: (currentValue: string) => void,\n  options: SelectOpts = {}\n): SelectHandler => {\n  const el = resolveEl(domQueryOrEl);\n  const {\n    placeholderOpt,\n    shouldAddChoosePlaceholder = false,\n    autoSelectAfterChoice = -1,\n  } = options;\n\n  const change = () => {\n    if (onChanged !== undefined) onChanged(el.value);\n    if (autoSelectAfterChoice >= 0) el.selectedIndex = autoSelectAfterChoice;\n  };\n\n  if (onChanged) {\n    el.addEventListener(`change`, (_event) => {\n      change();\n    });\n  }\n  return {\n    set disabled(value: boolean) {\n      el.disabled = value;\n    },\n    get value(): string {\n      return el.value;\n    },\n    get index(): number {\n      return el.selectedIndex;\n    },\n    get isSelectedPlaceholder(): boolean {\n      return (\n        (shouldAddChoosePlaceholder || options.placeholderOpt !== undefined) &&\n        el.selectedIndex === 0\n      );\n    },\n    setOpts(opts: string[], preSelect?: string): void {\n      el.options.length = 0;\n\n      if (shouldAddChoosePlaceholder) opts = [ `-- Choose --`, ...opts ];\n      else if (placeholderOpt !== undefined) opts = [ placeholderOpt, ...opts ];\n      let toSelect = 0;\n\n      for (const [ index, o ] of opts.entries()) {\n        const optEl = document.createElement(`option`);\n        optEl.value = o;\n        optEl.innerHTML = o;\n        if (preSelect !== undefined && o === preSelect) toSelect = index;\n        el.options.add(optEl);\n      }\n      el.selectedIndex = toSelect;\n    },\n    select(index = 0, trigger = false): void {\n      el.selectedIndex = index;\n      if (trigger && onChanged) {\n        change();\n      }\n    },\n  };\n};\n","/* eslint-disable unicorn/prevent-abbreviations */\nexport function isHtmlElement(o: any): o is HTMLElement {\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n  return (\n    typeof HTMLElement === \"object\" ? o instanceof HTMLElement : //DOM2\n      o && typeof o === \"object\" && o !== null && o.nodeType === 1 && typeof o.nodeName === \"string\"\n  );\n}","import * as Text from \"@ixfx/core/text\"\nimport { resolveEl } from \"./resolve-el.js\"\nimport { isHtmlElement } from \"./ts-util.js\";\n\n/**\n * CSS Variable\n */\nexport type CssVariable = {\n  /**\n   * CSS variable to read for the value. `--` prefix is not needed\n   */\n  variable: string\n  /**\n   * Attribute name, eg 'width' for a Canvas element.\n   */\n  attribute?: string\n  field?: string\n  /**\n   * Optional default value\n   */\n  defaultValue: string | undefined\n}\n\n/**\n * CSS Variable by id\n */\nexport type CssVariableByIdOption = CssVariable & {\n  id: string\n}\n\n/**\n * CSS variable by query\n */\nexport type CssVariableByQueryOption = CssVariable & {\n  query: string\n}\n\n/**\n * CSS variable by element reference\n */\nexport type CssVariableByObjectOption = CssVariable & {\n  object: object | object[]\n}\n\n/**\n * CSS variable option\n */\nexport type CssVariableOption = CssVariable & (CssVariableByObjectOption | CssVariableByIdOption | CssVariableByQueryOption);\n\n/**\n * Parses input in the form of: `['elementid-attribute', 'default-value']`.\n * Eg, `['indicator-fill', 'gray']` will yield:\n * ```\n * { variable: `indicator-fill`, attribute: `fill`, id: `indicator`, defaultValue: `gray` }\n * ```\n * \n * Once parsed, use {@link setFromCssVariables} to apply data.\n * \n * ```js\n * // Array of arrays is treated as a set of key-value pairs\n * const options = [ [`indicator-fill`, `gray`], [`backdrop-fill`, `whitesmoke`] ]\n * const attrs = parseCssVariablesAsAttributes(options);\n * Yields:\n * [\n *  { variable: `indicator-fill`, attribute: `fill`, id: `indicator`, defaultValue: `gray` }\n *  { variable: `backdrop-fill`, attribute: `fill`, id: `backdrop`, defaultValue: `whitesmoke` }\n * ]\n * \n * // Assign\n * setFromCssVariables(document.body, attrs);\n * ```\n * @param options \n * @returns \n */\nexport const parseCssVariablesAsAttributes = (options: (string | string[])[]): (CssVariable & CssVariableByIdOption)[] => {\n  return options.map(opt => {\n    let defaultValue;\n    // Nested array, treat second element as default value, name as first\n    if (Array.isArray(opt)) {\n      defaultValue = opt[ 1 ];\n      opt = opt[ 0 ];\n    }\n    const dash = opt.indexOf(`-`);\n    if (dash < 0) throw new Error(`Simple expression expects form of: 'elementid-attribute'`);\n    return {\n      variable: opt,\n      attribute: opt.slice(dash + 1),\n      id: opt.slice(0, dash),\n      defaultValue\n    }\n  })\n}\n\n/**\n * Reads the value of a CSS variable and assign it to HTML attributes or object field.\n * \n * ```js\n * const options = [\n *  // Set the 'width' attribute to the value of --some-css-variable to all elements with class 'blah'\n *  { query: `.blah`, variable: `some-css-variable`, attribute: `width` }\n * \n *  // Set #blah's 'size' attribute to the value of css variable '--size'\n *  { id: 'blah', variable: 'size', attribute: 'size' }\n * \n *  // Sets someEL.blah = css variable '--hue'\n *  { element: someEl, variable: `hue`, field: `blah` }\n * ]\n * \n * setFromCssVariables(document.body, ...options);\n * ```\n * \n * The first parameter is the context for which CSS variable values are fetched\n * as well as for resolving query selectors. This can usually be `document.body`.\n * @param context Context element which is needed for relative querying. Otherwise use document.body\n * @param options Details of what to do\n */\nexport const setFromCssVariables = (context: HTMLElement | string, ...options: CssVariableOption[]) => {\n  const contextEl = resolveEl(context);\n  const style = window.getComputedStyle(contextEl);\n\n  for (const opt of options) {\n    const variable = Text.afterMatch(opt.variable, `--`);\n    let v = style.getPropertyValue(`--${ variable }`);\n    if (v === null || v.length === 0) {\n      if (opt.defaultValue === undefined) { continue; }\n      else { v = opt.defaultValue; }\n    }\n\n    let query: string | undefined;\n    let els;//: SVGElement | HTMLElement | null | undefined;\n    if (`query` in opt && opt.query !== undefined) {\n      query = opt.query;\n    } else if (`id` in opt && opt.id !== undefined) {\n      query = `#${ opt.id }`;\n    } else if (`object` in opt && opt.object !== undefined) {\n      els = Array.isArray(opt.object) ? opt.object : [ opt.object ];\n    }\n    if (query === undefined) {\n      // No query\n      if (els === undefined) {\n        // If there's no query or objects, there's nothing to do\n        throw new Error(`Missing 'query', 'id' or 'object' fields`);\n      }\n    } else {\n      // Run query\n      els = [ ...contextEl.querySelectorAll(query) ] as Element[];// as SVGElement | HTMLElement | null | undefined;\n    }\n    if (els === null) continue;\n    if (els === undefined) continue;\n\n    if (opt.attribute) {\n      for (const el of els) {\n        if (isHtmlElement(el)) {\n          el.setAttribute(opt.attribute, v);\n        } else {\n          throw new Error(`Trying to set an attribute on something not a HTML element`, { cause: el });\n        }\n      }\n    } else if (opt.field) {\n      for (const el of els) {\n        if (typeof el === `object`) {\n          (el)[ opt.field ] = v;\n        } else {\n          throw new Error(`Trying to set field on something that is not an object (${ typeof el })`, { cause: el });\n        }\n      }\n    } else {\n      throw new Error(`Neither 'attribute' or 'field' to set is defined in option (${ JSON.stringify(opt) })`);\n    }\n  }\n}\n\n\n/**\n * Computes the styles for `elt` (or defaults to document.body) using `fallback`\n * as a set of default values.\n * \n * ```js\n * // Fetch styles\n * const styles = getCssVariablesWithFallback({\n *  my_var: `red` // reads CSS variable '--my-var' \n * }, element);\n * \n * // Access --my-var, or if it doesn't exist returns 'red'\n * styles.my_var;\n * ```\n * \n * Hyphen case (eg 'my-var') is a common way of delimiting words in CSS variables, but \n * can't be (elegantly) used in object properties. Instead, use '_' in the\n * object key, which is replaced with '-'.\n * \n * The leading '--' is not needed either.\n * @param fallback \n * @param elt \n * @returns \n */\nexport function getCssVariablesWithFallback<T extends Record<string, string | number>>(fallback: T, elt?: Element): T {\n  const styles = getComputedStyle(elt ?? document.body);\n  const entries = Object.entries(fallback);\n  const filledEntries = entries.map(entry => {\n    return [ entry[ 0 ], getCssVariablesFromStyles(styles, entry[ 0 ], entry[ 1 ]) ]\n  })\n  return Object.fromEntries(filledEntries) as T;\n}\n\n/**\n * Returns the value of a CSS variable. If it is no defined, returns `fallbackValue`;\n * ```js\n * // Returns the value of --fg, or 'white' otherwise\n * getCssVariable(`--fg`, `white`);\n * ```\n * \n * `--` prefix can be omitted:\n * ```js\n * getCssVariable(`fg`, `white`);\n * ```\n * @param cssVariable \n * @param fallbackValue \n * @returns \n */\nexport function getCssVariable(cssVariable: string, fallbackValue: string): string {\n  if (!cssVariable.startsWith(`--`)) cssVariable = `--${ cssVariable }`;\n  const fromCss = getComputedStyle(document.body).getPropertyValue(cssVariable).trim();\n  if (fromCss.length === 0) return fallbackValue;\n  return fromCss;\n}\n\n/**\n * Sets CSS variables using an object.\n * \n * ```js\n * const vars = {\n *  my_var: `red`,\n *  my_size: 10\n * }\n * \n * // Set to document.body\n * setCssVariables(vars);\n * \n * // Set to an element\n * setCssVariables(vars, elem);\n * \n * // Or to a CSSStyleDeclaration\n * setCssVariables(vars, styles);\n * ```\n * \n * @param variables \n * @param stylesOrEl \n */\n// eslint-disable-next-line @typescript-eslint/no-unnecessary-type-parameters\nexport function setCssVariables<T extends Record<string, string | number>>(variables: T, stylesOrEl?: CSSStyleDeclaration | HTMLElement) {\n  const styles = stylesOrEl === undefined ? document.body.style :\n    isHtmlElement(stylesOrEl) ? stylesOrEl.style : stylesOrEl;\n\n  for (const [ key, value ] of Object.entries(variables)) {\n    let variableName = key.replaceAll('_', '-');\n    if (!variableName.startsWith(`--`)) variableName = `--` + variableName;\n    styles.setProperty(variableName, value.toString());\n  }\n}\n\n/**\n * Returns a CSS variable from a CSS style declaration, or returning `fallback`.\n * ```js\n * // These will all access --my-var\n * getCssVariablesFromStyles(getComputedStyle(element), `--my-var`, `red`);\n * getCssVariablesFromStyles(getComputedStyle(element), `my-var`, `red`);\n * getCssVariablesFromStyles(getComputedStyle(element), `my_var`, `red`);\n * ```\n * @param styles \n * @param name \n * @param fallback \n * @returns \n */\nexport function getCssVariablesFromStyles<T extends string | number>(styles: CSSStyleDeclaration, name: string, fallback: T): T {\n  if (!name.startsWith(`--`)) name = `--` + name;\n  name = name.replaceAll(`_`, `-`);\n\n  const v = styles.getPropertyValue(name);\n  if (v.length === 0) {\n    return fallback;\n  }\n  if (typeof fallback === `number`) return parseFloat(v) as T;\n  if (typeof fallback === `boolean`) {\n    if (v === `true`) return (true as unknown as T);\n    else if (v === `false`) return (false as unknown as T);\n  }\n  return v as T;\n}\n","\nimport type { RectPositioned } from \"@ixfx/geometry/rect\";\nimport { resolveEl, resolveEls, type QueryOrElements } from \"./resolve-el.js\";\n\n// const tw = getComputedStyle(this.#el).borderTopWidth;\n// const bw = getComputedStyle(this.#el).borderBottomWidth;\n// const leftW = getComputedStyle(this.#el).borderLeftWidth;\n// const rightW = getComputedStyle(this.#el).borderRightWidth;\n\nexport type ComputedPixelsMap<T extends readonly (keyof CSSStyleDeclaration)[]> = Record<T[ number ], number>\n\n/**\n * Returns the value of `getBoundingClientRect` plus the width of all the borders\n * @param elOrQuery \n * @returns \n */\nexport const getBoundingClientRectWithBorder = (elOrQuery: SVGElement | HTMLElement | string): RectPositioned => {\n  let el = resolveEl(elOrQuery);\n  const size = el.getBoundingClientRect();\n  if (el instanceof SVGElement) {\n    el = el.parentElement!;\n  }\n  const border = getComputedPixels(el, `borderTopWidth`, `borderLeftWidth`, `borderRightWidth`, `borderBottomWidth`);\n\n  return {\n    x: size.x,\n    y: size.y,\n    width: size.width + border.borderLeftWidth + border.borderRightWidth,\n    height: size.height + border.borderTopWidth + border.borderBottomWidth\n  }\n}\n\n/**\n * Returns the computed measurements of CSS properties via [getComputedStyle](https://developer.mozilla.org/en-US/docs/Web/API/Window/getComputedStyle).\n * \n * ```js\n * const v = getComputedPixels(`#some-el`, `borderTopWidth`, `borderLeftWidth`);\n * v.borderTopWidth;  // number\n * b.borderLeftWidth; // number\n * ```\n * \n * Throws an error if value from `getComputedStyle` is not a string or does not end in 'px'.\n * @param elOrQuery \n * @param properties \n * @returns \n */\nexport const getComputedPixels = <T extends readonly (keyof CSSStyleDeclaration)[]>(elOrQuery: HTMLElement | string, ...properties: T): ComputedPixelsMap<T> => {\n  const s = getComputedStyle(resolveEl(elOrQuery));\n  const returnValue = {};\n  for (const property of properties) {\n    const v = s[ property ];\n    if (typeof v === `string`) {\n      if (v.endsWith(`px`)) {\n        (returnValue as any)[ property ] = Number.parseFloat(v.substring(0, v.length - 2));\n      } else {\n        throw new Error(`Property '${ String(property) }' does not end in 'px'. Value: ${ v }`);\n      }\n    } else {\n      throw new Error(`Property '${ String(property) }' is not type string. Got: ${ typeof v } Value: ${ v }`);\n    }\n  }\n  return returnValue as ComputedPixelsMap<T>;\n}\n\n\n/**\n * If `value` is _true_, the provided CSS class is added to element(s), otherwise it is removed.\n * \n * ```js\n * setClass(`#someId`, true, `activated`); // Add 'activated'\n * setClass(`#someId`, false, `activated`); // Removes 'activated'\n * ```\n * \n * @param selectors \n * @param value \n * @param cssClass \n * @returns \n */\nexport const setCssClass = (selectors: QueryOrElements, value: boolean, cssClass: string) => {\n  const elements = resolveEls(selectors);\n  if (elements.length === 0) return;\n\n  for (const element of elements) {\n    if (value) element.classList.add(cssClass);\n    else element.classList.remove(cssClass);\n  }\n};\n\n/**\n * Toggles a CSS class on all elements that match selector.\n * \n * ```js\n * setCssToggle(`span`, `activated`); // Toggles the 'activated' class on all SPAN elements\n * ```\n * \n * Uses `HTMLElement.classList.toggle`\n * @param selectors \n * @param cssClass \n * @returns \n */\nexport const setCssToggle = (selectors: QueryOrElements, cssClass: string) => {\n  const elements = resolveEls(selectors);\n  if (elements.length === 0) return;\n  for (const element of elements) {\n    element.classList.toggle(cssClass);\n  }\n}\n\n/**\n * Sets the CSS 'display' property\n * \n * ```js\n * setCssDisplay(`span`, `block`); // Sets display:block for all spans\n * ```\n * \n * @param selectors \n * @param value \n * @returns \n */\nexport const setCssDisplay = (selectors: QueryOrElements, value: string) => {\n  const elements = resolveEls(selectors);\n  if (elements.length === 0) return;\n  for (const element of elements) {\n    (element).style.display = value;\n  }\n};","import { fromObject, type FormattingOptions } from \"./data-table.js\";\n\nexport type DataDisplayOptions = FormattingOptions & {\n  theme?: `dark` | `light`\n\n}\n\n// TODO Visually show data which has changed since last update\n// TODO Click on a field to show a sparkline for it\n/**\n * Creates a simple display for data. Designed to show ixfx state data\n * \n * ```js\n * // Create once\n * const display = new DataDisplay();\n * \n * // Call .update to show state\n * display.update(state);\n * ```\n */\nexport class DataDisplay {\n\n  dataTable;\n\n  /**\n   * Constructor\n   * @param options Options\n   */\n  constructor(options: Partial<DataDisplayOptions> = {}) {\n    const theme = options.theme ?? `dark`;\n\n    const existing = document.querySelector(`#ixfx-data-display`);\n    if (existing !== null) throw new Error(`DataDisplay already loaded on this page`);\n\n    const container = document.createElement(`div`);\n    container.id = `ixfx-data-display`;\n    container.classList.add(`theme-${ theme }`);\n\n    const css = document.createElement(`style`);\n    css.textContent = `\n    #ixfx-data-display {\n      background: white;\n      color: black;\n      border: 2px solid hsl(0deg 0.61% 90%);\n      border-radius: 4px;\n      z-index: 1000;\n      opacity: 40%;\n      padding: 1em;\n      font-family: monospace;\n      position: fixed;\n      right: 1em;\n      top: 1em;\n    }\n    #ixfx-data-display.theme-dark {\n      background: black;\n      color: white;\n      border: 2px solid hsl(0deg 0.61% 10%);\n    }\n    #ixfx-data-display:hover {\n      opacity: 100%;\n    }\n    #ixfx-data-display table {\n      border-collapse: collapse;\n    }\n    #ixfx-data-display tr:not(:last-child) {\n      border-bottom: 2px solid hsl(0deg 0.61% 90%);\n    }\n    #ixfx-data-display.dark tr:not(:last-child) {\n      border-bottom: 2px solid hsl(0deg 0.61% 10%);\n    }\n    #ixfx-data-display td {\n      padding-bottom: 0.4em;\n      padding-top: 0.4em;\n    }\n    #ixfx-data-display .label {\n      color: hsl(0deg 0.61% 60%);\n      text-align: right;\n      padding-right: 0.5em;\n    }\n    #ixfx-data-display.theme-dark .label {\n      color: gray;\n    }\n    `\n\n    container.style.display = `inline-block`;\n    document.body.append(css);\n    document.body.append(container);\n\n    this.dataTable = fromObject(container, undefined, {\n      objectsAsTables: true,\n      ...options\n    });\n  }\n\n  update(data: object) {\n    this.dataTable.update(data);\n  }\n}","import { resolveEls, type QueryOrElements } from \"./resolve-el.js\";\n\nexport function setText(selectors: QueryOrElements): (value: any) => string;\nexport function setText(selectors: QueryOrElements, value?: any): string;\nexport function setText(selectors: QueryOrElements, value?: any): string | ((value: any) => string) {\n  return setProperty(`textContent`, selectors, value)\n};\n\nexport function setHtml(selectors: QueryOrElements): (value: any) => string;\nexport function setHtml(selectors: QueryOrElements, value?: any): string;\n\n/**\n * Sets the innerHTML of an element.\n * \n * ```js\n * setHtml(`#some-el`, `<b>hello</b>`);\n * ```\n * @param selectors \n * @param value \n * @returns \n */\nexport function setHtml(selectors: QueryOrElements, value?: any): string | ((value: any) => string) {\n  return setProperty(`innerHTML`, selectors, value)\n};\n\nexport function setProperty(property: string, selectors: QueryOrElements): (value: any) => string;\nexport function setProperty(property: string, selectors: QueryOrElements, value: any): string;\n\n/**\n * Sets some property on an element\n * \n * ```js\n * setProperty(`width`, `canvas`, 100); // Set the width property to 100\n * ```\n * \n * If `value` is an object, converts to JSON first.\n * @param property \n * @param selectors \n * @param value \n * @returns \n */\nexport function setProperty(property: string, selectors: QueryOrElements, value?: any): string | ((value: any) => string) {\n  let elements: HTMLElement[] = [];\n  const set = (v: any) => {\n    const typ = typeof v;\n    const vv = (typ === `string` || typ === `number` || typ === `boolean`) ? v as string :\n      JSON.stringify(v);\n\n    if (elements.length === 0) {\n      elements = resolveEls(selectors);\n    }\n    for (const element of elements) {\n      (element as any)[ property ] = vv;\n    }\n    return vv;\n  }\n  return value === undefined ? set : set(value);\n};","import { setCssClass, setCssDisplay, setCssToggle } from \"./css.js\";\nimport { resolveEl, resolveEls, type QueryOrElements } from \"./resolve-el.js\";\nimport { setHtml, setText } from \"./set-property.js\";\n\n/**\n * Wraps an element (or set of elements) with handy functions\n * for manipulation.\n */\nexport type WrappedElement = {\n  /**\n   * Sets inner text\n   * @param value\n   * @returns \n   */\n  text: (value: string | number) => string\n  /**\n   * Sets inner HTML\n   * @param value \n   * @returns \n   */\n  html: (value: string | number) => string\n  /**\n   * Sets the CSS 'display' property to `value`\n   * @param value\n   * @returns \n   */\n  cssDisplay: (value: string) => void\n  /**\n   * Adds/removes a CSS class depending on `value`\n   * @param value \n   * @param cssClass \n   * @returns \n   */\n  cssClass: (value: boolean, cssClass: string) => void\n  /**\n   * Toggles a CSS class\n   * @param cssClass \n   * @returns \n   */\n  cssToggle: (cssClass: string) => void\n  /**\n   * Gets the HTML element corresponding to original selector.\n   * If the selector returns multiple items, the first is yielded\n   * @returns \n   */\n  el: () => HTMLElement\n  /**\n   * Returns a set of HTML elements that match selector\n   * @returns \n   */\n  els: () => HTMLElement[]\n}\n\n/**\n * Returns an object with handy functions for working on/against the provided selector.\n * \n * ```js\n * const e = el(`#my-element`);\n * e.text(`hello`);           // Set the inner text of the elemenet\n * e.cssDisplay(`block`);    // Sets display:block\n * e.cssToggle(`activated`);  // Toggles the 'activated' CSS class\n * e.cssClass(true, `activated`); // Turns on the 'activated' CSS class\n * e.el();                    // Returns the HTML Element\n * ```\n * \n * The selector is only queried when created. Use {@link elRequery} to continually\n * re-query the selector before each operation. \n * \n * @param selectors \n * @returns \n */\nexport const el = (selectors: QueryOrElements): WrappedElement => {\n  const elements = resolveEls(selectors);\n  const text = setText(elements);\n  const html = setHtml(elements);\n  return {\n    text,\n    html,\n    cssDisplay: (value: string) => { setCssDisplay(elements, value); },\n    cssClass: (value: boolean, cssClass: string) => { setCssClass(elements, value, cssClass); },\n    cssToggle: (cssClass: string) => { setCssToggle(elements, cssClass); },\n    el: () => elements[ 0 ],\n    els: () => elements\n  }\n}\n\nexport const elRequery = (selectors: string): WrappedElement => ({\n  text: (value: string | number) => setText(selectors, value),\n  html: (value: string | number) => setHtml(selectors, value),\n  cssDisplay: (value: string) => { setCssDisplay(selectors, value); },\n  cssClass: (value: boolean, cssClass: string) => { setCssClass(selectors, value, cssClass); },\n  cssToggle: (cssClass: string) => { setCssToggle(selectors, cssClass); },\n  el: () => resolveEl(selectors) as HTMLElement,\n  els: () => resolveEls(selectors)\n});\n","import { intervalToMs, type Interval } from \"@ixfx/core\";\n\nexport const debounce = (\n  callback: () => void,\n  interval: Interval | undefined\n) => {\n  let timer;\n  const ms = intervalToMs(interval, 100);\n  return () => {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n    if (timer) clearTimeout(timer);\n    timer = setTimeout(callback, ms);\n  }\n}","import { resolveEl } from \"./resolve-el.js\";\nimport { getComputedPixels } from \"./css.js\";\nimport { Rects } from \"@ixfx/geometry\";\nimport type { Rect } from \"@ixfx/geometry/rect\";\nimport { debounce } from \"./internal/debounce.js\";\nimport { intervalToMs, type Interval } from \"@ixfx/core\";\n\n/**\n * * width: use width of parent, set height based on original aspect ratio of element. Assumes parent has a determined width.\n * * height: use height of parent, set width based on original aspect ratio of element. Assumes parent has a determined height.\n * * both: use height & width of parent, so the element adopts the ratio of the parent. Be sure that parent has a width and height set.\n * * min: use the smallest dimension of parent\n * * max: use the largest dimension of parent\n */\nexport type ElementResizeLogic = `width` | `height` | `both` | `none` | `min` | `max`;\n\n/**\n * Options\n */\nexport type ElementSizerOptions<T extends HTMLElement | SVGElement> = {\n  /**\n   * @defaultValue 'none'\n   */\n  stretch?: ElementResizeLogic\n  naturalSize?: Rects.Rect\n  /**\n   * If not specified, the element's parent is used\n   */\n  containerEl?: HTMLElement | string\n  onSizeChanging: (size: Rects.Rect, el: T) => void\n  onSizeDone?: (size: Rects.Rect, el: T) => void\n\n  debounceTimeout?: Interval\n}\n\n/**\n * Consider using static methods:\n * \n * ```js\n * // Resize an <SVG> element to match viewport\n * Dom.ElementSizer.svgViewport(svg);\n * \n * // Resize canvas to match its parent\n * Dom.ElementSizer.canvasParent(canvas);\n * \n * // Resize canvas to match viewport\n * Dom.ElementSizer.canvasViewport(canvas);\n * ```\n */\nexport class ElementSizer<T extends HTMLElement | SVGElement> {\n  #stretch: ElementResizeLogic;\n  #size: Rects.Rect;\n  #naturalSize: Rects.Rect;\n  #naturalRatio: number;\n  #viewport: Rects.RectPositioned;\n  #onSizeChanging;\n  #el: T;\n  #containerEl: HTMLElement;\n  #disposed = false;\n  #resizeObservable: ResizeObserver | undefined;\n  #sizeDebounce: () => void = () => ({})\n\n  constructor(elOrQuery: T | string, options: ElementSizerOptions<T>) {\n    this.#el = resolveEl(elOrQuery);\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    this.#containerEl = options.containerEl ? resolveEl(options.containerEl) : this.#el.parentElement!;\n\n    this.#stretch = options.stretch ?? `none`;\n    this.#onSizeChanging = options.onSizeChanging;\n    this.#size = Rects.Empty;\n\n    const onSizeDone = options.onSizeDone;\n    if (typeof onSizeDone !== `undefined`) {\n      this.#sizeDebounce = debounce(() => {\n        onSizeDone(this.size, this.#el);\n      }, options.debounceTimeout);\n    }\n    let naturalSize = options.naturalSize;\n    naturalSize ??= this.#el.getBoundingClientRect();\n    this.#naturalRatio = 1;\n    this.#naturalSize = naturalSize;\n    this.setNaturalSize(naturalSize);\n    this.#viewport = Rects.EmptyPositioned;\n\n    if (this.#containerEl === document.body) {\n      this.#byViewport();\n    } else {\n      this.#byContainer();\n    }\n  }\n\n  dispose(reason?: string) {\n    if (this.#disposed) return;\n    this.#disposed = true;\n    if (this.#resizeObservable) {\n      this.#resizeObservable.disconnect();\n      this.#resizeObservable = undefined;\n    }\n  }\n\n  static canvasParent(canvasElementOrQuery: HTMLCanvasElement | string, options: ElementSizerOptions<HTMLCanvasElement>): ElementSizer<HTMLCanvasElement> {\n    const el = resolveEl<HTMLCanvasElement>(canvasElementOrQuery);\n    const er = new ElementSizer<HTMLCanvasElement>(el, {\n      ...options,\n      onSizeChanging(size, el) {\n        el.width = size.width;\n        el.height = size.height;\n        if (options.onSizeChanging) options.onSizeChanging(size, el);\n      },\n    });\n    return er;\n  }\n\n  static canvasViewport(canvasElementOrQuery: HTMLCanvasElement | string, options: { zIndex?: number } & ElementSizerOptions<HTMLCanvasElement>): ElementSizer<HTMLCanvasElement> {\n    const el = resolveEl<HTMLCanvasElement>(canvasElementOrQuery);\n    el.style.position = `absolute`;\n    el.style.zIndex = (options.zIndex ?? 0).toString();\n    el.style.left = `0px`;\n    el.style.top = `0px`;\n    const opts: ElementSizerOptions<HTMLCanvasElement> = { ...options, containerEl: document.body }\n    return this.canvasParent(canvasElementOrQuery, opts);\n  }\n\n  /**\n   * Size an SVG element to match viewport\n   * @param svg \n   * @returns \n   */\n  static svgViewport(svg: SVGElement, onSizeSet?: (size: Rects.Rect) => void): ElementSizer<SVGElement> {\n    const er = new ElementSizer<SVGElement>(svg, {\n      containerEl: document.body,\n      stretch: `both`,\n      onSizeChanging(size) {\n        svg.setAttribute(`width`, size.width.toString());\n        svg.setAttribute(`height`, size.height.toString());\n        if (onSizeSet) onSizeSet(size);\n      },\n    });\n    return er;\n  }\n\n\n  #byContainer() {\n    const c = this.#containerEl;\n    if (!c) throw new Error(`No container element`);\n\n    // Listen for resize\n    const r = new ResizeObserver((entries) => {\n      this.#onParentResize(entries);\n    });\n    r.observe(c);\n    // Get current value\n    const current = this.#computeSizeBasedOnParent(c.getBoundingClientRect());\n    this.size = current;\n\n    this.#resizeObservable = r;\n  }\n\n  #byViewport() {\n    const r = new ResizeObserver((entries) => {\n      this.#onViewportResize();\n    });\n    r.observe(document.documentElement);\n    this.#resizeObservable = r;\n    this.#onViewportResize();\n  }\n\n  #onViewportResize() {\n    this.size = { width: window.innerWidth, height: window.innerHeight };\n    this.#viewport = {\n      x: 0, y: 0,\n      ...this.size\n    };\n  }\n  /**\n   * Sets the 'natural' size of an element.\n   * This can also be specified when creating ElementSizer.\n   * @param size \n   */\n  setNaturalSize(size: Rect) {\n    this.#naturalSize = size;\n    this.#naturalRatio = size.width / size.height;\n  }\n\n  get naturalSize() {\n    return this.#naturalSize;\n  }\n\n  get viewport() {\n    return this.#viewport;\n  }\n\n  #computeSizeBasedOnParent(parentSize: Rects.Rect) {\n    let { width, height } = parentSize;\n\n    let stretch = this.#stretch;\n    if (stretch === `min`) {\n      stretch = width < height ? `width` : `height`;\n    } else if (stretch === `max`) {\n      stretch = width > height ? `width` : `height`;\n    }\n\n    if (stretch === `width`) {\n      height = width / this.#naturalRatio;\n    } else if (stretch === `height`) {\n      width = height * this.#naturalRatio;\n    }\n\n    // If we have a border, take that into account\n    if (this.#el instanceof HTMLElement) {\n      const b = getComputedPixels(this.#el, `borderTopWidth`, `borderLeftWidth`, `borderRightWidth`, `borderBottomWidth`);\n      width -= (b.borderLeftWidth + b.borderRightWidth);\n      height -= (b.borderTopWidth + b.borderBottomWidth);\n    }\n\n    return { width, height };\n  }\n\n  #onParentResize(args: ResizeObserverEntry[]) {\n    const box = args[ 0 ].contentBoxSize[ 0 ];\n    const parentSize = { width: box.inlineSize, height: box.blockSize };\n    this.size = this.#computeSizeBasedOnParent(parentSize);\n    this.#viewport = {\n      x: 0, y: 0,\n      width: parentSize.width,\n      height: parentSize.height\n    }\n  }\n\n  set size(size: Rects.Rect) {\n    Rects.guard(size, `size`);\n    this.#size = size;\n    this.#onSizeChanging(size, this.#el);\n    this.#sizeDebounce();\n  }\n\n  get size() {\n    return this.#size;\n  }\n}","import { getErrorMessage } from \"@ixfx/debug\";\n\n/**\n * Creates an error handler to show errors on-screen.\n * This is useful when testing on mobile devices that lack access to the console.\n *\n * ```js\n * const e = defaultErrorHandler();\n * ```\n *\n * Manual control:\n * ```js\n * const e = defaultErrorHandler();\n * e.show(someError);\n * e.hide();\n * ```\n * @returns\n */\nexport const defaultErrorHandler = () => {\n  let enabled = true;\n  const container = document.createElement(`div`);\n  container.style.color = `black`;\n  container.style.border = `2px solid red`;\n  container.style.backgroundColor = `hsl(0, 80%, 90%)`;\n  container.style.padding = `1em`;\n  container.style.display = `none`;\n  container.style.top = `1em`;\n  container.style.left = `1em`;\n  container.style.position = `absolute`;\n\n  container.style.fontFamily = `monospace`;\n\n  const messageElement = document.createElement(`div`);\n  messageElement.style.maxWidth = `50vw`;\n  messageElement.style.maxHeight = `50vh`;\n  messageElement.style.overflowY = `scroll`;\n\n  container.innerHTML = `<h1>Error</h1>`;\n  container.append(messageElement);\n\n  const styleButton = (b: HTMLButtonElement) => {\n    b.style.padding = `0.3em`;\n    b.style.marginTop = `1em`;\n  };\n\n  const buttonClose = document.createElement(`button`);\n  buttonClose.textContent = `Close`;\n  buttonClose.addEventListener(`click`, () => {\n    hide();\n  });\n\n  const buttonStop = document.createElement(`button`);\n  buttonStop.textContent = `Stop displaying errors`;\n  buttonStop.addEventListener(`click`, () => {\n    enabled = false;\n    hide();\n  });\n\n  styleButton(buttonClose);\n  styleButton(buttonStop);\n\n  container.append(buttonClose);\n  container.append(buttonStop);\n  document.body.append(container);\n\n  const show = (ex: Error | string | Event) => {\n    container.style.display = `inline`;\n    messageElement.innerHTML += (ex as any).stack ? `<pre>${ (ex as any).stack }</pre>` : `<p>${ getErrorMessage(ex) }</p>`;\n  };\n\n  const hide = () => {\n    container.style.display = `none`;\n  };\n\n\n  window.onerror = (message, url, lineNo, colNo, error) => {\n    if (enabled) {\n      if (error) {\n        console.log(error);\n        show(error);\n      } else {\n        console.log(message);\n        show(message);\n      }\n    }\n  };\n\n  window.addEventListener(`unhandledrejection`, (event) => {\n    console.log(event.reason);\n    if (enabled) {\n      show(event.reason);\n    }\n  });\n  return { show, hide };\n};\n","export const addShadowCss = (\n  parentEl: Readonly<HTMLElement>,\n  styles: string\n): ShadowRoot => {\n  const styleEl = document.createElement(`style`);\n\n  //eslint-disable-next-line functional/immutable-data\n  styleEl.textContent = styles;\n  //eslint-disable-next-line functional/no-let\n  let shadowRoot;\n  if (parentEl.shadowRoot) {\n    shadowRoot = parentEl.shadowRoot;\n    //eslint-disable-next-line functional/immutable-data\n    shadowRoot.innerHTML = ``;\n  } else {\n    shadowRoot = parentEl.attachShadow({ mode: `open` });\n  }\n  shadowRoot.append(styleEl);\n  return shadowRoot;\n};\n","import { resolveEl } from './resolve-el.js';\nimport { addShadowCss } from './shadow-dom.js';\n\nexport type LogOpts = {\n  readonly reverse?: boolean;\n  readonly capacity?: number;\n  readonly timestamp?: boolean;\n  readonly collapseDuplicates?: boolean;\n  readonly monospaced?: boolean;\n  readonly minIntervalMs?: number;\n  readonly css?: string;\n};\n\nexport type Log = {\n  clear(): void;\n  error(messageOrError: unknown): void;\n  log(message?: string | object | number): HTMLElement | undefined;\n  warn(message?: string | object | number): HTMLElement | undefined;\n  append(el: HTMLElement): void;\n  dispose(): void;\n  readonly isEmpty: boolean;\n};\n\n/**\n * Allows writing to a DOM element in console.log style. Element grows in size, so use\n * something like `overflow-y: scroll` on its parent\n *\n * ```\n * const l = log(`#dataStream`); // Assumes HTML element with id `dataStream` exists\n * l.log(`Hi`);\n * l.log(); // Displays a horizontal rule\n *\n * const l = log(document.getElementById(`dataStream`), {\n *  timestamp: true,\n *  truncateEntries: 20\n * });\n * l.log(`Hi`);\n * l.error(`Some error`); // Adds class `error` to line\n * ```\n *\n * For logging high-throughput streams:\n * ```\n * // Silently drop log if it was less than 5ms since the last\n * const l = log(`#dataStream`, { minIntervalMs: 5 });\n *\n * // Only the last 100 entries are kept\n * const l = log(`#dataStream`, { capacity: 100 });\n * ```\n *\n * @param domQueryOrElement Element or id of element\n * @param opts\n */\nexport const log = (\n  domQueryOrElement: HTMLElement | string,\n  opts: LogOpts = {}\n): Log => {\n  const {\n    capacity = 0,\n    monospaced = true,\n    timestamp = false,\n    collapseDuplicates = true,\n    css = ``\n  } = opts;\n\n  let added = 0;\n  let lastLog: string | undefined;\n  let lastLogRepeats = 0;\n\n  const parentElement = resolveEl<HTMLElement>(domQueryOrElement);\n  const fontFamily = monospaced\n    ? `Consolas, \"Andale Mono WT\", \"Andale Mono\", \"Lucida Console\", \"Lucida Sans Typewriter\", \"DejaVu Sans Mono\", \"Bitstream Vera Sans Mono\", \"Liberation Mono\", Monaco, \"Courier New\", Courier, monospace`\n    : `normal`;\n  const shadowRoot = addShadowCss(\n    parentElement,\n    `\n  .log {\n    font-family: ${ fontFamily };\n    background-color: var(--code-background-color);\n    padding: var(--padding1, 0.2em);\n    overflow-y: auto;\n    height:100%;\n  }\n  .timestamp {\n    margin-right: 0.5em;\n    opacity: 0.5;\n    font-size: 70%;\n    align-self: center;\n  }\n  .line {\n    display: flex;\n    padding-bottom: 0.1em;\n    padding-top: 0.1em;\n  }\n  .line:hover {\n  \n  }\n  .error {\n    color: red;\n  }\n  .badge {\n    border: 1px solid currentColor;\n    align-self: center;\n    font-size: 70%;\n    padding-left: 0.2em;\n    padding-right: 0.2em;\n    border-radius: 1em;\n    margin-left: 0.5em;\n    margin-right: 0.5em;\n  }\n  .msg {\n    flex: 1;\n    word-break: break-word;\n  }\n  ${ css }\n  `\n  );\n\n  const el = document.createElement(`div`);\n  el.className = `log`;\n  shadowRoot.append(el);\n\n  const error = (messageOrError: string | Error) => {\n    const line = document.createElement(`div`);\n\n    if (typeof messageOrError === `string`) {\n      line.innerHTML = messageOrError;\n    } else if (messageOrError instanceof Error) {\n      const stack = messageOrError.stack;\n      line.innerHTML = stack === undefined ? messageOrError.toString() : stack.toString();\n    } else {\n      line.innerHTML = messageOrError as string;\n    }\n    line.classList.add(`error`);\n    append(line);\n    lastLog = undefined;\n    lastLogRepeats = 0;\n  };\n\n  let lastLogTime = 0;\n\n  const warn = (whatToLog: unknown = ``): HTMLElement | undefined => {\n    const element = log(whatToLog);\n    if (!element) return element;\n    element.classList.add(`warning`);\n    return element;\n  }\n  const log = (whatToLog: unknown = ``): HTMLElement | undefined => {\n    let message: string | undefined;\n    const interval = window.performance.now() - lastLogTime;\n    if (opts.minIntervalMs && interval < opts.minIntervalMs) return;\n    lastLogTime = window.performance.now();\n\n    if (typeof whatToLog === `object`) {\n      message = JSON.stringify(whatToLog);\n    } else if (whatToLog === undefined) {\n      message = `(undefined)`;\n    } else if (whatToLog === null) {\n      message = `(null)`;\n    } else if (typeof whatToLog === `number`) {\n      if (Number.isNaN(message)) message = `(NaN)`;\n      message = whatToLog.toString();\n    } else {\n      message = whatToLog as string;\n    }\n\n    if (message.length === 0) {\n      const rule = document.createElement(`hr`);\n      lastLog = undefined;\n      append(rule);\n    } else if (message === lastLog && collapseDuplicates) {\n      const lastElement = el.firstElementChild as HTMLElement;\n      let lastBadge = lastElement.querySelector(`.badge`);\n      if (lastBadge === null) {\n        lastBadge = document.createElement(`div`);\n        lastBadge.className = `badge`;\n        lastElement.insertAdjacentElement(`beforeend`, lastBadge);\n      }\n      if (lastElement !== null) {\n        lastBadge.textContent = (++lastLogRepeats).toString();\n      }\n      return lastElement;\n    } else {\n      const line = document.createElement(`div`);\n      line.textContent = message;\n      append(line);\n      lastLog = message;\n      return line;\n    }\n  };\n\n  const append = (line: HTMLElement) => {\n    if (timestamp) {\n      const wrapper = document.createElement(`div`);\n      const timestamp = document.createElement(`div`);\n      timestamp.className = `timestamp`;\n      timestamp.textContent = new Date().toLocaleTimeString();\n      wrapper.append(timestamp, line);\n      line.classList.add(`msg`);\n      wrapper.classList.add(`line`);\n      line = wrapper;\n    } else {\n      line.classList.add(`line`, `msg`);\n    }\n\n    if (opts.reverse) {\n      el.append(line);\n    } else {\n      el.insertBefore(line, el.firstChild);\n    }\n\n    if (capacity > 0 && ++added > capacity * 2) {\n      while (added > capacity) {\n        el.lastChild?.remove();\n        added--;\n      }\n    }\n\n    if (opts.reverse) {\n      // Scroll to bottom\n      el.scrollTop = el.scrollHeight;\n    }\n    lastLogRepeats = 0;\n  };\n\n  const clear = () => {\n    el.innerHTML = ``;\n    lastLog = undefined;\n    lastLogRepeats = 0;\n    added = 0;\n  };\n\n  const dispose = () => {\n    el.remove();\n  };\n\n  return {\n    error,\n    log,\n    warn,\n    append,\n    clear,\n    dispose,\n    get isEmpty() {\n      return added === 0;\n    },\n  };\n};\n","import { getErrorMessage } from '@ixfx/debug';\nimport { log, type LogOpts } from './log.js';\nimport { resolveEl } from './resolve-el.js';\nimport { afterMatch } from '@ixfx/core/text';\n\nexport type InlineConsoleOptions = LogOpts & Partial<{\n  /**\n   * If true, styling is not applied\n   */\n  witholdCss: boolean,\n  /**\n   * If provided, entries are added to this element.\n   * By default a new element, #ixfx-log is created and added\n   * to the document.\n   */\n  insertIntoEl: string | HTMLElement\n}>;\n\n/**\n * Adds an inline console to the page. A DIV is added to display log messages.\n * \n * Captures all console.log, console.warn and console.error calls, as well as unhandled exceptions.\n * \n * ```js\n * // Adds the DIV and intercepts console logs\n * inlineConsole();\n * \n * console.log(`Hello`); // message is displayed in the inline console\n * ```\n * @param options \n */\nexport const inlineConsole = (options: InlineConsoleOptions = {}) => {\n  const original = {\n    log: console.log,\n    error: console.error,\n    warn: console.warn\n  };\n  const witholdCss = options.witholdCss ?? false;\n  const insertIntoEl = options.insertIntoEl;\n\n  let logElement: HTMLElement | undefined;\n  if (insertIntoEl) {\n    logElement = resolveEl(insertIntoEl);\n  } else {\n    logElement = document.createElement(`DIV`);\n    logElement.id = `ixfx-log`;\n    document.body.prepend(logElement);\n  }\n  if (!witholdCss) {\n    logElement.style.position = `fixed`;\n    logElement.style.left = `0px`;\n    logElement.style.top = `0px`;\n    logElement.style.pointerEvents = `none`;\n    logElement.style.display = `none`;\n  }\n\n  const logger = log(logElement, options);\n\n  const visibility = (show: boolean) => {\n    logElement.style.display = show ? `block` : `none`;\n  }\n\n  console.error = (message?: any, ...optionalParameters: any[]) => {\n    logger.error(message);\n    if (optionalParameters.length > 0) {\n      logger.error(optionalParameters);\n    }\n    original.error(message, ...optionalParameters);\n    visibility(true);\n  }\n\n  console.warn = (message?: any, ...optionalParameters: any[]) => {\n    logger.warn(message);\n    if (optionalParameters.length > 0) {\n      logger.warn(optionalParameters);\n    }\n    visibility(true);\n  }\n\n  console.log = (message?: any, ...optionalParameters: any[]) => {\n    logger.log(message);\n    if (optionalParameters.length > 0) {\n      logger.log(optionalParameters);\n    }\n    original.log(message, ...optionalParameters);\n    visibility(true);\n  }\n\n  window.onerror = (event, source, lineno, _colno, error) => {\n    const abbreviatedSource = source === undefined ? `` : afterMatch(source, `/`, { fromEnd: true });\n    const eventString = getErrorMessage(error);\n    logger.error(eventString + ` (${ abbreviatedSource }:${ lineno })`);\n    visibility(true);\n  };\n\n  window.addEventListener('unhandledrejection', function (e) {\n    logger.error(e.reason);\n    visibility(true);\n  })\n}","import { uniqueInstances } from \"@ixfx/core\";\nexport type ElementQueryOptions = {\n  /**\n   * If true, elements are only returned once, even if that match several queries\n   */\n  ensureUnique: boolean\n}\n\n/**\n * Async iterator over DOM query strings\n * ```js\n * query(`div`); // all DIVs\n * query([`.class`, `.and-other-class`]); // All things with these two classes\n * ```\n * @param queryOrElement \n * @returns \n */\nexport async function* query(queryOrElement: string | HTMLElement | (string | HTMLElement)[] | AsyncGenerator<string | HTMLElement>, options: Partial<ElementQueryOptions> = {}): AsyncGenerator<HTMLElement> {\n\n  if (typeof queryOrElement === `string`) {\n    return query([ queryOrElement ], options);\n  } else if (typeof queryOrElement === `object` && `nodeName` in queryOrElement) {\n    return query([ queryOrElement ], options);\n  }\n\n  const ensureUnique = options ?? false;\n  const isUnique = ensureUnique ? uniqueInstances<HTMLElement>() : (_: HTMLElement) => true;\n\n  if (Array.isArray(queryOrElement)) {\n    for (const item of queryOrElement) {\n      if (typeof item === `string`) {\n        for (const element of document.querySelectorAll(item)) {\n          const elementProper = element as HTMLElement;\n          if (isUnique(elementProper)) {\n            yield elementProper;\n          }\n        }\n      } else {\n        if (isUnique(item)) {\n          yield item;\n        }\n      }\n    }\n  } else {\n    for await (const item of queryOrElement) {\n      if (typeof item === `string`) {\n        for (const element of document.querySelectorAll(item)) {\n          if (isUnique(element as HTMLElement)) {\n            yield element as HTMLElement;\n          }\n        }\n      } else {\n        if (isUnique(item)) {\n          yield item;\n        }\n      }\n    }\n  }\n}","import { shortGuid } from \"@ixfx/random\"\nimport { resolveEl } from \"./resolve-el.js\"\n\nexport type Panel<TNotifyArgs> = {\n  mount: (parentEl: HTMLElement) => void\n  dismount: () => void\n  id: string\n  label: string\n  /**\n   * Panel gets a notification\n   * @param name \n   * @param args \n   * @returns \n   */\n  notify?: (name: string, args: TNotifyArgs) => void\n}\n\nexport const tabSet = <TNotifyArgs>(options: {\n  panels: Panel<TNotifyArgs>[],\n  parent: HTMLElement | string,\n  preselectId?: string,\n  onPanelChanging?: (priorPanel: Panel<TNotifyArgs> | undefined, newPanel: Panel<TNotifyArgs> | undefined) => boolean | void,\n  onPanelChange?: (priorPanel: Panel<TNotifyArgs> | undefined, newPanel: Panel<TNotifyArgs> | undefined) => void\n}) => {\n\n  const panels = options.panels;\n  const preselectId = options.preselectId ?? panels[ 0 ].id;\n  const guid = `tabset-${ shortGuid() }`;\n  const parentEl = resolveEl(options.parent);\n  const switcher = `\n  <div class=\"ixfx-tabset\" id=\"${ guid }\">\n    <fieldset class=\"ixfx-tabset-controls\">\n    ${ panels.map(p => {\n    const panelId = `${ guid }-${ p.id }-select`;\n    return `<input type=\"radio\" name=\"${ guid }-tabs\" id=\"${ panelId }\" data-tabset=\"${ p.id }\"><label for=\"${ panelId }\">${ p.label }</label>`\n  }).join(``) }\n    </fieldset>\n    <div class=\"ixfx-tabset-host\" id=\"${ guid }-host\"></div>\n  </div>\n  `\n  parentEl.innerHTML = switcher;\n\n  // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n  const hostEl = document.getElementById(`${ guid }-host`)!;\n  // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n  const tabSetEl = document.getElementById(guid)!;\n\n  tabSetEl.querySelector(`fieldset`)?.addEventListener(`change`, event => {\n    const el = event.target as HTMLInputElement;\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    select(el.getAttribute(`data-tabset`)!);\n  })\n\n  let currentPanel: Panel<any> | undefined;\n\n  const select = (id: string) => {\n    const newPanel = panels.find(p => p.id === id);\n    const priorPanel = currentPanel;\n\n    if (options.onPanelChanging) {\n      const allow = options.onPanelChanging(priorPanel, newPanel);\n      if (typeof allow === `boolean` && !allow) return; // Cancel panel change\n    }\n    if (priorPanel) {\n      priorPanel.dismount();\n    }\n    currentPanel = newPanel;\n    if (newPanel) {\n      newPanel.mount(hostEl);\n      const domId = `#${ guid }-${ id }-select`;\n      const inputEl = tabSetEl.querySelector(domId) as HTMLInputElement | undefined;\n      if (inputEl) {\n        inputEl.checked = true;\n      } else {\n        console.warn(`Could not find INPUT element for panel id: ${ id } (${ domId })`);\n      }\n    }\n    if (options.onPanelChange) options.onPanelChange(priorPanel, newPanel);\n  }\n\n  select(preselectId);\n  let warned = false;\n  const notify = (name: string, args: TNotifyArgs) => {\n    if (!currentPanel) return;\n    if (currentPanel.notify) {\n      currentPanel.notify(name, args);\n    } else if (!warned) {\n      warned = true;\n      console.warn(`TabbedPanel.notify dropping notification '${ name }'. Panel implementation is missing 'notify' function`);\n    }\n  }\n\n  return { select, panels, hostEl, tabSetEl, notify }\n}","import JSON5 from 'json5';\n\nimport { resolveEl } from './resolve-el.js';\nimport { getPointParameter, type Point } from '@ixfx/geometry/point';\nimport type { GridCardinalDirection } from '@ixfx/geometry/grid';\nimport { cardinal } from '@ixfx/geometry/rect';\nimport { Points } from '@ixfx/geometry';\n\nexport type PointSpaces = `viewport` | `screen` | `document`;\n\n/**\n * Convert an absolute point to relative, in different coordinate spaces.\n *\n * When calling the returned function, the input value must be in the same\n * scale as the intended output scale.\n *\n * Viewport-relative is used by default.\n *\n * @example Get relative position of click in screen coordinates\n * ```js\n * const f = pointScaler({ to: 'screen' });\n * document.addEventListener('click', evt => {\n *  const screenRelative = f(evt.screenX, evt.screenY);\n *  // Yields {x,y} on 0..1 scale\n * });\n * ```\n *\n * @example Get relative position of click in viewport coordinates\n * ```js\n * const f = pointScaler({ to: 'viewport' });\n * document.addEventListener('click', evt => {\n *  const viewportRelative = f(evt.clientX, evt.clientY);\n *  // Yields {x,y} on 0..1 scale\n * });\n * ```\n *\n * @example Get relative position of click in document coordinates\n * ```js\n * const f = pointScaler({ to: 'document' });\n * document.addEventListener('click', evt => {\n *  const documentRelative = f(evt.pageX, evt.pageY);\n *  // Yields {x,y} on 0..1 scale\n * });\n * ```\n *\n * @param reference\n * @returns\n */\nexport const pointScaler = (reference: PointSpaces = `viewport`) => {\n  switch (reference) {\n    case `viewport`: {\n      return (a: Readonly<Point | number | number[]>, b?: number) => {\n        const pt = getPointParameter(a, b);\n        return Object.freeze({\n          x: pt.x / window.innerWidth,\n          y: pt.y / window.innerHeight,\n        });\n      };\n    }\n    case `screen`: {\n      return (a: Readonly<Point | number | number[]>, b?: number) => {\n        const pt = getPointParameter(a, b);\n        return Object.freeze({\n          x: pt.x / screen.width,\n          y: pt.y / screen.height,\n        });\n      };\n    }\n    case `document`: {\n      return (a: Readonly<Point | number | number[]>, b?: number) => {\n        const pt = getPointParameter(a, b);\n        return Object.freeze({\n          x: pt.x / document.body.scrollWidth,\n          y: pt.y / document.body.scrollHeight,\n        });\n      };\n    }\n    default: {\n      throw new Error(\n        `Unknown 'reference' parameter: ${ JSON.stringify(reference) }`\n      );\n    }\n  }\n};\n\nexport type ElPositionOpts = {\n  readonly target?: PointSpaces;\n  readonly relative?: boolean;\n  readonly anchor?: GridCardinalDirection | `center`;\n};\n\n/**\n * Returns a function which yields element position in target coordinate space with optional scaling.\n * Live position is calculated when the function is invoked.\n * Use {@link positionRelative} to simply get relative position of element in given coordinate space.\n *\n * @example Absolute position of #blah in viewport coordinate space\n * ```js\n * const f = positionFn('#blah');\n * f(); // Yields: {x,y}\n * // Or:\n * positionFn('#blah')(); // Immediately invoke\n * ```\n *\n * @example Relative position of element in viewport-space\n * ```js\n * const f = positionFn(evt.target, { relative: true });\n * f(); // Yields: {x,y}\n * ```\n *\n * @example Relative position of #blah in screen-space\n * ```js\n * const f = positionFn('#blah', { target: 'screen', relative: true });\n * f(); // Yields: {x,y}\n * ```\n *\n * By default, top-left corner (north west) is used. Other cardinal points or 'center' can be specified:\n * ```js\n * // Relative position by center\n * positionFn('#blah', { relative: true, anchor: 'center' });\n *\n * // ...by bottom-right corner\n * positionFn('#blah', { relative: true, anchor: 'se' });\n * ```\n *\n * This function is useful if you have a stable DOM element and conversion target.\n * If the DOM element is changing continually, consider using {@link viewportToSpace} to\n * convert from viewport coordinates to target coordinates:\n *\n * ```js\n * // Eg.1 Absolute coords in screen space\n * const vpToScreen = viewportToSpace('screen');\n * vpToScreen(el.getBoundingClientRect());\n *\n * // Eg.2 Relative coords in viewport space\n * const vpRelative = pointScaler(); // Re-usable scaler. Default uses viewport\n * vpRelative(el.getBoundingClientRect()); // Yields: { x,y }\n *\n * // Eg.3 Relative coords in screen space\n * const vpToScreen = viewportToSpace('screen'); // Map viewport->screen\n * const screenRelative = pointScaler('screen'); // Scale screen units\n *\n * // Combine into a resuable function that takes an element\n * const mapAndScale = (el) => screenRelative(vpToScreen(el.getBoundingClientRect()));\n *\n * // Call\n * mapAndScale(document.getElementById('blah')); // Yields: { x,y }\n * ```\n * @param domQueryOrEl\n * @param options\n * @returns\n */\n// eslint-disable-next-line unicorn/prevent-abbreviations\nexport const positionFn = (\n  domQueryOrEl: Readonly<string | HTMLElement>,\n  options: ElPositionOpts = {}\n): (() => Point) => {\n  const targetSpace = options.target ?? `viewport`;\n  const relative = options.relative ?? false;\n  const anchor = options.anchor ?? `nw`;\n\n  const el = resolveEl(domQueryOrEl);\n  const vpToSpace = viewportToSpace(targetSpace);\n\n  if (relative) {\n    const s = pointScaler(targetSpace);\n    return () => s(vpToSpace(cardinal(el.getBoundingClientRect(), anchor)));\n  } else {\n    return () => vpToSpace(cardinal(el.getBoundingClientRect(), anchor));\n  }\n};\n\n/**\n * Returns a {x,y} Point on a cardinal position of element.\n * ```\n * // Top edge, middle horizontal position\n * const pos = cardinalPosition(`#blah`, `n`);\n * ```\n * @param domQueryOrEl \n * @param anchor \n * @returns \n */\nexport const cardinalPosition = (\n  domQueryOrEl: Readonly<string | HTMLElement>,\n  anchor: GridCardinalDirection | `center` = `nw`\n): Point => {\n  const el = resolveEl(domQueryOrEl);\n  return cardinal(el.getBoundingClientRect(), anchor);\n};\n/**\n * Returns relative position of element in target coordinate space, or viewport by default.\n * Relative means that { x:0.5, y: 0.5 } is the middle of the target space. Eg for viewport, that means its the middle of the browser window.\n * ```js\n * // These all yield { x, y }\n * elPositionRelative('#blah');\n * elPositionRelative(evt.target, 'screen');\n * ```\n * @param domQueryOrEl DOM query or element\n * @param target Target coordinate space, or viewport by default\n * @returns Point\n */\nexport const positionRelative = (\n  domQueryOrEl: Readonly<string | HTMLElement>,\n  target: PointSpaces = `viewport`\n): Point => {\n  const f = positionFn(domQueryOrEl, { relative: true, target });\n  return f();\n};\n\n/**\n * Returns a function that converts input viewport coordinate space\n * to an output coordinate space.\n *\n * ```js\n * // f() will convert from viewport to document coordinate space\n * const f = viewportToSpace('document');\n *\n * // {x:100,y:100} is viewport coordinate space\n * f(100,100); // Yields: { x, y } converted to document space\n * ```\n *\n * Or immediately invoke for one-off use:\n * ```js\n * viewportToSpace('document')(100,100); // Yields: { x, y }\n * ```\n * @param targetSpace\n * @returns\n */\nexport const viewportToSpace = (targetSpace: PointSpaces = `viewport`) => {\n  switch (targetSpace) {\n    case `screen`: {\n      return (a: Readonly<Point | number[] | number>, b?: number) => {\n        const pt = getPointParameter(a, b);\n        return Object.freeze({\n          x: pt.x + window.screenX,\n          y: pt.y + window.screenY,\n        });\n      };\n    }\n    case `document`: {\n      return (a: Readonly<Point | number[] | number>, b?: number) => {\n        const pt = getPointParameter(a, b);\n        return Object.freeze({\n          x: pt.x + window.scrollX,\n          y: pt.y + window.scrollY,\n        });\n      };\n    }\n    case `viewport`: {\n      return (a: Readonly<Point | number[] | number>, b?: number) => {\n        const pt = getPointParameter(a, b);\n        return Object.freeze({\n          x: pt.x,\n          y: pt.y,\n        });\n      };\n    }\n    default: {\n      throw new Error(\n\n        `Unexpected target coordinate space: ${ targetSpace }. Expected: viewport, document or screen`\n      );\n    }\n  }\n};\n\n/**\n * Position element by relative coordinate. Relative to window dimensions by default\n * @param relativePos Window-relative coordinate. 0.5/0.5 is middle of window.\n */\nexport const positionFromMiddle = (\n  domQueryOrEl: string | HTMLElement,\n  relativePos: Point,\n  relativeTo: `window` | `screen` = `window`\n) => {\n  if (!domQueryOrEl) throw new Error(`domQueryOrEl is null or undefined`);\n  const el = resolveEl<HTMLElement>(domQueryOrEl);\n\n  // Convert relative to absolute units\n  const absPosition = Points.multiply(\n    relativePos,\n    window.innerWidth,\n    window.innerHeight\n  );\n\n  const thingRect = el.getBoundingClientRect();\n  const offsetPos = Points.subtract(\n    absPosition,\n    thingRect.width / 2,\n    thingRect.height / 2\n  );\n\n  // Apply via CSS\n  el.style.transform = `translate(${ offsetPos.x }px, ${ offsetPos.y }px)`;\n};\n\n\n\n\n\n\n\n/**\n * Given an array of class class names, this will cycle between them each time\n * it is called.\n *\n * Eg, assume `list` is: [ `a`, `b`, `c` ]\n *\n * If `el` already has the class `a`, the first time it is called, class `a`\n * is removed, and `b` added. The next time `b` is swapped for `c`. Once again,\n * `c` will swap with `a` and so on.\n *\n * If `el` is undefined or null, function silently returns.\n * @param el Element\n * @param list List of class names\n * @returns\n */\nexport const cycleCssClass = (\n  el: Readonly<HTMLElement>,\n  list: readonly string[]\n) => {\n\n  if (el === null || !el) return;\n  if (!Array.isArray(list)) {\n    throw new TypeError(`List should be an array of strings`);\n  }\n\n  for (let index = 0; index < list.length; index++) {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n    if (el.classList.contains(list[ index ])) {\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n      el.classList.remove(list[ index ]);\n      if (index + 1 < list.length) {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n        el.classList.add(list[ index + 1 ]);\n      } else {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n        el.classList.add(list[ 0 ]);\n      }\n      return;\n    }\n  }\n  el.classList.add(list[ 0 ] as string);\n};\n\n/**\n * Source: https://zellwk.com/blog/translate-in-javascript\n * @param domQueryOrEl\n */\nexport const getTranslation = (\n  domQueryOrEl: Readonly<string | HTMLElement>\n): Points.Point3d => {\n  // Source:\n  // https://raw.githubusercontent.com/zellwk/javascript/master/src/browser/dom/translate-values.js\n\n  const el = resolveEl<HTMLElement>(domQueryOrEl);\n  const style = window.getComputedStyle(el);\n  const matrix = style.transform;\n\n  // No transform property. Simply return 0 values.\n  if (matrix === `none` || typeof matrix === `undefined`) {\n    return {\n      x: 0,\n      y: 0,\n      z: 0,\n    };\n  }\n\n  // Can either be 2d or 3d transform\n  const matrixType = matrix.includes(`3d`) ? `3d` : `2d`;\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-expect-error\n  const matrixValues = (/matrix.*\\((.+)\\)/.exec(matrix))[ 1 ].split(`, `);\n\n  // 2d Matrixes have 6 values\n  // Last 2 values are X and Y.\n  // 2d Matrixes does not have Z value.\n  if (matrixType === `2d`) {\n    return {\n      x: Number.parseFloat(matrixValues[ 4 ]),\n      y: Number.parseFloat(matrixValues[ 5 ]),\n      z: 0,\n    };\n  }\n\n  // 3d Matrixes have 16 values\n  // The 13th, 14th, and 15th values are X, Y, and Z\n\n  if (matrixType === `3d`) {\n    return {\n      x: Number.parseFloat(matrixValues[ 12 ]),\n      y: Number.parseFloat(matrixValues[ 13 ]),\n      z: Number.parseFloat(matrixValues[ 14 ]),\n    };\n  }\n\n  return { x: 0, y: 0, z: 0 };\n};\n\n\n/**\n * Creates an element after `sibling`\n * ```\n * const el = createAfter(siblingEl, `DIV`);\n * ```\n * @param sibling Element\n * @param tagName Element to create\n * @returns New element\n */\nexport const createAfter = (\n  sibling: Readonly<HTMLElement>,\n  tagName: string\n): HTMLElement => {\n  const el = document.createElement(tagName);\n  sibling.parentElement?.insertBefore(el, sibling.nextSibling);\n  return el;\n};\n\n/**\n * Creates an element inside of `parent`\n * ```\n * const newEl = createIn(parentEl, `DIV`);\n * ```\n * @param parent Parent element\n * @param tagName Tag to create\n * @returns New element\n */\nexport const createIn = (\n  parent: Readonly<HTMLElement>,\n  tagName: string\n): HTMLElement => {\n  const el = document.createElement(tagName);\n  parent.append(el);\n  return el;\n};\n\n/**\n * Remove all child nodes from `parent`\n * @param parent\n */\nexport const clear = (parent: Readonly<HTMLElement>) => {\n  let c = parent.lastElementChild;\n\n  while (c) {\n    c.remove();\n    c = parent.lastElementChild;\n  }\n};\n\n\n/**\n * Copies string representation of object to clipboard\n * @param object\n * @returns Promise\n */\nexport const copyToClipboard = (object: object) => {\n  const p = new Promise((resolve, reject) => {\n    //const json = JSON.stringify(obj, null, 2);\n\n    const string_ = JSON5.stringify(object);\n    navigator.clipboard.writeText(JSON.stringify(string_)).then(\n      () => {\n        resolve(true);\n      },\n      (error) => {\n        console.warn(`Could not copy to clipboard`);\n        console.log(string_);\n        reject(new Error(error));\n      }\n    );\n  });\n  return p;\n};\n\n/**\n * Inserts `element` into `parent` sorted according to its HTML attribute `data-sort`.\n * \n * Assumes:\n * * Every child of `parent` and `element`, has a `data-sort` attribute. This is the basis for sorting.\n * * `parent` starts off empty or pre-sorted.\n * * Order of `parent`'s children is not changed (ie it always remains sorted)\n * @param parent Parent to insert into\n * @param element Element to insert\n */\nexport const insertSorted = (parent: HTMLElement, element: HTMLElement) => {\n  const elSort = element.getAttribute(`data-sort`) ?? ``;\n  let elAfter: HTMLElement | undefined;\n  let elBefore: HTMLElement | undefined;\n  for (const c of parent.children) {\n    const sort = c.getAttribute(`data-sort`) ?? ``;\n    if (elSort >= sort) elAfter = c as HTMLElement;\n    if (elSort <= sort) elBefore = c as HTMLElement;\n    if (elAfter !== undefined && elBefore !== undefined) break;\n  }\n  if (elAfter !== undefined) {\n    elAfter.insertAdjacentElement(`afterend`, element);\n  } else if (elBefore === undefined) {\n    parent.append(element);\n  } else {\n    elBefore.insertAdjacentElement(`beforebegin`, element);\n  }\n}\n\n/**\n * Creates or updates an element based on an input value.\n * This function should not add the element to the DOM.\n */\nexport type CreateUpdateElement<V> = (\n  /**\n   * Value to create/update for\n   */\n  item: V,\n  /**\n   * Element to update, or null if it needs to be created\n   */\n  el: HTMLElement | null\n) => HTMLElement;\n\n/**\n * Creates a DOM tree, based on provided data.\n * \n * This will create new DOM elements if needed, update\n * existing ones or remove them if the value is no longer present.\n * \n * \n * @param parentEl \n * @param list Values to create elements for\n * @param createUpdate Function to create/update elements based on a value\n */\nexport const reconcileChildren = <V>(\n  parentEl: HTMLElement,\n  list: Map<string, V>,\n  createUpdate: CreateUpdateElement<V>\n) => {\n  if (typeof parentEl === `undefined`) throw new Error(`Param 'parentEl' is undefined`);\n\n  if (parentEl === null) throw new Error(`Param 'parentEl' is null`);\n\n  const seen = new Set<string>();\n\n  for (const [ key, value ] of list) {\n    const id = `c-${ key }`;\n\n    const el = parentEl.querySelector(`#${ id }`);\n    const finalEl = createUpdate(value, el as HTMLElement);\n    if (el !== finalEl) {\n      finalEl.id = id;\n      parentEl.append(finalEl);\n    }\n    seen.add(id);\n  }\n\n  const prune: HTMLElement[] = [];\n  for (const child of parentEl.children) {\n    if (!seen.has(child.id)) {\n      prune.push(child as HTMLElement);\n    }\n  }\n\n  // for (let index = 0; index < parentEl.children.length; index++) {\n  //   const c = parentEl.children[ index ] as HTMLElement;\n  //   if (!seen.has(c.id)) {\n  //     prune.push(c);\n  //   }\n  // }\n\n  for (const p of prune) p.remove();\n};\n\n/**\n * Gets a HTML element by id, throwing an error if not found\n * @param id \n * @returns \n */\n// eslint-disable-next-line @typescript-eslint/no-unnecessary-type-parameters\nexport const byId = <T extends HTMLElement>(id: string): T => {\n  const element = document.getElementById(id);\n  if (element === null) throw new Error(`HTML element with id '${ id }' not found`);\n  return element as T;\n}"],"mappings":"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"}