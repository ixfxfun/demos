{"version":3,"file":"src-Bo4oKRxs.js","names":[],"sources":["../packages/guards/dist/src/result.js","../packages/guards/dist/src/numbers.js","../packages/guards/dist/src/arrays.js","../packages/guards/dist/src/empty.js","../packages/guards/dist/src/function.js","../packages/guards/dist/src/object.js","../packages/guards/dist/src/range.js","../packages/guards/dist/src/string.js","../packages/guards/dist/src/index.js"],"sourcesContent":["export const getErrorMessage = (ex) => {\n    if (typeof ex === `string`)\n        return ex;\n    if (ex instanceof Error) {\n        return ex.message;\n    }\n    return ex;\n};\n/**\n * Throws an error if any result is a failure.\n * Error message will be the combined from all errors.\n * @param results\n * @returns\n */\nexport const throwIfFailed = (...results) => {\n    const failed = results.filter(r => resultIsError(r)); // as ResultError<any>[];\n    if (failed.length === 0)\n        return;\n    const messages = failed.map(f => resultErrorToString(f));\n    throw new Error(messages.join(`, `));\n};\n/**\n * If any of `results` is an error, throws it, otherwise ignored.\n * @param results\n * @returns _true_ or throws\n */\nexport function resultThrow(...results) {\n    for (const r of results) {\n        const rr = typeof r === `object` ? r : r();\n        if (rr === undefined)\n            continue;\n        if (rr.success)\n            continue;\n        throw resultToError(rr);\n    }\n    return true;\n}\nexport function resultThrowSingle(result) {\n    if (result.success)\n        return true;\n    throw resultToError(result);\n}\n/**\n * Returns the first failed result, or _undefined_ if there are no fails\n * @param results\n * @returns\n */\nexport const resultFirstFail_ = (...results) => {\n    for (const r of results) {\n        const rr = typeof r === `object` ? r : r();\n        if (rr === undefined)\n            continue;\n        if (!rr.success)\n            return rr;\n    }\n};\n/**\n * Returns _true_ if `result` is an error\n * @param result\n * @returns\n */\nexport function resultIsError(result) {\n    if (typeof result !== `object`)\n        return false;\n    return !result.success;\n}\n/**\n * Returns _true_ if `result` is OK and has a value\n * @param result\n * @returns\n */\nexport function resultIsOk(result) {\n    if (typeof result !== `object`)\n        return false;\n    return result.success;\n}\n/**\n * Gets the result as an Error\n * @param result\n * @returns\n */\nexport function resultToError(result) {\n    if (typeof result.error === `string`) {\n        throw new Error(result.error, { cause: result.info });\n    }\n    if (result.error instanceof Error)\n        throw result.error;\n    return new Error(JSON.stringify(result.error), { cause: result.info });\n}\n/**\n * Unwraps the result, returning its value if OK.\n * If not, an exception is thrown.\n * @param result\n * @returns\n */\nexport function resultToValue(result) {\n    if (resultIsOk(result)) {\n        return result.value;\n    }\n    throw resultToError(result);\n}\n/**\n * Returns the error as a string.\n * @param result\n * @returns\n */\nexport function resultErrorToString(result) {\n    if (result.error instanceof Error)\n        return getErrorMessage(result.error);\n    if (typeof result.error === `string`)\n        return result.error;\n    return JSON.stringify(result.error);\n}\n/**\n * Returns first failed result or final value.\n * @param results\n * @returns\n */\nexport const resultsCollate = (...results) => {\n    let rr;\n    for (const r of results) {\n        rr = typeof r === `object` ? r : r();\n        if (rr === undefined)\n            continue;\n        if (!rr.success)\n            return rr;\n    }\n    if (!rr)\n        throw new Error(`No results`);\n    return rr;\n};\n/**\n * If `result` is an error, calls `callback`, passing the error.\n * Otherwise does nothing\n * @param result\n * @param callback\n */\nexport const resultWithFail = (result, callback) => {\n    if (resultIsError(result)) {\n        callback(result);\n    }\n};\n","import { resultsCollate } from \"./result.js\";\n/**\n * Returns true if `x` is a power of two\n * @param x\n * @returns True if `x` is a power of two\n */\nexport const isPowerOfTwo = (x) => Math.log2(x) % 1 === 0;\n/**\n * Returns `fallback` if `v` is NaN, otherwise returns `v`.\n *\n * Throws if `v` is not a number type, null or undefined\n * @param v\n * @param fallback\n * @returns\n */\nexport const ifNaN = (v, fallback) => {\n    if (typeof v !== `number`) {\n        throw new TypeError(`v is not a number. Got: ${typeof v}`);\n    }\n    if (Number.isNaN(v))\n        return fallback;\n    return v;\n};\n/**\n * Parses `value` as an integer, returning it if it meets the `range` criteria.\n * If not, `defaultValue` is returned.\n *\n * ```js\n * const i = integerParse('10', 'positive');    // 10\n * const i = integerParse('10.5', 'positive');  // 10\n * const i = integerParse('0', 'nonZero', 100); // 100\n * ```\n *\n * NaN is returned if criteria does not match and no default is given\n * ```js\n * const i = integerParse('10', 'negative');    // NaN\n * ```\n *\n * @param value\n * @param range\n * @param defaultValue\n * @returns\n */\nexport const integerParse = (value, range = ``, defaultValue = Number.NaN) => {\n    if (typeof value === `undefined`)\n        return defaultValue;\n    if (value === null)\n        return defaultValue;\n    try {\n        const parsed = Number.parseInt(typeof value === `number` ? value.toString() : value);\n        const r = integerTest(parsed, range, `parsed`);\n        return r.success ? parsed : defaultValue;\n    }\n    catch {\n        return defaultValue;\n    }\n};\n/**\n * Checks if `t` is not a number or within specified range.\n * Returns `[false, reason:string]` if invalid or `[true]` if valid.\n *\n * Alternatives: {@link integerTest} for additional integer check, {@link percentTest} for percentage-range.\n *\n * * (empty, default): must be a number type and not NaN.\n * * finite: must be a number, not NaN and not infinite\n * * positive: must be at least zero\n * * negative: must be zero or lower\n * * aboveZero: must be above zero\n * * belowZero: must be below zero\n * * percentage: must be within 0-1, inclusive\n * * nonZero: can be anything except zero\n * * bipolar: can be -1 to 1, inclusive\n * @param value Value to check\n * @param parameterName Name of parameter (for more helpful exception messages)\n * @param range Range to enforce\n * @returns\n */\nexport const numberTest = (value, range = ``, parameterName = `?`, info) => {\n    if (value === null)\n        return { success: false, error: `Parameter '${parameterName}' is null`, info };\n    if (typeof value === `undefined`) {\n        return { success: false, error: `Parameter '${parameterName}' is undefined`, info };\n    }\n    if (Number.isNaN(value)) {\n        return { success: false, error: `Parameter '${parameterName}' is NaN`, info };\n    }\n    if (typeof value !== `number`) {\n        return { success: false, error: `Parameter '${parameterName}' is not a number (${JSON.stringify(value)})`, info };\n    }\n    switch (range) {\n        case `finite`: {\n            if (!Number.isFinite(value)) {\n                return { success: false, error: `Parameter '${parameterName} must be finite (Got: ${value})`, info };\n            }\n            break;\n        }\n        case `positive`: {\n            if (value < 0) {\n                return { success: false, error: `Parameter '${parameterName}' must be at least zero (${value})`, info };\n            }\n            break;\n        }\n        case `negative`: {\n            if (value > 0) {\n                return { success: false, error: `Parameter '${parameterName}' must be zero or lower (${value})`, info };\n            }\n            break;\n        }\n        case `aboveZero`: {\n            if (value <= 0) {\n                return {\n                    success: false, error: `Parameter '${parameterName}' must be above zero (${value})`, info\n                };\n            }\n            break;\n        }\n        case `belowZero`: {\n            if (value >= 0) {\n                return { success: false, error: `Parameter '${parameterName}' must be below zero (${value})`, info };\n            }\n            break;\n        }\n        case `percentage`: {\n            if (value > 1 || value < 0) {\n                return {\n                    success: false, error: `Parameter '${parameterName}' must be in percentage range (0 to 1). (${value})`, info\n                };\n            }\n            break;\n        }\n        case `nonZero`: {\n            if (value === 0) {\n                return { success: false, error: `Parameter '${parameterName}' must non-zero. (${value})`, info };\n            }\n            break;\n        }\n        case `bipolar`: {\n            if (value > 1 || value < -1) {\n                return { success: false, error: `Parameter '${parameterName}' must be in bipolar percentage range (-1 to 1). (${value})`, info };\n            }\n            break;\n        }\n    }\n    return { success: true, value, info };\n};\n/**\n * Checks if `t` is not a number or within specified range.\n * Throws if invalid. Use {@link numberTest} to test without throwing.\n *\n* * (empty, default): must be a number type and not NaN.\n* * positive: must be at least zero\n* * negative: must be zero or lower\n* * aboveZero: must be above zero\n* * belowZero: must be below zero\n* * percentage: must be within 0-1, inclusive\n* * nonZero: can be anything except zero\n* * bipolar: can be -1 to 1, inclusive\n*\n * Alternatives: {@link integerTest} for additional integer check, {@link percentTest} for percentage-range.\n * @param value Value to test\n * @param range Range\n * @param parameterName Name of parameter\n */\n// export const throwNumberTest = (value?: unknown,\n//   range: NumberGuardRange = ``,\n//   parameterName = `?`) => {\n//   throwFromResult(numberTest(value, range, parameterName));\n// }\n/**\n * Compares two numbers with a given number of decimal places\n * ```js\n * a: 10.123 b: 10.1    decimals: 1 = true\n * a: 10.123 b: 10.2    decimals: 0 = true\n * a: 10.123 b: 10.14   decimals: 1 = true\n * a: 10.123 b: 10.14   decimals: 2 = false\n * ``\n * @param a\n * @param b\n * @param decimals How many decimals to include\n * @returns\n */\nexport const numberDecimalTest = (a, b, decimals = 3) => {\n    if (decimals === 0) {\n        a = Math.floor(a);\n        b = Math.floor(b);\n        if (a === b)\n            return { success: true, value: a };\n        return { success: false, error: `A is not identical to B` };\n    }\n    const mult = Math.pow(10, decimals);\n    const aa = Math.floor(a * mult);\n    const bb = Math.floor(b * mult);\n    if (aa !== bb)\n        return { success: false, error: `A is not close enough to B. A: ${a} B: ${b} Decimals: ${decimals}` };\n    return { success: true, value: a };\n};\n/**\n * Returns test of `value` being in the range of 0-1.\n * Equiv to `number(value, `percentage`);`\n *\n * This is the same as calling ```number(t, `percentage`)```\n * @param value Value to check\n * @param parameterName Param name for customising exception message\n * @returns\n */\nexport const percentTest = (value, parameterName = `?`, info) => numberTest(value, `percentage`, parameterName, info);\n// export const throwPercentTest = (value: number, parameterName = `?`) => {\n//   throwFromResult(percentTest(value, parameterName));\n//}\n/**\n * Checks if `value` an integer and meets additional criteria.\n * See {@link numberTest} for guard details, or use that if integer checking is not required.\n *\n * Note:\n * * `bipolar` will mean -1, 0 or 1.\n * * positive: must be at least zero\n * * negative: must be zero or lower\n * * aboveZero: must be above zero\n * * belowZero: must be below zero\n * * percentage: must be within 0-1, inclusive\n * * nonZero: can be anything except zero\n * @param value Value to check\n * @param parameterName Param name for customising exception message\n * @param range Guard specifier.\n */\nexport const integerTest = (value, range = ``, parameterName = `?`) => {\n    return resultsCollate(numberTest(value, range, parameterName), () => {\n        if (!Number.isInteger(value)) {\n            return { success: false, error: `Param '${parameterName}' is not an integer` };\n        }\n        return { success: true, value: value };\n    });\n};\nexport const integerArrayTest = (numbers) => {\n    for (const v of numbers) {\n        if (Math.abs(v) % 1 !== 0)\n            return { success: false, error: `Value is not an integer: ${v}` };\n    }\n    return { success: true, value: numbers };\n};\n/**\n * Returns _true_ if `value` is an integer in number or string form\n * @param value\n * @returns\n */\nexport const isInteger = (value) => {\n    if (typeof value === `string`)\n        value = Number.parseFloat(value);\n    const r = integerTest(value);\n    return r.success;\n};\n// export const throwIntegerTest = (value: number | undefined,\n//   range: NumberGuardRange = ``,\n//   parameterName = `?`) => {\n//   throwFromResult(integerTest(value, range, parameterName));\n// }\nexport const numberInclusiveRangeTest = (value, min, max, parameterName = `?`) => {\n    if (typeof value !== `number`) {\n        return { success: false, error: `Param '${parameterName}' is not a number type. Got type: '${typeof value}' value: '${JSON.stringify(value)}'` };\n    }\n    if (Number.isNaN(value)) {\n        return { success: false, error: `Param '${parameterName}' is not within range ${min}-${max}. Got: NaN` };\n    }\n    if (Number.isFinite(value)) {\n        if (value < min) {\n            return { success: false, error: `Param '${parameterName}' is below range ${min}-${max}. Got: ${value}` };\n        }\n        else if (value > max) {\n            return { success: false, error: `Param '${parameterName}' is above range ${min}-${max}. Got: ${value}` };\n        }\n        return { success: true, value };\n    }\n    else {\n        return { success: false, error: `Param '${parameterName}' is not within range ${min}-${max}. Got: infinite` };\n    }\n};\n// export const throwNumberInclusiveRangeTest = (value: number | undefined, min: number, max: number, parameterName = `?`) => {\n//   const r = numberInclusiveRangeTest(value, min, max, parameterName);\n//   if (r[ 0 ]) return;\n//   throw new Error(r[ 1 ]);\n// }\n","import { integerTest, numberInclusiveRangeTest } from \"./numbers.js\";\nimport { resultsCollate, resultThrow } from \"./result.js\";\n/**\n * Throws an error if parameter is not an array\n * @param value\n * @param parameterName\n */\nexport const arrayTest = (value, parameterName = `?`) => {\n    if (!Array.isArray(value)) {\n        return { success: false, error: `Parameter '${parameterName}' is expected to be an array'` };\n    }\n    return { success: true, value };\n};\n// export const throwArrayTest = (value: unknown, parameterName = `?`) => {\n//   resultThrow(arrayTest(value, parameterName));\n// }\n/**\n * Throws if `index` is an invalid array index for `array`, and if\n * `array` itself is not a valid array.\n * @param array\n * @param index\n */\nexport const arrayIndexTest = (array, index, name = `index`) => {\n    return resultsCollate(arrayTest(array), integerTest(index, `positive`, name), numberInclusiveRangeTest(index, 0, array.length - 1, name));\n};\n/**\n * Returns true if parameter is an array of strings\n * @param value\n * @returns\n */\nexport const arrayStringsTest = (value) => {\n    if (!Array.isArray(value))\n        return { success: false, error: `Value is not an array` };\n    if (value.some((v) => typeof v !== `string`)) {\n        return { success: false, error: `Contains something not a string` };\n    }\n    return { success: true, value };\n};\n// export const guardArray = <V>(array: ArrayLike<V>, name = `?`) => {\n//   if (array === undefined) {\n//     throw new TypeError(`Param '${ name }' is undefined. Expected array.`);\n//   }\n//   if (array === null) {\n//     throw new TypeError(`Param '${ name }' is null. Expected array.`);\n//   }\n//   if (!Array.isArray(array)) {\n//     throw new TypeError(`Param '${ name }' not an array as expected`);\n//   }\n// };\n","export const nullUndefTest = (value, parameterName = `?`) => {\n    if (typeof value === `undefined`) {\n        return { success: false, error: `${parameterName} param is undefined` };\n    }\n    if (value === null)\n        return { success: false, error: `${parameterName} param is null` };\n    return { success: true, value };\n};\n// export const throwNullUndef = (value: any, parameterName = `?`) => {\n//   const r = nullUndef(value, parameterName);\n//   if (r[ 0 ]) return;\n//   throw new Error(r[ 1 ]);\n// }\nexport const isDefined = (argument) => argument !== undefined;\n","export const isFunction = (object) => object instanceof Function;\n// eslint-disable-next-line @typescript-eslint/no-unsafe-function-type\nexport const functionTest = (value, parameterName = `?`) => {\n    if (value === undefined)\n        return { success: false, error: `Param '${parameterName}' is undefined. Expected: function.` };\n    if (value === null)\n        return { success: false, error: `Param '${parameterName}' is null. Expected: function.` };\n    if (typeof value !== `function`)\n        return { success: false, error: `Param '${parameterName}' is type '${typeof value}'. Expected: function` };\n    return { success: true, value };\n};\n// export const throwFunctionTest = (value: unknown, parameterName = `?`) => {\n//   const [ ok, message ] = functionTest(value, parameterName);\n//   if (ok) return;\n//   throw new TypeError(message);\n// }\n","/**\n * Tests_if `value` is a plain object\n *\n * ```js\n * isPlainObject(`text`); // false\n * isPlainObject(document); // false\n * isPlainObject({ hello: `there` }); // true\n * ```\n * @param value\n * @returns\n */\nexport const testPlainObject = (value) => {\n    if (typeof value !== `object` || value === null)\n        return { success: false, error: `Value is null or not object type` };\n    const prototype = Object.getPrototypeOf(value);\n    const t = (prototype === null || prototype === Object.prototype || Object.getPrototypeOf(prototype) === null) && !(Symbol.toStringTag in value) && !(Symbol.iterator in value);\n    if (t)\n        return { success: true, value };\n    return { success: false, error: `Fancy object` };\n};\n/**\n * Tests if `value` is primitive value (bigint,number,string or boolean) or plain object\n * @param value\n * @returns\n */\nexport const testPlainObjectOrPrimitive = (value) => {\n    const t = typeof value;\n    if (t === `symbol`)\n        return { success: false, error: `Symbol type` };\n    if (t === `function`)\n        return { success: false, error: `Function type` };\n    if (t === `bigint`)\n        return { success: true, value: value };\n    if (t === `number`)\n        return { success: true, value: value };\n    if (t === `string`)\n        return { success: true, value: value };\n    if (t === `boolean`)\n        return { success: true, value: value };\n    return testPlainObject(value);\n};\n","import { integerArrayTest } from \"./numbers.js\";\nimport { resultsCollate } from \"./result.js\";\nexport const rangeIntegerTest = (v, expected) => {\n    return resultsCollate(rangeTest(v, expected), integerArrayTest(v));\n};\n/**\n * Inclusive range 4-6 = 4, 5, 6\n * Exclusive range 4-6 = 5\n *\n * @param numbers\n * @param expected\n * @returns\n */\nexport const rangeTest = (numbers, expected) => {\n    for (const v of numbers) {\n        if (expected.minExclusive !== undefined) {\n            if (v <= expected.minExclusive) {\n                return { success: false, error: `Value '${v}' must be higher than minExclusive: '${expected.minExclusive}'` };\n            }\n        }\n        if (expected.minInclusive !== undefined) {\n            if (v < expected.minInclusive) {\n                return { success: false, error: `Value '${v}' must be equal or higher than minInclusive: '${expected.minInclusive}'` };\n            }\n        }\n        if (expected.maxExclusive !== undefined) {\n            if (v >= expected.maxExclusive) {\n                return { success: false, error: `Value '${v}' must be less than maxExclusive: '${expected.maxExclusive}'` };\n            }\n        }\n        if (expected.maxInclusive !== undefined) {\n            if (v > expected.maxInclusive) {\n                return { success: false, error: `Value '${v}' must be equal or less than maxInclusive: '${expected.maxInclusive}'` };\n            }\n        }\n    }\n    return { success: true, value: numbers };\n};\n","/**\n * Throws an error if parameter is not an string\n * @param value\n * @param parameterName\n */\nexport const stringTest = (value, range = ``, parameterName = `?`) => {\n    if (typeof value !== `string`)\n        return { success: false, error: `Param '${parameterName} is not type string. Got: ${typeof value}` };\n    switch (range) {\n        case `non-empty`:\n            if (value.length === 0)\n                return { success: false, error: `Param '${parameterName} is empty` };\n            break;\n    }\n    return { success: true, value };\n};\n// export const throwStringTest = (value: unknown, range: StringGuardRange = ``, parameterName = `?`) => {\n//   throwFromResult(stringTest(value, range, parameterName));\n// }\n","export * from './arrays.js';\nexport * from './empty.js';\nexport * from './function.js';\nexport * from './numbers.js';\nexport * from './object.js';\nexport * from './range.js';\nexport * from './result.js';\nexport * from './string.js';\nexport * from './types.js';\n"],"mappings":"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"}