{"version":3,"sources":["../src/numbers/Scale.ts","../src/geometry/point/Guard.ts"],"sourcesContent":["import { clamp } from './Clamp.js';\nimport { throwNumberTest } from '../util/GuardNumbers.js';\n\n/**\n * Scales `v` from an input range to an output range (aka `map`)\n *\n * For example, if a sensor's useful range is 100-500, scale it to a percentage:\n *\n * ```js\n * import { scale } from 'https://unpkg.com/ixfx/dist/data.js';\n *\n * scale(sensorReading, 100, 500, 0, 1);\n * ```\n *\n * `scale` defaults to a percentage-range output, so you can get away with:\n * ```js\n * scale(sensorReading, 100, 500);\n * ```\n *\n * If `v` is outside of the input range, it will likewise be outside of the output range.\n * Use {@link scaleClamped} to clip value to range.\n *\n * If inMin and inMax are equal, outMax will be returned.\n *\n * An easing function can be provided for non-linear scaling. In this case\n * the input value is 'pre scaled' using the function before it is applied to the\n * output range.\n *\n * ```js\n * scale(sensorReading, 100, 500, 0, 1, Easings.gaussian());\n * ```\n * @param v Value to scale\n * @param inMin Input minimum\n * @param inMax Input maximum\n * @param outMin Output minimum. If not specified, 0\n * @param outMax Output maximum. If not specified, 1\n * @param easing Easing function\n * @returns Scaled value\n */\nexport const scale = (\n  v: number,\n  inMin: number,\n  inMax: number,\n  outMin?: number,\n  outMax?: number,\n  easing?: (v: number) => number\n): number => scaler(inMin, inMax, outMin, outMax, easing)(v);\n\n/**\n * Returns a scaling function\n * @param inMin Input minimum\n * @param inMax Input maximum\n * @param outMin Output minimum. If not specified, 0\n * @param outMax Output maximum. If not specified, 1\n * @param easing Easing function\n * @returns\n */\nexport const scaler = (\n  inMin: number,\n  inMax: number,\n  outMin?: number,\n  outMax?: number,\n  easing?: (v: number) => number\n): ((v: number) => number) => {\n\n  const oMax = outMax ?? 1;\n  const oMin = outMin ?? 0;\n\n  return (v: number): number => {\n    if (inMin === inMax) return oMax;\n\n    let a = (v - inMin) / (inMax - inMin);\n    if (easing !== undefined) a = easing(a);\n    return a * (oMax - oMin) + oMin;\n  };\n};\n\n/**\n * As {@link scale}, but result is clamped to be\n * within `outMin` and `outMax`.\n *\n * @param v\n * @param inMin\n * @param inMax\n * @param outMin 1 by default\n * @param outMax 0 by default d\n * @param easing\n * @returns\n */\nexport const scaleClamped = (\n  v: number,\n  inMin: number,\n  inMax: number,\n  outMin?: number,\n  outMax?: number,\n  easing?: (v: number) => number\n): number => {\n  if (outMax === undefined) outMax = 1;\n  if (outMin === undefined) outMin = 0;\n  if (inMin === inMax) return outMax;\n\n  const x = scale(v, inMin, inMax, outMin, outMax, easing);\n  return clamp(x, outMin, outMax);\n};\n\n/**\n * Scales an input percentage to a new percentage range.\n *\n * If you have an input percentage (0-1), `scalePercentageOutput` maps it to an\n * _output_ percentage of `outMin`-`outMax`.\n *\n * ```js\n * import { scalePercentages } from 'https://unpkg.com/ixfx/dist/data.js';\n *\n * // Scales 50% to a range of 0-10%\n * scalePercentages(0.5, 0, 0.10); // 0.05 - 5%\n * ```\n *\n * An error is thrown if any parameter is outside of percentage range. This added\n * safety is useful for catching bugs. Otherwise, you could just as well call\n * `scale(percentage, 0, 1, outMin, outMax)`.\n *\n * If you want to scale some input range to percentage output range, just use `scale`:\n * ```js\n * import { scale } from 'https://unpkg.com/ixfx/dist/data.js';\n *\n * // Yields 0.5\n * scale(2.5, 0, 5);\n * ```\n * @param percentage Input value, within percentage range\n * @param outMin Output minimum, between 0-1\n * @param outMax Output maximum, between 0-1\n * @returns Scaled value between outMin-outMax.\n */\nexport const scalePercentages = (\n  percentage: number,\n  outMin: number,\n  outMax = 1\n): number => {\n  throwNumberTest(percentage, `percentage`, `v`);\n  throwNumberTest(outMin, `percentage`, `outMin`);\n  throwNumberTest(outMax, `percentage`, `outMax`);\n  return scale(percentage, 0, 1, outMin, outMax);\n};\n\n/**\n * Scales an input percentage value to an output range\n * If you have an input percentage (0-1), `scalePercent` maps it to an output range of `outMin`-`outMax`.\n * ```js\n * import { scalePercent } from 'https://unpkg.com/ixfx/dist/data.js';\n * scalePercent(0.5, 10, 20); // 15\n * ```\n *\n * @see {@link scalerPercent} Returns a function\n * @param v Value to scale\n * @param outMin Minimum for output\n * @param outMax Maximum for output\n * @returns\n */\nexport const scalePercent = (\n  v: number,\n  outMin: number,\n  outMax: number\n): number => scalerPercent(outMin, outMax)(v);\n\n/**\n * Returns a function that scales an input percentage value to an output range\n * @see {@link scalePercent} Calculates value\n * @param outMin\n * @param outMax\n * @returns Function that takes a single argument\n */\nexport const scalerPercent = (outMin: number, outMax: number) => {\n  return (v: number) => {\n    throwNumberTest(v, `percentage`, `v`);\n    return scale(v, 0, 1, outMin, outMax);\n  };\n};\n","import type { Point, Point3d } from \"./PointType.js\";\nimport { throwNumberTest } from '../../util/GuardNumbers.js';\n\n/**\n * Returns true if xy (and z, if present) are _null_.\n * @param p\n * @returns\n */\nexport const isNull = (p: Point) => {\n  if (isPoint3d(p)) {\n    if (p.z !== null) return false;\n  }\n  return p.x === null && p.y === null;\n}\n\n/***\n * Returns true if xy (and z, if present) isNaN\n */\nexport const isNaN = (p: Point) => {\n  if (isPoint3d(p)) {\n    if (!Number.isNaN(p.z)) return false;\n  }\n  return Number.isNaN(p.x) || Number.isNaN(p.y)\n}\n\n/**\n * Throws an error if point is invalid\n * @param p\n * @param name\n */\nexport function guard(p: Point, name = `Point`) {\n  if (p === undefined) {\n    throw new Error(\n      `'${ name }' is undefined. Expected {x,y} got ${ JSON.stringify(p) }`\n    );\n  }\n  if (p === null) {\n    throw new Error(\n      `'${ name }' is null. Expected {x,y} got ${ JSON.stringify(p) }`\n    );\n  }\n  if (p.x === undefined) {\n    throw new Error(\n      `'${ name }.x' is undefined. Expected {x,y} got ${ JSON.stringify(p) }`\n    );\n  }\n  if (p.y === undefined) {\n    throw new Error(\n      `'${ name }.y' is undefined. Expected {x,y} got ${ JSON.stringify(p) }`\n    );\n  }\n  if (typeof p.x !== `number`) {\n    // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n    throw new TypeError(`'${ name }.x' must be a number. Got ${ typeof p.x }`);\n  }\n  if (typeof p.y !== `number`) {\n    // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n    throw new TypeError(`'${ name }.y' must be a number. Got ${ typeof p.y }`);\n  }\n  if (p.z !== undefined) {\n    if (typeof p.z !== `number`) throw new TypeError(`${ name }.z must be a number. Got: ${ typeof p.z }`)\n    if (Number.isNaN(p.z)) throw new Error(`'${ name }.z' is NaN`);\n  }\n\n  if (p.x === null) throw new Error(`'${ name }.x' is null`);\n  if (p.y === null) throw new Error(`'${ name }.y' is null`);\n\n  if (Number.isNaN(p.x)) throw new Error(`'${ name }.x' is NaN`);\n  if (Number.isNaN(p.y)) throw new Error(`'${ name }.y' is NaN`);\n}\n\n/**\n * Throws if parameter is not a valid point, or either x or y is 0\n * @param pt\n * @returns\n */\nexport const guardNonZeroPoint = (pt: Point | Point3d, name = `pt`) => {\n  guard(pt, name);\n  throwNumberTest(pt.x, `nonZero`, `${ name }.x`);\n  throwNumberTest(pt.y, `nonZero`, `${ name }.y`);\n  if (typeof pt.z !== `undefined`) {\n    throwNumberTest(pt.z, `nonZero`, `${ name }.z`);\n  }\n\n  return true;\n};\n\n/**\n * Returns _true_ if `p` has x & y properties.\n * Returns _false_ if `p` is undefined, null or does not contain properties.\n * Use {@link isPoint3d} to check further check for `z`.\n * @param p \n * @returns \n */\n// eslint-disable-next-line @typescript-eslint/no-redundant-type-constituents\nexport function isPoint(p: number | unknown): p is Point {\n  if (p === undefined) return false;\n  if (p === null) return false;\n  if ((p as Point).x === undefined) return false;\n  if ((p as Point).y === undefined) return false;\n  return true;\n}\n\n/**\n * Returns _true_ if `p` has x, y, & z properties.\n * Returns _false_ if `p` is undefined, null or does not contain properties.\n * @param p \n * @returns \n */\n// eslint-disable-next-line @typescript-eslint/no-redundant-type-constituents\nexport const isPoint3d = (p: Point | unknown): p is Point3d => {\n  if (p === undefined) return false;\n  if (p === null) return false;\n  if ((p as Point3d).x === undefined) return false;\n  if ((p as Point3d).y === undefined) return false;\n  if ((p as Point3d).z === undefined) return false;\n  return true;\n};\n\n/**\n * Returns true if both xy (and z, if present) are 0.\n * Use `Points.Empty` to return an empty point.\n * @param p\n * @returns\n */\nexport const isEmpty = (p: Point) => {\n  if (isPoint3d(p)) {\n    if (p.z !== 0) return false;\n  }\n  return p.x === 0 && p.y === 0\n\n}\n\n/**\n * Returns true if point is a placeholder, where xy (and z, if present)\n * are `NaN`.\n *\n * Use Points.Placeholder to return a placeholder point.\n * @param p\n * @returns\n */\nexport const isPlaceholder = (p: Point) => {\n  if (isPoint3d(p)) {\n    if (!Number.isNaN(p.z)) return false;\n  }\n  return Number.isNaN(p.x) && Number.isNaN(p.y);\n}\n"],"mappings":"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","names":[]}