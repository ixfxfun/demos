{"version":3,"file":"iterables.js","names":["v: any","fromArray","array: V[]","interval: Interval","fromIterable","iterable: Iterable<V> | AsyncIterable<V>","chunks","it: AsyncIterable<V>","size: number","buffer: V[]","concat","dropWhile","f: (v: V) => boolean","until","it: AsyncIterable<any> | Iterable<any>","callback: () => (void | Promise<boolean> | undefined | boolean | Promise<undefined> | Promise<void>)","repeat","genCreator: () => Iterable<T> | AsyncIterable<T>","repeatsOrSignal: number | AbortSignal","equals","it1: AsyncIterable<V>","it2: AsyncIterable<V>","equality?: IsEqual<V>","every","f: (v: V) => boolean | Promise<boolean>","fill","v: V","filter","find","flatten","forEach","iterator: AsyncIterable<T> | T[]","fn: (v?: T) => Promise<boolean> | Promise<void> | boolean | void","options: Partial<ForEachOptions>","last","opts: Partial<{ abort: AbortSignal }>","returnValue: V | undefined","map","f: (v: V) => X","max","a: V","b: V","max: V | undefined","min","min: V | undefined","reduce","f: (accumulator: V, current: V) => V","start: V","asCallback","input: AsyncIterable<V>","callback: (v: V) => unknown","onDone?: () => void","slice","it: Iterable<V>","delay: Interval","it: AsyncIterableIterator<V> | IterableIterator<V>","options: SleepOpts<any>","value: IteratorResult<V> | undefined","some","toArray","options: Partial<ToArrayOptions>","result: V[]","unique","iterable: AsyncIterable<V> | AsyncIterable<V>[]","buffer: any[]","itera: AsyncIterable<V>[]","uniqueByValue","input: AsyncIterable<T>","toString: (value: T) => string","seen: Set<string>","zip","slice","it: Iterable<V>","reduce","it: Iterable<V>","f: (accumulator: V, current: V) => V","start: V","uniqueByValue","input: Iterable<T>","toString: ToString<T>","seen: Set<string>","asCallback","input: Iterable<V>","callback: (v: V) => unknown","onDone?: () => void","generator: Generator<number>","defaultValue?: number","v: number | undefined","it: Iterable<V>","last","returnValue: V | undefined","size: number","buffer: V[]","chunks","concat","dropWhile","f: (v: V) => boolean","until","it: Iterable<any>","callback: () => (void | boolean | never)","it: Generator<T>","equals","it1: IterableIterator<V>","it2: IterableIterator<V>","equality?: IsEqual<V>","every","fill","v: V","forEach","iterator: Iterable<T> | T[]","fn: (v: T) => boolean | void","filter","find","flatten","map","f: (v: V) => X","max","a: V","b: V","max: V | undefined","min","min: V | undefined","some","genCreator: () => Iterable<T>","repeatsOrSignal: number | AbortSignal","unique","iterable: Iterable<V> | Iterable<V>[]","buffer: any[]","itera: Iterable<V>[]","zip","fromIterable","iterable: Iterable<T>","toArray","options: Partial<ToArrayOptions>","result: V[]","fromArray","array: V[]","iterable: Iterable<V>","scorer: (v: V) => number","highestValue: V | undefined","lowestValue: V | undefined","iterableA: Iterable<V>","iterableB: Iterable<V>","eq?: IsEqual<V>","eventSource: WithEvents","eventType: string","pullQueue: Array<any>","pushQueue: Array<any>","args: any","r: AsyncIterator<V>","error: any","data: readonly number[] | number[] | Iterable<number>","options: NumbersComputeOptions","data: Iterable<number>","min","max","it: AsyncIterable<V> | Iterable<V>","a: V","b: V","f: (v: V) => boolean","it: AsyncIterable<any> | Iterable<any>","callback: () => Promise<boolean> | never | boolean | Promise<undefined>","size: number","f: (v: V) => boolean | Promise<boolean>","v: V","it: V[] | Iterable<V> | AsyncIterable<V>","it: T[] | AsyncIterable<T> | Iterable<T>","fn: (v: T | undefined) => boolean | Promise<boolean> | void | Promise<void>","options: Partial<ForEachOptions>","it: V[] | AsyncIterable<V> | Iterable<V>","f: (v: V) => X | Promise<X>","array: V[]","interval?: Interval","it: V[] | AsyncIterable<V | V[]> | Iterable<V | V[]>","it: AsyncIterable<V> | Iterable<V> | V[]","f: (accumulator: V, current: V) => V","start: V","it: Iterable<V> | AsyncIterable<V> | V[]","iterable: V[] | AsyncIterable<V> | Iterable<V> | Iterable<V>[] | AsyncIterable<V>[]","input: AsyncIterable<T> | Iterable<T> | T[]","toString: (v: T) => string","seen: Set<string>","it: Iterable<V> | AsyncIterable<V>","options: Partial<ToArrayOptions>","it: Iterable<V> | V[] | AsyncIterable<V>","it1: AsyncIterable<V> | IterableIterator<V>","it2: AsyncIterable<V> | IterableIterator<V>","equality?: (a: V, b: V) => boolean","iterable: Iterable<V> | AsyncIterable<V>","callback: () => T","callback: () => Promise<T> | T","input: AsyncIterable<V> | Iterable<V>","callback: (v: V) => unknown","onDone?: () => void"],"sources":["../packages/iterables/src/guard.ts","../packages/iterables/src/async.ts","../packages/iterables/src/sync/slice.ts","../packages/iterables/src/sync/reduce.ts","../packages/iterables/src/sync.ts","../packages/iterables/src/compare-values.ts","../packages/iterables/src/from-event.ts","../packages/iterables/src/numbers-compute.ts","../packages/iterables/src/index.ts"],"sourcesContent":["\n\nexport const isAsyncIterable = (v: any): v is AsyncIterable<any> => {\n  if (typeof v !== `object`) return false;\n  if (v === null) return false;\n  return Symbol.asyncIterator in v;\n\n}\n\nexport const isIterable = (v: any): v is Iterable<any> => {\n  if (typeof v !== `object`) return false;\n  if (v === null) return false;\n  return Symbol.iterator in v;\n\n}\n\n","import { intervalToMs, type Interval, type IsEqual, toStringDefault } from '@ixfx/core';\nimport { sleep, type SleepOpts } from '@ixfx/core';\nimport type { ForEachOptions, ToArrayOptions } from './types.js';\nimport { isAsyncIterable, isIterable } from './guard.js';\n\n/**\n * Yield values from `array`, one at a time.\n * Use `interval` to add time between each item.\n * The first item is yielded without delay.\n * \n * @param array Array of values\n * @param interval Interval (defaults: 1ms)\n */\nexport async function* fromArray<V>(array: V[], interval: Interval = 1): AsyncGenerator<V> {\n  for (const v of array) {\n    yield v;\n    await sleep(interval);\n  }\n}\n\n/**\n * Yield values from `iterable`, one at a time.\n * Use `interval` to add time between each item.\n * The first item is yielded without delay.\n * @param iterable Iterable or AsyncIterable\n * @param [interval=1] Interval to wait between yield\n */\nexport async function* fromIterable<V>(iterable: Iterable<V> | AsyncIterable<V>, interval: Interval = 1): AsyncGenerator<V> {\n  for await (const v of iterable) {\n    yield v;\n    await sleep(interval);\n  }\n}\n\nexport async function* chunks<V>(it: AsyncIterable<V>, size: number) {\n  // Source: https://surma.github.io/underdash/\n  let buffer: V[] = [];\n  for await (const v of it) {\n    buffer.push(v);\n    if (buffer.length === size) {\n      yield buffer;\n      buffer = [];\n    }\n  }\n  if (buffer.length > 0) yield buffer;\n}\n\n\nexport async function* concat<V>(...its: readonly AsyncIterable<V>[]) {\n  // Source: https://surma.github.io/underdash/\n  for await (const it of its) yield* it;\n}\n\nexport async function* dropWhile<V>(\n  it: AsyncIterable<V>,\n  f: (v: V) => boolean\n) {\n  for await (const v of it) {\n    if (!f(v)) {\n      yield v;\n    }\n  }\n}\n\n/**\n * Loops over a generator until it finishes, calling `callback`.\n * Useful if you don't care about the value generator produces, just the number of loops.\n * \n * In this version, we do a `for await of` over `gen`, and also `await callback()`. \n\n * ```js\n * await until(count(5), () => {\n * // do something 5 times\n * });\n * ```\n * \n * If you want the value from the generator, use a `for of` loop as usual.\n * \n * If `callback` explicitly returns _false_, the generator is aborted.\n * @param it Generator to run\n * @param callback Code to call for each iteration\n */\n// eslint-disable-next-line @typescript-eslint/no-invalid-void-type\nexport const until = async (it: AsyncIterable<any> | Iterable<any>, callback: () => (void | Promise<boolean> | undefined | boolean | Promise<undefined> | Promise<void>)): Promise<undefined> => {\n  for await (const _ of it) {\n    const value = await callback();\n    if (typeof value === `boolean` && !value) break;\n  }\n}\n\n/**\n * This generator will repeat another generator up until some condition. This is the version\n * that can handle async generators.\n * \n * For example, {@link @ixfx/numbers.count} will count from 0..number and then finish:\n * ```js\n * import { count } from '@ixfx/numbers'\n * for (const v of count(5)) {\n *  // v: 0, 1, 2, 3, 4\n * }\n * ```\n * \n * But what if we want to repeat the count? We have to provide a function to create the generator,\n * rather than using the generator directly, since it's \"one time use\"\n * ```js\n * for await (const v of repeat(() => count(5))) {\n *  // v: 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, ...\n *  // warning: never ends\n * }\n * ```\n * \n * Limiting the number of repeats can be done by passing in extra parameters\n * ```js\n * repeat(generator, { count: 5} ); // Iterate over `generator` five times\n * ```\n * \n * ```js\n * const ac = new AbortController();\n * repeat(generator, { signal: ac.signal }); // Pass in signal\n * ...\n * ac.abort(); // Trigger signal at some point\n * ```\n * @param genCreator \n * @param repeatsOrSignal \n */\nexport const repeat = async function*<T>(genCreator: () => Iterable<T> | AsyncIterable<T>, repeatsOrSignal: number | AbortSignal): AsyncGenerator<T> {\n  const repeats = typeof repeatsOrSignal === `number` ? repeatsOrSignal : Number.POSITIVE_INFINITY;\n  const signal = typeof repeatsOrSignal === `number` ? undefined : repeatsOrSignal;\n  let count = repeats;\n\n  while (true) {\n    for await (const v of genCreator()) {\n      yield v;\n      if (signal?.aborted) break;\n    }\n    if (Number.isFinite(repeats)) {\n      count--;\n      if (count === 0) break;\n    }\n    if (signal?.aborted) break;\n  }\n}\n\n/**\n * Returns true if items in two iterables are equal, as\n * determined by the `equality` function.\n * Order matters. It compares items at the same 'step' of each iterable.\n * @param it1\n * @param it2\n * @param equality\n * @returns\n */\nexport async function equals<V>(\n  it1: AsyncIterable<V>,\n  it2: AsyncIterable<V>,\n  equality?: IsEqual<V>\n) {\n  // https://surma.github.io/underdash/\n  const iit1 = it1[ Symbol.asyncIterator ]();// it1[ Symbol.iterator ]();\n  const iit2 = it2[ Symbol.asyncIterator ]();\n  while (true) {\n    const index1 = await iit1.next();\n    const index2 = await iit2.next();\n    if (equality !== undefined) {\n      if (!equality(index1.value, index2.value)) return false;\n    } else if (index1.value !== index2.value) return false;\n    if (index1.done ?? index2.done) return index1.done && index2.done;\n  }\n}\n\nexport async function every<V>(it: AsyncIterable<V>, f: (v: V) => boolean | Promise<boolean>) {\n  for await (const v of it) {\n    const result = await f(v);\n    if (!result) return false;\n  }\n  return true;\n}\n\nexport async function* fill<V>(it: AsyncIterable<V>, v: V) {\n  // https://surma.github.io/underdash/\n  for await (const _ of it) yield v;\n}\n\n/**\n * Filters an iterable, only yielding items which match `f`.\n *\n * ```js\n * filter([1, 2, 3, 4], e => e % 2 == 0);\n * returns [2, 4]\n * ```\n * @param it\n * @param f\n */\nexport async function* filter<V>(it: AsyncIterable<V>, f: (v: V) => boolean | Promise<boolean>) {\n  // https://surma.github.io/underdash/\n  for await (const v of it) {\n    if (!await f(v)) continue;\n    yield v;\n  }\n}\n\n\nexport async function find<V>(it: AsyncIterable<V>, f: (v: V) => boolean | Promise<boolean>) {\n  // https://surma.github.io/underdash/\n  for await (const v of it) {\n    if (await f(v)) return v;\n  }\n}\n\n\nexport async function* flatten<V>(it: AsyncIterable<V>) {\n  // https://surma.github.io/underdash/\n  for await (const v of it) {\n    if (typeof v === `object`) {\n      if (Array.isArray(v)) {\n        for (const vv of v) yield vv;\n      } else if (isAsyncIterable(v)) {\n        for await (const vv of v) {\n          yield vv;\n        }\n      } else if (isIterable(v)) {\n        for (const vv of v) {\n          yield vv;\n        }\n      }\n    } else {\n      yield v;\n    }\n\n  }\n}\n\n/**\n * Iterates over an async iterable or array, calling `fn` for each value, with optional\n * interval between each loop. If the async `fn` returns _false_, iterator cancels.\n *\n * ```\n * import { forEach } from \"https://unpkg.com/ixfx/dist/flow.js\"\n * // Prints items from array every second\n * await forEach([0,1,2,3], i => console.log(i), 1000);\n * ```\n *\n * ```\n * // Retry up to five times, with 5 seconds between each attempt\n * await forEach(count(5), i=> {\n *  try {\n *    await doSomething();\n *    return false; // Succeeded, exit early\n *  } catch (ex) {\n *    console.log(ex);\n *    return true; // Keep trying\n *  }\n * }, 5000);\n * ```\n * @param iterator Iterable thing to loop over\n * @param fn Function to invoke on each item. If it returns _false_ loop ends.\n * @param options Options\n * @typeParam V Type of iterable\n */\nexport const forEach = async function <T>(\n  iterator: AsyncIterable<T> | T[],\n  fn: (v?: T) => Promise<boolean> | Promise<void> | boolean | void,\n  options: Partial<ForEachOptions> = {}\n) {\n  const interval = options.interval;\n  if (Array.isArray(iterator)) {\n    // Handle array\n    for (const x of iterator) {\n      const r = await fn(x);\n      if (typeof r === `boolean` && !r) break;\n      if (interval) await sleep(interval);\n    }\n  } else {\n    // Handle an async iterator\n    for await (const x of iterator) {\n      const r = await fn(x);\n      if (typeof r === `boolean` && !r) break;\n      if (interval) await sleep(interval);\n    }\n  }\n};\n\n// export async function forEach<V>(it: AsyncIterable<V>, f: (v: V) => void | boolean | Promise<boolean | void>) {\n//   // https://surma.github.io/underdash/\n//   for await (const v of it) {\n//     const result = await f(v);\n//     if (typeof result === `boolean` && !result) break;\n//   }\n// }\n\n/**\n * Returns last value from an iterable, or _undefined_\n * if no values are generated\n * @param it\n */\nexport async function last<V>(it: AsyncIterable<V>, opts: Partial<{ abort: AbortSignal }> = {}): Promise<V | undefined> {\n  const abort = opts.abort;\n  let returnValue: V | undefined;\n\n  for await (const value of it) {\n    if (abort?.aborted) return undefined;\n    returnValue = value;\n  }\n  return returnValue;\n}\n\n/**\n * Maps an iterable through function `f`\n * ```js\n * // For every input value, multiply it by itself\n * map([1, 2, 3], e => e*e)\n * // Yields: 1, 4, 9\n * ```\n * \n * It can also be used to transform types:\n * ```js\n * map([1, 2, 3], e => { value: e });\n * // Yields: { value: 1 }, { value: 2 }, { value: 3 }\n * ```\n * @param it\n * @param f\n */\n\nexport async function* map<V, X>(it: AsyncIterable<V>, f: (v: V) => X) {\n  // https://surma.github.io/underdash/\n\n  for await (const v of it) {\n    yield f(v);\n  }\n}\n\n\nexport async function* max<V>(it: AsyncIterable<V>, gt = ((a: V, b: V) => a > b)) {\n  let max: V | undefined;\n  for await (const v of it) {\n    if (max === undefined) {\n      max = v;\n      yield (max);\n      continue;\n    }\n    // If V is bigger than max, we have a new max\n    if (gt(v, max)) {\n      max = v;\n      yield v;\n    }\n  }\n}\n\n/**\n * Returns the minimum seen of an iterable as it changes.\n * Streaming result: works with endless iterables.\n * \n * Note that `gt` function returns true if A is _greater_ than B, even\n * though we're looking for the minimum.\n * \n * ```js\n * // Rank objects based on 'v' value\n * const rank = (a,b) => a.v > b.v;\n * min([\n *  {i:0,v:1},\n *  {i:1,v:9},\n *  {i:2,v:-2}\n * ], rank);\n * // Yields: {i:2, v:1}, {i:2,v:-2}\n * ```\n * @param it Iterable\n * @param gt Should return _true_ if `a` is greater than `b`.\n * @returns\n */\nexport async function* min<V>(it: AsyncIterable<V>, gt = (a: V, b: V) => a > b) {\n  let min: V | undefined;\n  for await (const v of it) {\n    if (min === undefined) {\n      min = v;\n      yield min;\n      continue;\n    }\n    // If min is bigger than V, V is the new min\n    if (gt(min, v)) {\n      min = v;\n      yield v;\n    }\n  }\n  return min;\n}\n\nexport async function reduce<V>(\n  it: AsyncIterable<V>,\n  f: (accumulator: V, current: V) => V,\n  start: V\n) {\n  // https://surma.github.io/underdash/\n\n  for await (const v of it) start = f(start, v);\n  return start;\n}\n\n/**\n * Calls `callback` whenever the async generator produces a value.\n * \n * When using `asCallback`, call it with `await` to let generator \n * run its course before continuing:\n * ```js\n * await asCallback(tick({ interval:1000, loops:5 }), x => {\n *  // Gets called 5 times, with 1000ms interval\n * });\n * console.log(`Hi`); // Prints after 5 seconds\n * ```\n * \n * Or if you skip the `await`, code continues and callback will still run:\n * ```js\n * asCallback(tick({ interval: 1000, loops: 5}), x => {\n *  // Gets called 5 times, with 1000ms interval\n * });\n * console.log(`Hi`); // Prints immediately\n * ```\n * @param input \n * @param callback \n */\nexport async function asCallback<V>(input: AsyncIterable<V>, callback: (v: V) => unknown, onDone?: () => void) {\n  for await (const value of input) {\n    callback(value);\n  }\n  if (onDone) onDone();\n}\n\nexport async function* slice<V>(\n  it: AsyncIterable<V>,\n  start = 0,\n  end = Number.POSITIVE_INFINITY\n) {\n  console.log(`Async slice start: ${ start }`);\n\n  // https://surma.github.io/underdash/\n  const iit = it[ Symbol.asyncIterator ]();\n  if (end < start) throw new Error(`Param 'end' should be more than 'start'`);\n\n  for (; start > 0; start--, end--) await iit.next();\n\n  for await (const v of it) {\n    if (end-- > 0) {\n      yield v;\n    } else {\n      break;\n    }\n  }\n}\n\n/**\n * Enumerates over an input iterable, with a delay between items.\n * @param it \n * @param delay \n */\nexport async function* withDelay<V>(it: Iterable<V>, delay: Interval) {\n  for (const v of it) {\n    await sleep(delay);\n    yield v;\n  }\n}\n\n/***\n * Returns the next IteratorResult,\n * throwing an error if it does not happen\n * within `interval` (default: 1s)\n */\nexport async function nextWithTimeout<V>(it: AsyncIterableIterator<V> | IterableIterator<V>, options: SleepOpts<any>) {\n  const ms = intervalToMs(options, 1000);\n\n  const value: IteratorResult<V> | undefined = await Promise.race([\n    (async () => {\n      await sleep({ millis: ms, signal: options.signal });\n\n      return undefined;\n    })(),\n    (async () => {\n      return await it.next();\n    })()\n  ]);\n  if (value === undefined) throw new Error(`Timeout`);\n  return value;\n}\n\nexport async function some<V>(it: AsyncIterable<V>, f: (v: V) => boolean | Promise<boolean>) {\n  // https://surma.github.io/underdash/\n  for await (const v of it) {\n    if (await f(v)) return true;\n  }\n  return false;\n}\n\n// export async function* takeWhile<V>(\n//   it: AsyncIterable<V>,\n//   f: (v: V) => boolean\n// ) {\n//   // https://surma.github.io/underdash/\n\n//   for await (const v of it) {\n//     if (!f(v)) return;\n//     yield v;\n//   }\n// }\n\n/**\n * Returns an array of values from an iterator.\n *\n * ```js\n * const data = await toArray(adsrIterable(opts, 10));\n * ```\n *\n * Note: If the iterator is infinite, be sure to provide limits via the options.\n * ```js\n * // Return maximum five items\n * const data = await toArray(iterable, { limit: 5 });\n * // Return results for a maximum of 5 seconds\n * const data = await toArray(iterable, { elapsed: 5000 });\n * ```\n * Note that limits are ORed, `toArray` will finish if either of them is true.\n * \n * @param it Asynchronous iterable\n * @param options Options when converting to array\n * @returns\n */\nexport async function toArray<V>(it: AsyncIterable<V>, options: Partial<ToArrayOptions> = {}): Promise<V[]> {\n  // https://2ality.com/2016/10/asynchronous-iteration.html\n  const result: V[] = [];\n  const iterator = it[ Symbol.asyncIterator ]();\n  const started = Date.now();\n  const maxItems = options.limit ?? Number.POSITIVE_INFINITY;\n  const whileFunction = options.while;\n  const maxElapsed = intervalToMs(options.elapsed, Number.POSITIVE_INFINITY);\n\n  while (result.length < maxItems && (Date.now() - started < maxElapsed)) {\n    if (whileFunction) {\n      if (!whileFunction(result.length)) break;\n    }\n    const r = await iterator.next();\n    if (r.done) break;\n    //eslint-disable-next-line functional/immutable-data\n    result.push(r.value);\n  }\n  return result;\n}\n\n\nexport async function* unique<V>(\n  iterable: AsyncIterable<V> | AsyncIterable<V>[]\n) {\n  const buffer: any[] = [];\n  const itera: AsyncIterable<V>[] = Array.isArray(iterable) ? iterable : [ iterable ];\n  for await (const it of itera) {\n    for await (const v of it) {\n      if (buffer.includes(v)) continue;\n      buffer.push(v);\n      yield v;\n    }\n  }\n}\n\nexport async function* uniqueByValue<T>(input: AsyncIterable<T>, toString: (value: T) => string = toStringDefault, seen: Set<string> = new Set<string>()): AsyncGenerator<T> {\n  for await (const v of input) {\n    const key = toString(v);\n    if (seen.has(key)) continue;\n    seen.add(key);\n    yield v;\n  }\n}\n\n/**\n * Returns unique items from iterables, given a particular key function\n * ```js\n * unique([{i:0,v:2},{i:1,v:3},{i:2,v:2}], e => e.v);\n * Yields:  [{i:0,v:2},{i:1,v:3}]\n * @param it\n * @param f\n */\n\n// export async function* unique<V>(\n//   it: AsyncIterable<V>,\n//   f: (id: V) => V = (id) => id\n// ) {\n//   // https://surma.github.io/underdash/\n//   const buffer: Array<V> = [];\n\n//   for await (const v of it) {\n//     const fv = f(v);\n//     if (buffer.includes(fv)) continue;\n//     buffer.push(fv);\n//     yield v;\n//   }\n// }\n\n/**\n * Combine same-positioned items from several iterables\n * ```js\n * zip( [1, 2, 3], [4, 5, 6], [7, 8, 9] );\n * Yields: [ [1, 4, 7], [2, 5, 8], [3, 6, 9] ]\n * ```\n * @param its\n * @returns\n */\nexport async function* zip<V>(...its: readonly AsyncIterable<V>[]) {\n  // https://surma.github.io/underdash/\n  const iits = its.map((it) => it[ Symbol.asyncIterator ]());\n\n  while (true) {\n    const vs = await Promise.all(iits.map((it) => it.next()));\n    if (vs.some((v) => v.done)) return;\n    yield vs.map((v) => v.value as V);\n  }\n}\n","export function* slice<V>(\n  it: Iterable<V>,\n  start = 0,\n  end = Number.POSITIVE_INFINITY\n) {\n  if (end < start) throw new Error(`Param 'end' should be more than 'start'`);\n  if (start < 0) throw new Error(`Param 'start' should be at least 0`);\n  let index = 0;\n  for (const v of it) {\n    if (index < start) {\n      index++;\n      continue;\n    }\n    if (index > end) {\n      break;\n    }\n    yield v;\n    index++;\n  }\n}","export function reduce<V>(\n  it: Iterable<V>,\n  f: (accumulator: V, current: V) => V,\n  start: V\n) {\n  // https://surma.github.io/underdash/\n\n  for (const v of it) start = f(start, v);\n  return start;\n}\n","import { type ToString, toStringDefault } from '@ixfx/core';\nimport { type IsEqual, intervalToMs } from '@ixfx/core';\nimport { isIterable } from './guard.js';\n//import { intervalToMs } from '../flow/IntervalType.js';\nimport type { ToArrayOptions } from './types.js';\nexport { slice } from './sync/slice.js';\nexport { reduce } from './sync/reduce.js';\n\nexport function* uniqueByValue<T>(input: Iterable<T>, toString: ToString<T> = toStringDefault, seen: Set<string> = new Set<string>()): Generator<T> {\n  for (const v of input) {\n    const key = toString(v);\n    if (seen.has(key)) continue;\n    seen.add(key);\n    yield v;\n  }\n}\n\n/**\n * Calls `callback` whenever the generator produces a value.\n * \n * When using `asCallback`, call it with `await` to let generator \n * run its course before continuing:\n * ```js\n * await asCallback(tick({ interval:1000, loops:5 }), x => {\n *  // Gets called 5 times, with 1000ms interval\n * });\n * console.log(`Hi`); // Prints after 5 seconds\n * ```\n * \n * Or if you skip the `await`, code continues and callback will still run:\n * ```js\n * asCallback(tick({ interval: 1000, loops: 5}), x => {\n *  // Gets called 5 times, with 1000ms interval\n * });\n * console.log(`Hi`); // Prints immediately\n * ```\n * @param input \n * @param callback \n */\nexport function asCallback<V>(input: Iterable<V>, callback: (v: V) => unknown, onDone?: () => void) {\n  for (const value of input) {\n    callback(value);\n  }\n  if (onDone) onDone();\n}\n\n/**\n * Returns a function that yields a value from a generator.\n * ```js\n * const spring = yieldNumber(Oscillators.spring());\n *\n * spring(); // latest value\n * ```\n *\n * Instead of:\n * ```js\n * const spring = Oscillators.spring();\n *\n * spring.next().value\n * ```\n *\n * A `defaultValue` can be provided if the source generator returns undefined:\n * ```js\n * const spring = yieldNumber(Oscillators.spring(), 0);\n * spring(); // Returns 0 if the generator returns undefined\n * ```\n * @param generator\n * @param defaultValue\n * @returns\n */\nexport function yieldNumber(\n  generator: Generator<number>,\n  defaultValue?: number\n) {\n\n  return (): number | undefined => {\n    const v: number | undefined = generator.next().value as number | undefined;\n    if (v === undefined) return defaultValue;\n    return v;\n  };\n}\n\n/**\n * Return first value from an iterable, or _undefined_ if\n * no values are generated\n * @param it\n * @returns\n */\nexport function first<V>(it: Iterable<V>): V | undefined {\n  for (const value of it) {\n    return value;\n  }\n}\n\n/**\n * Returns last value from an iterable, or _undefined_\n * if no values are generated\n * @param it\n */\nexport function last<V>(it: Iterable<V>): V | undefined {\n  let returnValue: V | undefined;\n  for (const value of it) {\n    returnValue = value;\n  }\n  return returnValue;\n}\n\n/**\n * Yields chunks of the iterable `it` such that the end of a chunk is the\n * start of the next chunk.\n *\n * Eg, with the input [1,2,3,4,5] and a size of 2, we would get back\n * [1,2], [2,3], [3,4], [4,5].\n *\n *\n * @param it\n * @param size\n * @returns\n */\nexport function* chunksOverlapping<V>(it: Iterable<V>, size: number) {\n  if (size <= 1) throw new Error(`Size should be at least 2`);\n\n  //eslint-disable-next-line functional/no-let\n  let buffer: V[] = [];\n\n  for (const v of it) {\n    //eslint-disable-next-line functional/immutable-data\n    buffer.push(v);\n    if (buffer.length === size) {\n      yield buffer;\n      //eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      buffer = [ buffer.at(-1)! ];\n    }\n  }\n  if (buffer.length <= 1) return;\n\n  if (buffer.length > 0) yield buffer;\n}\n\n\nexport function* chunks<V>(it: Iterable<V>, size: number) {\n  //eslint-disable-next-line functional/no-let\n  let buffer: V[] = [];\n\n  for (const v of it) {\n    //eslint-disable-next-line functional/immutable-data\n    buffer.push(v);\n    if (buffer.length === size) {\n      yield buffer;\n      buffer = [];\n    }\n  }\n  if (buffer.length > 0) yield buffer;\n}\n\nexport function* concat<V>(...its: readonly Iterable<V>[]) {\n  for (const it of its) yield* it;\n}\n\nexport function* dropWhile<V>(\n  it: Iterable<V>,\n  f: (v: V) => boolean\n) {\n  for (const v of it) {\n    if (!f(v)) {\n      yield v;\n    }\n  }\n}\n\n/**\n* Loops over a generator until it finishes, calling `callback`.\n* Useful if you don't care about the value generator produces, just the number of loops.\n* \n* ```js\n* until(count(5), () => {\n* // do something 5 times\n* });\n* ```\n* \n* If you want the value from the generator, use a `for of` loop as usual.\n* If `callback` explicitly returns _false_, the generator is aborted.\n* @param it Generator to run\n* @param callback Code to call for each iteration\n*/\n// eslint-disable-next-line @typescript-eslint/no-invalid-void-type\nexport const until = (it: Iterable<any>, callback: () => (void | boolean | never)) => {\n  for (const _ of it) {\n    const value = callback();\n    if (typeof value === `boolean` && !value) break;\n  }\n}\n\nexport const next = <T>(it: Generator<T>) => {\n  return () => {\n    const r = it.next();\n    if (r.done) return;\n    return r.value;\n  }\n}\n\n/**\n * Returns true if items in two iterables are equal, as\n * determined by the `equality` function.\n * @param it1\n * @param it2\n * @param equality\n * @returns\n */\nexport function equals<V>(\n  it1: IterableIterator<V>,\n  it2: IterableIterator<V>,\n  equality?: IsEqual<V>\n) {\n  //it1 = it1[Symbol.iterator]();\n  //it2 = it2[Symbol.iterator]();\n\n  while (true) {\n    const index1 = it1.next(),\n      index2 = it2.next();\n    if (equality !== undefined) {\n      if (!equality(index1.value, index2.value)) return false;\n    } else if (index1.value !== index2.value) return false;\n    if (index1.done ?? index2.done) return index1.done && index2.done;\n  }\n}\n\nexport function every<V>(it: Iterable<V>, f: (v: V) => boolean) {\n  for (const v of it) {\n    const result = f(v);\n    if (!result) return false;\n  }\n  return true;\n}\n\n\nexport function* fill<V>(it: Iterable<V>, v: V) {\n  // https://surma.github.io/underdash/\n\n\n  for (const _ of it) yield v;\n}\n\n/**\n * Iterates over `iterator` (iterable/array), calling `fn` for each value.\n * If `fn` returns _false_, iterator cancels.\n *\n * Over the default JS `forEach` function, this one allows you to exit the\n * iteration early.\n *\n * @example\n * ```js\n * import { Sync } from \"https://unpkg.com/ixfx/dist/iterables.js\"\n * Sync.forEach(count(5), () => console.log(`Hi`));  // Prints `Hi` 5x\n * Sync.forEach(count(5), i => console.log(i));      // Prints 0 1 2 3 4\n * Sync.forEach([0,1,2,3,4], i => console.log(i));   // Prints 0 1 2 3 4\n * ```\n *\n * Use {@link forEach} if you want to use an async `iterator` and async `fn`.\n * \n * Alternatives:\n * * {@link @ixfx/flow.repeat}/{@link @ixfx/flow.repeatSync}: if you want to call something a given number of times and get the result\n * @param iterator Iterable or array\n * @typeParam T Type of iterable's values\n * @param fn Function to call for each item. If function returns _false_, iteration cancels\n */\nexport function forEach<T>(iterator: Iterable<T> | T[], fn: (v: T) => boolean | void) {\n  for (const v of iterator) {\n    const result = fn(v);\n    if (typeof result === `boolean` && !result) break;\n  }\n}\n\n/**\n * ```js\n * filter([1, 2, 3, 4], e => e % 2 == 0);\n * returns [2, 4]\n * ```\n * @param it\n * @param f\n */\nexport function* filter<V>(it: Iterable<V>, f: (v: V) => boolean) {\n  // https://surma.github.io/underdash/\n\n  for (const v of it) {\n    if (!f(v)) continue;\n    yield v;\n  }\n}\n\nexport function find<V>(it: Iterable<V>, f: (v: V) => boolean) {\n  // https://surma.github.io/underdash/\n\n  for (const v of it) {\n    if (f(v)) return v;\n  }\n}\n\nexport function* flatten<V>(it: Iterable<V>) {\n  // https://surma.github.io/underdash/\n  for (const v of it) {\n    if (typeof v === `object`) {\n      if (Array.isArray(v)) {\n        for (const vv of v) yield vv;\n      } else if (isIterable(v)) {\n        for (const vv of v) {\n          yield vv;\n        }\n      }\n    } else {\n      yield v;\n    }\n\n  }\n}\n\n\n/**\n * Maps an iterable of type `V` to type `X`.\n * ```js\n * map([1, 2, 3], e => e*e)\n * returns [1, 4, 9]\n * ```\n * @param it\n * @param f\n */\n\nexport function* map<V, X>(it: Iterable<V>, f: (v: V) => X) {\n  // https://surma.github.io/underdash/\n\n  for (const v of it) {\n    yield f(v);\n  }\n}\n\nexport function* max<V>(it: Iterable<V>, gt = (a: V, b: V) => a > b): Generator<V> {\n  let max: V | undefined;\n  for (const v of it) {\n    if (max === undefined) {\n      max = v;\n      yield max;\n      continue;\n    }\n    if (gt(v, max)) {\n      max = v;\n      yield max;\n    }\n  }\n  return max;\n}\n\nexport function* min<V>(it: Iterable<V>, gt = (a: V, b: V) => a > b) {\n  let min: V | undefined;\n  for (const v of it) {\n    if (min === undefined) {\n      min = v;\n      yield min;\n    }\n    if (gt(min, v)) {\n      min = v;\n      yield min;\n    }\n  }\n}\n\n\n\nexport function some<V>(it: Iterable<V>, f: (v: V) => boolean) {\n  // https://surma.github.io/underdash/\n\n  for (const v of it) {\n    if (f(v)) return true;\n  }\n  return false;\n}\n\n// export function* takeWhile<V>(it: Iterable<V>, f: (v: V) => boolean) {\n//   // https://surma.github.io/underdash/\n//   for (const v of it) {\n//     if (!f(v)) return;\n//     yield v;\n//   }\n// }\n\nexport function* repeat<T>(genCreator: () => Iterable<T>, repeatsOrSignal: number | AbortSignal): Generator<T> {\n  const repeats = typeof repeatsOrSignal === `number` ? repeatsOrSignal : Number.POSITIVE_INFINITY;\n  const signal = typeof repeatsOrSignal === `number` ? undefined : repeatsOrSignal;\n  let count = repeats;\n\n  while (true) {\n    for (const v of genCreator()) {\n      yield v;\n      if (signal?.aborted) break;\n    }\n    if (Number.isFinite(repeats)) {\n      count--;\n      if (count === 0) break;\n    }\n    if (signal?.aborted) break;\n  }\n}\n\n\nexport function* unique<V>(\n  iterable: Iterable<V> | Iterable<V>[]\n) {\n  // Adapted from https://surma.github.io/underdash/\n  const buffer: any[] = [];\n  let itera: Iterable<V>[] = [];\n  itera = Array.isArray(iterable) ? iterable : [ iterable ];\n  for (const it of itera) {\n    for (const v of it) {\n      if (buffer.includes(v)) continue;\n      buffer.push(v);\n      yield v;\n    }\n  }\n}\n\n/**\n * Combine same-positioned items from several iterables\n * ```js\n * zip( [1, 2, 3], [4, 5, 6], [7, 8, 9] );\n * Yields: [ [1, 4, 7], [2, 5, 8], [3, 6, 9] ]\n * ```\n * @param its\n * @returns\n */\n\nexport function* zip<V>(...its: readonly Iterable<V>[]) {\n  // https://surma.github.io/underdash/\n  const iits = its.map((it) => it[ Symbol.iterator ]());\n\n  while (true) {\n    const vs = iits.map((it) => it.next());\n    if (vs.some((v) => v.done)) return;\n    yield vs.map((v) => v.value as V);\n  }\n}\n\nexport function* fromIterable<T>(iterable: Iterable<T>) {\n  for (const v of iterable) {\n    yield v;\n  }\n}\n\n/**\n * Returns an array of values from an iterator.\n *\n * ```js\n * const data = await toArray(adsrIterable(opts, 10));\n * ```\n *\n * Note: If the iterator is infinite, be sure to provide a limit via the options or the function\n * will never return.\n *\n * @param it Asynchronous iterable\n * @param options Options when converting to array.\n * @returns\n */\n\nexport function toArray<V>(\n  it: Iterable<V>,\n  options: Partial<ToArrayOptions> = {}\n): V[] {\n  const result: V[] = [];\n  const started = Date.now();\n  const whileFunction = options.while;\n  const maxItems = options.limit ?? Number.POSITIVE_INFINITY;\n  const maxElapsed = intervalToMs(options.elapsed, Number.POSITIVE_INFINITY);\n  for (const v of it) {\n    if (whileFunction) {\n      if (!whileFunction(result.length)) break;\n    }\n    if (result.length >= maxItems) break;\n    if (Date.now() - started > maxElapsed) break;\n    result.push(v);\n  }\n  return result;\n}\n\n/**\n * Yield values from `array`, one at a time.\n * Use `interval` to add time between each item.\n * The first item is yielded without delay.\n * @param array Array of values\n */\nexport function* fromArray<V>(array: V[]): Generator<V> {\n  for (const v of array) {\n    yield v;\n  }\n}","import { compareIterableValuesShallow, isEqualDefault, type IsEqual } from \"@ixfx/core\";\n\n/**\n * Returns the 'max' of some iterable using the provided scoring function.\n * It only yields a value when iterator finishes.\n * @param iterable\n * @param scorer \n * @returns \n */\nexport const maxScore = <V>(iterable: Iterable<V>, scorer: (v: V) => number): V | undefined => {\n  let highestValue: V | undefined;\n  let highestScore = Number.MIN_SAFE_INTEGER;\n  for (const value of iterable) {\n    const score = scorer(value);\n    if (score >= highestScore) {\n      highestScore = score;\n      highestValue = value;\n    }\n  }\n  return highestValue;\n}\n\n/**\n * Returns the 'min' of some iterable using the provided scoring function.\n * It only yields a value when iterator finishes.\n * @param iterable \n * @param scorer \n * @returns \n */\nexport const minScore = <V>(iterable: Iterable<V>, scorer: (v: V) => number): V | undefined => {\n  let lowestValue: V | undefined;\n  let lowestScore\n    = Number.MAX_SAFE_INTEGER;\n  for (const value of iterable) {\n    const score = scorer(value);\n    if (score <= lowestScore) {\n      lowestScore = score;\n      lowestValue = value;\n    }\n  }\n  return lowestValue;\n}\n\n\n/**\n * Returns _true_ if all values in iterables are equal, regardless\n * of their position. Uses === equality semantics by default.\n * \n * Is NOT recursive.\n * \n * @example Default equality checking\n * ```js\n * const a = ['apples','oranges','pears'];\n * const b = ['pears','oranges','apples'];\n * hasEqualValuesShallow(a, b); // True\n * ```\n *\n * @example Custom equality checking\n * ```js\n * const a = [ { name: 'John' }];\n * const b = [ { name: 'John' }];\n * // False, since object identies are different\n * hasEqualValuesShallow(a, b); \n * // True, since now we're comparing by value\n * hasEqualValuesShallow(a, b, (aa,bb) => aa.name === bb.name);\n * ```\n * @param iterableA First iterable to check\n * @param iterableB Iterable to compare against\n * @param eq Equality function, uses === by default\n */\nexport const hasEqualValuesShallow = <V>(\n  iterableA: Iterable<V>,\n  iterableB: Iterable<V>,\n  eq?: IsEqual<V>\n): boolean => {\n  const returnValue = compareIterableValuesShallow(iterableA, iterableB, eq);\n  return returnValue.a.length === 0 && returnValue.b.length === 0;\n};\n\n","import type { WithEvents } from \"./types.js\";\n\nexport const fromEvent = <V>(\n  eventSource: WithEvents,\n  eventType: string\n): AsyncIterator<any> => {\n  const pullQueue: Array<any> = [];\n  const pushQueue: Array<any> = [];\n  let done = false;\n  const pushValue = (args: any) => {\n    if (pullQueue.length > 0) {\n      //eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n      const resolver = pullQueue.shift();\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-call\n      resolver(...args);\n    } else {\n      pushQueue.push(args);\n    }\n  };\n\n  const pullValue = (): Promise<V> =>\n    new Promise<V>((resolve) => {\n      if (pushQueue.length > 0) {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n        const arguments_ = pushQueue.shift();\n        // @ts-expect-error\n        resolve(...arguments_);\n      } else {\n        pullQueue.push(resolve);\n      }\n    });\n\n  const handler = (...arguments_: any) => {\n    pushValue(arguments_);\n  };\n\n  eventSource.addEventListener(eventType, handler);\n\n  const r: AsyncIterator<V> = {\n    next: async (): Promise<IteratorResult<V>> => {\n      if (done) return { done: true, value: undefined };\n      return {\n        done: false,\n        value: await pullValue(),\n      };\n    },\n    //eslint-disable-next-line @typescript-eslint/require-await\n    return: async (): Promise<IteratorResult<V>> => {\n      done = true;\n      eventSource.removeEventListener(eventType, handler);\n      return { done: true, value: undefined };\n    },\n    //eslint-disable-next-line @typescript-eslint/require-await\n    throw: async (error: any): Promise<IteratorResult<V>> => {\n      done = true;\n      return {\n        done: true,\n        value: Promise.reject(new Error(error)),\n      };\n    },\n  };\n  return r;\n};","import { numberArrayCompute, type NumbersComputeOptions, type NumbersComputeResult } from \"@ixfx/numbers\";\nimport { isIterable } from \"./guard.js\";\n\n\n/**\n * Returns the min, max, avg and total of the array or iterable.\n * Any values that are invalid are silently skipped over.\n *\n * ```js\n * const v = [ 10, 2, 4.2, 99 ];\n * const mma = numbersCompute(v);\n * // Yields: { min: 2, max: 99, total: 115.2, avg: 28.8 }\n * ```\n *\n * Use {@link @ixfx/numbers.average}, {@link @ixfx/numbers.max}, {@link @ixfx/numbers.min} or {@link @ixfx/numers.total} if you only need one of these.\n *\n * A start and end range can be provided if the calculation should be restricted to a part\n * of the input array. By default the whole array is used.\n *\n * It's also possible to use an iterable as input.\n * ```js\n * import { count } from '@ixfx/numbers';\n * numbersCompute(count(5,1)); // Averages 1,2,3,4,5\n * ```\n * \n * Returns `NaN` if the input data is empty.\n * @param data\n * @param options Allows restriction of range that is examined\n * @returns `{min, max, avg, total}`\n */\nexport const numbersCompute = (\n  data: readonly number[] | number[] | Iterable<number>,\n  options: NumbersComputeOptions = {}\n): NumbersComputeResult => {\n  if (typeof data === `undefined`) throw new Error(`Param 'data' is undefined`);\n  if (Array.isArray(data)) {\n    return numberArrayCompute(data, options);\n  }\n  if (isIterable(data)) {\n    return numbersComputeIterable(data, options);\n  }\n  throw new Error(`Param 'data' is neither an array nor iterable`);\n};\n\n\nfunction numbersComputeIterable(data: Iterable<number>, options: NumbersComputeOptions = {}): NumbersComputeResult {\n  // if (typeof options.startIndex !== `undefined` || typeof options.endIndex !== `undefined`) {\n  //   data = slice(data, options.startIndex, options.endIndex);\n  // }\n  let total = 0;\n  const nonNumbers = options.nonNumbers ?? `ignore`;\n\n  let min = Number.MAX_SAFE_INTEGER;\n  let max = Number.MIN_SAFE_INTEGER;\n  let count = 0;\n  for (let v of data) {\n    if (typeof v !== `number` || Number.isNaN(v)) {\n      if (nonNumbers === `throw`) throw new TypeError(`Data contains something not a number. Got type '${ typeof v }'`);\n      if (nonNumbers === `nan`) v = Number.NaN;\n      if (nonNumbers === `ignore`) continue;\n    }\n\n    total += v;\n    count++;\n    min = Math.min(min, v);\n    max = Math.max(max, v);\n  }\n  return {\n    avg: total / count,\n    total, max, min, count\n  };\n}\n\nexport function computeAverage(data: Iterable<number>, options: NumbersComputeOptions = {}): number {\n  let count = 0;\n  let total = 0;\n  const nonNumbers = options.nonNumbers ?? `ignore`;\n\n  for (let d of data) {\n    if (typeof d !== `number` || Number.isNaN(d)) {\n      if (nonNumbers === `throw`) throw new TypeError(`Data contains something not a number. Got type '${ typeof d }'`);\n      if (nonNumbers === `nan`) d = Number.NaN;\n      if (nonNumbers === `ignore`) continue;\n    }\n    total += d;\n    count++;\n  }\n  return total / count;\n}","import * as Async from './async.js';\nimport * as Sync from './sync.js';\nexport * as Async from './async.js';\nexport * as Sync from './sync.js';\nexport * from './compare-values.js';\nexport * from './from-event.js';\nexport * from './guard.js';\nexport * from './types.js';\n\nimport { isAsyncIterable } from './guard.js';\n//import * as Chains from './chain/index.js';\n// import type { Interval } from '../flow/IntervalType.js';\n\nimport { toStringDefault } from '@ixfx/core';\nimport type { Interval } from '@ixfx/core';\n\n//import type { GenFactoryNoInput } from './chain/Types.js';\nimport type { ForEachOptions, ToArrayOptions, IteratorControllerOptions, IteratorControllerState } from './types.js';\n\nexport * from './numbers-compute.js';\n\nexport function min<V>(it: AsyncIterable<V>, gt?: (a: V, b: V) => boolean): AsyncGenerator<V>;\nexport function min<V>(it: Iterable<V>, gt?: (a: V, b: V) => boolean): Generator<V>;\n\n\n/**\n * Returns a stream of minimum values.\n * \n * Streaming result: works with endless iterables.\n * \n * ```js\n * min([\n *  {i:0,v:1},\n *  {i:1,v:9},\n *  {i:2,v:-2}\n * ], (a, b) => a.v > b.v);\n * // Yields: {i:2, v:1}, {i:2,v:-2}\n * ```\n * @param it Iterable\n * @param gt Should return _true_ if `a` is greater than `b`.\n * @returns Yields minimum values\n */\nexport function min<V>(it: AsyncIterable<V> | Iterable<V>, gt = (a: V, b: V) => a > b): AsyncGenerator<V> | Generator<V> {\n  return isAsyncIterable(it) ? Async.min(it, gt) : Sync.min(it, gt);\n}\n\nexport function max<V>(it: AsyncIterable<V>, gt?: (a: V, b: V) => boolean): AsyncGenerator<V>;\nexport function max<V>(it: Iterable<V>, gt?: (a: V, b: V) => boolean): Generator<V>;\n\n/**\n * Returns the maximum value of an iterable as it changes.\n * Streaming result: works with endless iterables.\n * \n * ```js\n * // Rank values by their 'v' field\n * const rank = (a,b) => a.v > b.v;\n * \n * min([\n *  {i:0,v:1},\n *  {i:1,v:9},\n *  {i:2,v:-2}\n * ], rank);\n * // Yields: {i:0,v:1}, {i:1,v:9}\n * ```\n * @param it Iterable\n * @param gt Should return _true_ if `a` is greater than `b`.\n * @returns Iterable of maximum values\n */\nexport function max<V>(it: AsyncIterable<V> | Iterable<V>, gt = (a: V, b: V) => a > b): AsyncGenerator<V> | Generator<V> {\n  return isAsyncIterable(it) ? Async.max(it, gt) : Sync.max(it, gt);\n}\n\nexport function dropWhile<V>(it: AsyncIterable<V>, f: (v: V) => boolean): AsyncGenerator<V>;\nexport function dropWhile<V>(it: Iterable<V>, f: (v: V) => boolean): Generator<V>;\n\n/**\n * Drops elements that do not meet the predicate `f`.\n * Streaming result: works with endless iterables.\n * \n * ```js\n * dropWhile([1, 2, 3, 4], e => e < 3);\n * returns [3, 4]\n * ```\n * @param it\n * @param f\n */\nexport function dropWhile<V>(it: AsyncIterable<V> | Iterable<V>, f: (v: V) => boolean): AsyncGenerator<V> | Generator<V> {\n  return isAsyncIterable(it) ? Async.dropWhile(it, f) : Sync.dropWhile(it, f);\n}\n\nexport function until(it: AsyncIterable<any>, f: () => Promise<boolean> | Promise<undefined>): Promise<undefined>;\nexport function until(it: Iterable<any>, f: () => boolean | never): void;\nexport function until(it: Iterable<any>, f: () => Promise<boolean>): Promise<undefined>;\n\n/**\n* Loops over a generator until it finishes, calling `callback`.\n* Useful if you don't care about the value generator produces, just the number of loops.\n* \n* ```js\n* until(count(5), () => {\n* // do something 5 times\n* });\n* ```\n* \n* If you want the value from the generator, use a `for of` loop as usual.\n* If `callback` explicitly returns _false_, the generator is aborted.\n* \n* This does not work for infinite generators, `callback` will never be called.\n* @param it Generator to run\n* @param callback Code to call for each iteration\n*/\nexport function until(it: AsyncIterable<any> | Iterable<any>, callback: () => Promise<boolean> | never | boolean | Promise<undefined>): Promise<undefined> | undefined {\n  if (isAsyncIterable(it)) {\n    return Async.until(it, callback);\n  } else {\n    // @ts-expect-error\n    Sync.until(it, callback);\n  }\n}\n\n\nexport function chunks<V>(it: Iterable<V>, size: number): Generator<V[]>;\nexport function chunks<V>(it: AsyncIterable<V>, size: number): AsyncGenerator<V[]>;\n\n/**\n * Breaks an iterable into array chunks\n * \n * Streaming: works with infinite iterables.\n * \n * ```js\n * chunks([1,2,3,4,5,6,7,8,9,10], 3);\n * // Yields [[1, 2, 3], [4, 5, 6], [7, 8, 9], [10]]\n * ```\n * @param it\n * @param size\n */\nexport function chunks<V>(it: AsyncIterable<V> | Iterable<V>, size: number): Generator<V[]> | AsyncGenerator<V[]> {\n  return isAsyncIterable(it) ? Async.chunks(it, size) : Sync.chunks(it, size);\n}\n\nexport function filter<V>(it: AsyncIterable<V>, f: (v: V) => boolean | Promise<boolean>): AsyncGenerator<V>;\nexport function filter<V>(it: AsyncIterable<V>, f: (v: V) => boolean): Generator<V>;\n\n/**\n * Filters an iterable, only yielding items which match `f`.\n *\n * ```js\n * filter([1, 2, 3, 4], e => e % 2 == 0);\n * returns [2, 4]\n * ```\n * \n * When using async iterables, `f` can be async as well.\n * @param it\n * @param f\n */\nexport function filter<V>(it: AsyncIterable<V> | Iterable<V>, f: (v: V) => boolean | Promise<boolean>): AsyncGenerator<V> | Generator<V> {\n\n  return isAsyncIterable(it) ? Async.filter(it, f) : Sync.filter(it, f as (v: V) => boolean);\n}\n\n\nexport function fill<V>(it: AsyncIterable<V>, v: V): AsyncGenerator<V>;\nexport function fill<V>(it: Iterable<V>, v: V): Generator<V>;\n\n/**\n * Yields `v` for each item within `it`.\n *\n * ```js\n * fill([1, 2, 3], 0);\n * // Yields: [0, 0, 0]\n * ```\n * \n * This is like a `map` where we return a fixed value, ignoring the input.\n * @param it\n * @param v\n */\nexport function fill<V>(it: AsyncIterable<V> | Iterable<V>, v: V): AsyncGenerator<V> | Generator<V> {\n  return isAsyncIterable(it) ? Async.fill(it, v) : Sync.fill(it, v);\n}\n\nexport function concat<V>(...its: Iterable<V>[]): Generator<V>;\nexport function concat<V>(...its: AsyncIterable<V>[]): AsyncGenerator<V>;\n\n\n/**\n * Return concatenation of iterators.\n * \n * Non-streaming: If one of the input iterables is endless, the other ones won't\n * be processed.\n * @param its\n */\nexport function concat<V>(...its: Iterable<V>[] | AsyncIterable<V>[]): AsyncGenerator<V> | Generator<V> {\n  return isAsyncIterable(its[ 0 ]) ? Async.concat(...its as AsyncIterable<V>[]) : Sync.concat(...its as Iterable<V>[]);\n}\n\nexport function find<V>(it: V[] | Iterable<V>, f: (v: V) => boolean): V | undefined;\nexport function find<V>(it: AsyncIterable<V>, f: (v: V) => boolean | Promise<boolean>): Promise<V | undefined>;\n\n/**\n * Returns first item from iterable `it` that matches predicate `f`\n * ```js\n * find([1, 2, 3, 4], e => e > 2);\n * // Yields: 3\n * ```\n * \n * When using async iterables, `f` can be async as well.\n * @param it\n * @param f\n * @returns\n */\nexport function find<V>(it: V[] | Iterable<V> | AsyncIterable<V>, f: (v: V) => boolean | Promise<boolean>): Promise<V | undefined> | V | undefined {\n\n  return isAsyncIterable(it) ? Async.find(it, f) : Sync.find(it, f as (v: V) => boolean);\n}\n\n/**\n * Execute function `f` for each item in iterable.\n * If `f` returns _false_, iteration stops.\n * ```js\n * forEach(iterable, v => {\n *  // do something with value\n * });\n * ```\n * \n * When using an async iterable, `fn` can also be async.\n * @param it Iterable or array\n * @param fn Function to execute\n */\n// eslint-disable-next-line @typescript-eslint/no-invalid-void-type\nexport function forEach<T>(it: T[] | AsyncIterable<T> | Iterable<T>, fn: (v: T | undefined) => boolean | Promise<boolean> | void | Promise<void>, options: Partial<ForEachOptions> = {}) {\n  if (isAsyncIterable(it)) {\n    return Async.forEach(it, fn, options);\n  } else {\n    Sync.forEach(it, fn as (v: T) => boolean);\n  }\n}\n\nexport function map<V, X>(it: AsyncIterable<V>, f: (v: V) => Promise<X> | X): Generator<X>;\nexport function map<V, X>(it: V[] | Iterable<V>, f: (v: V) => X): Generator<X>;\n\n/**\n * Maps an iterable through function `f`\n * ```js\n * // For every input value, multiply it by itself\n * map([1, 2, 3], e => e*e)\n * // Yields: 1, 4, 9\n * ```\n * \n * It can also be used to transform types:\n * ```js\n * map([1, 2, 3], e => { value: e });\n * // Yields: { value: 1 }, { value: 2 }, { value: 3 }\n * ```\n * @param it\n * @param f\n */\nexport function map<V, X>(it: V[] | AsyncIterable<V> | Iterable<V>, f: (v: V) => X | Promise<X>) {\n  return isAsyncIterable(it) ? Async.map(it, f) : Sync.map(it, f);\n}\n\nexport function fromArray<V>(array: V[], interval: Interval): AsyncGenerator<V>;\nexport function fromArray<V>(array: V[]): Generator<V>;\n\n/**\n * Yield values from `array`, one at a time.\n * Use `interval` to add time between each item.\n * The first item is yielded without delay.\n * \n * @param array Array of values\n * @param interval Interval (defaults: 1ms)\n */\nexport function fromArray<V>(array: V[], interval?: Interval): AsyncGenerator<V> | Generator<V> {\n  return interval === undefined ? Sync.fromArray(array) : Async.fromArray(array, interval);\n}\n\nexport function flatten<V>(it: AsyncIterable<V[] | V>): AsyncIterable<V>;\nexport function flatten<V>(it: Iterable<V[] | V> | V[]): Iterable<V>;\n\n/**\n * Returns a 'flattened' copy of array, un-nesting arrays one level.\n * Streaming: works with unlimited iterables.\n * ```js\n * flatten([1, [2, 3], [[4]]]);\n * // Yields: [1, 2, 3, [4]];\n * ```\n * @param it\n */\nexport function flatten<V>(it: V[] | AsyncIterable<V | V[]> | Iterable<V | V[]>): AsyncIterable<V> | Iterable<V> {\n  return isAsyncIterable(it) ? Async.flatten(it) : Sync.flatten(it);\n}\n\nexport function some<V>(it: AsyncIterable<V>, f: (v: V) => boolean | Promise<boolean>): Promise<boolean>\nexport function some<V>(it: Iterable<V> | V[], f: (v: V) => boolean): boolean\n\n/**\n * Returns true the first time `f` returns true. Useful for spotting any occurrence of\n * data, and exiting quickly\n * ```js\n * some([1, 2, 3, 4], e => e % 3 === 0);\n * // Yields: true\n * ```\n * @param it Iterable\n * @param f Filter function\n * @returns\n */\nexport function some<V>(it: AsyncIterable<V> | Iterable<V>, f: (v: V) => boolean | Promise<boolean>): boolean | Promise<boolean> {\n  return isAsyncIterable(it) ? Async.some(it, f) : Sync.some(it, f as (v: V) => boolean);\n}\n\nexport function last<V>(it: AsyncIterable<V>): Promise<V | undefined>\nexport function last<V>(it: Iterable<V>): V\n\n/**\n * Returns the last item of an iterable, or _undefined_ if it yields no results.\n * @param it \n * @returns \n */\nexport function last<V>(it: AsyncIterable<V> | Iterable<V>): undefined | V | Promise<V | undefined> {\n  return isAsyncIterable(it) ? Async.last(it) : Sync.last(it);\n}\n\nexport function reduce<V>(it: AsyncIterable<V>, f: (accumulator: V, current: V) => V, start: V): Promise<V>;\nexport function reduce<V>(it: Iterable<V> | V[], f: (accumulator: V, current: V) => V, start: V): V;\n\n/**\n * Reduce for iterables\n * ```js\n * reduce([1, 2, 3], (acc, cur) => acc + cur, 0);\n * // Yields: 6\n * ```\n * @param it Iterable\n * @param f Function\n * @param start Start value\n * @returns\n */\nexport function reduce<V>(it: AsyncIterable<V> | Iterable<V> | V[], f: (accumulator: V, current: V) => V, start: V): Promise<V> | V {\n  return isAsyncIterable(it) ? Async.reduce(it, f, start) : Sync.reduce(it, f, start);\n}\n\nexport function slice<V>(it: AsyncIterable<V>, start?: number, end?: number): AsyncGenerator<V>;\nexport function slice<V>(it: Iterable<V> | V[], start?: number, end?: number): Generator<V>;\n/**\n * Returns a section from an iterable.\n * \n * 'end' is the end index, not the number of items.\n * \n * ```js\n * // Return five items from step 10\n * slice(it, 10, 15);\n * ```\n * @param it Iterable\n * @param start Start step\n * @param end Exclusive end step (or until completion)\n */\nexport function slice<V>(\n  it: Iterable<V> | AsyncIterable<V> | V[],\n  start = 0,\n  end = Number.POSITIVE_INFINITY\n) {\n  return isAsyncIterable(it) ? Async.slice(it, start, end) : Sync.slice(it, start, end);\n}\n\nexport function unique<V>(iterable: Iterable<V> | Iterable<V>[]): Generator<V>;\nexport function unique<V>(iterable: AsyncIterable<V> | AsyncIterable<V>[]): AsyncGenerator<V>;\n\n\n/**\n * Returns unique items from an iterable or\n * array of iterables.\n *\n * ```js\n * const data = [ 'apples', 'oranges' ]\n * const data2 = [ 'oranges', 'pears' ]\n * const unique = [...unique([data,data2]];\n * // Yields: [ 'apples', 'oranges', 'pears' ]\n * ```\n *\n * Uses object reference to compare values.\n * Use {@link uniqueByValue} if this doesn't suffice.\n * @param iterable Iterable, or array of iterables\n */\nexport function unique<V>(iterable: V[] | AsyncIterable<V> | Iterable<V> | Iterable<V>[] | AsyncIterable<V>[]): Generator<V> | AsyncGenerator<V> {\n  if (Array.isArray(iterable)) {\n    if (iterable.length === 0) return Sync.fromArray([]);\n    return isAsyncIterable(iterable[ 0 ]) ? Async.unique(iterable as AsyncIterable<V>[]) : Sync.unique(iterable as Iterable<V>[]);\n  } else if (isAsyncIterable(iterable)) {\n    return Async.unique(iterable);\n  } else {\n    return Sync.unique(iterable);\n  }\n}\n\nexport function uniqueByValue<T>(input: Iterable<T> | T[], toString: (v: T) => string, seen?: Set<string>): Generator<T>;\nexport function uniqueByValue<T>(input: AsyncIterable<T>, toString: (v: T) => string, seen?: Set<string>): AsyncGenerator<T>;\n\n/**\n * Filters the `input` iterable, only yielding unique values. Use {@link unique} to compare\n * by object reference instead.\n * \n * Streaming: Works with unbounded iterables.\n * \n * ```js\n * const d = ['a', 'b', 'c', 'b', 'd' ];\n * for (const v of uniqueByValue(d)) {\n *  // Yields: 'a', 'b', 'c', 'd'\n * // (extra 'b' is skipped)\n * }\n * ```\n * \n * By default, JSON.stringify is used to create a string representing value. These are added\n * to a Set of strings, which is how we keep track of uniqueness. If the value is already a string it is used as-is.\n * \n * This allows you to have custom logic for what determines uniqueness. Eg, using a single field\n * of an object as an identifier:\n * \n * ```js\n * const people = [\n *  { name: `Mary`, size: 20 }, { name: `Abdul`, size: 19 }, { name: `Mary`, size: 5 }\n * ]\n * for (const v of uniqueByValue(d, v=>v.name)) {\n *  // Yields: { name: `Mary`, size: 20 }, { name: `Abdul`, size: 19 }\n *  // Second 'Mary' is skipped because name is the same, even though size field is different.\n * }\n * ```\n * \n * If you want to keep track of the set of keys, or prime it with some existing data, provide a Set instance:\n * ```js\n * const unique = new Set();\n * unique.add(`b`);\n * const d = [`a`, `b`, `c`];\n * for (const v of uniqueByValue(d, toStringDefault, unique)) {\n *  // Yields: `a`, `c`\n *  // `b` is skipped because it was already in set\n * }\n * // After completion, `unique` contains `a`, `b` and `c`.\n * ```\n * \n * Creating your own Set is useful for tracking unique values across several calls to `uniqueByValue`.\n * @param input \n * @param seen \n * @param toString \n */\nexport function* uniqueByValue<T>(input: AsyncIterable<T> | Iterable<T> | T[], toString: (v: T) => string = toStringDefault, seen: Set<string> = new Set<string>()): Generator<T> | AsyncGenerator<T> {\n  return isAsyncIterable(input) ? Async.uniqueByValue(input, toString, seen) : Sync.uniqueByValue(input, toString, seen);\n}\n\nexport function toArray<V>(it: AsyncIterable<V>, options?: Partial<ToArrayOptions>): Promise<V[]>;\nexport function toArray<V>(it: Iterable<V>, options?: Partial<ToArrayOptions>): V[];\n\n/**\n * Returns an array of values from an iterator.\n *\n * ```js\n * const data = await toArray(adsrIterable(opts, 10));\n * ```\n *\n * Note: If the iterator is infinite, be sure to provide a `count` or the function\n * will never return.\n *\n * @param it Asynchronous iterable\n * @param count Number of items to return, by default all.\n * @returns\n */\n\nexport function toArray<V>(it: Iterable<V> | AsyncIterable<V>, options: Partial<ToArrayOptions> = {}): V[] | Promise<V[]> {\n  return isAsyncIterable(it) ? Async.toArray(it, options) : Sync.toArray(it, options);\n}\n\nexport function every<V>(it: Iterable<V> | V[], f: (v: V) => boolean): boolean\nexport function every<V>(it: AsyncIterable<V>, f: (v: V) => boolean | Promise<boolean>): Promise<boolean>\n\n/**\n * Returns _true_ if `f` returns _true_ for\n * every item in iterable.\n * \n * Streaming: If an infinite iterable is used, function will never return value.\n * @param it\n * @param f\n * @returns\n */\nexport function every<V>(it: Iterable<V> | V[] | AsyncIterable<V>, f: (v: V) => boolean | Promise<boolean>): Promise<boolean> | boolean {\n  return isAsyncIterable(it) ? Async.every(it, f) : Sync.every(it, f as (v: V) => boolean);\n}\n\nexport function equals<V>(it1: AsyncIterable<V>, it2: AsyncIterable<V>, equality?: (a: V, b: V) => boolean): Promise<boolean>\nexport function equals<V>(it1: IterableIterator<V>, it2: IterableIterator<V>, equality?: (a: V, b: V) => boolean): boolean\n\n/**\n * Returns _true_ if items in two iterables are equal, as\n * determined by the `equality` function.\n * Order matters. It compares items at the same 'step' of each iterable.\n * @param it1\n * @param it2\n * @param equality\n * @returns\n */\nexport function equals<V>(it1: AsyncIterable<V> | IterableIterator<V>, it2: AsyncIterable<V> | IterableIterator<V>, equality?: (a: V, b: V) => boolean) {\n  const as = isAsyncIterable(it1) && isAsyncIterable(it2);\n  return as ? Async.equals(it1, it2, equality) : Sync.equals(it1 as IterableIterator<V>, it2 as IterableIterator<V>, equality);\n}\n\nexport function zip<V>(...its: readonly AsyncIterable<V>[]): Generator<V[]>;\nexport function zip<V>(...its: readonly Iterable<V>[]): Generator<V>;\n\n\n/**\n * Combine same-positioned items from several iterables\n * ```js\n * zip( [1, 2, 3], [4, 5, 6], [7, 8, 9] );\n * Yields: [ [1, 4, 7], [2, 5, 8], [3, 6, 9] ]\n * ```\n * @param its\n * @returns\n */\nexport function zip<V>(...its: readonly AsyncIterable<V>[] | readonly Iterable<V>[]) {\n  if (its.length === 0) return Sync.fromArray([]);\n  return isAsyncIterable(its[ 0 ]) ? Async.zip(...its as readonly AsyncIterable<V>[]) : Sync.zip(...its as readonly Iterable<V>[]);\n}\n\nexport function fromIterable<V>(iterable: Iterable<V>): Generator<V>\nexport function fromIterable<V>(iterable: AsyncIterable<V> | Iterable<V>, interval: Interval): AsyncGenerator<V>\n\n/**\n * Yield values from `iterable`, one at a time.\n * Use `interval` to add time between each item.\n * The first item is yielded without delay.\n * @param iterable Iterable or AsyncIterable\n * @param [interval=1] Interval to wait between yield\n */\nexport function fromIterable<V>(iterable: Iterable<V> | AsyncIterable<V>, interval?: Interval): AsyncGenerator<V> | Generator<V> {\n  if (isAsyncIterable(iterable) || interval !== undefined) return Async.fromIterable(iterable, interval);\n  return Sync.fromIterable(iterable);\n}\n\n/**\n * Access `callback` as an iterable:\n * ```js\n * const fn = () => Math.random();\n * for (const v of fromFunction(fn)) {\n *  // Generate infinite random numbers\n * }\n * ```\n * \n * Use {@link fromFunctionAwaited} to await `callback`.\n * @param callback Function that generates a value\n */\nexport function* fromFunction<T>(callback: () => T) {\n  while (true) {\n    const v = callback();\n    yield v;\n  }\n}\n\n/**\n * Access awaited `callback` as an iterable:\n * ```js\n * const fn = () => Math.random();\n * for await (const v of fromFunctionAwaited(fn)) {\n *  // Generate infinite random numbers\n * }\n * ```\n * \n * `callback` can be async, result is awaited.\n * This requires the use of `for await`.\n * Use {@link fromFunction} otherwise;\n * @param callback \n */\nexport async function* fromFunctionAwaited<T>(callback: () => Promise<T> | T) {\n  while (true) {\n    const v = await callback();\n    yield v;\n  }\n}\n\n\n/**\n * Calls `callback` whenever the generator produces a value.\n * \n * When using `asCallback`, call it with `await` to let generator \n * run its course before continuing:\n * ```js\n * await asCallback(tick({ interval:1000, loops:5 }), x => {\n *  // Gets called 5 times, with 1000ms interval\n * });\n * console.log(`Hi`); // Prints after 5 seconds\n * ```\n * \n * Or if you skip the `await`, code continues and callback will still run:\n * ```js\n * asCallback(tick({ interval: 1000, loops: 5}), x => {\n *  // Gets called 5 times, with 1000ms interval\n * });\n * console.log(`Hi`); // Prints immediately\n * ```\n * @param input \n * @param callback \n */\nexport function asCallback<V>(input: AsyncIterable<V> | Iterable<V>, callback: (v: V) => unknown, onDone?: () => void) {\n  if (isAsyncIterable(input)) {\n    return Async.asCallback(input, callback);\n  } else {\n    Sync.asCallback(input, callback); return;\n  }\n}\n\n"],"mappings":"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"}