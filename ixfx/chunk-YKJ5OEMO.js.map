{"version":3,"sources":["../src/random/WeightedIndex.ts","../src/data/arrays/Random.ts","../src/iterables/sync/AdditionalValues.ts","../src/data/arrays/Unique.ts"],"sourcesContent":["import { type RandomSource, defaultRandom } from \"./Types.js\";\n\n/**\n* Returns a random number from 0..weightings.length, distributed by the weighting values.\n* \n* eg: produces 0 20% of the time, 1 50% of the time, 2 30% of the time\n* ```js\n* weightedIndex([0.2, 0.5, 0.3]);\n* ```\n* @param weightings \n* @param rand \n* @returns \n*/\nexport const weightedIndex = (weightings: Array<number>, rand: RandomSource = defaultRandom): () => number => {\n  const precompute: Array<number> = [];\n  let total = 0;\n  // eslint-disable-next-line unicorn/no-for-loop\n  for (let index = 0; index < weightings.length; index++) {\n    total += weightings[ index ];\n    precompute[ index ] = total;\n  }\n  if (total !== 1) throw new Error(`Weightings should add up to 1. Got: ${ total }`);\n\n  return (): number => {\n    const v = rand();\n    // eslint-disable-next-line unicorn/no-for-loop\n    for (let index = 0; index < precompute.length; index++) {\n      if (v <= precompute[ index ]) return index;\n    }\n    throw new Error(`Bug: weightedIndex could not select index`);\n  }\n}","import { weightedIndex } from \"../../random/WeightedIndex.js\";\nimport type { RandomSource } from \"../../random/Types.js\";\nimport { guardArray } from \"./GuardArray.js\";\n\n/**\n * Returns a random array index.\n *\n * ```js\n * import { Arrays } from 'https://unpkg.com/ixfx/dist/data.js';\n *\n * const v = [`blue`, `red`, `orange`];\n * Arrays.randomIndex(v); // Yields 0, 1 or 2\n * ```\n *\n * Use {@link randomElement} if you want a value from `array`, not index.\n *\n * @param array Array\n * @param rand Random generator. `Math.random` by default.\n * @returns\n */\nexport const randomIndex = <V>(\n  array: ArrayLike<V>,\n  rand: RandomSource = Math.random\n): number => Math.floor(rand() * array.length);\n\n\n/**\n * Removes a random item from an array, returning both the item and the new array as a result.\n * Does not modify the original array unless `mutate` parameter is true.\n *\n * @example Without changing source\n * ```js\n * import { Arrays } from 'https://unpkg.com/ixfx/dist/data.js';\n *\n * const data = [100, 20, 40];\n * const {value, array} = Arrays.randomPluck(data);\n * // value: 20, array: [100, 40], data: [100, 20, 40];\n * ```\n *\n * @example Mutating source\n * ```js\n * import { Arrays } from 'https://unpkg.com/ixfx/dist/data.js';\n *\n * const data = [100, 20, 40];\n * const {value} = Arrays.randomPluck(data, true);\n * // value: 20, data: [100, 40];\n * ```\n *\n * @typeParam V - Type of items in array\n * @param array Array to pluck item from\n * @param mutate If _true_, changes input array. _False_ by default.\n * @param rand Random generatr. `Math.random` by default.\n * @return Returns an object `{value:V|undefined, array:V[]}`\n *\n */\nexport const randomPluck = <V>(\n  array: ReadonlyArray<V> | Array<V>,\n  mutate = false,\n  rand: RandomSource = Math.random\n): { readonly value: V | undefined; readonly array: Array<V> } => {\n  if (array === undefined) throw new Error(`array is undefined`);\n  if (!Array.isArray(array)) throw new Error(`'array' param is not an array`);\n  if (array.length === 0) return { value: undefined, array: [] };\n  const index = randomIndex(array, rand);\n  if (mutate) {\n    return {\n      value: array[ index ],\n      array: array.splice(index, 1),\n    };\n  } else {\n    // Copy array, remove item from that\n    const t = [ ...array ];\n    t.splice(index, 1);\n    return {\n      value: array[ index ],\n      array: t,\n    };\n  }\n};\n\n\n/**\n * Returns random element.\n *\n * ```js\n * import { Arrays } from 'https://unpkg.com/ixfx/dist/data.js';\n *\n * const v = [`blue`, `red`, `orange`];\n * Arrays.randomElement(v); // Yields `blue`, `red` or `orange`\n * ```\n *\n * Use {@link randomIndex} if you want a random index within `array`.\n *\n * @param array\n * @param rand Random generator. `Math.random` by default.\n * @returns\n */\nexport const randomElement = <V>(\n  array: ArrayLike<V>,\n  rand: RandomSource = Math.random\n): V => {\n  guardArray(array, `array`);\n  return array[ Math.floor(rand() * array.length) ];\n};\n\n\n/**\n * Selects a random array index, biased by the provided `weightings`.\n * \n * In the below example, `a` will be picked 20% of the time, `b` 50% and so on.\n * ```js\n * const data =    [  `a`,  `b`,  `c`,  `d` ]\n * const weights = [ 0.2,  0.5,  0.1,  0.2 ] \n * ```\n * @param array \n * @param weightings \n * @param randomSource \n */\nexport const randomElementWeightedSource = <V>(array: ArrayLike<V>, weightings: Array<number>, randomSource: RandomSource = Math.random) => {\n  if (array.length !== weightings.length) throw new Error(`Lengths of 'array' and 'weightings' should be the same.`);\n  const r = weightedIndex(weightings, randomSource);\n  return (): V => {\n    const index = r();\n    return array[ index ];\n  }\n}\n\n/**\n * Returns a shuffled copy of the input array.\n * @example\n * ```js\n * import { Arrays } from 'https://unpkg.com/ixfx/dist/data.js';\n *\n * const d = [1, 2, 3, 4];\n * const s = Arrays.shuffle(d);\n * // d: [1, 2, 3, 4], s: [3, 1, 2, 4]\n * ```\n * @param dataToShuffle\n * @param rand Random generator. `Math.random` by default.\n * @returns Copy with items moved around randomly\n * @typeParam V - Type of array items\n */\nexport const shuffle = <V>(\n  dataToShuffle: ReadonlyArray<V>,\n  rand: RandomSource = Math.random\n): Array<V> => {\n  const array = [ ...dataToShuffle ];\n  for (let index = array.length - 1; index > 0; index--) {\n    const index_ = Math.floor(rand() * (index + 1));\n    [ array[ index ], array[ index_ ] ] = [ array[ index_ ], array[ index ] ];\n  }\n  return array;\n};","import { isEqualDefault, type IsEqual } from \"../../util/IsEqual.js\";\n\n/**\n * Yield additional values from `values` which are not in `source`.\n *\n * Assuming that `source` is a set of unique values, this function\n * yields items from `values` which are not present in `source`.\n *\n * Duplicate items in `values` are ignored - only the first is yielded.\n *\n * If `eq` function is not provided, values are compared using the\n * default === semantics (via {@link isEqualDefault})\n *\n * ```js\n * const existing = [ 1, 2, 3 ];\n * const newValues = [ 3, 4, 5];\n * const v = [...additionalValues(existing, newValues)];\n * // [ 1, 2, 3, 4, 5]\n * ```\n *\n * ```js\n * const existing = [ 1, 2, 3 ];\n * const newValues = [ 3, 4, 5 ];\n * for (const v of additionalValues(existing, newValues)) {\n *  // 4, 5\n * }\n * To combine one or more iterables, keeping only unique items, use {@link unique}\n * @param source\n * @param values\n */\nexport function* additionalValues<V>(\n  source: Iterable<V>,\n  values: Iterable<V>,\n  eq: IsEqual<V> = isEqualDefault\n): Iterable<V> {\n  const sourceArray = Array.isArray(source) ? source : [ ...source ];\n  const yielded: Array<V> = [];\n  for (const v of values) {\n    const found = sourceArray.find((index) => eq(index, v));\n    if (!found) {\n      const alreadyYielded = yielded.find((ii) => eq(ii, v));\n      if (!alreadyYielded) {\n        //eslint-disable-next-line functional/immutable-data\n        yielded.push(v);\n        yield v;\n      }\n    }\n  }\n}\n","import { isEqualDefault } from \"../../util/IsEqual.js\";\nimport { additionalValues } from \"../../iterables/sync/AdditionalValues.js\";\n\n/**\n * Combines the values of one or more arrays, removing duplicates\n * ```js\n * const v = Arrays.unique([ [1, 2, 3, 4], [ 3, 4, 5, 6] ]);\n * // [ 1, 2, 3, 4, 5, 6]\n * ```\n *\n * A single array can be provided as well:\n * ```js\n * const v = Arrays.unique([ 1, 2, 3, 1, 2, 3 ]);\n * // [ 1, 2, 3 ]\n * ```\n * \n * By default uses JSON.toString() to compare values.\n * \n * See also:\n * * {@link intersection}: Overlap between two arrays\n * * {@link additionalValues}: Yield values from an iterable not present in the other\n * * {@link containsDuplicateValues}: Returns true if array contains duplicates\n * @param arrays\n * @param comparer\n * @returns\n */\nexport const unique = <V>(\n  arrays:\n    | Array<Array<V>>\n    | Array<V>\n    | ReadonlyArray<V>\n    | ReadonlyArray<ReadonlyArray<V>>,\n  comparer = isEqualDefault<V>\n): ReadonlyArray<V> => {\n  const t: Array<V> = [];\n  for (const a of arrays) {\n    if (Array.isArray(a)) {\n      for (const v of additionalValues<V>(t, a, comparer)) {\n        t.push(v);\n      }\n    } else {\n      return [ ...additionalValues<V>([], arrays as Array<V>, comparer) ];\n    }\n  }\n  return t;\n};\n\n"],"mappings":"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","names":[]}