{"version":3,"file":"equality-Bufi-LTm.js","names":[],"sources":["../../arrays/dist/src/equality.js"],"sourcesContent":["import { isEqualDefault, isEqualValueDefault } from \"./util/is-equal.js\";\nimport { arrayTest, resultThrow } from \"@ixfx/guards\";\n/**\n * Returns _true_ if the two arrays have the same items at same indexes.\n *\n * Returns _false_ if arrays are of different length.\n * By default uses === semantics for equality checking.\n *\n * ```js\n * isEqual([ 1, 2, 3], [ 1, 2, 3 ]); // true\n * isEqual([ 1, 2, 3], [ 3, 2, 1 ]); // false\n * ```\n *\n * Compare by value\n * ```js\n * isEqual(a, b, isEqualValueDefault);\n * ```\n *\n * Custom compare, eg based on `name` field:\n * ```js\n * isEqual(a, b, (compareA, compareB) => compareA.name === compareB.name);\n * ```\n * @param arrayA\n * @param arrayB\n * @param equality Function to compare values\n */\nexport const isEqual = (arrayA, arrayB, equality = (isEqualDefault)) => {\n    // TODO: 'eq' function could be a key-generating function too\n    resultThrow(arrayTest(arrayA, `arrayA`), arrayTest(arrayB, `arrayB`));\n    if (arrayA.length !== arrayB.length)\n        return false;\n    for (let indexA = 0; indexA < arrayA.length; indexA++) {\n        if (!(equality(arrayA[indexA], arrayB[indexA])))\n            return false;\n    }\n    return true;\n};\n/**\n * Returns _true_ if all values in the array are the same. Uses value-based equality checking by default.\n *\n * @example Using default equality function\n * ```js\n * const a1 = [ 10, 10, 10 ];\n * containsIdenticalValues(a1); // True\n *\n * const a2 = [ { name:`Jane` }, { name:`John` } ];\n * containsIdenticalValues(a2); // True, even though object references are different\n * ```\n *\n * If we want to compare by value for objects that aren't readily\n * converted to JSON, you need to provide a function:\n *\n * ```js\n * containsIdenticalValues(someArray, (a, b) => {\n *  return (a.eventType === b.eventType);\n * });\n * ```\n *\n * Returns _true_ if `array` is empty.\n * @param array Array\n * @param equality Equality checker. Uses string-conversion checking by default\n * @returns\n */\nexport const containsIdenticalValues = (array, equality) => {\n    // TODO: 'equality' function could be a key-generating function too\n    if (!Array.isArray(array))\n        throw new Error(`Param 'array' is not an array.`);\n    if (array.length === 0)\n        return true;\n    const eq = equality ?? isEqualValueDefault;\n    const a = array[0];\n    const r = array.some((v) => !eq(a, v));\n    if (r)\n        return false;\n    return true;\n};\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0BA,MAAa,UAAU,CAAC,QAAQ,QAAQ,WAAY,mBAAoB;CAEpE,YAAY,UAAU,QAAQ,CAAC,MAAM,CAAC,CAAC,EAAE,UAAU,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC;AACrE,KAAI,OAAO,WAAW,OAAO,OACzB,QAAO;AACX,MAAK,IAAI,SAAS,GAAG,SAAS,OAAO,QAAQ,SACzC,KAAI,CAAE,SAAS,OAAO,SAAS,OAAO,QAAQ,CAC1C,QAAO;AAEf,QAAO;AACV;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2BD,MAAa,0BAA0B,CAAC,OAAO,aAAa;AAExD,KAAI,CAAC,MAAM,QAAQ,MAAM,CACrB,OAAM,IAAI,MAAM,CAAC,8BAA8B,CAAC;AACpD,KAAI,MAAM,WAAW,EACjB,QAAO;CACX,MAAM,KAAK,YAAY;CACvB,MAAM,IAAI,MAAM;CAChB,MAAM,IAAI,MAAM,KAAK,CAAC,MAAM,CAAC,GAAG,GAAG,EAAE,CAAC;AACtC,KAAI,EACA,QAAO;AACX,QAAO;AACV"}