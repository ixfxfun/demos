{"version":3,"file":"simple-event-emitter.d-ej_HpdYU.d.ts","names":[],"sources":["../../packages/random/src/types.d.ts","../../packages/events/src/types.d.ts","../../packages/events/src/simple-event-emitter.d.ts"],"sourcesContent":["/**\n * A random source.\n *\n * Predefined sources: {@link defaultRandom}, {@link gaussianSource}, {@link weightedSource}\n */\nexport type RandomSource = () => number;\nexport type WeightedOptions = RandomOptions & Readonly<{\n    easingFunction: (v: number) => number;\n    easing?: string;\n}>;\nexport type StringOptions = Readonly<{\n    length: number;\n    source?: RandomSource;\n}>;\nexport type RandomOptions = Readonly<{\n    max?: number;\n    min?: number;\n    source?: RandomSource;\n}>;\nexport type GenerateRandomOptions = RandomOptions & Readonly<{\n    /**\n     * If true, number range is looped\n     */\n    loop?: boolean;\n}>;\n//# sourceMappingURL=types.d.ts.map","export type Listener<Events> = (event: unknown, sender: ISimpleEventEmitter<Events>) => void;\nexport type ISimpleEventEmitter<Events> = {\n    addEventListener<K extends keyof Events>(type: K, listener: (event: Events[K], sender: ISimpleEventEmitter<Events>) => void): void;\n    removeEventListener<K extends keyof Events>(type: K, listener: (event: Events[K], sender: ISimpleEventEmitter<Events>) => void): void;\n};\n//# sourceMappingURL=types.d.ts.map","import type { ISimpleEventEmitter } from \"./types.js\";\nexport declare class SimpleEventEmitter<Events> implements ISimpleEventEmitter<Events> {\n    #private;\n    dispose(): void;\n    get isDisposed(): boolean;\n    /**\n     * Fire event\n     * @param type Type of event\n     * @param args Arguments for event\n     * @returns\n     */\n    protected fireEvent<K extends keyof Events>(type: K, args: Events[K]): void;\n    /**\n     * Adds event listener.\n     *\n     * @throws Error if emitter is disposed\n     * @typeParam K - Events\n     * @param name Event name\n     * @param listener Event handler\n     */\n    addEventListener<K extends keyof Events>(name: K, listener: (event: Events[K], sender: SimpleEventEmitter<Events>) => void): void;\n    /**\n     * Remove event listener\n     *\n     * @param listener\n     */\n    removeEventListener<K extends keyof Events>(type: K, listener: (event: Events[K], sender: SimpleEventEmitter<Events>) => void): void;\n    /**\n     * Clear all event listeners\n     * @private\n     */\n    clearEventListeners(): void;\n}\n//# sourceMappingURL=simple-event-emitter.d.ts.map"],"mappings":";;;;;;AAKA,IAAW,eAAe,CAAC,IAAO;;;;ACJlC,IAAW,sBAAsB;CAAC;CAAM,MAAE;CAAA,MAAA;CAAA,MAAA;CAAA,MAAA;CAAA,MAAA;CAAA,MAAA;CAAA,MAAA;CAAA,MAAA;CAAA,MAAA;CAAA,MAAA;CAAA,MAAA;CAAA,MAAA;AAAA;;;;ACA1C,IAAW,qBAAqB;CAAC;CAAM,MAAM;CAAG,MAAM;CAAQ,MAAM;CAAG,MAAM;CAAQ,MAAE;CAAA,MAAA;CAAA,MAAA;CAAA,MAAA;CAAA,MAAA;CAAA,MAAA;CAAA,MAAA;CAAA,MAAA;CAAA,MAAA;CAAA,MAAA;CAAA,MAAA;CAAA,MAAA;CAAA,MAAA;CAAA,MAAA;AAAA"}