{"version":3,"file":"random-N8gnCVN-.js","names":["mti","float","integer"],"sources":["../../packages/random/dist/src/weighted-index.js","../../packages/random/dist/src/arrays.js","../../packages/random/dist/src/chance.js","../../packages/random/dist/src/float-source.js","../../packages/random/dist/src/non-zero.js","../../packages/random/dist/src/gaussian.js","../../packages/random/dist/src/guid.js","../../packages/random/dist/src/util/count.js","../../packages/random/dist/src/integer.js","../../packages/random/dist/src/seeded.js","../../packages/random/dist/src/string.js","../../packages/random/dist/src/time.js","../../packages/random/dist/src/util/clamp.js","../../packages/random/dist/src/weighted-integer.js","../../packages/random/dist/src/weighted.js","../src/random.ts"],"sourcesContent":["import {} from \"./types.js\";\n/**\n* Returns a random number from 0..weightings.length, distributed by the weighting values.\n*\n* eg: produces 0 20% of the time, 1 50% of the time, 2 30% of the time\n* ```js\n* weightedIndex([0.2, 0.5, 0.3]);\n* ```\n* @param weightings\n* @param rand\n* @returns\n*/\nexport const weightedIndex = (weightings, rand = Math.random) => {\n    const precompute = [];\n    let total = 0;\n    // eslint-disable-next-line unicorn/no-for-loop\n    for (let index = 0; index < weightings.length; index++) {\n        total += weightings[index];\n        precompute[index] = total;\n    }\n    if (total !== 1)\n        throw new Error(`Weightings should add up to 1. Got: ${total}`);\n    return () => {\n        const v = rand();\n        // eslint-disable-next-line unicorn/no-for-loop\n        for (let index = 0; index < precompute.length; index++) {\n            if (v <= precompute[index])\n                return index;\n        }\n        throw new Error(`Bug: weightedIndex could not select index`);\n    };\n};\n","import { arrayTest, resultThrow } from \"@ixfx/guards\";\nimport { weightedIndex } from \"./weighted-index.js\";\n/**\n * Returns a random array index.\n *\n * ```js\n * const v = [`blue`, `red`, `orange`];\n * randomIndex(v); // Yields 0, 1 or 2\n * ```\n *\n * Use {@link randomElement} if you want a value from `array`, not index.\n *\n * @param array Array\n * @param rand Random generator. `Math.random` by default.\n * @returns\n */\nexport const randomIndex = (array, rand = Math.random) => Math.floor(rand() * array.length);\n/**\n * Removes a random item from an array, returning both the item and the new array as a result.\n * Does not modify the original array unless `mutate` parameter is true.\n *\n * @example Without changing source\n * ```js\n * const data = [100, 20, 40];\n * const {value, array} = randomPluck(data);\n * // value: 20, array: [100, 40], data: [100, 20, 40];\n * ```\n *\n * @example Mutating source\n * ```js\n * const data = [100, 20, 40];\n * const {value} = randomPluck(data, true);\n * // value: 20, data: [100, 40];\n * ```\n *\n * @typeParam V - Type of items in array\n * @param array Array to pluck item from\n * @param mutate If _true_, changes input array. _False_ by default.\n * @param rand Random generatr. `Math.random` by default.\n * @return Returns an object `{value:V|undefined, array:V[]}`\n *\n */\nexport const randomPluck = (array, mutate = false, rand = Math.random) => {\n    if (typeof array === `undefined`)\n        throw new Error(`Param 'array' is undefined`);\n    if (!Array.isArray(array))\n        throw new Error(`Param 'array' is not an array`);\n    if (array.length === 0)\n        return { value: undefined, array: [] };\n    const index = randomIndex(array, rand);\n    if (mutate) {\n        return {\n            value: array[index],\n            array: array.splice(index, 1),\n        };\n    }\n    else {\n        // Copy array, remove item from that\n        const t = [...array];\n        t.splice(index, 1);\n        return {\n            value: array[index],\n            array: t,\n        };\n    }\n};\n/**\n * Returns random element.\n *\n * ```js\n * const v = [`blue`, `red`, `orange`];\n * randomElement(v); // Yields `blue`, `red` or `orange`\n * ```\n *\n * Use {@link randomIndex} if you want a random index within `array`.\n *\n * @param array\n * @param rand Random generator. `Math.random` by default.\n * @returns\n */\nexport const randomElement = (array, rand = Math.random) => {\n    resultThrow(arrayTest(array, `array`));\n    return array[Math.floor(rand() * array.length)];\n};\n/**\n * Selects a random array index, biased by the provided `weightings`.\n *\n * In the below example, `a` will be picked 20% of the time, `b` 50% and so on.\n * ```js\n * const data =    [  `a`,  `b`,  `c`,  `d` ]\n * const weights = [ 0.2,  0.5,  0.1,  0.2 ]\n * ```\n * @param array\n * @param weightings\n * @param randomSource\n */\nexport const randomElementWeightedSource = (array, weightings, randomSource = Math.random) => {\n    if (array.length !== weightings.length)\n        throw new Error(`Lengths of 'array' and 'weightings' should be the same.`);\n    const r = weightedIndex(weightings, randomSource);\n    return () => {\n        const index = r();\n        return array[index];\n    };\n};\n/**\n * Returns a shuffled copy of the input array.\n * @example\n * ```js\n * const d = [1, 2, 3, 4];\n * const s = shuffle(d);\n * // d: [1, 2, 3, 4], s: [3, 1, 2, 4]\n * ```\n * @param dataToShuffle\n * @param rand Random generator. `Math.random` by default.\n * @returns Copy with items moved around randomly\n * @typeParam V - Type of array items\n */\nexport const shuffle = (dataToShuffle, rand = Math.random) => {\n    const array = [...dataToShuffle];\n    for (let index = array.length - 1; index > 0; index--) {\n        const index_ = Math.floor(rand() * (index + 1));\n        [array[index], array[index_]] = [array[index_], array[index]];\n    }\n    return array;\n};\n","import { numberTest, resultThrow } from \"@ixfx/guards\";\n/**\n * Chance of returning `a` or `b`, based on threshold `p`.\n *\n * `p` sets the threshold for picking `b`. The higher the value (up to 1),\n * the more likely `b` will be picked.\n *\n * ```js\n * // 50% of the time it will return 100, 50% 110\n * chance(0.5, 100, 110);\n * // 90% of the time it will yield 110, 10% it will yield 100\n * chance(0.9, 100, 110);\n * ```\n *\n * @param p Threshold to choose option B (value or function)\n * @param a Value or function for option A\n * @param b Value or function for option B\n * @param randomSource Source of random numbers\n * @returns\n */\nexport const chance = (p, a, b, randomSource) => {\n    const source = randomSource ?? Math.random;\n    const resolve = (x) => {\n        if (typeof x === `function`)\n            return x();\n        return x;\n    };\n    const pp = resolve(p);\n    resultThrow(numberTest(pp, `percentage`, `p`));\n    if (source() <= pp) {\n        return resolve(b);\n    }\n    else {\n        return resolve(a);\n    }\n};\n","import { numberTest, resultThrow } from '@ixfx/guards';\nimport {} from \"./types.js\";\n/**\n * Source for random bipolar values\n * ```js\n * const r = bipolarSource();\n * r(); // Produce random value on -1...1 scale\n * ```\n *\n * Options can be provided, for example\n * ```js\n * // -0.5 to 0.5 range\n * bipolarSource({ max: 0.5 });\n * ```\n *\n *\n * @param maxOrOptions Maximum value (number) or options for random generation\n * @returns\n */\nexport const bipolarSource = (maxOrOptions) => {\n    const source = floatSource(maxOrOptions);\n    return () => (source() * 2) - 1;\n};\n/**\n * Returns a random bipolar value\n * ```js\n * const r = bipolar(); // -1...1 random\n * ```\n *\n * Options can be provided, eg.\n * ```js\n * bipolar({ max: 0.5 }); // -0.5..0.5 random\n * ```\n *\n * Use {@link bipolarSource} if you want to generate random\n * values with same settings repeatedly.\n * @param maxOrOptions\n * @returns\n */\nexport const bipolar = (maxOrOptions) => {\n    const source = bipolarSource(maxOrOptions);\n    return source();\n};\n/**\n * Returns a function that produces random float values.\n * Use {@link float} to produce a valued directly.\n *\n * Random float between `max` (exclusive) and 0 (inclusive). Max is 1 if unspecified.\n *\n *\n * ```js\n * // Random number between 0..1 (but not including 1)\n * // (this would be identical to Math.random())\n * const r = floatSource();\n * r(); // Execute to produce random value\n *\n * // Random float between 0..100 (but not including 100)\n * const v = floatSource(100)();\n * ```\n *\n * Options can be used:\n * ```js\n * // Random float between 20..40 (possibly including 20, but always lower than 40)\n * const r = floatSource({ min: 20, max: 40 });\n * ```\n * @param maxOrOptions Maximum value (exclusive) or options\n * @returns Random number\n */\nexport const floatSource = (maxOrOptions = 1) => {\n    const options = typeof maxOrOptions === `number` ? { max: maxOrOptions } : maxOrOptions;\n    let max = options.max ?? 1;\n    let min = options.min ?? 0;\n    const source = options.source ?? Math.random;\n    resultThrow(numberTest(min, ``, `min`), numberTest(max, ``, `max`));\n    if (!options.min && max < 0) {\n        min = max;\n        max = 0;\n    }\n    if (min > max) {\n        throw new Error(`Min is greater than max. Min: ${min.toString()} max: ${max.toString()}`);\n    }\n    return () => source() * (max - min) + min;\n};\n/**\n * Returns a random float between `max` (exclusive) and 0 (inclusive). Max is 1 if unspecified.\n * Use {@link floatSource} to get a function that produces values. This is used internally.\n *\n * ```js\n * // Random number between 0..1 (but not including 1)\n * // (this would be identical to Math.random())\n * const v = float();\n * // Random float between 0..100 (but not including 100)\n * const v = float(100);\n * ```\n *\n * Options can be used:\n * ```js\n * // Random float between 20..40 (possibly including 20, but always lower than 40)\n * const v = float({ min: 20, max: 40 });\n * ```\n * @param maxOrOptions Maximum value (exclusive) or options\n * @returns Random number\n */\nexport const float = (maxOrOptions = 1) => floatSource(maxOrOptions)();\n","export const calculateNonZero = (source = Math.random) => {\n    let v = 0;\n    while (v === 0) {\n        //eslint-disable-next-line functional/no-expression-statements\n        v = source();\n    }\n    return v;\n};\n","import { calculateNonZero } from \"./non-zero.js\";\n/**\n * Returns a random number with gaussian (ie. bell-curved) distribution\n *\n * @example Random number between 0..1 with gaussian distribution\n * ```js\n * gaussian();\n * ```\n *\n * @example Distribution can be skewed\n * ```js\n * gaussian(10);\n * ```\n *\n * Use {@link gaussianSource} if you want a function with skew value baked-in.\n * @param skew Skew factor. Defaults to 1, no skewing. Above 1 will skew to left, below 1 will skew to right\n * @returns\n */\nexport const gaussian = (skew = 1) => gaussianSource(skew)();\n/**\n * Returns a function that generates a gaussian-distributed random number\n * @example\n * Random number between 0..1 with gaussian distribution\n * ```js\n * // Create function\n * const r = gaussianSource();\n *\n * // Generate random value\n * r();\n * ```\n *\n * @example\n * Pass the random number generator elsewhere\n * ```js\n * const r = gaussianSource(10);\n *\n * // Randomise array with gaussian distribution\n * Arrays.shuffle(r);\n * ```\n *\n * If you want to fit a value to a gaussian curve, see Modulation.gaussian instead.\n * @param skew\n * @returns\n */\nexport const gaussianSource = (skew = 1) => {\n    const min = 0;\n    const max = 1;\n    // Source: https://stackoverflow.com/questions/25582882/javascript-math-random-normal-distribution-gaussian-bell-curve\n    const compute = () => {\n        const u = calculateNonZero();\n        const v = calculateNonZero();\n        let result = Math.sqrt(-2 * Math.log(u)) * Math.cos(2 * Math.PI * v);\n        result = result / 10 + 0.5; // Translate to 0 -> 1\n        if (result > 1 || result < 0) {\n            result = compute(); //;gaussian(skew); // resample between 0 and 1 if out of range\n        }\n        else {\n            result = Math.pow(result, skew); // Skew\n            result *= max - min; // Stretch to fill range\n            result += min; // offset to min\n        }\n        return result;\n    };\n    return compute;\n};\n","/**\n * Generates a short roughly unique id\n * ```js\n * const id = shortGuid();\n * ```\n * @param options Options.\n * @returns\n */\nexport const shortGuid = (options = {}) => {\n    const source = options.source ?? Math.random;\n    // Via Stackoverflow...\n    const firstPart = Math.trunc(source() * 46_656);\n    const secondPart = Math.trunc(source() * 46_656);\n    const firstPartString = `000${firstPart.toString(36)}`.slice(-3);\n    const secondPartString = `000${secondPart.toString(36)}`.slice(-3);\n    return firstPartString + secondPartString;\n};\n","import { integerTest, resultThrow } from \"@ixfx/guards\";\n/**\n * Yields `amount` integers, counting by one from zero. If a negative amount is used,\n * count decreases. If `offset` is provided, this is added to the return result.\n * @example\n * ```js\n * const a = [...count(5)]; // Yields five numbers: [0,1,2,3,4]\n * const b = [...count(-5)]; // Yields five numbers: [0,-1,-2,-3,-4]\n * for (const v of count(5, 5)) {\n *  // Yields: 5, 6, 7, 8, 9\n * }\n * const c = [...count(5,1)]; // Yields [1,2,3,4,5]\n * ```\n *\n * @example Used with forEach\n * ```js\n * // Prints `Hi` 5x\n * forEach(count(5), () => // do something);\n * ```\n *\n * If you want to accumulate return values, consider using Flow.repeat.\n *\n * @example Run some code every 100ms, 10 times:\n * ```js\n * import { interval } from 'https://unpkg.com/ixfx/dist/flow.js'\n * import { count } from 'https://unpkg.com/ixfx/dist/numbers.js'\n * const counter = count(10);\n * for await (const v of interval(counter, { fixedIntervalMs: 100 })) {\n *  // Do something\n * }\n * ```\n * @param amount Number of integers to yield\n * @param offset Added to result\n */\nexport function* count(amount, offset = 0) {\n    resultThrow(integerTest(amount, ``, `amount`), integerTest(offset, ``, `offset`));\n    if (amount === 0)\n        return;\n    let index = 0;\n    do {\n        yield (amount < 0 ? -index + offset : index + offset);\n    } while (index++ < Math.abs(amount) - 1);\n}\n;\n","import { numberTest, integerTest, resultThrow } from \"@ixfx/guards\";\nimport { count } from \"./util/count.js\";\nimport { shuffle } from \"./arrays.js\";\n/**\n * Returns a function that produces a random integer between `max` (exclusive) and 0 (inclusive)\n * Use {@link integer} if you want a random number directly.\n *\n * Invoke directly:\n * ```js\n * integerSource(10)();  // Random number 0-9\n * ```\n *\n * Or keep a reference to re-compute:\n * ```js\n * const r = integerSource(10);\n * r(); // Produce a random integer\n * ```\n *\n * If a negative value is given, this is assumed to be the\n * minimum (inclusive), with 0 as the max (inclusive)\n * ```js\n * integerSource(-5)();  // Random number from -5 to 0\n * ```\n *\n * Specify options for a custom minimum or source of random:\n * ```js\n * integerSource({ max: 5,  min: 10 })();  // Random number 4-10\n * integerSource({ max: -5, min: -10 })(); // Random number from -10 to -6\n * integerSource({ max: 10, source: Math.random })(); // Random number between 0-9, with custom source of random\n * ```\n *\n * Throws an error if max & min are equal\n * @param maxOrOptions Max value (exclusive), or set of options\n * @returns Random integer\n */\nexport const integerSource = (maxOrOptions) => {\n    if (typeof maxOrOptions === `undefined`) {\n        throw new TypeError(`maxOrOptions is undefined`);\n    }\n    const options = typeof maxOrOptions === `number` ? { max: maxOrOptions } : maxOrOptions;\n    let max = Math.floor(options.max ?? 100);\n    let min = Math.floor(options.min ?? 0);\n    // If we just get -5 as the max, invert so\n    // max:1 and min: -5 instead for -5...0 range\n    if (!options.min && max < 0) {\n        max = 1;\n        min = options.max ?? 0;\n    }\n    const randomSource = options.source ?? Math.random;\n    if (min > max) {\n        throw new Error(`Min value is greater than max (min: ${min.toString()} max: ${max.toString()})`);\n    }\n    resultThrow(numberTest(min, ``, `min`), numberTest(max, ``, `max`));\n    if (max === min) {\n        throw new Error(`Max and min values cannot be the same (${max.toString()})`);\n    }\n    // Distance\n    const amt = Math.abs(max - min);\n    return () => Math.floor(randomSource() * amt) + min;\n};\n/**\n * Returns a random integer between `max` (exclusive) and 0 (inclusive)\n * Use {@link integerSource} to return a function instead.\n *\n * ```js\n * integer(10);  // Random number 0,1..9\n * ```\n *\n * If a negative value is given, this is assumed to be the\n * minimum (inclusive), with 0 as the max (inclusive)\n * ```js\n * integer(-5);  // Random number -5,-4,...0\n * ```\n *\n * Specify options for a custom minimum or source of random:\n * ```js\n * integer({ max: 5,  min: 10 });  // Random number 4-10\n * integer({ max: -5, min: -10 }); // Random number from -10 to -6\n * integer({ max: 10, source: Math.random }); // Random number between 0-9, with custom source of random\n * ```\n *\n * Throws an error if max & min are equal\n * @param maxOrOptions Max value (exclusive), or set of options\n * @returns Random integer\n */\nexport const integer = (maxOrOptions) => integerSource(maxOrOptions)();\n/**\n * Returns a generator over random unique integers, up to\n * but not including the given max value.\n *\n * @example 0..9 range\n * ```js\n * const rand = [ ...integerUniqueGen(10) ];\n * // eg: [2, 9, 6, 0, 8, 7, 3, 4, 5, 1]\n * ```\n *\n * @example Options can be provided:\n * ```js\n * // 5..9 range\n * const rand = [ ...integerUniqueGen({ min: 5, max: 10 })];\n * ```\n *\n * Range can be looped. Once the initial random walk through the number\n * range completes, it starts again in a new random way.\n *\n * ```js\n * for (const r of integerUniqueGen({ max: 10, loop: true })) {\n *  // Warning: loops forever\n * }\n * ```\n *\n * Behind the scenes, an array of numbers is created that captures the range, this is then\n * shuffled on the first run, and again whenever the iterator loops, if that's allowed.\n *\n * As a consequence, large ranges will consume larger amounts of memory.\n * @param maxOrOptions\n * @returns\n */\nexport function* integerUniqueGen(maxOrOptions) {\n    const options = typeof maxOrOptions === `number` ? { max: maxOrOptions } : maxOrOptions;\n    const min = options.min ?? 0;\n    const max = options.max ?? 100;\n    const source = options.source ?? Math.random;\n    const loop = options.loop ?? false;\n    resultThrow(integerTest(min, ``, `min`), integerTest(max, ``, `max`));\n    if (min > max) {\n        throw new Error(`Min value is greater than max. Min: ${min.toString()} Max: ${max.toString()}`);\n    }\n    const origRange = [...count(max - min, min)];\n    let numberRange = shuffle(origRange);\n    let index = 0;\n    while (true) {\n        if (index === numberRange.length) {\n            if (loop)\n                numberRange = shuffle(origRange, source);\n            else\n                return;\n        }\n        yield numberRange[index++];\n    }\n}\n","/**\n * Reproducible random values using the Merseene Twister algorithm.\n * With the same seed value, it produces the same series of random values.\n *\n * ```js\n * // Seed with a value of 100\n * const r = mersenneTwister(100);\n * r.float();         // 0..1\n * ```\n *\n * Integer values can also be produced. First parameter\n * is the maximum value (exclusive), the optional second\n * parameter is the minimum value (inclusive).\n * ```js\n * r.integer(10);     // 0..9\n * r.integer(10, 5);  // 5..9\n *\n * // Eg random array index:\n * r.integer(someArray.length);\n * ```\n *\n * Adapted from George MacKerron's implementation. MIT License.\n * https://github.com/jawj/mtwist/\n * @param seed Seed value 0..4294967295. Default: random seed.\n */\nexport function mersenneTwister(seed) {\n    if (!seed)\n        seed = Math.random() * 4294967295;\n    // Initialisation\n    let mt = new Array(624);\n    mt[0] = seed >>> 0;\n    const n1 = 1812433253;\n    for (let mti = 1; mti < 624; mti++) {\n        const n2 = mt[mti - 1] ^ (mt[mti - 1] >>> 30);\n        // uint32 multiplication, low 16 bits and high 16 bits multiplied separately and reassembled:\n        mt[mti] = ((((n1 & 0xffff0000) * n2) >>> 0) + (((n1 & 0x0000ffff) * n2) >>> 0) + mti) >>> 0;\n    }\n    let mti = 624;\n    const randomUint32 = () => {\n        let y;\n        if (mti >= 624) {\n            for (let i = 0; i < 227; i++) {\n                y = ((mt[i] & 0x80000000) | (mt[i + 1] & 0x7fffffff)) >>> 0;\n                mt[i] = (mt[i + 397] ^ (y >>> 1) ^ (y & 1 ? 0x9908b0df : 0)) >>> 0;\n            }\n            for (let i = 227; i < 623; i++) {\n                y = ((mt[i] & 0x80000000) | (mt[i + 1] & 0x7fffffff)) >>> 0;\n                mt[i] = (mt[i - 227] ^ (y >>> 1) ^ (y & 1 ? 0x9908b0df : 0)) >>> 0;\n            }\n            y = ((mt[623] & 0x80000000) | (mt[0] & 0x7fffffff)) >>> 0;\n            mt[623] = (mt[396] ^ (y >>> 1) ^ (y & 1 ? 0x9908b0df : 0)) >>> 0;\n            mti = 0;\n        }\n        y = mt[mti++];\n        y = (y ^ (y >>> 11)) >>> 0;\n        y = (y ^ ((y << 7) & 0x9d2c5680)) >>> 0;\n        y = (y ^ ((y << 15) & 0xefc60000)) >>> 0;\n        y = (y ^ (y >>> 18)) >>> 0;\n        return y;\n    };\n    const float = () => randomUint32() / 4294967296; // 2^32\n    // Max is exclusive\n    const integer = (maxExclusive, minInclusive = 0) => {\n        if (maxExclusive < 1)\n            throw new Error(\"Upper bound must be greater than or equal to 1\");\n        if (maxExclusive > 4294967296)\n            throw new Error(\"Upper bound must not be greater than 4294967296\");\n        if (maxExclusive === 1)\n            return 0;\n        let range = maxExclusive - minInclusive;\n        const bitsNeeded = Math.ceil(Math.log2(range)), bitMask = (1 << bitsNeeded) - 1;\n        while (true) {\n            const int = randomUint32() & bitMask;\n            if (int < range)\n                return minInclusive + int;\n        }\n    };\n    return { integer, float };\n}\n","import {} from \"./types.js\";\n/**\n * Returns a string of random letters and numbers of a given `length`.\n *\n * ```js\n * string();  // Random string of length 5\n * string(4); // eg. `4afd`\n * ```\n * @param lengthOrOptions Length of random string, or options.\n * @returns Random string\n */\nexport const string = (lengthOrOptions = 5) => {\n    const options = typeof lengthOrOptions === `number` ? { length: lengthOrOptions } : lengthOrOptions;\n    const calculate = options.source ?? Math.random;\n    return calculate()\n        .toString(36)\n        .slice(2, length + 2);\n};\n","import { integer, integerSource } from \"./integer.js\";\n/**\n * Returns a random number of minutes, with a unit of milliseconds.\n * Max value is exclusive, defaulting to 5.\n * Use {@link minutesMs} to get a value directly, or {@link minutesMsSource} to return a function.\n *\n * @example Random value from 0 to one milli less than 5 * 60 * 1000\n * ```js\n * // Create function that returns value\n * const f = minutesMsSource(5);\n *\n * f(); // Generate value\n * ```\n *\n * @example Specified options:\n * ```js\n * // Random time between one minute and 5 minutes\n * const f = minutesMsSource({ max: 5, min: 1 });\n * f();\n * ```\n *\n * @remarks\n * It's a very minor function, but can make\n * code a little more literate:\n * ```js\n * // Random timeout of up to 5 mins\n * setTimeout(() => { ... }, minutesMsSource(5));\n * ```\n * @param maxMinutesOrOptions\n * @see {@link minutesMs}\n * @returns Function that produces a random value\n */\nexport const minutesMsSource = (maxMinutesOrOptions) => {\n    const options = typeof maxMinutesOrOptions === `number`\n        ? { max: maxMinutesOrOptions }\n        : maxMinutesOrOptions;\n    const min = (options.min ?? 0) * 60 * 1000;\n    const max = (options.max ?? 5) * 60 * 1000;\n    return integerSource({ ...options, max, min });\n};\n/**\n * @example Random value from 0 to one milli less than 5 * 60 * 1000\n * ```js\n * // Random value from 0 to one milli less than 5*60*1000\n * minuteMs(5);\n * ```\n *\n * @example Specified options:\n * ```js\n * // Random time between one minute and 5 minutes\n * minuteMs({ max: 5, min: 1 });\n * ```\n * @inheritDoc minutesMsSource\n *\n * @param maxMinutesOrOptions\n * @see {@link minutesMsSource}\n * @returns Milliseconds\n */\nexport const minutesMs = (maxMinutesOrOptions) => minutesMsSource(maxMinutesOrOptions)();\n/**\n * Returns function which produces a random number of seconds, with a unit of milliseconds.\n * Maximum value is exclusive, defaulting to 5\n * Use {@link secondsMs} to return a random value directly, or {@link secondsMsSource} to return a function.\n *\n * @example Random milliseconds between 0..4999\n * ```js\n * // Create function\n * const f = secondsMsSource(5000);\n * // Produce a value\n * const value = f();\n * ```\n *\n * @example Options can be provided\n * ```js\n * // Random milliseconds between 1000-4999\n * const value = secondsMsSource({ max:5, min:1 })();\n * // Note the extra () at the end to execute the function\n * ```\n *\n * @remarks\n * It's a very minor function, but can make\n * code a little more literate:\n * ```js\n * // Random timeout of up to 5 seconds\n * setTimeout(() => { ...}, secondsMsSource(5));\n * ```\n * @param maxSecondsOrOptions Maximum seconds, or options.\n * @returns Milliseconds\n */\nexport const secondsMsSource = (maxSecondsOrOptions) => {\n    const options = typeof maxSecondsOrOptions === `number`\n        ? { max: maxSecondsOrOptions }\n        : maxSecondsOrOptions;\n    const min = (options.min ?? 0) * 1000;\n    const max = (options.max ?? 5) * 1000;\n    return () => integer({ ...options, max, min });\n};\n/**\n * @example Random milliseconds between 0..4999\n * ```js\n * secondsMs(5000);\n * ```\n *\n * @example Options can be provided\n * ```js\n * // Random milliseconds between 1000-4999\n * secondsMs({ max:5, min:1 });\n * ```\n * @inheritDoc secondsMsSource\n * @param maxSecondsOrOptions\n * @returns\n */\nexport const secondsMs = (maxSecondsOrOptions) => secondsMsSource(maxSecondsOrOptions)();\n","export function clamp(v, min = 0, max = 1) {\n    if (v < min)\n        return min;\n    if (v > max)\n        return max;\n    return v;\n}\n","import {} from \"./types.js\";\nimport { clamp } from \"./util/clamp.js\";\n/**\n * Random integer, weighted according to an easing function.\n * Number will be inclusive of `min` and below `max`.\n *\n * @example 0..99\n * ```js\n * import * as Random from 'https://unpkg.com/ixfx/dist/random.js';\n * const r = Random.weightedIntegerFn(100);\n * r(); // Produce value\n * ```\n *\n * @example 20..29\n * ```js\n * const r = Random.weightedIntegerFn({ min: 20, max: 30 });\n * r(); // Produce value\n * ```\n *\n * @example  0..99 with 'quadIn' easing\n * ```js\n * const r = Random.weightedInteger({ max: 100, easing: `quadIn` });\n * ```\n *\n * Note: result from easing function will be clamped to\n * the min/max (by default 0-1);\n *\n * @param maxOrOptions Maximum (exclusive)\n * @returns Function that produces a random weighted integer\n */\nexport const weightedIntegerSource = (options) => {\n    const source = options.source ?? Math.random;\n    if (typeof options.easingFunction === `undefined`)\n        throw new Error(`Param 'easingFunction' is undefined`);\n    const max = options.max ?? 1;\n    const min = options.min ?? 0;\n    if (max === min)\n        throw new Error(`Param 'max' is the same as  'min'`);\n    if (max < min)\n        throw new Error(`Param 'max' should be greater than  'min'`);\n    const compute = () => {\n        const r = clamp(options.easingFunction(source()));\n        return Math.floor(r * (max - min)) + min;\n    };\n    return compute;\n};\n/**\n * @example 0..99\n * ```js\n * import * as Random from 'https://unpkg.com/ixfx/dist/random.js';\n * Random.weightedInteger(100);\n * ```\n *\n * @example 20..29\n * ```js\n * Random.weightedInteger({ min: 20, max: 30 });\n * ```\n *\n * @example  0..99 with 'quadIn' easing\n * ```js\n * Random.weightedInteger({ max: 100, easing: `quadIn` })\n * ```\n * @inheritDoc {@link weightedIntegerSource}\n * @param maxOrOptions\n * @returns Random weighted integer\n */\nexport const weightedInteger = (options) => weightedIntegerSource(options)();\n","import {} from './types.js';\n/***\n * Returns a random number, 0..1, weighted by a given easing function.\n *\n * Use {@link weightedSource} to return a function instead.\n *\n * @see {@link weightedSource} Returns a function rather than value\n * @returns Random number (0-1)\n */\nexport const weighted = (options) => weightedSource(options)();\n/***\n * Returns a random number, 0..1, weighted by a given easing function.\n *\n * Use {@link weighted} to get a value directly.\n *\n * @see {@link weighted} Returns value instead of function\n * @returns Function which returns a weighted random value\n */\nexport const weightedSource = (options) => {\n    const source = options.source ?? Math.random;\n    if (typeof options.easingFunction === `undefined`)\n        throw new Error(`Param 'easingFunction' is undefined`);\n    const compute = () => {\n        const r = source();\n        return options.easingFunction(r);\n    };\n    return compute;\n};\n","export * from '@ixfx/random';"],"mappings":"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"}