{"version":3,"file":"round-DpRSrhXa.js","names":["a: number","b?: number | boolean","roundUp?: boolean","rounder: ((v: number) => number) | undefined","v: number"],"sources":["../../../ixfx/packages/numbers/src/round.ts"],"sourcesContent":["import { integerTest, resultThrow } from \"@ixfx/guards\";\n\nexport function round(decimalPlaces: number, v: number, roundUp?: boolean): number;\nexport function round(decimalPlaces: number, roundUp?: boolean): (v: number) => number;\n\n/**\n * Rounds a number.\n *\n * If one parameter is given, it's the decimal places,\n * and a rounding function is returned:\n * ```js\n * import { round } from 'https://unpkg.com/ixfx/dist/numbers.js';\n * const r = round(2);\n * r(10.12355); // 10.12\n * ```\n *\n * If two parameters are given, the first is decimal places,\n * the second the value to round.\n * ```js\n * round(2, 10.12355); // 10.12\n * ```\n * @param decimalPlaces\n * @returns\n */\nexport function round(a: number, b?: number | boolean, roundUp?: boolean) {\n  resultThrow(integerTest(a, `positive`, `decimalPlaces`));\n\n  const up = (typeof b === `boolean`) ? b : (roundUp ?? false)\n  let rounder: ((v: number) => number) | undefined;\n  if (a === 0) {\n    rounder = Math.round;\n  } else {\n    const p = Math.pow(10, a);\n    if (up) {\n      rounder = (v: number) => Math.ceil(v * p) / p;\n    } else {\n      rounder = (v: number) => Math.floor(v * p) / p;\n    }\n  }\n  if (typeof b === `number`) return rounder(b);\n  return rounder;\n}\n\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAwBA,SAAgB,MAAMA,GAAWC,GAAsBC,SAAmB;AACxE,aAAY,YAAY,IAAI,YAAY,eAAe,CAAC;CAExD,MAAM,YAAa,OAAO,WAAY,IAAK,WAAW;CACtD,IAAIC;AACJ,KAAI,MAAM,EACR,WAAU,KAAK;MACV;EACL,MAAM,IAAI,KAAK,IAAI,IAAI,EAAE;AACzB,MAAI,GACF,WAAU,CAACC,MAAc,KAAK,KAAK,IAAI,EAAE,GAAG;MAE5C,WAAU,CAACA,MAAc,KAAK,MAAM,IAAI,EAAE,GAAG;CAEhD;AACD,YAAW,OAAO,QAAS,QAAO,QAAQ,EAAE;AAC5C,QAAO;AACR"}