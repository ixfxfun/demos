{"version":3,"file":"comparers-C6kfLE-t.d.ts","names":["CompareResult","Comparer","V","numericComparer","jsComparer","comparerInverse","defaultComparer"],"sources":["../../core/dist/src/comparers.d.ts"],"sourcesContent":["export type CompareResult = number;\nexport type Comparer<V> = (a: V, b: V) => CompareResult;\n/**\n * Sort numbers in ascending order.\n *\n * ```js\n * [10, 4, 5, 0].sort(numericComparer);\n * // Yields: [0, 4, 5, 10]\n * [10, 4, 5, 0].sort(comparerInverse(numericComparer));\n * // Yields: [ 10, 5, 4, 0]\n * ```\n *\n * Returns:\n * * 0: values are equal\n * * negative: `a` should be before `b`\n * * positive: `a` should come after `b`\n * @param a\n * @param b\n * @returns\n */\nexport declare const numericComparer: (a: number, b: number) => CompareResult;\n/**\n * Default sort comparer, following same sematics as Array.sort.\n * Consider using {@link defaultComparer} to get more logical sorting of numbers.\n *\n * Note: numbers are sorted in alphabetical order, eg:\n * ```js\n * [ 10, 20, 5, 100 ].sort(jsComparer); // same as .sort()\n * // Yields: [10, 100, 20, 5]\n * ```\n *\n * Returns -1 if x is less than y\n * Returns 1 if x is greater than y\n * Returns 0 if x is the same as y\n * @param x\n * @param y\n * @returns\n */\nexport declare const jsComparer: (x: any, y: any) => CompareResult;\n/**\n * Inverts the source comparer.\n * @param comparer\n * @returns\n */\nexport declare const comparerInverse: <V>(comparer: Comparer<V>) => Comparer<V>;\n/**\n * Compares numbers by numeric value, otherwise uses the default\n * logic of string comparison.\n *\n * Is an ascending sort:\n * * b, a, c -> a, b, c\n * * 10, 5, 100 -> 5, 10, 100\n *\n * Returns -1 if x is less than y\n * Returns 1 if x is greater than y\n * Returns 0 if x is the same as y\n * @param x\n * @param y\n * @see {@link comparerInverse} Inverted order\n * @returns\n */\nexport declare const defaultComparer: (x: any, y: any) => CompareResult;\n//# sourceMappingURL=comparers.d.ts.map"],"mappings":";KAAYA,aAAAA;AAAAA,KACAC,QADa,CAAA,CAAA,CAAA,GAAA,CAAA,CAAA,EACKC,CADL,EAAA,CAAA,EACWA,CADX,EAAA,GACiBF,aADjB;AACzB;;;;;AAAuD;AAmBvD;AAkBA;AAMA;;;;;;AAA4E;AAiB5E;;;cAzCqBG,2CAA2CH;;;;;;;;;;;;;;;;;;cAkB3CI,gCAAgCJ;;;;;;cAMhCK,+BAA+BJ,SAASC,OAAOD,SAASC;;;;;;;;;;;;;;;;;cAiBxDI,qCAAqCN"}