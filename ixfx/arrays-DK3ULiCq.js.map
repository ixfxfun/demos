{"version":3,"file":"arrays-DK3ULiCq.js","names":["value: unknown","array: ArrayLike<V>","index: number"],"sources":["../../packages/guards/src/arrays.ts"],"sourcesContent":["import type { Result } from \"./types.js\";\nimport { integerTest } from \"./numbers.js\";\nimport { resultsCollate, resultThrow } from \"./result.js\";\n\n/**\n * Throws an error if parameter is not an array\n * @param value\n * @param parameterName\n */\nexport const arrayTest = (value: unknown, parameterName = `?`): Result<any[], string> => {\n  if (!Array.isArray(value)) {\n    return { success: false, error: `Parameter '${ parameterName }' is expected to be an array'` };\n  }\n  return { success: true, value }\n};\n\n// export const throwArrayTest = (value: unknown, parameterName = `?`) => {\n//   resultThrow(arrayTest(value, parameterName));\n// }\n\n/**\n * Throws if `index` is an invalid array index for `array`, and if\n * `array` itself is not a valid array.\n * @param array\n * @param index\n */\nexport const arrayIndexTest = <V>(\n  array: ArrayLike<V>,\n  index: number,\n  name = `index`\n): Result<ArrayLike<V>, string> => {\n  return resultsCollate(\n    arrayTest(array),\n    integerTest(index, `positive`, name),\n  )\n  // const t = ;\n  // if (!t.success) return t;\n\n  // throwIntegerTest(index, `positive`, name);\n  // if (index > array.length - 1) {\n  //   throw new Error(\n  //     `'${ name }' ${ index } beyond array max of ${ array.length - 1 }`\n  //   );\n  // }\n};\n\n/**\n * Returns true if parameter is an array of strings\n * @param value\n * @returns\n */\nexport const arrayStringsTest = (value: unknown): Result<string[], string> => {\n  if (!Array.isArray(value)) return { success: false, error: `Value is not an array` };\n  if (!value.some((v) => typeof v !== `string`)) {\n    return { success: false, error: `Contains something not a string` };\n  }\n  return { success: true, value };\n};\n\n\n// export const guardArray = <V>(array: ArrayLike<V>, name = `?`) => {\n//   if (array === undefined) {\n//     throw new TypeError(`Param '${ name }' is undefined. Expected array.`);\n//   }\n//   if (array === null) {\n//     throw new TypeError(`Param '${ name }' is null. Expected array.`);\n//   }\n//   if (!Array.isArray(array)) {\n//     throw new TypeError(`Param '${ name }' not an array as expected`);\n//   }\n// };\n\n"],"mappings":";;;;;;;;AASA,MAAa,YAAY,CAACA,OAAgB,iBAAiB,OAA8B;AACvF,MAAK,MAAM,QAAQ,MAAM,CACvB,QAAO;EAAE,SAAS;EAAO,QAAQ,aAAc,cAAe;CAAgC;AAEhG,QAAO;EAAE,SAAS;EAAM;CAAO;AAChC;;;;;;;AAYD,MAAa,iBAAiB,CAC5BC,OACAC,OACA,QAAQ,WACyB;AACjC,QAAO,eACL,UAAU,MAAM,EAChB,YAAY,QAAQ,WAAW,KAAK,CACrC;AAUF"}