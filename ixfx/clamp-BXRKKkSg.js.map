{"version":3,"file":"clamp-BXRKKkSg.js","names":[],"sources":["../../numbers/dist/src/clamp.js"],"sourcesContent":["/**\n * Clamps a value between min and max (both inclusive)\n * Defaults to a 0-1 range, useful for percentages.\n *\n * @example Usage\n * ```js\n * // 0.5 - just fine, within default of 0 to 1\n * clamp(0.5);\n * // 1 - above default max of 1\n * clamp(1.5);\n * // 0 - below range\n * clamp(-50, 0, 100);\n * // 50 - within range\n * clamp(50, 0, 50);\n * ```\n *\n * For clamping integer ranges, consider {@link clampIndex }\n * For clamping `{ x, y }` points, consider {@link @ixfx/geometry.Points.clamp}.\n * For clamping bipolar values: {@link Bipolar.clamp}\n * @param value Value to clamp\n * @param min value (inclusive)\n * @param max value (inclusive)\n * @returns Clamped value\n */\nexport const clamp = (value, min = 0, max = 1) => {\n    // ✔ UNIT TESTED\n    if (Number.isNaN(value))\n        throw new Error(`Param 'value' is NaN`);\n    if (Number.isNaN(min))\n        throw new Error(`Param 'min' is NaN`);\n    if (Number.isNaN(max))\n        throw new Error(`Param 'max' is NaN`);\n    if (value < min)\n        return min;\n    if (value > max)\n        return max;\n    return value;\n};\n/**\n * Returns a function that clamps values.\n *\n * ```js\n * const c = clamper(0,100);\n * c(50);   // 50\n * c(101); // 100\n * c(-5);  // 0\n * ```\n * @param min Minimum value. Default: 0\n * @param max Maximum value. Default: 1\n */\nexport const clamper = (min = 0, max = 1) => {\n    if (Number.isNaN(min))\n        throw new Error(`Param 'min' is NaN`);\n    if (Number.isNaN(max))\n        throw new Error(`Param 'max' is NaN`);\n    return (v) => {\n        if (v > max)\n            return max;\n        if (v < min)\n            return min;\n        return v;\n    };\n};\n/**\n * Clamps integer `v` between 0 (inclusive) and array length or length (exclusive).\n * Returns value then will always be at least zero, and a valid array index.\n *\n * @example Usage\n * ```js\n * // Array of length 4\n * const myArray = [`a`, `b`, `c`, `d`];\n * clampIndex(0, myArray);    // 0\n * clampIndex(5, 3); // 2\n * ```\n *\n * Throws an error if `v` is not an integer.\n *\n * For some data it makes sense that data might 'wrap around' if it exceeds the\n * range. For example rotation angle. Consider using {@link wrap} for this.\n *\n * @param v Value to clamp (must be an interger)\n * @param arrayOrLength Array, or length of bounds (must be an integer)\n * @returns Clamped value, minimum will be 0, maximum will be one less than `length`.\n */\nexport const clampIndex = (v, arrayOrLength) => {\n    // ✔ UNIT TESTED\n    if (!Number.isInteger(v)) {\n        throw new TypeError(`v parameter must be an integer (${v})`);\n    }\n    const length = Array.isArray(arrayOrLength)\n        ? arrayOrLength.length\n        : arrayOrLength;\n    if (!Number.isInteger(length)) {\n        throw new TypeError(`length parameter must be an integer (${length}, ${typeof length})`);\n    }\n    v = Math.round(v);\n    if (v < 0)\n        return 0;\n    if (v >= length)\n        return length - 1;\n    return v;\n};\n/**\n * Returns the largest value, ignoring the sign of numbers\n *\n * ```js\n * maxAbs(1, 5);    // 5\n * maxAbs(-10, 5);  // -10 (since sign is ignored)\n * ```\n * @param values\n * @returns\n */\nexport const maxAbs = (...values) => {\n    let index = -1;\n    let maxA = Number.MIN_SAFE_INTEGER;\n    for (let index_ = 0; index_ < values.length; index_++) {\n        const vA = Math.abs(values[index_]);\n        if (vA > maxA) {\n            maxA = vA;\n            index = index_;\n        }\n    }\n    return values[index];\n};\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAwBA,MAAa,QAAQ,CAAC,OAAO,MAAM,GAAG,MAAM,MAAM;AAE9C,KAAI,OAAO,MAAM,MAAM,CACnB,OAAM,IAAI,MAAM,CAAC,oBAAoB,CAAC;AAC1C,KAAI,OAAO,MAAM,IAAI,CACjB,OAAM,IAAI,MAAM,CAAC,kBAAkB,CAAC;AACxC,KAAI,OAAO,MAAM,IAAI,CACjB,OAAM,IAAI,MAAM,CAAC,kBAAkB,CAAC;AACxC,KAAI,QAAQ,IACR,QAAO;AACX,KAAI,QAAQ,IACR,QAAO;AACX,QAAO;AACV;;;;;;;;;;;;;AAaD,MAAa,UAAU,CAAC,MAAM,GAAG,MAAM,MAAM;AACzC,KAAI,OAAO,MAAM,IAAI,CACjB,OAAM,IAAI,MAAM,CAAC,kBAAkB,CAAC;AACxC,KAAI,OAAO,MAAM,IAAI,CACjB,OAAM,IAAI,MAAM,CAAC,kBAAkB,CAAC;AACxC,QAAO,CAAC,MAAM;AACV,MAAI,IAAI,IACJ,QAAO;AACX,MAAI,IAAI,IACJ,QAAO;AACX,SAAO;CACV;AACJ;;;;;;;;;;;;;;;;;;;;;;AAsBD,MAAa,aAAa,CAAC,GAAG,kBAAkB;AAE5C,KAAI,CAAC,OAAO,UAAU,EAAE,CACpB,OAAM,IAAI,UAAU,CAAC,gCAAgC,EAAE,EAAE,CAAC,CAAC;CAE/D,MAAM,SAAS,MAAM,QAAQ,cAAc,GACrC,cAAc,SACd;AACN,KAAI,CAAC,OAAO,UAAU,OAAO,CACzB,OAAM,IAAI,UAAU,CAAC,qCAAqC,EAAE,OAAO,EAAE,EAAE,OAAO,OAAO,CAAC,CAAC;CAE3F,IAAI,KAAK,MAAM,EAAE;AACjB,KAAI,IAAI,EACJ,QAAO;AACX,KAAI,KAAK,OACL,QAAO,SAAS;AACpB,QAAO;AACV"}