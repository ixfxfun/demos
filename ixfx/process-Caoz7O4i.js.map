{"version":3,"file":"process-Caoz7O4i.js","names":["max","min","tally"],"sources":["../../packages/process/dist/src/basic.js","../../packages/process/dist/src/cancel-error.js","../../packages/process/dist/src/flow.js","../../packages/process/dist/src/if-undefined.js","../../packages/process/dist/src/util.js","../../packages/process/dist/src/seen.js","../src/process.ts"],"sourcesContent":["/**\n * Outputs the current largest-seen value\n * @returns\n */\nexport const max = () => {\n    let max = Number.MIN_SAFE_INTEGER;\n    const compute = (value) => {\n        const valueArray = Array.isArray(value) ? value : [value];\n        for (const subValue of valueArray) {\n            if (typeof subValue !== `number`)\n                break;\n            max = Math.max(subValue, max);\n        }\n        return max;\n    };\n    return compute;\n};\n/**\n * Outputs the current smallest-seen value\n * @returns\n */\nexport const min = () => {\n    let min = Number.MAX_SAFE_INTEGER;\n    const compute = (value) => {\n        const valueArray = Array.isArray(value) ? value : [value];\n        for (const subValue of valueArray) {\n            if (typeof subValue !== `number`)\n                break;\n            min = Math.min(subValue, min);\n        }\n        return min;\n    };\n    return compute;\n};\n/**\n * Returns a sum of values\n * @returns\n */\nexport const sum = () => {\n    let t = 0;\n    const compute = (value) => {\n        const valueArray = Array.isArray(value) ? value : [value];\n        for (const subValue of valueArray) {\n            if (typeof subValue !== `number`)\n                continue;\n            t += subValue;\n        }\n        return t;\n    };\n    return compute;\n};\n/**\n * Returns the current average of input values\n * @returns\n */\nexport const average = () => {\n    let total = 0;\n    let tally = 0;\n    const compute = (value) => {\n        const valueArray = Array.isArray(value) ? value : [value];\n        for (const subValue of valueArray) {\n            if (typeof subValue !== `number`)\n                continue;\n            tally++;\n            total += subValue;\n        }\n        return total / tally;\n    };\n    return compute;\n};\n/**\n * Returns the tally (ie number of) values\n * @param countArrayItems\n * @returns\n */\nexport const tally = (countArrayItems) => {\n    let t = 0;\n    const compute = (value) => {\n        if (countArrayItems) {\n            if (Array.isArray(value))\n                t += value.length;\n            else\n                t++;\n        }\n        else {\n            t++;\n        }\n        return t;\n    };\n    return compute;\n};\n/**\n * Returns the 'best' value seen so far as determined by a ranking function.\n * This is similar to min/max but usable for objects.\n * @param r\n * @param options\n * @returns\n */\nexport function rank(r, options = {}) {\n    const includeType = options.includeType;\n    const emitEqualRanked = options.emitEqualRanked ?? false;\n    const emitRepeatHighest = options.emitRepeatHighest ?? false;\n    let best;\n    return (value) => {\n        if (includeType && typeof value !== includeType)\n            return;\n        if (best === undefined) {\n            best = value;\n            return best;\n        }\n        else {\n            const result = r(value, best);\n            //console.log(`result: ${ result } value: ${ JSON.stringify(value) } best: ${ JSON.stringify(best) }`);\n            if (result == `a`) {\n                // New value is the current best\n                best = value;\n                return best;\n            }\n            else if (result === `eq` && emitEqualRanked) {\n                // New value is same rank as previous, but we have flag on\n                return best;\n            }\n            else if (emitRepeatHighest) {\n                // Emit current highest due to flag\n                return best;\n            }\n        }\n    };\n}\n","export class CancelError extends Error {\n    constructor(message) {\n        super(message);\n        this.name = `CancelError`;\n    }\n}\n","import { CancelError } from \"./cancel-error.js\";\n/**\n * Creates a flow of data processors (up to 5 are supported).\n * The flow is encapsulated in a function that accepts an input value an returns an output.\n *\n * ```js\n * const p = flow(\n *  (value:string) => value.toUpperCase(), // Convert to uppercase\n *  (value:string) => value.at(0) === 'A') // If first letter is an A, return true\n * );\n * p('apple'); // True\n * ```\n *\n * Each processing function is expected to take in one input value and return one value.\n * @param processors\n * @returns\n */\nexport function flow(...processors) {\n    return (value) => {\n        let v = value;\n        for (const p of processors) {\n            try {\n                // @ts-expect-error\n                v = p(v);\n            }\n            catch (err) {\n                if (err instanceof CancelError) {\n                    break;\n                }\n                else {\n                    throw err;\n                }\n            }\n        }\n        return v;\n    };\n}\n","import { CancelError } from \"./cancel-error.js\";\n/**\n/**\n * Calls a function if the input value is not undefined.\n * Return value from function is passed to next function in flow.\n *\n * ```js\n * const flow = Process.flow(\n *  Process.max(),\n *  Process.seenLastToUndefined(),\n *  Process.ifNotUndefined(v => {\n *    console.log(`v:`, v);\n *  })\n * );\n * flow(100); // Prints 'v:100'\n * flow(90);  // Nothing happens max value has not changed\n * flow(110); // Prints 'v:110'\n * ```\n * @param fn\n * @returns\n */\nexport function ifNotUndefined(fn) {\n    return (value) => {\n        if (value === undefined)\n            return value;\n        const v = fn(value);\n        return v;\n    };\n}\n/**\n * Cancels the remaining flow operations if _undefined_ is an input.\n * See also {@link ifUndefined} or {@link ifNotUndefined}.\n *\n * ```js\n * const c3 = Process.flow(\n *  Basic.max(),\n *  Process.seenLastToUndefined(),\n *  Process.cancelIfUndefined(),\n *  (v => {\n *   console.log(v);\n *  })\n * );\n * c3(100); // Prints '100'\n * c3(90);  // Doesn't print anything since max does not change\n * c3(110); // Prints '110'\n * ```\n * @returns\n */\nexport function cancelIfUndefined() {\n    return (value) => {\n        if (value === undefined)\n            throw new CancelError(`cancel`);\n        return value;\n    };\n}\n/**\n * Returns the output of `fn` if the input value is _undefined_.\n * See also: {@link ifNotUndefined} and {@link cancelIfUndefined}.\n * @param fn\n * @returns\n */\nexport function ifUndefined(fn) {\n    return (value) => {\n        if (value === undefined)\n            return fn();\n        else\n            return value;\n    };\n}\n","/**\n * Default comparer function is equiv to checking `a === b`.\n * Use {@link isEqualValueDefault} to compare by value, via comparing JSON string representation.\n */\nexport const isEqualDefault = (a, b) => a === b;\n/**\n * A default converter to string that uses JSON.stringify if its an object, or the thing itself if it's a string\n */\nexport const toStringDefault = (itemToMakeStringFor) => typeof itemToMakeStringFor === `string`\n    ? itemToMakeStringFor\n    : JSON.stringify(itemToMakeStringFor);\n","import { isEqualDefault, toStringDefault } from \"./util.js\";\n/**\n * If a value is same as the previous value, _undefined_ is emitted instead.\n * @param eq Equality function. If not specified, === semantics are used.\n * @returns\n */\nexport function seenLastToUndefined(eq) {\n    if (eq === undefined)\n        eq = isEqualDefault;\n    let lastValue;\n    return (value) => {\n        if (value !== lastValue) {\n            lastValue = value;\n            return value;\n        }\n        return undefined;\n    };\n}\n/**\n * If a value is same as any previously-seen value, _undefined_ is emitted instead.\n * It stores all previous values and compares against them for each new value.\n * This would likely be not very efficient compared to {@link seenToUndefinedByKey} which uses a one-time computed\n * key and efficient storage of only the keys (using a Set).\n *\n * @param eq Equality function. If not specified, === semantics are used.\n * @returns\n */\nexport function seenToUndefined(eq) {\n    let seen = [];\n    if (eq === undefined)\n        eq = isEqualDefault;\n    return (value) => {\n        if (value === undefined)\n            return;\n        for (const s of seen) {\n            if (eq(s, value))\n                return;\n        }\n        seen.push(value);\n        return value;\n    };\n}\n/**\n * If a value is the same as any previously-seen value, _undefined_ is emitted instead.\n * This version uses a function to create a string key of the object, by default JSON.stringify.\n * Thus we don't need to store all previously seen objects, just their keys.\n *\n * Alternatively, if a key function doesn't make sense for the value, use\n * {@link seenToUndefined}, which stores the values (less efficient).\n *\n * @param toString\n * @returns\n */\nexport function seenToUndefinedByKey(toString) {\n    let seen = new Set();\n    if (toString === undefined)\n        toString = toStringDefault;\n    return (value) => {\n        if (value === undefined)\n            return;\n        const key = toString(value);\n        if (seen.has(key))\n            return;\n        seen.add(key);\n        return value;\n    };\n}\n","export * from '@ixfx/process';"],"mappings":"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"}