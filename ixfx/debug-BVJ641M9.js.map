{"version":3,"file":"debug-BVJ641M9.js","names":[],"sources":["../../packages/debug/dist/src/util.js","../../packages/debug/dist/src/logger.js","../../packages/debug/dist/src/fps-counter.js","../../packages/debug/dist/src/index.js","../src/debug.ts"],"sourcesContent":["export const getOrGenerateSync = (map, fn) => (key, args) => {\n    let value = map.get(key);\n    if (value !== undefined)\n        return value;\n    value = fn(key, args);\n    map.set(key, value);\n    return value;\n};\n","import { getOrGenerateSync } from \"./util.js\";\n/**\n * Returns a console logging function which prefixes messages. This is\n * useful for tracing messages from different components. Each prefix\n * is assigned a colour, further helping to distinguish messages.\n *\n * Use {@link logSet} to get a bundled set.\n *\n * ```\n * // Initialise once\n * const log = logger(`a`);\n * const error = logger(`a`, `error`);\n * const warn = logger(`a`, `warn);\n *\n * // And then use\n * log(`Hello`);    // console.log(`a Hello`);\n * error(`Uh-oh`);  // console.error(`a Uh-oh`);\n * warn(`Eek!`);    // console.warn(`a Eeek!`);\n * ```\n *\n * Provide the `colourKey` parameter to make log messages\n * be coloured the same, even though the prefix is different.\n * ```js\n * // Both loggers will use the same colour because they\n * // share the colour key `system`\n * const log = logger(`a`,`log`,`system`);\n * const log2 = logger(`b`, `log`, `system`);\n * ```\n * @param prefix\n * @param kind\n * @param colourKey Optional key to colour log lines by instead of prefix\n * @returns\n */\nexport const logger = (prefix, kind = `log`, colourKey) => (m) => {\n    if (m === undefined) {\n        m = `(undefined)`;\n    }\n    else if (typeof m === `object`) {\n        m = JSON.stringify(m);\n    }\n    const colour = colourKey ?? prefix;\n    switch (kind) {\n        case `log`: {\n            console.log(`%c${prefix} ${m}`, `color: ${logColours(colour)}`);\n            break;\n        }\n        case `warn`: {\n            console.warn(prefix, m);\n            break;\n        }\n        case `error`: {\n            console.error(prefix, m);\n            break;\n        }\n    }\n};\n/**\n* Returns a bundled collection of {@link logger}s\n*\n* ```js\n* const con = logSet(`a`);\n* con.log(`Hello`);  // console.log(`a Hello`);\n* con.warn(`Uh-oh`); // console.warn(`a Uh-oh`);\n* con.error(`Eek!`); // console.error(`a Eek!`);\n* ```\n*\n* By default each prefix is assigned a colour. To use\n* another logic, provide the `colourKey` parameter.\n*\n* ```js\n* // Both set of loggers will use same colour\n* const con = logSet(`a`, true, `system`);\n* const con2 = logSet(`b`, true, `system`);\n* ```\n* @param prefix Prefix for log messages\n* @param verbose True by default. If false, log() messages are a no-op\n* @param colourKey If specified, log messages will be coloured by this key instead of prefix (default)\n* @returns\n*/\nexport const logSet = (prefix, verbose = true, colourKey) => {\n    if (verbose) {\n        return {\n            log: logger(prefix, `log`, colourKey),\n            warn: logger(prefix, `warn`, colourKey),\n            error: logger(prefix, `error`, colourKey),\n        };\n    }\n    return {\n        log: (_) => {\n            /** no-op */\n        },\n        warn: logger(prefix, `warn`, colourKey),\n        error: logger(prefix, `error`, colourKey),\n    };\n};\n/**\n * Resolve a LogOption to a function\n * @param l\n * @returns\n */\nexport const resolveLogOption = (l, defaults = {}) => {\n    if (l === undefined || (typeof l === `boolean` && !l)) {\n        return (_) => {\n            /** no-op */\n        };\n    }\n    const defaultCat = defaults.category ?? ``;\n    const defaultKind = defaults.kind ?? undefined;\n    if (typeof l === `boolean`) {\n        return (messageOrString) => {\n            const m = typeof messageOrString === `string` ? { msg: messageOrString } : messageOrString;\n            const kind = m.kind ?? defaultKind;\n            const category = m.category ?? defaultCat;\n            let message = m.msg;\n            if (category)\n                message = `[${category}] ${message}`;\n            switch (kind) {\n                case `error`: {\n                    console.error(message);\n                    break;\n                }\n                case `warn`: {\n                    console.warn(message);\n                    break;\n                }\n                case `info`: {\n                    console.info(message);\n                    break;\n                }\n                default: {\n                    console.log(message);\n                }\n            }\n        };\n    }\n    return l;\n};\nlet logColourCount = 0;\nexport const logColours = getOrGenerateSync(new Map(), () => {\n    const hue = ++logColourCount * 137.508; // use golden angle approximation\n    return `hsl(${hue},50%,75%)`;\n});\n","export const fpsCounter = (autoDisplay = true, computeAfterFrames = 500) => {\n    let count = 0;\n    let lastFps = 0;\n    let countStart = performance.now();\n    return () => {\n        if (count++ >= computeAfterFrames) {\n            const elapsed = performance.now() - countStart;\n            countStart = performance.now();\n            count = 0;\n            lastFps = Math.floor((computeAfterFrames / elapsed) * 1000);\n            if (autoDisplay)\n                console.log(`fps: ${lastFps}`);\n        }\n        return lastFps;\n    };\n};\n","export * from './types.js';\nexport * from './logger.js';\nexport * from './fps-counter.js';\nexport const getErrorMessage = (ex) => {\n    if (typeof ex === `string`)\n        return ex;\n    if (ex instanceof Error) {\n        return ex.message;\n    }\n    return ex;\n};\n","export * from '@ixfx/debug';"],"mappings":";;;AAAA,MAAa,oBAAoB,CAAC,KAAK,OAAO,CAAC,KAAK,SAAS;CACzD,IAAI,QAAQ,IAAI,IAAI,IAAI;AACxB,KAAI,iBACA,QAAO;AACX,SAAQ,GAAG,KAAK,KAAK;AACrB,KAAI,IAAI,KAAK,MAAM;AACnB,QAAO;AACV;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC0BD,MAAa,SAAS,CAAC,QAAQ,QAAQ,MAAM,cAAc,CAAC,MAAM;AAC9D,KAAI,aACA,MAAK;iBAEO,OAAO,QACnB,KAAI,KAAK,UAAU,EAAE;CAEzB,MAAM,SAAS,aAAa;AAC5B,SAAQ,MAAR;EACI,MAAM,MAAM;AACR,WAAQ,KAAK,IAAI,OAAO,GAAG,EAAE,IAAI,SAAS,WAAW,OAAO,CAAC,EAAE;AAC/D;EACH;EACD,MAAM,OAAO;AACT,WAAQ,KAAK,QAAQ,EAAE;AACvB;EACH;EACD,MAAM,QAAQ;AACV,WAAQ,MAAM,QAAQ,EAAE;AACxB;EACH;CACJ;AACJ;;;;;;;;;;;;;;;;;;;;;;;;AAwBD,MAAa,SAAS,CAAC,QAAQ,UAAU,MAAM,cAAc;AACzD,KAAI,QACA,QAAO;EACH,KAAK,OAAO,SAAS,MAAM,UAAU;EACrC,MAAM,OAAO,SAAS,OAAO,UAAU;EACvC,OAAO,OAAO,SAAS,QAAQ,UAAU;CAC5C;AAEL,QAAO;EACH,KAAK,CAAC,MAAM;;EAEX;EACD,MAAM,OAAO,SAAS,OAAO,UAAU;EACvC,OAAO,OAAO,SAAS,QAAQ,UAAU;CAC5C;AACJ;;;;;;AAMD,MAAa,mBAAmB,CAAC,GAAG,WAAW,CAAE,MAAK;AAClD,KAAI,uBAA2B,OAAO,aAAa,EAC/C,QAAO,CAAC,MAAM;;CAEb;CAEL,MAAM,aAAa,SAAS,aAAa;CACzC,MAAM,cAAc,SAAS;AAC7B,YAAW,OAAO,SACd,QAAO,CAAC,oBAAoB;EACxB,MAAM,WAAW,qBAAqB,UAAU,EAAE,KAAK,gBAAiB,IAAG;EAC3E,MAAM,OAAO,EAAE,QAAQ;EACvB,MAAM,WAAW,EAAE,YAAY;EAC/B,IAAI,UAAU,EAAE;AAChB,MAAI,SACA,YAAW,GAAG,SAAS,IAAI,QAAQ;AACvC,UAAQ,MAAR;GACI,MAAM,QAAQ;AACV,YAAQ,MAAM,QAAQ;AACtB;GACH;GACD,MAAM,OAAO;AACT,YAAQ,KAAK,QAAQ;AACrB;GACH;GACD,MAAM,OAAO;AACT,YAAQ,KAAK,QAAQ;AACrB;GACH;GACD,QACI,SAAQ,IAAI,QAAQ;EAE3B;CACJ;AAEL,QAAO;AACV;AACD,IAAI,iBAAiB;AACrB,MAAa,aAAa,kBAAkB,IAAI,OAAO,MAAM;CACzD,MAAM,MAAM,EAAE,iBAAiB;AAC/B,SAAQ,MAAM,IAAI;AACrB,EAAC;;;;AC7IF,MAAa,aAAa,CAAC,cAAc,MAAM,qBAAqB,QAAQ;CACxE,IAAI,QAAQ;CACZ,IAAI,UAAU;CACd,IAAI,aAAa,YAAY,KAAK;AAClC,QAAO,MAAM;AACT,MAAI,WAAW,oBAAoB;GAC/B,MAAM,UAAU,YAAY,KAAK,GAAG;AACpC,gBAAa,YAAY,KAAK;AAC9B,WAAQ;AACR,aAAU,KAAK,MAAO,qBAAqB,UAAW,IAAK;AAC3D,OAAI,YACA,SAAQ,KAAK,OAAO,QAAQ,EAAE;EACrC;AACD,SAAO;CACV;AACJ;;;;ACZD,MAAa,kBAAkB,CAAC,OAAO;AACnC,YAAW,QAAQ,QACf,QAAO;AACX,KAAI,cAAc,MACd,QAAO,GAAG;AAEd,QAAO;AACV"}