{"version":3,"file":"is-equal-edylSnsn.js","names":[],"sources":["../../core/dist/src/is-equal.js"],"sourcesContent":["import { toStringDefault } from \"./to-string.js\";\n/**\n * If input is a string, it is returned.\n * Otherwise, it returns the result of JSON.stringify() with fields ordered.\n *\n * This allows for more consistent comparisons when object field orders are different but values the same.\n * @param itemToMakeStringFor\n * @returns\n */\nexport const toStringOrdered = (itemToMakeStringFor) => {\n    if (typeof itemToMakeStringFor === `string`)\n        return itemToMakeStringFor;\n    const allKeys = new Set();\n    JSON.stringify(itemToMakeStringFor, (key, value) => (allKeys.add(key), value));\n    return JSON.stringify(itemToMakeStringFor, [...allKeys].sort());\n};\n/**\n * Default comparer function is equiv to checking `a === b`.\n * Use {@link isEqualValueDefault} to compare by value, via comparing JSON string representation.\n */\nexport const isEqualDefault = (a, b) => a === b;\n/**\n * Comparer returns true if string representation of `a` and `b` are equal.\n * Use {@link isEqualDefault} to compare using === semantics\n * Uses `toStringDefault` to generate a string representation (via `JSON.stringify`).\n *\n * Returns _false_ if the ordering of fields is different, even though values are identical:\n * ```js\n * isEqualValueDefault({ a: 10, b: 20}, { b: 20, a: 10 }); // false\n * ```\n *\n * Use {@link isEqualValueIgnoreOrder} to ignore order (with an overhead of additional processing).\n * ```js\n * isEqualValueIgnoreOrder({ a: 10, b: 20}, { b: 20, a: 10 }); // true\n * ```\n *\n * Use {@link isEqualValuePartial} to partially match `b` against `a`.\n * @returns True if the contents of `a` and `b` are equal\n */\nexport const isEqualValueDefault = (a, b) => {\n    // ✔ UNIT TESTED\n    if (a === b)\n        return true; // Object references are the same, or string values are the same\n    return toStringDefault(a) === toStringDefault(b); // String representations are the same\n};\n/**\n * Returns _true_ if `a` contains the values of `b`. `a` may contain other values, but we\n * only check against what is in `b`. `a` and `b` must both be simple objects.\n *\n * ```js\n * const obj = {\n *  name: `Elle`,\n *  size: 100,\n *  colour: {\n *    red: 0.5,\n *    green: 0.1,\n *    blue: 0.2\n *  }\n * }\n *\n * isEqualValuePartial(obj, { name: `Elle` }); // true\n * isEqualValuePartial(obj, { name: { colour: red: { 0.5, green: 0.1  }} }); // true\n *\n * isEqualValuePartial(obj, { name: `Ellen` });     // false\n * isEqualValuePartial(obj, { lastname: `Elle` });  // false\n * ```\n * @param a\n * @param b\n * @param fieldComparer\n * @returns\n */\nexport const isEqualValuePartial = (a, b, fieldComparer) => {\n    if (typeof a !== `object`)\n        throw new Error(`Param 'a' expected to be object`);\n    if (typeof b !== `object`)\n        throw new Error(`Param 'b' expected to be object`);\n    if (Object.is(a, b))\n        return true;\n    const comparer = fieldComparer ?? isEqualValuePartial;\n    for (const entryB of Object.entries(b)) {\n        const valueOnAKeyFromB = a[entryB[0]];\n        const valueB = entryB[1];\n        if (typeof valueOnAKeyFromB === `object` && typeof valueB === `object`) {\n            if (!comparer(valueOnAKeyFromB, valueB)) {\n                return false;\n            }\n        }\n        else {\n            if (valueOnAKeyFromB !== valueB) {\n                return false;\n            }\n        }\n    }\n    return true;\n};\n/**\n * Comparer returns true if string representation of `a` and `b` are equal, regardless of field ordering.\n * Uses `toStringOrdered` to generate a string representation (via JSON.stringify`).\n *\n * ```js\n * isEqualValueIgnoreOrder({ a: 10, b: 20}, { b: 20, a: 10 }); // true\n * isEqualValue({ a: 10, b: 20}, { b: 20, a: 10 }); // false, fields are different order\n * ```\n *\n * There is an overhead to ordering fields. Use {@link isEqualValueDefault} if it's not possible that field ordering will change.\n * @returns True if the contents of `a` and `b` are equal\n * @typeParam T - Type of objects being compared\n */\nexport const isEqualValueIgnoreOrder = (a, b) => {\n    // ✔ UNIT TESTED\n    if (a === b)\n        return true; // Object references are the same, or string values are the same\n    return toStringOrdered(a) === toStringOrdered(b); // String representations are the same\n};\n/**\n * Returns _true_ if Object.entries() is empty for `value`\n * @param value\n * @returns\n */\nexport const isEmptyEntries = (value) => [...Object.entries(value)].length === 0;\n/**\n * Returns _true_ if `a` and `b` are equal based on their JSON representations.\n * `path` is ignored.\n * @param a\n * @param b\n * @param path\n * @returns\n */\nexport const isEqualContextString = (a, b, _path) => {\n    return JSON.stringify(a) === JSON.stringify(b);\n};\n"],"mappings":";;;;;;;;;;;AASA,MAAa,kBAAkB,CAAC,wBAAwB;AACpD,KAAI,OAAO,wBAAwB,CAAC,MAAM,CAAC,CACvC,QAAO;CACX,MAAM,0BAAU,IAAI;CACpB,KAAK,UAAU,qBAAqB,CAAC,KAAK,WAAW,QAAQ,IAAI,IAAI,EAAE,OAAO;AAC9E,QAAO,KAAK,UAAU,qBAAqB,CAAC,GAAG,OAAQ,EAAC,MAAM,CAAC;AAClE;;;;;AAKD,MAAa,iBAAiB,CAAC,GAAG,MAAM,MAAM;;;;;;;;;;;;;;;;;;;AAmB9C,MAAa,sBAAsB,CAAC,GAAG,MAAM;AAEzC,KAAI,MAAM,EACN,QAAO;AACX,QAAO,gBAAgB,EAAE,KAAK,gBAAgB,EAAE;AACnD;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2BD,MAAa,sBAAsB,CAAC,GAAG,GAAG,kBAAkB;AACxD,KAAI,OAAO,MAAM,CAAC,MAAM,CAAC,CACrB,OAAM,IAAI,MAAM,CAAC,+BAA+B,CAAC;AACrD,KAAI,OAAO,MAAM,CAAC,MAAM,CAAC,CACrB,OAAM,IAAI,MAAM,CAAC,+BAA+B,CAAC;AACrD,KAAI,OAAO,GAAG,GAAG,EAAE,CACf,QAAO;CACX,MAAM,WAAW,iBAAiB;AAClC,MAAK,MAAM,UAAU,OAAO,QAAQ,EAAE,EAAE;EACpC,MAAM,mBAAmB,EAAE,OAAO;EAClC,MAAM,SAAS,OAAO;AACtB,MAAI,OAAO,qBAAqB,CAAC,MAAM,CAAC,IAAI,OAAO,WAAW,CAAC,MAAM,CAAC,EAClE;OAAI,CAAC,SAAS,kBAAkB,OAAO,CACnC,QAAO;EACV,WAGG,qBAAqB,OACrB,QAAO;CAGlB;AACD,QAAO;AACV;;;;;;;;;;;;;;AAcD,MAAa,0BAA0B,CAAC,GAAG,MAAM;AAE7C,KAAI,MAAM,EACN,QAAO;AACX,QAAO,gBAAgB,EAAE,KAAK,gBAAgB,EAAE;AACnD;;;;;;AAMD,MAAa,iBAAiB,CAAC,UAAU,CAAC,GAAG,OAAO,QAAQ,MAAM,AAAC,EAAC,WAAW;;;;;;;;;AAS/E,MAAa,uBAAuB,CAAC,GAAG,GAAG,UAAU;AACjD,QAAO,KAAK,UAAU,EAAE,KAAK,KAAK,UAAU,EAAE;AACjD"}