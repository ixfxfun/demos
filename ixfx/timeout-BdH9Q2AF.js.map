{"version":3,"file":"timeout-BdH9Q2AF.js","names":["callback: TimeoutSyncCallback | TimeoutAsyncCallback","interval: Interval","timer: ReturnType<typeof setTimeout>","state: HasCompletionRunStates","altInterval: Interval","args: unknown[]"],"sources":["../../../ixfx/packages/flow/src/timeout.ts"],"sourcesContent":["import { integerTest, resultToError, resultIsError, resultThrow } from '@ixfx/guards';\nimport { type HasCompletion, type HasCompletionRunStates } from '@ixfx/core';\n\nimport { intervalToMs, type Interval } from '@ixfx/core';\n\nexport type TimeoutSyncCallback = (\n  elapsedMs?: number,\n  ...args: readonly unknown[]\n) => void;\nexport type TimeoutAsyncCallback = (\n  elapsedMs?: number,\n  ...args: readonly unknown[]\n) => Promise<void>;\n\n/**\n * A resettable timeout, returned by {@link timeout}\n */\nexport type Timeout = HasCompletion & {\n  /**\n   * Starts the timer.\n   * If the timer has already been started and has a scheduled execution, this is cancelled \n   * and re-scheduled.\n   * @param altTimeoutMs Optional override for the interval. Use _undefined_ to use the original interval\n   * @param args \n   */\n  start(altTimeoutMs?: number, args?: readonly unknown[]): void;\n  /**\n   * Cancels the timer, aborting any scheduled execution.\n   */\n  cancel(): void;\n};\n\n/**\n * Returns a {@link Timeout} that can be triggered, cancelled and reset. Use {@link continuously} for interval-\n * based loops.\n *\n * Once `start()` is called, `callback` will be scheduled to execute after `interval`.\n * If `start()` is called again, the waiting period will be reset to `interval`.\n *\n * @example Essential functionality\n * ```js\n * const fn = () => {\n *  console.log(`Executed`);\n * };\n * const t = timeout(fn, 60*1000);\n * t.start();   // After 1 minute `fn` will run, printing to the console\n * ```\n *\n * @example Control execution functionality\n * ```\n * t.cancel();  // Cancel it from running\n * t.start();   // Schedule again after 1 minute\n * t.start(30*1000); // Cancel that, and now scheduled after 30s\n * \n * // Get the current state of timeout\n * t.runState;    // \"idle\", \"scheduled\" or \"running\"\n * ```\n *\n * Callback function receives any additional parameters passed in from start. This can be useful for passing through event data:\n *\n * @example\n * ```js\n * const t = timeout( (elapsedMs, ...args) => {\n *  // args contains event data\n * }, 1000);\n * el.addEventListener(`click`, t.start);\n * ```\n *\n * Asynchronous callbacks can be used as well:\n * ```js\n * timeout(async () => {...}, 100);\n * ```\n *\n * If you don't expect to need to control the timeout, consider using {@link delay},\n * which can run a given function after a specified delay.\n * @param callback\n * @param interval\n * @returns {@link Timeout}\n */\nexport const timeout = (\n  callback: TimeoutSyncCallback | TimeoutAsyncCallback,\n  interval: Interval\n): Timeout => {\n  if (callback === undefined) {\n    throw new Error(`callback parameter is undefined`);\n  }\n  const intervalMs = intervalToMs(interval);\n  resultThrow(integerTest(intervalMs, `aboveZero`, `interval`));\n  let timer: ReturnType<typeof setTimeout>;\n  let startedAt = 0;\n  let startCount = 0;\n  let startCountTotal = 0;\n  let state: HasCompletionRunStates = `idle`;\n\n  const clear = () => {\n    startedAt = 0;\n    globalThis.clearTimeout(timer);\n    state = `idle`;\n  }\n\n  const start = async (\n    altInterval: Interval = interval,\n    args: unknown[]\n  ): Promise<void> => {\n    const p = new Promise<void>((resolve, reject) => {\n      startedAt = performance.now();\n      const altTimeoutMs = intervalToMs(altInterval);\n      const it = integerTest(altTimeoutMs, `aboveZero`, `altTimeoutMs`);\n      if (resultIsError(it)) {\n        reject(resultToError(it));\n        return;\n      }\n\n      switch (state) {\n        case `scheduled`: {\n          // Cancel other scheduled execution\n          cancel();\n          break;\n        }\n        case `running`: {\n          //console.warn(`Timeout being rescheduled while task is already running`);\n          break;\n        }\n      }\n      state = `scheduled`;\n\n      // eslint-disable-next-line @typescript-eslint/no-misused-promises\n      timer = globalThis.setTimeout(async () => {\n        if (state !== `scheduled`) {\n          console.warn(`Timeout skipping execution since state is not 'scheduled'`);\n          clear();\n          return;\n        }\n        const args_ = args ?? [];\n        startCount++;\n        startCountTotal++;\n        state = `running`;\n        await callback(performance.now() - startedAt, ...args_);\n        state = `idle`\n        clear();\n        resolve();\n      }, altTimeoutMs);\n    });\n    return p;\n  };\n\n  const cancel = () => {\n    if (state === `idle`) return;\n    clear();\n  };\n\n  return {\n\n    start,\n    cancel,\n    get runState() {\n      return state;\n    },\n    get startCount() {\n      return startCount;\n    },\n    get startCountTotal() {\n      return startCountTotal;\n    }\n  };\n};\n\n\n// const average = movingAverageLight();\n// const rm = rateMinimum({\n//   interval: { secs: 1 },\n//   whatToCall: (distance: number) => {\n//     average(distance);\n//   },\n//   fallback() {\n//     return 0;\n//   }\n// })\n// document.addEventListener(`pointermove`, event => {\n//   rm(event.movementX + event.movementY);\n// });"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+EA,MAAa,UAAU,CACrBA,UACAC,aACY;AACZ,KAAI,oBACF,OAAM,IAAI,OAAO;CAEnB,MAAM,aAAa,aAAa,SAAS;AACzC,aAAY,YAAY,aAAa,aAAa,UAAU,CAAC;CAC7D,IAAIC;CACJ,IAAI,YAAY;CAChB,IAAI,aAAa;CACjB,IAAI,kBAAkB;CACtB,IAAIC,SAAiC;CAErC,MAAM,QAAQ,MAAM;AAClB,cAAY;AACZ,aAAW,aAAa,MAAM;AAC9B,WAAS;CACV;CAED,MAAM,QAAQ,OACZC,cAAwB,UACxBC,SACkB;EAClB,MAAM,IAAI,IAAI,QAAc,CAAC,SAAS,WAAW;AAC/C,eAAY,YAAY,KAAK;GAC7B,MAAM,eAAe,aAAa,YAAY;GAC9C,MAAM,KAAK,YAAY,eAAe,aAAa,cAAc;AACjE,OAAI,cAAc,GAAG,EAAE;AACrB,WAAO,cAAc,GAAG,CAAC;AACzB;GACD;AAED,WAAQ,OAAR;IACE,MAAM,YAAY;AAEhB,aAAQ;AACR;IACD;IACD,MAAM,SAEJ;GAEH;AACD,YAAS;AAGT,WAAQ,WAAW,WAAW,YAAY;AACxC,QAAI,WAAW,YAAY;AACzB,aAAQ,MAAM,2DAA2D;AACzE,YAAO;AACP;IACD;IACD,MAAM,QAAQ,QAAQ,CAAE;AACxB;AACA;AACA,aAAS;AACT,UAAM,SAAS,YAAY,KAAK,GAAG,WAAW,GAAG,MAAM;AACvD,aAAS;AACT,WAAO;AACP,aAAS;GACV,GAAE,aAAa;EACjB;AACD,SAAO;CACR;CAED,MAAM,SAAS,MAAM;AACnB,MAAI,WAAW,MAAO;AACtB,SAAO;CACR;AAED,QAAO;EAEL;EACA;EACA,IAAI,WAAW;AACb,UAAO;EACR;EACD,IAAI,aAAa;AACf,UAAO;EACR;EACD,IAAI,kBAAkB;AACpB,UAAO;EACR;CACF;AACF"}