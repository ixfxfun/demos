{"version":3,"file":"events.js","names":["key: string","#store","value: T","#listeners","#disposed","type: K","args: Events[ K ]","name: K","listener: (event: Events[ K ], sender: SimpleEventEmitter<Events>) => void"],"sources":["../../events/src/map-of.ts","../../events/src/simple-event-emitter.ts"],"sourcesContent":["export class MapOfSimple<T> {\n  #store = new Map<string, T[]>();\n\n  /**\n   * Gets a copy of the underlying array storing values at `key`, or an empty array if\n   * key does not exist\n   * @param key \n   * @returns \n   */\n  get(key: string) {\n    const arr = this.#store.get(key);\n    if (!arr) return [];\n    return [ ...arr ];\n  }\n\n  /**\n   * Returns the number of values stored under `key`\n   * @param key \n   * @returns \n   */\n  size(key: string) {\n    const arr = this.#store.get(key);\n    if (!arr) return 0;\n    return arr.length;\n  }\n\n  /**\n   * Iterate over all values contained under `key`\n   * @param key \n   * @returns \n   */\n  *iterateKey(key: string): Generator<T> {\n    const arr = this.#store.get(key);\n    if (!arr) return;\n    yield* arr.values();\n  }\n\n  /**\n   * Iterate all values, regardless of key\n   */\n  *iterateValues(): Generator<T> {\n    for (const key of this.#store.keys()) {\n      yield* this.iterateKey(key);\n    }\n  }\n\n  /**\n   * Iterate all keys\n   */\n  *iterateKeys(): Generator<string> {\n    yield* this.#store.keys();\n  }\n\n  addKeyedValues(key: string, ...values: T[]) {\n    let arr = this.#store.get(key);\n    if (!arr) {\n      arr = [];\n      this.#store.set(key, arr);\n    }\n    arr.push(...values);\n  }\n\n  deleteKeyValue(key: string, value: T) {\n    const arr = this.#store.get(key);\n    if (!arr) return false;\n    const arrCopy = arr.filter(v => v !== value);\n    if (arrCopy.length === arr.length) return false;\n    this.#store.set(key, arrCopy);\n    return true;\n  }\n\n  clear() {\n    this.#store.clear();\n  }\n}","import { MapOfSimple } from \"./map-of.js\";\nimport type { ISimpleEventEmitter, Listener } from \"./types.js\";\n\nexport class SimpleEventEmitter<Events> implements ISimpleEventEmitter<Events> {\n  readonly #listeners = new MapOfSimple<Listener<Events>>();\n  #disposed = false;\n\n  dispose() {\n    if (this.#disposed) return;\n    this.clearEventListeners();\n  }\n\n  get isDisposed() {\n    return this.#disposed;\n  }\n\n  /**\n   * Fire event\n   * @param type Type of event\n   * @param args Arguments for event\n   * @returns\n   */\n  protected fireEvent<K extends keyof Events>(type: K, args: Events[ K ]) {\n    if (this.#disposed) throw new Error(`Disposed`);\n    //console.log(`Firing ${ type as string }. Listeners: ${ this.#listeners.size(type as string) }`);\n    for (const l of this.#listeners.iterateKey(type as string)) {\n      l(args, this);\n    }\n  }\n\n  /**\n   * Adds event listener.\n   * \n   * @throws Error if emitter is disposed\n   * @typeParam K - Events\n   * @param name Event name\n   * @param listener Event handler\n   */\n  addEventListener<K extends keyof Events>(\n    name: K,\n    listener: (event: Events[ K ], sender: SimpleEventEmitter<Events>) => void\n  ): void {\n    if (this.#disposed) throw new Error(`Disposed`);\n    this.#listeners.addKeyedValues(\n      name as string,\n      listener as Listener<Events>\n    );\n  }\n\n  /**\n   * Remove event listener\n   *\n   * @param listener\n   */\n  removeEventListener<K extends keyof Events>(\n    type: K,\n    listener: (event: Events[ K ], sender: SimpleEventEmitter<Events>) => void\n  ) {\n    if (this.#disposed) return;\n\n    // listener: Listener<Events>): void {\n    this.#listeners.deleteKeyValue(\n      type as string,\n      listener as Listener<Events>\n    );\n  }\n\n  /**\n   * Clear all event listeners\n   * @private\n   */\n  clearEventListeners() {\n    if (this.#disposed) return;\n    this.#listeners.clear();\n  }\n}"],"mappings":";AAAA,IAAa,cAAb,MAA4B;CAC1B,yBAAS,IAAI;;;;;;;CAQb,IAAIA,KAAa;EACf,MAAM,MAAM,KAAKC,OAAO,IAAI,IAAI;AAChC,MAAI,CAAC,IAAK,QAAO,CAAE;AACnB,SAAO,CAAE,GAAG,GAAK;CAClB;;;;;;CAOD,KAAKD,KAAa;EAChB,MAAM,MAAM,KAAKC,OAAO,IAAI,IAAI;AAChC,MAAI,CAAC,IAAK,QAAO;AACjB,SAAO,IAAI;CACZ;;;;;;CAOD,CAAC,WAAWD,KAA2B;EACrC,MAAM,MAAM,KAAKC,OAAO,IAAI,IAAI;AAChC,MAAI,CAAC,IAAK;EACV,OAAO,IAAI,QAAQ;CACpB;;;;CAKD,CAAC,gBAA8B;AAC7B,OAAK,MAAM,OAAO,KAAKA,OAAO,MAAM,EAClC,OAAO,KAAK,WAAW,IAAI;CAE9B;;;;CAKD,CAAC,cAAiC;EAChC,OAAO,KAAKA,OAAO,MAAM;CAC1B;CAED,eAAeD,KAAa,GAAG,QAAa;EAC1C,IAAI,MAAM,KAAKC,OAAO,IAAI,IAAI;AAC9B,MAAI,CAAC,KAAK;GACR,MAAM,CAAE;GACR,KAAKA,OAAO,IAAI,KAAK,IAAI;EAC1B;EACD,IAAI,KAAK,GAAG,OAAO;CACpB;CAED,eAAeD,KAAaE,OAAU;EACpC,MAAM,MAAM,KAAKD,OAAO,IAAI,IAAI;AAChC,MAAI,CAAC,IAAK,QAAO;EACjB,MAAM,UAAU,IAAI,OAAO,OAAK,MAAM,MAAM;AAC5C,MAAI,QAAQ,WAAW,IAAI,OAAQ,QAAO;EAC1C,KAAKA,OAAO,IAAI,KAAK,QAAQ;AAC7B,SAAO;CACR;CAED,QAAQ;EACN,KAAKA,OAAO,OAAO;CACpB;AACF;;;;ACvED,IAAa,qBAAb,MAA+E;CAC7E,AAASE,aAAa,IAAI;CAC1B,YAAY;CAEZ,UAAU;AACR,MAAI,KAAKC,UAAW;EACpB,KAAK,qBAAqB;CAC3B;CAED,IAAI,aAAa;AACf,SAAO,KAAKA;CACb;;;;;;;CAQD,AAAU,UAAkCC,MAASC,MAAmB;AACtE,MAAI,KAAKF,UAAW,OAAM,IAAI,MAAM,CAAC,QAAQ,CAAC;AAE9C,OAAK,MAAM,KAAK,KAAKD,WAAW,WAAW,KAAe,EACxD,EAAE,MAAM,KAAK;CAEhB;;;;;;;;;CAUD,iBACEI,MACAC,UACM;AACN,MAAI,KAAKJ,UAAW,OAAM,IAAI,MAAM,CAAC,QAAQ,CAAC;EAC9C,KAAKD,WAAW,eACd,MACA,SACD;CACF;;;;;;CAOD,oBACEE,MACAG,UACA;AACA,MAAI,KAAKJ,UAAW;EAGpB,KAAKD,WAAW,eACd,MACA,SACD;CACF;;;;;CAMD,sBAAsB;AACpB,MAAI,KAAKC,UAAW;EACpB,KAAKD,WAAW,OAAO;CACxB;AACF"}