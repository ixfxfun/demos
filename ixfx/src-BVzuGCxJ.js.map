{"version":3,"file":"src-BVzuGCxJ.js","names":["array","array","array","array","array","array","groupBy","array","contains","array","array","array","array","total","total","array","min","max","min","max","clamp","max","min","numberScale","scale","numberScaler","min","max","#store","average","count","smoothingFactor","total","min","max","count","min","max"],"sources":["../packages/arrays/dist/src/cycle.js","../packages/arrays/dist/src/at-wrap.js","../packages/arrays/dist/src/chunks.js","../packages/arrays/dist/src/util/to-string.js","../packages/arrays/dist/src/util/is-equal.js","../packages/arrays/dist/src/contains.js","../packages/arrays/dist/src/ensure-length.js","../packages/arrays/dist/src/equality.js","../packages/arrays/dist/src/filter.js","../packages/arrays/dist/src/flatten.js","../packages/arrays/dist/src/frequency.js","../packages/arrays/dist/src/group-by.js","../packages/arrays/dist/src/unique.js","../packages/arrays/dist/src/insert-at.js","../packages/arrays/dist/src/interleave.js","../packages/arrays/dist/src/intersection.js","../packages/arrays/dist/src/merge-by-key.js","../packages/arrays/dist/src/pairwise.js","../packages/arrays/dist/src/random.js","../packages/arrays/dist/src/remove.js","../packages/arrays/dist/src/sample.js","../packages/arrays/dist/src/sort.js","../packages/arrays/dist/src/until.js","../packages/arrays/dist/src/without.js","../packages/arrays/dist/src/zip.js","../packages/arrays/dist/src/index.js","../packages/numbers/dist/src/apply-to-values.js","../packages/numbers/dist/src/numeric-arrays.js","../packages/numbers/dist/src/average-weighted.js","../packages/numbers/dist/src/clamp.js","../packages/numbers/dist/src/count.js","../packages/numbers/dist/src/difference.js","../packages/numbers/dist/src/guard.js","../packages/numbers/dist/src/filter.js","../packages/numbers/dist/src/flip.js","../packages/numbers/dist/src/generate.js","../packages/numbers/dist/src/round.js","../packages/numbers/dist/src/is-approx.js","../packages/numbers/dist/src/bipolar.js","../packages/numbers/dist/src/wrap.js","../packages/numbers/dist/src/pi-pi.js","../packages/numbers/dist/src/interpolate.js","../packages/numbers/dist/src/linear-space.js","../packages/numbers/dist/src/util/queue-mutable.js","../packages/numbers/dist/src/moving-average.js","../packages/numbers/dist/src/scale.js","../packages/numbers/dist/src/number-array-compute.js","../packages/numbers/dist/src/normalise.js","../packages/numbers/dist/src/proportion.js","../packages/numbers/dist/src/quantise.js","../packages/numbers/dist/src/softmax.js","../packages/numbers/dist/src/index.js"],"sourcesContent":["import { arrayTest, throwIfFailed } from \"@ixfx/guards\";\n/**\n * Returns a function that cycles through the contents of an array. By default starts at index 0.\n *\n * ```js\n * const c = arrayCycle([`apples`, `oranges`, `pears`]);\n * c.current; // `apples`\n * c.next();  // `oranges`\n * c.next();  // `pears`\n * c.next();  // `apples`\n * c.prev();  // `pears`\n * ```\n *\n * You can select an item by index or value:\n * ```\n * c.select(1); // `oranges`\n * c.select(`pears`); // `pears`\n * ```\n *\n * Other features:\n * ```js\n * c.current;   // Current value\n * c.toArray(); // Copy of array being cycled over\n * ```\n *\n * Additional info:\n * * Selecting by value uses === semantics.\n * * Works with a copy of input array\n * @param options Array to cycle over\n * @returns\n */\nexport const cycle = (options) => {\n    throwIfFailed(arrayTest(options, `options`));\n    const opts = [...options];\n    let index = 0;\n    const next = () => {\n        index++;\n        if (index === opts.length)\n            index = 0;\n        return value();\n    };\n    // eslint-disable-next-line unicorn/prevent-abbreviations\n    const prev = () => {\n        index--;\n        if (index === -1)\n            index = opts.length - 1;\n        return value();\n    };\n    const value = () => {\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        return opts.at(index);\n    };\n    const select = (indexOrValue) => {\n        if (typeof indexOrValue === `number`) {\n            index = indexOrValue;\n        }\n        else {\n            const found = opts.indexOf(indexOrValue);\n            if (found === -1)\n                throw new Error(`Could not find value`);\n            index = found;\n        }\n    };\n    const toArray = () => [...opts];\n    return { toArray, next, prev, get current() { return value(); }, select };\n};\n","import { numberTest, resultThrow } from \"@ixfx/guards\";\n/**\n * Similar to Javascript's in-built Array.at function, but allows offsets\n * to wrap.\n *\n * @remarks\n * ```js\n * const test = [1,2,3,4,5,6];\n * atWrap(0);   // 1\n * atWrap(-1);  // 6\n * atWrap(-6);  // 1\n * ```\n *\n * These values would return _undefined_ using Array.at since its beyond\n * the length of the array\n * ```js\n * atWrap(6);   // 1\n * atWrap(-7);  // 6\n * ```\n * @param array Array\n * @param index Index\n * @returns\n */\nexport const atWrap = (array, index) => {\n    resultThrow(numberTest(index, ``, `index`));\n    if (!Array.isArray(array))\n        throw new Error(`Param 'array' is not an array`);\n    index = index % array.length;\n    return array.at(index);\n};\n","/**\n * Return `array` broken up into chunks of `size` values\n *\n * ```js\n * chunks([1,2,3,4,5,6,7,8,9,10], 3);\n * // Yields: [[1, 2, 3], [4, 5, 6], [7, 8, 9], [10]]\n * ```\n * @param array\n * @param size\n * @returns\n */\nimport { arrayTest, integerTest, throwIfFailed } from \"@ixfx/guards\";\nexport function chunks(array, size) {\n    throwIfFailed(integerTest(size, \"aboveZero\", `size`), arrayTest(array, `array`));\n    // https://surma.github.io/underdash/\n    const output = [];\n    for (let index = 0; index < array.length; index += size) {\n        output.push(array.slice(index, index + size));\n    }\n    return output;\n}\n","/**\n * A default converter to string that uses JSON.stringify if its an object, or the thing itself if it's a string\n */\nexport const toStringDefault = (itemToMakeStringFor) => typeof itemToMakeStringFor === `string`\n    ? itemToMakeStringFor\n    : JSON.stringify(itemToMakeStringFor);\n","import { toStringDefault } from \"./to-string.js\";\n/**\n * If input is a string, it is returned.\n * Otherwise, it returns the result of JSON.stringify() with fields ordered.\n *\n * This allows for more consistent comparisons when object field orders are different but values the same.\n * @param itemToMakeStringFor\n * @returns\n */\n// export const toStringOrdered = (itemToMakeStringFor: unknown) => {\n//   if (typeof itemToMakeStringFor === `string`) return itemToMakeStringFor;\n//   const allKeys = new Set<string>();\n//   JSON.stringify(itemToMakeStringFor, (key: string, value: unknown) => (allKeys.add(key), value));\n//   return JSON.stringify(itemToMakeStringFor, [ ...allKeys ].sort());\n// }\n/**\n * Default comparer function is equiv to checking `a === b`.\n * Use {@link isEqualValueDefault} to compare by value, via comparing JSON string representation.\n */\nexport const isEqualDefault = (a, b) => a === b;\n/**\n * Comparer returns true if string representation of `a` and `b` are equal.\n * Use {@link isEqualDefault} to compare using === semantics\n * Uses `toStringDefault` to generate a string representation (via `JSON.stringify`).\n *\n * Returns _false_ if the ordering of fields is different, even though values are identical:\n * ```js\n * isEqualValueDefault({ a: 10, b: 20}, { b: 20, a: 10 }); // false\n * ```\n *\n * Use {@link isEqualValueIgnoreOrder} to ignore order (with an overhead of additional processing).\n * ```js\n * isEqualValueIgnoreOrder({ a: 10, b: 20}, { b: 20, a: 10 }); // true\n * ```\n *\n * Use {@link isEqualValuePartial} to partially match `b` against `a`.\n * @returns True if the contents of `a` and `b` are equal\n */\nexport const isEqualValueDefault = (a, b) => {\n    // âœ” UNIT TESTED\n    if (a === b)\n        return true; // Object references are the same, or string values are the same\n    return toStringDefault(a) === toStringDefault(b); // String representations are the same\n};\n/**\n * Returns _true_ if `a` contains the values of `b`. `a` may contain other values, but we\n * only check against what is in `b`. `a` and `b` must both be simple objects.\n *\n * ```js\n * const obj = {\n *  name: `Elle`,\n *  size: 100,\n *  colour: {\n *    red: 0.5,\n *    green: 0.1,\n *    blue: 0.2\n *  }\n * }\n *\n * isEqualValuePartial(obj, { name: `Elle` }); // true\n * isEqualValuePartial(obj, { name: { colour: red: { 0.5, green: 0.1  }} }); // true\n *\n * isEqualValuePartial(obj, { name: `Ellen` });     // false\n * isEqualValuePartial(obj, { lastname: `Elle` });  // false\n * ```\n * @param a\n * @param b\n * @param fieldComparer\n * @returns\n */\nexport const isEqualValuePartial = (a, b, fieldComparer) => {\n    if (typeof a !== `object`)\n        throw new Error(`Param 'a' expected to be object`);\n    if (typeof b !== `object`)\n        throw new Error(`Param 'b' expected to be object`);\n    if (Object.is(a, b))\n        return true;\n    const comparer = fieldComparer ?? isEqualValuePartial;\n    for (const entryB of Object.entries(b)) {\n        const valueOnAKeyFromB = a[entryB[0]];\n        const valueB = entryB[1];\n        if (typeof valueOnAKeyFromB === `object` && typeof valueB === `object`) {\n            if (!comparer(valueOnAKeyFromB, valueB)) {\n                return false;\n            }\n        }\n        else {\n            if (valueOnAKeyFromB !== valueB) {\n                return false;\n            }\n        }\n    }\n    return true;\n};\n/**\n * Comparer returns true if string representation of `a` and `b` are equal, regardless of field ordering.\n * Uses `toStringOrdered` to generate a string representation (via JSON.stringify`).\n *\n * ```js\n * isEqualValueIgnoreOrder({ a: 10, b: 20}, { b: 20, a: 10 }); // true\n * isEqualValue({ a: 10, b: 20}, { b: 20, a: 10 }); // false, fields are different order\n * ```\n *\n * There is an overhead to ordering fields. Use {@link isEqualValueDefault} if it's not possible that field ordering will change.\n * @returns True if the contents of `a` and `b` are equal\n * @typeParam T - Type of objects being compared\n */\n// export const isEqualValueIgnoreOrder = <T>(a: T, b: T): boolean => {\n//   // âœ” UNIT TESTED\n//   if (a === b) return true; // Object references are the same, or string values are the same\n//   return toStringOrdered(a) === toStringOrdered(b); // String representations are the same\n// };\n/**\n * Returns _true_ if Object.entries() is empty for `value`\n * @param value\n * @returns\n */\nexport const isEmptyEntries = (value) => [...Object.entries(value)].length === 0;\n/**\n * Returns _true_ if `a` and `b` are equal based on their JSON representations.\n * `path` parameter is ignored.\n * @param a\n * @param b\n * @param path\n * @returns\n */\nexport const isEqualContextString = (a, b, _path) => {\n    return JSON.stringify(a) === JSON.stringify(b);\n};\n","import { isEqualDefault } from \"./util/is-equal.js\";\nimport { toStringDefault } from \"./util/to-string.js\";\n/**\n * Returns _true_ if all value in `needles` is contained in `haystack`.\n *\n * ```js\n * const a = ['apples','oranges','pears','mandarins'];\n * const b = ['pears', 'apples'];\n * contains(a, b); // True\n *\n * const c = ['pears', 'bananas'];\n * contains(a, b); // False ('bananas' does not exist in a)\n * ```\n *\n * If `needles` is empty, `contains` will return true.\n * @param haystack Array to search\n * @param needles Things to look for\n * @param eq\n */\nexport const contains = (haystack, needles, eq = (isEqualDefault)) => {\n    if (!Array.isArray(haystack)) {\n        throw new TypeError(`Expects haystack parameter to be an array`);\n    }\n    if (!Array.isArray(needles)) {\n        throw new TypeError(`Expects needles parameter to be an array. Got: ${typeof needles}`);\n    }\n    for (const needle of needles) {\n        let found = false;\n        for (const element of haystack) {\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n            if (eq(needle, element)) {\n                found = true;\n                break;\n            }\n        }\n        if (!found) {\n            return false;\n        }\n    }\n    return true;\n};\n/**\n * Returns _true_ if array contains duplicate values.\n *\n * ```js\n * containsDuplicateValues(['a','b','a']); // True\n * containsDuplicateValues([\n *  { name: 'Apple' },\n *  { name: 'Apple' }\n * ]); // True\n * ```\n *\n * Uses JSON.toString() by default to compare values.\n *\n * See also:\n * * {@link containsDuplicateInstances}: Compare based on reference, rather than value\n * * {@link unique}: Get unique set of values in an array\n * * {@link isContentsTheSame}: Returns _true_ if every item in array is the same\n * @param data Array to examine\n * @param keyFunction Function to generate key string for object, uses JSON.stringify by default.\n * @returns\n */\nexport const containsDuplicateValues = (data, keyFunction = (toStringDefault)) => {\n    if (typeof data !== `object`)\n        throw new Error(`Param 'data' is expected to be an Iterable. Got type: ${typeof data}`);\n    const set = new Set();\n    for (const v of data) {\n        const string_ = keyFunction(v);\n        if (set.has(string_))\n            return true;\n        set.add(string_);\n    }\n    return false;\n};\n/**\n * Returns _true_ if array contains duplicate instances based on `===` equality checking\n * Use {@link containsDuplicateValues} if you'd rather compare by value.\n * @param array\n * @returns\n */\nexport const containsDuplicateInstances = (array) => {\n    if (!Array.isArray(array))\n        throw new Error(`Parameter needs to be an array`);\n    for (let index = 0; index < array.length; index++) {\n        for (let x = 0; x < array.length; x++) {\n            if (index === x)\n                continue;\n            if (array[index] === array[x])\n                return true;\n        }\n    }\n    return false;\n};\n","/**\n * Returns a copy of an array with specified length - padded or truncated as needed.\n *\n * If the input array is too short, it will be expanded based on the `expand` strategy:\n *  - 'undefined': fill with _undefined_ (default)\n *  - 'repeat': repeat array elements, starting from position 0\n *  - 'first': repeat with first element from `data`\n *  - 'last': repeat with last element from `data`\n *\n * Truncate:\n * ```js\n * ensureLength([1,2,3], 2); // [1,2]\n * ```\n *\n * Padded:\n * ```js\n * ensureLength([1,2,3], 5, `undefined`); // [1,2,3,undefined,undefined]\n * ensureLength([1,2,3], 5, `repeat`);    // [1,2,3,1,2]\n * ensureLength([1,2,3], 5, `first`);     // [1,2,3,1,1]\n * ensureLength([1,2,3], 5, `last`);      // [1,2,3,3,3]\n * ```\n * @param data Input array to expand\n * @param length Desired length\n * @param expand Expand strategy\n * @typeParam V Type of array\n */\nexport function ensureLength(data, length, expand = `undefined`) {\n    if (data === undefined)\n        throw new Error(`Data undefined`);\n    if (!Array.isArray(data))\n        throw new Error(`data is not an array`);\n    if (data.length === length)\n        return [...data];\n    if (data.length > length) {\n        return data.slice(0, length);\n    }\n    const d = [...data];\n    const add = length - d.length;\n    for (let index = 0; index < add; index++) {\n        switch (expand) {\n            case `undefined`: {\n                // @ts-expect-error all fine .....\n                d.push(undefined);\n                break;\n            }\n            case `repeat`: {\n                d.push(data[index % data.length]);\n                break;\n            }\n            case `first`: {\n                d.push(data[0]);\n                break;\n            }\n            case `last`: {\n                // @ts-expect-error all fine .....\n                d.push(data.at(-1));\n                break;\n            }\n            // No default\n        }\n    }\n    return d;\n}\n;\n","import { isEqualDefault, isEqualValueDefault } from \"./util/is-equal.js\";\nimport { arrayTest, resultThrow } from \"@ixfx/guards\";\n/**\n * Returns _true_ if the two arrays have the same items at same indexes.\n *\n * Returns _false_ if arrays are of different length.\n * By default uses === semantics for equality checking.\n *\n * ```js\n * isEqual([ 1, 2, 3], [ 1, 2, 3 ]); // true\n * isEqual([ 1, 2, 3], [ 3, 2, 1 ]); // false\n * ```\n *\n * Compare by value\n * ```js\n * isEqual(a, b, isEqualValueDefault);\n * ```\n *\n * Custom compare, eg based on `name` field:\n * ```js\n * isEqual(a, b, (compareA, compareB) => compareA.name === compareB.name);\n * ```\n * @param arrayA\n * @param arrayB\n * @param equality Function to compare values\n */\nexport const isEqual = (arrayA, arrayB, equality = (isEqualDefault)) => {\n    // TODO: 'eq' function could be a key-generating function too\n    resultThrow(arrayTest(arrayA, `arrayA`), arrayTest(arrayB, `arrayB`));\n    if (arrayA.length !== arrayB.length)\n        return false;\n    for (let indexA = 0; indexA < arrayA.length; indexA++) {\n        if (!(equality(arrayA[indexA], arrayB[indexA])))\n            return false;\n    }\n    return true;\n};\n/**\n * Returns _true_ if all values in the array are the same. Uses value-based equality checking by default.\n *\n * @example Using default equality function\n * ```js\n * const a1 = [ 10, 10, 10 ];\n * containsIdenticalValues(a1); // True\n *\n * const a2 = [ { name:`Jane` }, { name:`John` } ];\n * containsIdenticalValues(a2); // True, even though object references are different\n * ```\n *\n * If we want to compare by value for objects that aren't readily\n * converted to JSON, you need to provide a function:\n *\n * ```js\n * containsIdenticalValues(someArray, (a, b) => {\n *  return (a.eventType === b.eventType);\n * });\n * ```\n *\n * Returns _true_ if `array` is empty.\n * @param array Array\n * @param equality Equality checker. Uses string-conversion checking by default\n * @returns\n */\nexport const containsIdenticalValues = (array, equality) => {\n    // TODO: 'equality' function could be a key-generating function too\n    if (!Array.isArray(array))\n        throw new Error(`Param 'array' is not an array.`);\n    if (array.length === 0)\n        return true;\n    const eq = equality ?? isEqualValueDefault;\n    const a = array[0];\n    const r = array.some((v) => !eq(a, v));\n    if (r)\n        return false;\n    return true;\n};\n","import { arrayIndexTest, arrayTest, resultThrow } from \"@ixfx/guards\";\n/**\n * Returns two separate arrays of everything that `filter` returns _true_,\n * and everything it returns _false_ on.\n *\n * Same idea as the in-built Array.filter, but that only returns values for one case.\n *\n * ```js\n * const [ matching, nonMatching ] = filterAB(data, v => v.enabled);\n * // `matching` is a list of items from `data` where .enabled is true\n * // `nonMatching` is a list of items from `data` where .enabled is false\n * ```\n * @param data Array of data to filter\n * @param filter Function which returns _true_ to add items to the A list, or _false_ for items to add to the B list\n * @returns Array of two elements. The first is items that match `filter`, the second is items that do not.\n */\nexport const filterAB = (data, filter) => {\n    const a = [];\n    const b = [];\n    for (const datum of data) {\n        if (filter(datum))\n            a.push(datum);\n        else\n            b.push(datum);\n    }\n    return [a, b];\n};\n/**\n * Yields elements from `array` that match a given `predicate`, and moreover are between\n * the given `startIndex` (inclusive) and `endIndex` (exclusive).\n *\n * While this can be done with in the in-built `array.filter` function, it will\n * needlessly iterate through the whole array. It also avoids another alternative\n * of slicing the array before using `filter`.\n *\n * ```js\n * // Return 'registered' people between and including array indexes 5-10\n * const filtered = [...filterBetween(people, person => person.registered, 5, 10)];\n * ```\n * @param array Array to filter\n * @param predicate Filter function\n * @param startIndex Start index (defaults to 0)\n * @param endIndex End index (by default runs until end)\n */\nexport function* filterBetween(array, predicate, startIndex, endIndex) {\n    resultThrow(arrayTest(array, `array`));\n    if (typeof startIndex === `undefined`)\n        startIndex = 0;\n    if (typeof endIndex === `undefined`)\n        endIndex = array.length; //- 1;\n    resultThrow(arrayIndexTest(array, startIndex, `startIndex`));\n    resultThrow(arrayIndexTest(array, endIndex - 1, `endIndex`));\n    for (let index = startIndex; index < endIndex; index++) {\n        if (predicate(array[index], index, array))\n            yield array[index]; //t.push(array[ index ]);\n    }\n}\n;\n","/**\n * Returns a 'flattened' copy of array, un-nesting arrays one level\n * ```js\n * flatten([1, [2, 3], [[4]] ]);\n * // Yields: [ 1, 2, 3, [4]];\n * ```\n * @param array\n * @returns\n */\nexport const flatten = (array) => [...array].flat();\n","/**\n * Computes the frequency of values by a grouping function.\n *\n * ```js\n * const data = [1,2,3,4,5,6,7,8,9,10];\n * // Returns 'odd' or 'even' for an input value\n *\n * const groupBy = v => v % 2 === 0 ? `even`:`odd`;\n *\n * const data = frequencyByGroup(groupBy, data);\n * // Yields map with:\n * //  key: 'even', value: 5\n * //  key: 'odd', value: 5\n * @param groupBy\n * @param data\n * @returns\n */\nexport const frequencyByGroup = (groupBy, data) => {\n    if (!Array.isArray(data))\n        throw new TypeError(`Param 'array' is expected to be an array. Got type: '${typeof data}'`);\n    const store = new Map();\n    for (const value of data) {\n        const group = groupBy(value);\n        if (typeof group !== `string` && typeof group !== `number`) {\n            throw new TypeError(`groupBy function is expected to return type string or number. Got type: '${typeof group}' for value: '${value}'`);\n        }\n        let groupValue = store.get(group);\n        groupValue ??= 0;\n        groupValue++;\n        store.set(group, groupValue);\n    }\n    return store;\n};\n","/**\n * Groups data by a function `grouper`, returning data as a map with string\n * keys and array values. Multiple values can be assigned to the same group.\n *\n * `grouper` must yield a string designated group for a given item.\n *\n * @example\n * ```js\n * const data = [\n *  { age: 39, city: `London` },\n *  { age: 14, city: `Copenhagen` },\n *  { age: 23, city: `Stockholm` },\n *  { age: 56, city: `London` }\n * ];\n *\n * // Whatever the function returns will be the designated group\n * // for an item\n * const map = Arrays.groupBy(data, item => item.city);\n * ```\n *\n * This yields a Map with keys London, Stockholm and Copenhagen, and the corresponding values.\n *\n * ```\n * London: [{ age: 39, city: `London` }, { age: 56, city: `London` }]\n * Stockhom: [{ age: 23, city: `Stockholm` }]\n * Copenhagen: [{ age: 14, city: `Copenhagen` }]\n * ```\n * @param array Array to group\n * @param grouper Function that returns a key for a given item\n * @typeParam K Type of key to group by. Typically string.\n * @typeParam V Type of values\n * @returns Map\n */\nexport const groupBy = (array, grouper) => {\n    const map = new Map();\n    for (const a of array) {\n        const key = grouper(a);\n        let existing = map.get(key);\n        if (!existing) {\n            existing = [];\n            map.set(key, existing);\n        }\n        existing.push(a);\n    }\n    return map;\n};\n","import { isEqualDefault } from \"./util/is-equal.js\";\nimport { toStringDefault } from \"./util/to-string.js\";\n//import { additionalValues } from \"../iterables/sync/AdditionalValues.js\";\n/**\n * Combines the values of one or more arrays, removing duplicates.\n * ```js\n * const v = Arrays.uniqueDeep([ [1, 2, 3, 4], [ 3, 4, 5, 6] ]);\n * // [ 1, 2, 3, 4, 5, 6]\n * ```\n *\n * A single array can be provided as well:\n * ```js\n * const v = Arrays.uniqueDeep([ 1, 2, 3, 1, 2, 3 ]);\n * // [ 1, 2, 3 ]\n * ```\n *\n * By default uses Javascript's default equality checking\n *\n * See also:\n * * {@link intersection}: Overlap between two arrays\n * * Iterables.additionalValues: Yield values from an iterable not present in the other\n * * {@link containsDuplicateValues}: Returns true if array contains duplicates\n * @param arrays\n * @param comparer\n * @returns\n */\nexport const uniqueDeep = (arrays, comparer = (isEqualDefault)) => {\n    const t = [];\n    const contains = (v) => {\n        for (const tValue of t) {\n            if (comparer(tValue, v))\n                return true;\n        }\n        return false;\n    };\n    const flattened = arrays.flat(10);\n    for (const v of flattened) {\n        if (!contains(v))\n            t.push(v);\n    }\n    return t;\n};\n/**\n * Combines the values of one or more arrays, removing duplicates.\n * Compares based on a string representation of object. Uses a Set\n * to avoid unnecessary comparisons, perhaps faster than `uniqueDeep`.\n *\n * ```js\n * const v = Arrays.unique([ [1, 2, 3, 4], [ 3, 4, 5, 6] ]);\n * // [ 1, 2, 3, 4, 5, 6]\n * ```\n *\n * A single array can be provided as well:\n * ```js\n * const v = Arrays.unique([ 1, 2, 3, 1, 2, 3 ]);\n * // [ 1, 2, 3 ]\n * ```\n *\n * By default uses JSON.toString() to compare values.\n *\n * See also:\n * * {@link intersection}: Overlap between two arrays\n * * Iterables.additionalValues: Yield values from an iterable not present in the other\n * * {@link containsDuplicateValues}: Returns true if array contains duplicates\n * @param arrays Array (or array of arrays) to examine\n * @param toString Function to convert values to a string for comparison purposes. By default uses JSON formatting.\n * @returns\n */\nexport const unique = (arrays, toString = toStringDefault) => {\n    const matching = new Set();\n    const t = [];\n    const flattened = arrays.flat(10);\n    for (const a of flattened) {\n        const stringRepresentation = toString(a);\n        if (matching.has(stringRepresentation))\n            continue;\n        matching.add(stringRepresentation);\n        t.push(a);\n    }\n    return t;\n};\n","import { arrayIndexTest, arrayTest, integerTest, throwIfFailed } from \"@ixfx/guards\";\n/**\n * Inserts `values` at position `index`, shuffling remaining\n * items further down and returning changed result.\n *\n * Does not modify the input array.\n *\n * ```js\n * const data = [ 1, 2, 3 ]\n *\n * // Inserts 20,30,40 at index 1\n * Arrays.insertAt(data, 1, 20, 30, 40);\n *\n * // Yields: 1, 20, 30, 40, 2, 3\n * ```\n * @param data\n * @param index\n * @param values\n * @returns\n */\nexport const insertAt = (data, index, ...values) => {\n    throwIfFailed(arrayTest(data, `data`), arrayIndexTest(data, index, `index`));\n    // Adding at end\n    if (index === data.length - 1) {\n        return [...data, ...values];\n    }\n    // Adding at beginning\n    if (index === 0) {\n        return [...values, ...data];\n    }\n    return [...data.slice(0, index), ...values, ...data.slice(index)];\n};\n","import { containsIdenticalValues } from \"./equality.js\";\n/**\n * Returns an interleaving of two or more arrays. All arrays must be the same length.\n *\n * ```js\n * const a = [`a`, `b`, `c`];\n * const b = [`1`, `2`, `3`];\n * const c = Arrays.interleave(a, b);\n * // Yields:\n * // [`a`, `1`, `b`, `2`, `c`, `3`]\n * ```\n * @param arrays\n * @returns\n */\nexport const interleave = (...arrays) => {\n    if (arrays.some((a) => !Array.isArray(a))) {\n        throw new Error(`All parameters must be an array`);\n    }\n    const lengths = arrays.map(a => a.length);\n    if (!containsIdenticalValues(lengths)) {\n        throw new Error(`Arrays must be of same length`);\n    }\n    const returnValue = [];\n    const length = lengths[0];\n    for (let index = 0; index < length; index++) {\n        for (const array of arrays) {\n            returnValue.push(array[index]);\n        }\n    }\n    return returnValue;\n};\n","import { isEqualDefault } from \"./util/is-equal.js\";\n/**\n * Returns the _intersection_ of two arrays: the elements that are in common.\n *\n * ```js\n * intersection([1, 2, 3], [2, 4, 6]);\n// returns [2]\n * ```\n * See also:\n * * {@link unique}: Unique set of items amongst one or more arrays\n * @param arrayA\n * @param arrayB\n * @param equality\n * @returns\n */\nexport const intersection = (arrayA, arrayB, equality = isEqualDefault) => arrayA.filter((valueFromA) => arrayB.some((valueFromB) => equality(valueFromA, valueFromB)));\n","/**\n * Merges arrays left to right, using the provided\n * `reconcile` function to choose a winner when keys overlap.\n *\n * There's also Core.Maps.mergeByKey if the input data is in Map form.\n *\n * For example, if we have the array A:\n * [`A-1`, `A-2`, `A-3`]\n *\n * And array B:\n * [`B-1`, `B-2`, `B-4`]\n *\n * And with the key function:\n * ```js\n * // Make a key for value based on last char\n * const keyFn = (v) => v.substr(-1, 1);\n * ```\n *\n * If they are merged with the reconile function:\n * ```js\n * const reconcile = (a, b) => b.replace(`-`, `!`);\n * const output = mergeByKey(keyFn, reconcile, arrayA, arrayB);\n * ```\n *\n * The final result will be:\n *\n * [`B!1`, `B!2`, `A-3`, `B-4`]\n *\n * In this toy example, it's obvious how the reconciler transforms\n * data where the keys overlap. For the keys that do not overlap -\n * 3 and 4 in this example - they are copied unaltered.\n *\n * A practical use for `mergeByKey` has been in smoothing keypoints\n * from a TensorFlow pose. In this case, we want to smooth new keypoints\n * with older keypoints. But if a keypoint is not present, for it to be\n * passed through.\n *\n * @param keyFunction Function to generate a unique key for data\n * @param reconcile Returns value to decide 'winner' when keys conflict.\n * @param arrays Arrays of data to merge\n */\nexport const mergeByKey = (keyFunction, reconcile, ...arrays) => {\n    const result = new Map();\n    for (const m of arrays) {\n        for (const mv of m) {\n            if (mv === undefined)\n                continue;\n            const mk = keyFunction(mv);\n            let v = result.get(mk);\n            v = v ? reconcile(v, mv) : mv;\n            result.set(mk, v);\n        }\n    }\n    return [...result.values()];\n};\n","import { resultThrow, arrayTest } from \"@ixfx/guards\";\n/**\n * Yields pairs made up of overlapping items from the input array.\n *\n * Throws an error if there are less than two entries.\n *\n * ```js\n * pairwise([1, 2, 3, 4, 5]);\n * Yields:\n * [ [1,2], [2,3], [3,4], [4,5] ]\n * ```\n * @param values\n */\nexport function* pairwise(values) {\n    resultThrow(arrayTest(values, `values`));\n    if (values.length < 2)\n        throw new Error(`Array needs to have at least two entries. Length: ${values.length}`);\n    for (let index = 1; index < values.length; index++) {\n        yield [values[index - 1], values[index]];\n    }\n}\n/**\n * Reduces in a pairwise fashion.\n *\n * Eg, if we have input array of [1, 2, 3, 4, 5], the\n * `reducer` fn will run with 1,2 as parameters, then 2,3, then 3,4 etc.\n * ```js\n * const values = [1, 2, 3, 4, 5]\n * reducePairwise(values, (acc, a, b) => {\n *  return acc + (b - a);\n * }, 0);\n * ```\n *\n * If input array has less than two elements, the initial value is returned.\n *\n * ```js\n * const reducer = (acc:string, a:string, b:string) => acc + `[${a}-${b}]`;\n * const result = reducePairwise(`a b c d e f g`.split(` `), reducer, `!`);\n * Yields: `![a-b][b-c][c-d][d-e][e-f][f-g]`\n * ```\n * @param array\n * @param reducer\n * @param initial\n * @returns\n */\nexport const pairwiseReduce = (array, reducer, initial) => {\n    resultThrow(arrayTest(array, `arr`));\n    if (array.length < 2)\n        return initial;\n    for (let index = 0; index < array.length - 1; index++) {\n        initial = reducer(initial, array[index], array[index + 1]);\n    }\n    return initial;\n};\n","import { arrayTest, resultThrow } from \"@ixfx/guards\";\n/**\n * Returns a shuffled copy of the input array.\n * @example\n * ```js\n * const d = [1, 2, 3, 4];\n * const s = shuffle(d);\n * // d: [1, 2, 3, 4], s: [3, 1, 2, 4]\n * ```\n *\n * It can be useful to randomly access each item from an array exactly once:\n * ```js\n * for (const value of shuffle(inputArray)) {\n *  // Do something with the value...\n * }\n * ```\n * @param dataToShuffle Input array\n * @param rand Random generator. `Math.random` by default.\n * @returns Copy with items moved around randomly\n * @typeParam V - Type of array items\n */\nexport const shuffle = (dataToShuffle, rand = Math.random) => {\n    resultThrow(arrayTest(dataToShuffle, `dataToShuffle`));\n    const array = [...dataToShuffle];\n    for (let index = array.length - 1; index > 0; index--) {\n        const index_ = Math.floor(rand() * (index + 1));\n        [array[index], array[index_]] = [array[index_], array[index]];\n    }\n    return array;\n};\n/**\n * Returns a random element of an array\n *\n * ```js\n * const v = [`blue`, `red`, `orange`];\n * randomElement(v); // Yields `blue`, `red` or `orange`\n * ```\n *\n * Note that repeated calls might yield the same value\n * multiple times. If you want to random unique values, consider using {@link shuffle}.\n *\n * See also:\n * * {@link randomIndex} if you want a random index rather than value.\n *\n * @param array\n * @param rand Random generator. `Math.random` by default.\n * @returns\n */\nexport const randomElement = (array, rand = Math.random) => {\n    resultThrow(arrayTest(array, `array`));\n    return array[Math.floor(rand() * array.length)];\n};\n/**\n * Returns a random array index.\n *\n * ```js\n * const v = [`blue`, `red`, `orange`];\n * randomIndex(v); // Yields 0, 1 or 2\n * ```\n *\n * Use {@link randomElement} if you want a value from `array`, not index.\n *\n * @param array Array\n * @param rand Random generator. `Math.random` by default.\n * @returns\n */\nexport const randomIndex = (array, rand = Math.random) => Math.floor(rand() * array.length);\n","import { arrayIndexTest, resultThrow } from \"@ixfx/guards\";\n/**\n * Removes an element at `index` index from `data`, returning the resulting array without modifying the original.\n *\n * ```js\n * const v = [ 100, 20, 50 ];\n * const vv = Arrays.remove(2);\n *\n * Yields:\n *  v: [ 100, 20, 50 ]\n * vv: [ 100, 20 ]\n * ```\n *\n * Consider {@link without} if you want to remove an item by value.\n *\n * Throws an exception if `index` is outside the range of `data` array.\n * @param data Input array\n * @param index Index to remove\n * @typeParam V Type of array\n * @returns\n */\nexport const remove = (data, index) => {\n    if (!Array.isArray(data)) {\n        throw new TypeError(`'data' parameter should be an array`);\n    }\n    resultThrow(arrayIndexTest(data, index, `index`));\n    return [...data.slice(0, index), ...data.slice(index + 1)];\n};\n","import { resultThrow, integerTest } from '@ixfx/guards';\n/**\n * Samples values from an array.\n *\n * If `amount` is less or equal to 1, it's treated as a percentage to sample.\n * Otherwise it's treated as every _n_th value to sample.\n *\n * @example\n * By percentage - get half of the items\n * ```\n * const list = [1,2,3,4,5,6,7,8,9,10];\n * const sub = Arrays.sample(list, 0.5);\n * // Yields: [2, 4, 6, 8, 10]\n * ```\n *\n * @example\n * By steps - every third value\n * ```\n * const list = [1,2,3,4,5,6,7,8,9,10];\n * const sub = Arrays.sample(list, 3);\n * // Yields:\n * // [3, 6, 9]\n * ```\n * @param array Array to sample\n * @param amount Amount, given as a percentage (0..1) or the number of interval (ie 3 for every third item)\n * @returns\n */\nexport const sample = (array, amount) => {\n    if (!Array.isArray(array))\n        throw new TypeError(`Param 'array' is not actually an array. Got type: ${typeof array}`);\n    let subsampleSteps = 1;\n    if (amount <= 1) {\n        // Subsample based on a percentage\n        const numberOfItems = array.length * amount;\n        subsampleSteps = Math.round(array.length / numberOfItems);\n    }\n    else {\n        subsampleSteps = amount;\n    }\n    resultThrow(integerTest(subsampleSteps, `positive`, `amount`));\n    if (subsampleSteps > array.length - 1) {\n        throw new Error(`Subsample steps exceeds array length`);\n    }\n    const r = [];\n    for (let index = subsampleSteps - 1; index < array.length; index += subsampleSteps) {\n        r.push(array[index]);\n    }\n    return r;\n};\n","import { arrayTest, resultThrow } from '@ixfx/guards';\n/**\n * Sorts an array of objects in ascending order\n * by the given property name, assuming it is a number.\n *\n * ```js\n * const data = [\n *  { size: 10, colour: `red` },\n *  { size: 20, colour: `blue` },\n *  { size: 5, colour: `pink` }\n * ];\n * const sorted = Arrays.sortByNumericProperty(data, `size`);\n *\n * Yields items ascending order:\n * [ { size: 5, colour: `pink` }, { size: 10, colour: `red` }, { size: 20, colour: `blue` } ]\n * ```\n * @param data\n * @param propertyName\n */\nexport const sortByNumericProperty = (data, propertyName) => [...data].sort((a, b) => {\n    resultThrow(arrayTest(data, `data`));\n    const av = a[propertyName];\n    const bv = b[propertyName];\n    if (av < bv)\n        return -1;\n    if (av > bv)\n        return 1;\n    return 0;\n});\n/**\n * Sorts an array of objects by some named property.\n *\n * ```js\n * const data = [\n *  { size: 10, colour: `red` },\n *  { size: 20, colour: `blue` },\n *  { size: 5, colour: `pink` }\n * ];\n * sortByProperty(data, `colour`);\n *\n * Yields [\n *  { size: 20, colour: `blue` },\n *  { size: 5, colour: `pink` }\n *  { size: 10, colour: `red` },\n * ]\n * ```\n *\n * You can also provide a custom comparer that is passed property values.\n * This function should return 0 if values are equal, 1 if `a > b` and -1 if `a < b`.\n * @param data\n * @param propertyName\n * @returns\n */\nexport const sortByProperty = (data, propertyName, comparer) => [...data].sort((a, b) => {\n    resultThrow(arrayTest(data, `data`));\n    const av = a[propertyName];\n    const bv = b[propertyName];\n    if (comparer === undefined) {\n        if (av < bv)\n            return -1;\n        if (av > bv)\n            return 1;\n        return 0;\n    }\n    else {\n        return comparer(av, bv);\n    }\n});\n","/**\n * Yields all items in the input array for as long as `predicate` returns true.\n *\n * `predicate` yields arrays of `[stop:boolean, acc:A]`. The first value\n * is _true_ when the iteration should stop, and the `acc` is the accumulated value.\n * This allows `until` to be used to carry over some state from item to item.\n *\n * @example Stop when we hit an item with value of 3\n * ```js\n * const v = [...until([1,2,3,4,5], v => v === 3];\n * // [ 1, 2 ]\n * ```\n *\n * @example Stop when we reach a total, using 0 as initial value\n * ```js\n * // Stop when accumulated value reaches 6\n * const v = Arrays.until[1,2,3,4,5], (v, acc) => [acc >= 7, v+acc], 0);\n * // [1, 2, 3]\n * ```\n * @param data\n * @param predicate\n * @returns\n */\nexport function* until(data, predicate, initial) {\n    let total = initial;\n    for (const datum of data) {\n        const r = predicate(datum, total);\n        if (typeof r === `boolean`) {\n            if (r)\n                break;\n        }\n        else {\n            const [stop, accumulator] = r;\n            if (stop)\n                break;\n            total = accumulator;\n        }\n        yield datum;\n    }\n}\n;\n","import { isEqualDefault } from \"./util/is-equal.js\";\n/**\n * Returns a copy of an input array with _undefined_ values removed.\n * @param data\n * @returns\n */\nexport const withoutUndefined = (data) => {\n    return data.filter(v => v !== undefined);\n};\n/**\n * Returns an array with value(s) omitted.\n *\n * If value is not found, result will be a copy of input.\n * Value checking is completed via the provided `comparer` function.\n * By default checking whether `a === b`. To compare based on value, use the `isEqualValueDefault` comparer.\n *\n * @example\n * ```js\n * const data = [100, 20, 40];\n * const filtered = without(data, 20); // [100, 40]\n * ```\n *\n * @example Using value-based comparison\n * ```js\n * const data = [{ name: `Alice` }, { name:`Sam` }];\n *\n * // This wouldn't work as expected, because the default comparer uses instance,\n * // not value:\n * without(data, { name: `Alice` });\n *\n * // So instead we can use a value comparer:\n * without(data, { name:`Alice` }, isEqualValueDefault);\n * ```\n *\n * @example Use a function\n * ```js\n * const data = [ { name: `Alice` }, { name:`Sam` }];\n * without(data, { name:`ALICE` }, (a, b) => {\n *  return (a.name.toLowerCase() === b.name.toLowerCase());\n * });\n * ```\n *\n * Consider {@link remove} to remove an item by index.\n *\n * @typeParam V - Type of array items\n * @param sourceArray Source array\n * @param toRemove Value(s) to remove\n * @param comparer Comparison function. If not provided `isEqualDefault` is used, which compares using `===`\n * @return Copy of array without value.\n */\nexport const without = (sourceArray, toRemove, comparer = isEqualDefault) => {\n    if (Array.isArray(toRemove)) {\n        const returnArray = [];\n        for (const source of sourceArray) {\n            if (!toRemove.some(v => comparer(source, v))) {\n                returnArray.push(source);\n            }\n        }\n        return returnArray;\n    }\n    else {\n        return sourceArray.filter((v) => !comparer(v, toRemove));\n    }\n};\n","import { containsIdenticalValues } from \"./equality.js\";\n/**\n * Zip combines the elements of two or more arrays based on their index.\n *\n * ```js\n * const a = [1,2,3];\n * const b = [`red`, `blue`, `green`];\n *\n * const c = Arrays.zip(a, b);\n * // Yields:\n * // [\n * //   [1, `red`],\n * //   [2, `blue`],\n * //   [3, `green`]\n * // ]\n * ```\n *\n * Typically the arrays you zip together are all about the same logical item. Eg, in the above example\n * perhaps `a` is size and `b` is colour. So thing #1 (at array index 0) is a red thing of size 1. Before\n * zipping we'd access it by `a[0]` and `b[0]`. After zipping, we'd have c[0], which is array of [1, `red`].\n * @param arrays\n * @returns Zipped together array\n */\nexport const zip = (...arrays) => {\n    if (arrays.some((a) => !Array.isArray(a))) {\n        throw new Error(`All parameters must be an array`);\n    }\n    const lengths = arrays.map((a) => a.length);\n    if (!containsIdenticalValues(lengths)) {\n        throw new Error(`Arrays must be of same length`);\n    }\n    const returnValue = [];\n    const length = lengths[0];\n    for (let index = 0; index < length; index++) {\n        returnValue.push(arrays.map((a) => a[index]));\n    }\n    return returnValue;\n};\n","export * from './cycle.js';\nexport * from './at-wrap.js';\nexport * from './chunks.js';\nexport * from './contains.js';\nexport * from './ensure-length.js';\nexport * from './equality.js';\nexport * from './filter.js';\nexport * from './flatten.js';\nexport * from './frequency.js';\nexport * from './group-by.js';\nexport * from './unique.js';\nexport * from './insert-at.js';\nexport * from './interleave.js';\nexport * from './intersection.js';\nexport * from './merge-by-key.js';\nexport * from './pairwise.js';\nexport * from './random.js';\nexport * from './remove.js';\nexport * from './sample.js';\nexport * from './sort.js';\nexport * from './unique.js';\nexport * from './until.js';\nexport * from './without.js';\nexport * from './zip.js';\n","/**\n * Apples `fn` to every key of `obj` which is numeric.\n * ```js\n * const o = {\n *  name: 'john',\n *  x: 10,\n *  y: 20\n * };\n * const o2 = applyToValues(o, (v) => v * 2);\n *\n * // Yields: { name: 'john', x: 20, y: 40 }\n * ```\n * @param object\n * @param apply\n * @returns\n */\nexport const applyToValues = (object, apply) => {\n    const o = { ...object };\n    for (const [key, value] of Object.entries(object)) {\n        if (typeof value === `number`) {\n            // Run number through function\n            //eslint-disable-next-line functional/immutable-data\n            o[key] = apply(value);\n        }\n        else {\n            // Copy value\n            //eslint-disable-next-line functional/immutable-data,@typescript-eslint/no-unsafe-assignment\n            o[key] = value;\n        }\n    }\n    return o;\n};\n","/**\n * Applies a function `fn` to the elements of an array, weighting them based on their relative position.\n *\n * ```js\n * // Six items\n * weight([1,1,1,1,1,1], Modulation.gaussian());\n *\n * // Yields:\n * // [0.02, 0.244, 0.85, 0.85, 0.244, 0.02]\n * ```\n *\n * `fn` is expected to map (0..1) => (0..1), such as an easing function. The input to the\n * `fn` is the relative position of an element. Thus the first element will be 0, the middle 0.5 and so on.\n * The output of `fn` is then multiplied by the original value.\n *\n * In the below example (which is also the default if `fn` is not specified), the relative position is\n * how values are weighted:\n *\n * ```js\n * weight([1,1,1,1,1,1], (relativePos) => relativePos);\n * // Yields:\n * // [0, 0.2, 0.4, 0.6, 0.8, 1]\n * ```\n *\n * Throws TypeError if `data` is not an array or for any element not a number.\n * @param data Array of numbers\n * @param fn Returns a weighting based on the given relative position. If unspecified, `(x) => x` is used.\n */\nexport const weight = (data, fn) => {\n    if (!Array.isArray(data))\n        throw new TypeError(`Param 'data' is expected to be an array. Got type: ${typeof data}`);\n    const weightingFunction = fn ?? ((x) => x);\n    return data.map((value, index) => {\n        if (typeof value !== `number`)\n            throw new TypeError(`Param 'data' contains non-number at index: '${index}'. Type: '${typeof value}' value: '${value}'`);\n        const relativePos = index / (data.length - 1);\n        const weightForPosition = weightingFunction(relativePos);\n        if (typeof weightForPosition !== `number`)\n            throw new TypeError(`Weighting function returned type '${typeof weightForPosition}' rather than number for input: '${relativePos}'`);\n        const finalResult = value * weightForPosition;\n        //console.log(`finalResult: ${ finalResult.toFixed(2) } rel: ${ relativePos.toFixed(2) } weightForPosition: ${ weightForPosition.toFixed(2) } input: ${ value } index: ${ index }`);\n        return finalResult;\n    });\n};\n/**\n * Returns an array of all valid numbers from `data`\n *\n * @param data\n * @returns\n */\nexport const validNumbers = (data) => data.filter((d) => typeof d === `number` && !Number.isNaN(d));\n/**\n * Returns the dot product of arbitrary-sized arrays. Assumed they are of the same length.\n * @param values\n * @returns\n */\nexport const dotProduct = (values) => {\n    let r = 0;\n    const length = values[0].length;\n    for (let index = 0; index < length; index++) {\n        let t = 0;\n        for (const [p, value] of values.entries()) {\n            if (p === 0)\n                t = value[index];\n            else {\n                t *= value[index];\n            }\n        }\n        r += t;\n    }\n    return r;\n};\n/**\n * Calculates the average of all numbers in an array.\n * Array items which aren't a valid number are ignored and do not factor into averaging.\n *\n * Use {@link numberArrayCompute} if you want min, max and total as well.\n *\n * @example\n * ```js\n * // Average of a list\n * const avg = Numbers.average([1, 1.4, 0.9, 0.1]);\n *\n * // Average of a variable\n * const data = [100,200];\n * Numbers.average(data);\n * ```\n *\n * @see {@link averageWeighted} To weight items based on position in array\n * @param data Data to average.\n * @returns Average of array\n */\nexport const average = (data) => {\n    // âœ” UNIT TESTED\n    if (data === undefined)\n        throw new Error(`data parameter is undefined`);\n    const valid = validNumbers(data);\n    const total = valid.reduce((accumulator, v) => accumulator + v, 0);\n    return total / valid.length;\n};\n/**\n * Returns the minimum number out of `data`.\n * Undefined and non-numbers are silently ignored.\n *\n * ```js\n * Numbers.min([10, 20, 0]); // Yields 0\n * ```\n * @param data\n * @returns Minimum number\n */\nexport const min = (data) => Math.min(...validNumbers(data));\n/**\n * Returns the index of the largest value.\n * ```js\n * const v = [ 10, 40, 5 ];\n * Numbers.maxIndex(v); // Yields 1\n * ```\n * @param data Array of numbers\n * @returns Index of largest value\n */\nexport const maxIndex = (data) => data.reduce((bestIndex, value, index, array) => value > array[bestIndex] ? index : bestIndex, 0);\n/**\n * Returns the index of the smallest value.\n *\n * ```js\n * const v = [ 10, 40, 5 ];\n * Numbers.minIndex(v); // Yields 2\n * ```\n * @param data Array of numbers\n * @returns Index of smallest value\n */\nexport const minIndex = (...data) => data.reduce((bestIndex, value, index, array) => value < array[bestIndex] ? index : bestIndex, 0);\n/**\n * Returns the maximum number out of `data`.\n * Undefined and non-numbers are silently ignored.\n *\n * ```js\n * Numbers.max(100, 200, 50); // 200\n * ```\n * @param data List of numbers\n * @returns Maximum number\n */\nexport const max = (data) => Math.max(...validNumbers(data));\n/**\n * Returns the total of `data`.\n * Undefined and non-numbers are silently ignored.\n *\n * ```js\n * Numbers.total([1, 2, 3]); // 6\n * ```\n * @param data Array of numbers\n * @returns Total\n */\nexport const total = (data) => data.reduce((previous, current) => {\n    if (typeof current !== `number`)\n        return previous;\n    if (Number.isNaN(current))\n        return previous;\n    if (!Number.isFinite(current))\n        return previous;\n    return previous + current;\n}, 0);\n/**\n * Returns the maximum out of `data` without pre-filtering for speed.\n *\n * For most uses, {@link max} should suffice.\n *\n * ```js\n * Numbers.maxFast([ 10, 0, 4 ]); // 10\n * ```\n * @param data\n * @returns Maximum\n */\nexport const maxFast = (data) => {\n    let m = Number.MIN_SAFE_INTEGER;\n    for (const datum of data) {\n        m = Math.max(m, datum);\n    }\n    return m;\n};\n/**\n * Returns the total of `data` without pre-filtering for speed.\n *\n * For most uses, {@link total} should suffice.\n *\n * ```js\n * Numbers.totalFast([ 10, 0, 4 ]); // 14\n * ```\n * @param data\n * @returns Maximum\n */\nexport const totalFast = (data) => {\n    let m = 0;\n    for (const datum of data) {\n        m += datum;\n    }\n    return m;\n};\n/**\n * Returns the maximum out of `data` without pre-filtering for speed.\n *\n * For most uses, {@link max} should suffice.\n *\n * ```js\n * Numbers.minFast([ 10, 0, 100 ]); // 0\n * ```\n * @param data\n * @returns Maximum\n */\nexport const minFast = (data) => {\n    let m = Number.MIN_SAFE_INTEGER;\n    for (const datum of data) {\n        m = Math.min(m, datum);\n    }\n    return m;\n};\n","import { zip } from '@ixfx/arrays';\nimport { weight } from './numeric-arrays.js';\n/**\n * Computes an average of an array with a set of weights applied.\n *\n * Weights can be provided as an array, expected to be on 0..1 scale, with indexes\n * matched up to input data. Ie. data at index 2 will be weighed by index 2 in the weightings array.\n *\n * ```js\n * // All items weighted evenly\n * averageWeighted([1,2,3], [1,1,1]); // 2\n *\n * // First item has full weight, second half, third quarter\n * averageWeighted([1,2,3], [1, 0.5, 0.25]); // 1.57\n *\n * // With reversed weighting of [0.25,0.5,1] value is 2.42\n * ```\n *\n * A function can alternatively be provided to compute the weighting based on array index, via {@link weight}.\n *\n * ```js\n * averageWeighted[1,2,3], Random.gaussian()); // 2.0\n * ```\n *\n * This is the same as:\n *\n * ```js\n * const data = [1,2,3];\n * const w = weight(data, Random.gaussian());\n * const avg = averageWeighted(data, w); // 2.0\n * ```\n * @param data Data to average\n * @param weightings Array of weightings that match up to data array, or an easing function\n * @see {@link average} Compute averages without weighting.\n */\nexport const averageWeighted = (data, weightings) => {\n    if (typeof weightings === `function`)\n        weightings = weight(data, weightings);\n    const ww = zip(data, weightings);\n    const [totalV, totalW] = ww.reduce((accumulator, v) => [accumulator[0] + v[0] * v[1], accumulator[1] + v[1]], [0, 0]);\n    return totalV / totalW;\n};\n","/**\n * Clamps a value between min and max (both inclusive)\n * Defaults to a 0-1 range, useful for percentages.\n *\n * @example Usage\n * ```js\n * // 0.5 - just fine, within default of 0 to 1\n * clamp(0.5);\n * // 1 - above default max of 1\n * clamp(1.5);\n * // 0 - below range\n * clamp(-50, 0, 100);\n * // 50 - within range\n * clamp(50, 0, 50);\n * ```\n *\n * For clamping integer ranges, consider {@link clampIndex }\n * For clamping `{ x, y }` points, consider {@link @ixfx/geometry.Points.clamp}.\n * For clamping bipolar values: {@link Bipolar.clamp}\n * @param value Value to clamp\n * @param min value (inclusive)\n * @param max value (inclusive)\n * @returns Clamped value\n */\nexport const clamp = (value, min = 0, max = 1) => {\n    // âœ” UNIT TESTED\n    if (Number.isNaN(value))\n        throw new Error(`Param 'value' is NaN`);\n    if (Number.isNaN(min))\n        throw new Error(`Param 'min' is NaN`);\n    if (Number.isNaN(max))\n        throw new Error(`Param 'max' is NaN`);\n    if (value < min)\n        return min;\n    if (value > max)\n        return max;\n    return value;\n};\n/**\n * Returns a function that clamps values.\n *\n * ```js\n * const c = clamper(0,100);\n * c(50);   // 50\n * c(101); // 100\n * c(-5);  // 0\n * ```\n * @param min Minimum value. Default: 0\n * @param max Maximum value. Default: 1\n */\nexport const clamper = (min = 0, max = 1) => {\n    if (Number.isNaN(min))\n        throw new Error(`Param 'min' is NaN`);\n    if (Number.isNaN(max))\n        throw new Error(`Param 'max' is NaN`);\n    return (v) => {\n        if (v > max)\n            return max;\n        if (v < min)\n            return min;\n        return v;\n    };\n};\n/**\n * Clamps integer `v` between 0 (inclusive) and array length or length (exclusive).\n * Returns value then will always be at least zero, and a valid array index.\n *\n * @example Usage\n * ```js\n * // Array of length 4\n * const myArray = [`a`, `b`, `c`, `d`];\n * clampIndex(0, myArray);    // 0\n * clampIndex(5, 3); // 2\n * ```\n *\n * Throws an error if `v` is not an integer.\n *\n * For some data it makes sense that data might 'wrap around' if it exceeds the\n * range. For example rotation angle. Consider using {@link wrap} for this.\n *\n * @param v Value to clamp (must be an interger)\n * @param arrayOrLength Array, or length of bounds (must be an integer)\n * @returns Clamped value, minimum will be 0, maximum will be one less than `length`.\n */\nexport const clampIndex = (v, arrayOrLength) => {\n    // âœ” UNIT TESTED\n    if (!Number.isInteger(v)) {\n        throw new TypeError(`v parameter must be an integer (${v})`);\n    }\n    const length = Array.isArray(arrayOrLength)\n        ? arrayOrLength.length\n        : arrayOrLength;\n    if (!Number.isInteger(length)) {\n        throw new TypeError(`length parameter must be an integer (${length}, ${typeof length})`);\n    }\n    v = Math.round(v);\n    if (v < 0)\n        return 0;\n    if (v >= length)\n        return length - 1;\n    return v;\n};\n/**\n * Returns the largest value, ignoring the sign of numbers\n *\n * ```js\n * maxAbs(1, 5);    // 5\n * maxAbs(-10, 5);  // -10 (since sign is ignored)\n * ```\n * @param values\n * @returns\n */\nexport const maxAbs = (...values) => {\n    let index = -1;\n    let maxA = Number.MIN_SAFE_INTEGER;\n    for (let index_ = 0; index_ < values.length; index_++) {\n        const vA = Math.abs(values[index_]);\n        if (vA > maxA) {\n            maxA = vA;\n            index = index_;\n        }\n    }\n    return values[index];\n};\n","import { integerTest, resultThrow } from \"@ixfx/guards\";\n/**\n * Yields `amount` integers, counting by one from zero. If a negative amount is used,\n * count decreases. If `offset` is provided, this is added to the return result.\n * @example\n * ```js\n * const a = [...count(5)]; // Yields five numbers: [0,1,2,3,4]\n * const b = [...count(-5)]; // Yields five numbers: [0,-1,-2,-3,-4]\n * for (const v of count(5, 5)) {\n *  // Yields: 5, 6, 7, 8, 9\n * }\n * const c = [...count(5,1)]; // Yields [1,2,3,4,5]\n * ```\n *\n * @example Used with forEach\n * ```js\n * // Prints `Hi` 5x\n * forEach(count(5), () => // do something);\n * ```\n *\n * If you want to accumulate return values, consider using Flow.repeat.\n *\n * @example Run some code every 100ms, 10 times:\n * ```js\n * import { interval } from '@ixfx/flow.js'\n * import { count } from '@ixfx/numbers.js'\n * const counter = count(10);\n * for await (const v of interval(counter, { fixedIntervalMs: 100 })) {\n *  // Do something\n * }\n * ```\n * @param amount Number of integers to yield\n * @param offset Added to result\n */\nexport function* count(amount, offset = 0) {\n    resultThrow(integerTest(amount, ``, `amount`), integerTest(offset, ``, `offset`));\n    if (amount === 0)\n        return;\n    let index = 0;\n    do {\n        yield (amount < 0 ? -index + offset : index + offset);\n    } while (index++ < Math.abs(amount) - 1);\n}\n;\n","/**\n * Returns the difference from the `initial` value. Defaults to absolute difference.\n * ```js\n * const rel = differenceFromFixed(100);\n * rel(100); // 0\n * rel(150); // 50\n * rel(50);  // 50\n * ```\n *\n * 'numerical' gives sign:\n * ```js\n * const rel = differenceFromFixed(100, `numerical`);\n * rel(100); // 0\n * rel(150); // 50\n * rel(50); // -50\n * ```\n *\n * 'relative' gives proportion to initial\n * ```js\n * const rel = differenceFromFixed(100, `relative`);\n * rel(100); // 0\n * rel(150); // 0.5\n * rel(10);  // 0.90\n * ```\n *\n * Using 'relativeSigned', we get negative relative result\n * when value is below the initial value.\n *\n * Use {@link differenceFromLast} to compare against the last value,\n * rather than the same fixed value.\n * @param {number} initial Value to compare against\n * @returns Difference from initial value\n */\nexport const differenceFromFixed = (initial, kind = `absolute`) => (value) => differenceFrom(kind, value, initial);\n/**\n * Returns a function which yields difference compared to last value.\n *\n * If no initial value is provided, the first difference will be returned as 0.\n *\n * Difference can be returned in various formats:\n * * 'absolute': numerical difference, without sign\n * * 'numerical': numerical difference, with sign, so you can see if difference is higher or lower\n * * 'relative': difference divided by last value, giving a proportional difference. Unsigned.\n * * 'relativeSigned': as above, but with sign\n *\n * Use {@link differenceFromFixed} to compare against a fixed value instead of the last value.\n *\n * ```js\n * let d = differenceFromLast(`absolute`);\n * d(10); // 0\n * d(11); // 1\n * d(10); // 1\n * ```\n *\n * ```js\n * let d = differenceFromLast(`numerical`);\n * d(10); // 0\n * d(11); // 1\n * d(10); // -1\n * ```\n *\n * ```js\n * let d = differenceFromLast(`relative`);\n * d(10); // 0\n * d(11); // 0.1\n * d(10); // 0.1\n * ```\n * ```js\n * let d = differenceFromLast(`relativeSigned`);\n * d(10); // 0\n * d(11); // 0.1\n * d(10); // -0.1\n * ```\n *\n * An initial value can be provided, eg:\n * ```js\n * let d = differenceFromLast(`absolute`, 10);\n * d(11); // 1\n * ```\n * @param kind Kind of output value\n * @param initialValue Optional initial value\n * @returns\n */\nexport const differenceFromLast = (kind = `absolute`, initialValue = Number.NaN) => {\n    let lastValue = initialValue;\n    return (value) => {\n        const x = differenceFrom(kind, value, lastValue);\n        lastValue = value;\n        return x;\n    };\n};\n//   const compute = (v: number) => {\n//     if (Number.isNaN(lastValue)) {\n//       lastValue = v;\n//       return 0;\n//     }\n//     const d = v - lastValue;\n//     let r = 0;\n//     if (kind === `absolute`) {\n//       r = Math.abs(d);\n//     } else if (kind === `numerical`) {\n//       r = d;\n//     } else if (kind === `relative`) {\n//       r = Math.abs(d / lastValue);\n//     } else if (kind === `relativeSigned`) {\n//       r = d / lastValue;\n//     } else throw new TypeError(`Unknown kind: '${ kind }' Expected: 'absolute', 'relative', 'relativeSigned' or 'numerical'`);\n//     lastValue = v;\n//     return r;\n//   }\n//   return compute;\n// }\nconst differenceFrom = (kind = `absolute`, value, from) => {\n    if (Number.isNaN(from)) {\n        return 0;\n    }\n    const d = value - from;\n    let r = 0;\n    if (kind === `absolute`) {\n        r = Math.abs(d);\n    }\n    else if (kind === `numerical`) {\n        r = d;\n    }\n    else if (kind === `relative`) {\n        r = Math.abs(d / from);\n    }\n    else if (kind === `relativeSigned`) {\n        r = d / from;\n    }\n    else\n        throw new TypeError(`Unknown kind: '${kind}' Expected: 'absolute', 'relative', 'relativeSigned' or 'numerical'`);\n    return r;\n};\n","/**\n * Returns true if `possibleNumber` is a number and not NaN\n * @param possibleNumber\n * @returns\n */\nexport const isValid = (possibleNumber) => {\n    if (typeof possibleNumber !== `number`)\n        return false;\n    if (Number.isNaN(possibleNumber))\n        return false;\n    return true;\n};\n","import { isValid } from './guard.js';\n/**\n * Filters an iterator of values, only yielding\n * those that are valid numbers\n *\n * ```js\n * const data = [true, 10, '5', { x: 5 }];\n * for (const n of Numbers.filterIterable(data)) {\n *  // 10\n * }\n * ```\n * @param it\n */\nexport function* filterIterable(it) {\n    for (const v of it) {\n        if (isValid(v))\n            yield v;\n    }\n}\n/**\n * Returns a function that yields _true_ if a value\n * is at least `threshold`\n * ```js\n * const t = thresholdAtLeast(50);\n * t(50); // true\n * t(0);  // false\n * t(55); // true\n * ```\n * @param threshold\n * @returns\n */\nexport const thresholdAtLeast = (threshold) => {\n    return (v) => {\n        return v >= threshold;\n    };\n};\n/**\n * Returns a function that yields _true_\n * if a number is at least _min_ and no greater than _max_\n *\n * ```js\n * const t = rangeInclusive(50, 100);\n * t(40); // false\n * t(50); // true\n * t(60); // true\n * t(100); // true\n * t(101);  // false\n * ```\n * @param min\n * @param max\n * @returns\n */\nexport const rangeInclusive = (min, max) => {\n    return (v) => {\n        return v >= min && v <= max;\n    };\n};\n","import { numberTest, resultThrow } from \"@ixfx/guards\";\n/**\n * Flips a percentage-scale number: `1 - v`.\n *\n * The utility of this function is that it sanity-checks\n * that `v` is in 0..1 scale.\n *\n * ```js\n * flip(1);   // 0\n * flip(0.5); // 0.5\n * flip(0);   // 1\n * ```\n * @param v\n * @returns\n */\nexport const flip = (v) => {\n    if (typeof v === `function`)\n        v = v();\n    resultThrow(numberTest(v, `percentage`, `v`));\n    return 1 - v;\n};\n","import { numberTest, resultThrow } from \"@ixfx/guards\";\n/**\n * Generates a range of numbers, starting from `start` and counting by `interval`.\n * If `end` is provided, generator stops when reached.\n *\n * Unlike {@link numericRange}, numbers might contain rounding errors\n *\n * ```js\n * for (const c of numericRangeRaw(10, 100)) {\n *  // 100, 110, 120 ...\n * }\n * ```\n * @param interval Interval between numbers\n * @param start Start\n * @param end End (if undefined, range never ends)\n */\nexport const numericRangeRaw = function* (interval, start = 0, end, repeating = false) {\n    if (interval <= 0)\n        throw new Error(`Interval is expected to be above zero`);\n    if (typeof end === `undefined`)\n        end = Number.MAX_SAFE_INTEGER;\n    let v = start;\n    do {\n        while (v < end) {\n            yield v;\n            v += interval;\n        }\n    } while (repeating);\n};\n/**\n * Generates a range of numbers, with a given interval.\n *\n * @example For-loop\n * ```\n * let loopForever = numericRange(0.1); // By default starts at 0 and counts upwards forever\n * for (v of loopForever) {\n *  console.log(v);\n * }\n * ```\n *\n * @example If you want more control over when/where incrementing happens...\n * ```js\n * let percent = numericRange(0.1, 0, 1);\n *\n * let percentResult = percent.next().value;\n * ```\n *\n * Note that computations are internally rounded to avoid floating point math issues. So if the `interval` is very small (eg thousandths), specify a higher rounding\n * number.\n *\n * @param interval Interval between numbers\n * @param start Start. Defaults to 0\n * @param end End (if undefined, range never ends)\n * @param repeating Range loops from start indefinately. Default _false_\n * @param rounding A rounding that matches the interval avoids floating-point math hikinks. Eg if the interval is 0.1, use a rounding of 10\n */\nexport const numericRange = function* (interval, start = 0, end, repeating = false, rounding) {\n    resultThrow(numberTest(interval, `nonZero`));\n    const negativeInterval = interval < 0;\n    if (end === undefined) {\n        /* no op */\n    }\n    else {\n        if (negativeInterval && start < end) {\n            throw new Error(`Interval of ${interval.toString()} will never go from ${start.toString()} to ${end.toString()}`);\n        }\n        if (!negativeInterval && start > end) {\n            throw new Error(`Interval of ${interval.toString()} will never go from ${start.toString()} to ${end.toString()}`);\n        }\n    }\n    rounding = rounding ?? 1000;\n    if (end === undefined)\n        end = Number.MAX_SAFE_INTEGER;\n    else\n        end *= rounding;\n    interval = interval * rounding;\n    do {\n        let v = start * rounding;\n        while ((!negativeInterval && v <= end) || (negativeInterval && v >= end)) {\n            yield v / rounding;\n            v += interval;\n        }\n    } while (repeating);\n};\n/**\n * Yields numeric range between 0.0-1.0.\n *\n * ```\n * // Yields: [0, 0.2, 0.4, 0.6, 0.8, 1]\n * const a = [...numericPercent(0.2)];\n *\n * // Repeating flag set to true:\n * for (const v of numericPercent(0.2, true)) {\n *  // Infinite loop. V loops back to 0 after hitting 1\n * }\n * ```\n *\n * If `repeating` is true, it loops back to 0 after reaching 1\n * @param interval Interval (default: 0.01, ie. 1%)\n * @param repeating Whether generator should loop (default: false)\n * @param start Start (default: 0)\n * @param end End (default: 1)\n * @returns\n */\nexport const numericPercent = function (interval = 0.01, repeating = false, start = 0, end = 1) {\n    resultThrow(numberTest(interval, `percentage`, `interval`), numberTest(start, `percentage`, `start`), numberTest(end, `percentage`, `end`));\n    return numericRange(interval, start, end, repeating);\n};\n","import { integerTest, resultThrow } from \"@ixfx/guards\";\n/**\n * Rounds a number.\n *\n * If one parameter is given, it's the decimal places,\n * and a rounding function is returned:\n * ```js\n * const r = round(2);\n * r(10.12355); // 10.12\n * ```\n *\n * If two parameters are given, the first is decimal places,\n * the second the value to round.\n * ```js\n * round(2, 10.12355); // 10.12\n * ```\n * @param decimalPlaces\n * @returns\n */\nexport function round(a, b, roundUp) {\n    resultThrow(integerTest(a, `positive`, `decimalPlaces`));\n    const up = (typeof b === `boolean`) ? b : (roundUp ?? false);\n    let rounder;\n    if (a === 0) {\n        rounder = Math.round;\n    }\n    else {\n        const p = Math.pow(10, a);\n        if (up) {\n            rounder = (v) => Math.ceil(v * p) / p;\n        }\n        else {\n            rounder = (v) => Math.floor(v * p) / p;\n        }\n    }\n    if (typeof b === `number`)\n        return rounder(b);\n    return rounder;\n}\n","import { numberTest, resultThrow } from \"@ixfx/guards\";\nimport { round } from \"./round.js\";\n/**\n * Checks if a value is within range of a base value\n *\n * ```js\n * // Check if 101 is within 10% of 100\n * isApprox(0.1, 100, 101);\n *\n * // Gets a function to compare some value of 10% range to 100\n * const c = isApprox(0.1,100);\n * c(101);\n *\n * // Gets a function to compare some base value and value to 10% range\n * const c = isApprox(0.1);\n * c(100, 101);\n * ```\n *\n * Throws an error if range or base values are NaN.\n * If value being checked is NaN or infinity, _false_ is returned.\n * @param rangePercent\n * @param baseValue\n * @param v\n * @returns\n */\nexport function isApprox(rangePercent, baseValue, v) {\n    resultThrow(numberTest(rangePercent, `percentage`, `rangePercent`));\n    // Round percentages to avoid floating point nonsense\n    const range = Math.floor(rangePercent * 100);\n    const test = (base, value) => {\n        try {\n            if (typeof value !== `number`)\n                return false;\n            if (Number.isNaN(value))\n                return false;\n            if (!Number.isFinite(value))\n                return false;\n            // Round value\n            const diff = Math.abs(value - base);\n            const relative = base === 0 ? Math.floor(diff * 100) : Math.floor((diff / base) * 100);\n            //console.log(`v: ${ value } base: ${ base } rel: ${ relative } range: ${ range } diff: ${ diff }`);\n            return relative <= range;\n        }\n        catch {\n            return false;\n        }\n    };\n    if (baseValue === undefined)\n        return test;\n    resultThrow(numberTest(baseValue, ``, `baseValue`));\n    if (v === undefined) {\n        return (value) => test(baseValue, value);\n    }\n    else {\n        return test(baseValue, v);\n    }\n}\n// export const isCloseTo = (a: number, b: number, precision = 3):Result<number,string> => {\n//   const aa = a.toPrecision(precision);\n//   const bb = b.toPrecision(precision);\n//   if (aa !== bb) return [ false, `A is not close enough to B. A: ${ a } B: ${ b } Precision: ${ precision }` ];\n//   else return [ true ];\n// }\n/**\n * Yields a function that checks if a value is close to any target value\n * ```js\n * const c = isCloseToAny(1, 10, 20, 30, 40);\n * c(11); // True - within 1 range of 10\n * c(19); // True - within 1 range of 20\n * c(0);  // False\n * ```\n *\n * Returned function accepts multiple values, returning\n * _true_ if any of them are within range\n * ```js\n * c(0, 1, 11); // Would return true based on 11\n * ```\n * @param allowedRangeAbsolute\n * @param targets\n * @returns\n */\nexport const isCloseToAny = (allowedRangeAbsolute, ...targets) => {\n    const targetsMin = targets.map(t => t - allowedRangeAbsolute);\n    const targetsMax = targets.map(t => t + allowedRangeAbsolute);\n    return (...values) => {\n        for (const v of values) {\n            for (let index = 0; index < targets.length; index++) {\n                if (v >= targetsMin[index] && v <= targetsMax[index])\n                    return true;\n            }\n        }\n        return false;\n    };\n};\n","//import { floatSource,type RandomOptions, type RandomSource } from '@ixfx/random';\nimport { numberTest, resultThrow } from '@ixfx/guards';\nimport { interpolate, scaler as numberScaler, scale as numberScale } from '@ixfx/numbers';\n/**\n * Wrapper for bipolar-based values. Immutable.\n * All functions will clamp to keep it in legal range.\n *\n * ```js\n * let v = immutable(); // Starts with 0 by default\n * v = v.add(0.1);      // v.value is 0.1\n * v = v.inverse();     // v.value is -0.1\n * v = v.multiply(0.2); // v.value is -0.02\n *\n * v = immutable(1);\n * v = v.towardZero(0.1); // 0.9\n * v = v.interpolate(0.1, 1);\n * ```\n *\n * Wrapped values can be coerced into number:\n * ```js\n * const v = immutable(1);\n * const x = +v+10;\n * // x = 11\n * ```\n * @param startingValueOrBipolar Initial numeric value or BipolarWrapper instance\n * @returns\n */\nexport const immutable = (startingValueOrBipolar = 0) => {\n    if (typeof startingValueOrBipolar === `undefined`)\n        throw new Error(`Start value is undefined`);\n    const startingValue = (typeof startingValueOrBipolar === `number`) ? startingValueOrBipolar : startingValueOrBipolar.value;\n    if (startingValue > 1)\n        throw new Error(`Start value cannot be larger than 1`);\n    if (startingValue < -1)\n        throw new Error(`Start value cannot be smaller than -1`);\n    if (Number.isNaN(startingValue))\n        throw new Error(`Start value is NaN`);\n    const v = startingValue;\n    return {\n        [Symbol.toPrimitive](hint) {\n            if (hint === `number`)\n                return v;\n            else if (hint === `string`)\n                return v.toString();\n            return true;\n        },\n        value: v,\n        towardZero: (amt) => {\n            return immutable(towardZero(v, amt));\n        },\n        add: (amt) => {\n            return immutable(clamp(v + amt));\n        },\n        multiply: (amt) => {\n            return immutable(clamp(v * amt));\n        },\n        inverse: () => {\n            return immutable(-v);\n        },\n        interpolate: (amt, b) => {\n            return immutable(clamp(interpolate(amt, v, b)));\n        },\n        asScalar: (max = 1, min = 0) => {\n            return toScalar(v, max, min);\n        }\n    };\n};\n/**\n * Converts bipolar value to a scalar. That is, converts from\n * -1..1 range to 0..1.\n *\n * ```js\n * Bipolar.toScalar(-1); // 0.0\n * Bipolar.toScalar( 0); // 0.5\n * Bipolar.toScalar( 1); // 1.0\n * ```\n *\n * Range can be changed:\n * ```js\n * Bipolar.toScalar(0, 100); // Uses 0..100 scale, so output is 50\n * Bipolar.toScalar(0, 100, 50); // Uses 50..1000 scale, so output is 75\n * ```\n *\n * Throws an error if `bipolarValue` is not a number or NaN\n * @param bipolarValue Value to convert to scalar\n * @returns Scalar value on 0..1 range.\n */\nexport const toScalar = (bipolarValue, max = 1, min = 0) => {\n    if (typeof bipolarValue !== `number`)\n        throw new Error(`Expected v to be a number. Got: ${typeof bipolarValue}`);\n    if (Number.isNaN(bipolarValue))\n        throw new Error(`Parameter is NaN`);\n    return numberScale(bipolarValue, -1, 1, min, max);\n};\n/**\n * Makes a scalar into a bipolar value.\n *\n * That is, input range is 0..1, output range is -1...1\n *\n * ```js\n * Bipolar.fromScalar(1);   // 1\n * Bipolar.fromScalar(0);   // -1\n * Bipolar.fromScalar(0.5); // 0\n * ```\n *\n * Throws an error if `scalarValue` is outside 0..1 scale.\n * @param scalarValue Scalar value to convert\n * @returns Bipolar value on -1..1 scale\n */\nexport const fromScalar = (scalarValue) => {\n    resultThrow(numberTest(scalarValue, `percentage`, `v`));\n    return (scalarValue * 2) - 1;\n};\n/**\n * Scale & clamp value to bipolar range (-1..1).\n * ```js\n * // Scale 100 on 0..100 scale\n * Bipolar.scale(100, 0, 100); // 1\n * Bipolar.scale(50, 0, 100);  // 0\n * Bipolar.scale(0, 0, 100);   // -1\n * ```\n *\n * Return value is clamped.\n * @param inputValue Value to scale\n * @param inMin Minimum of scale\n * @param inMax Maximum of scale\n * @returns Bipolar value on -1..1 scale\n */\nexport const scale = (inputValue, inMin, inMax) => {\n    return clamp(numberScaler(inMin, inMax, -1, 1)(inputValue));\n};\n/**\n * Scale a number to bipolar range (-1..1). Not clamped, so we might exceed range.\n *\n * ```js\n * // Scale 100 on 0..100 scale\n * Bipolar.scaleUnclamped(100, 0, 100); // 1\n * Bipolar.scaleUnclamped(50, 0, 100);  // 0\n * Bipolar.scaleUnclamped(0, 0, 100);   // -1\n * ```\n *\n * @param inputValue Value to scale\n * @param inMin Minimum of scale\n * @param inMax Maximum of scale\n * @returns Bipolar value on -1..1 scale\n */\nexport const scaleUnclamped = (inputValue, inMin, inMax) => {\n    return numberScaler(inMin, inMax, -1, 1)(inputValue);\n};\n/**\n * Clamp a bipolar value\n * ```js\n * Bipolar.clamp(-1);   // -1\n * Bipolar.clamp(-1.1); // -1\n * ```\n *\n * Throws an error if `bipolarValue` is not a number or NaN.\n * @param bipolarValue Value to clamp\n * @returns Clamped value on -1..1 scale\n */\nexport const clamp = (bipolarValue) => {\n    if (typeof bipolarValue !== `number`)\n        throw new Error(`Param 'bipolarValue' must be a number. Got: ${typeof bipolarValue}`);\n    if (Number.isNaN(bipolarValue))\n        throw new Error(`Param 'bipolarValue' is NaN`);\n    if (bipolarValue > 1)\n        return 1;\n    if (bipolarValue < -1)\n        return -1;\n    return bipolarValue;\n};\n/**\n * Pushes a bipolar value toward zero by `amount`.\n * Return value is clamped on bipolar range of -1..1\n *\n * ```js\n * Bipolar.towardZero(-1, 0.1); // -0.9\n * Bipolar.towardZero( 1, 0.1); //  0.9\n * Bipolar.towardZero( 0, 0.1); //  0.0\n * Bipolar.towardZero( 1, 1.1); //  0.0\n * ```\n *\n * If `amount` is greater than 1, 0 is returned.\n * Throws an error if `bipolarValue` or `amount` are not numbers.\n * Throws an error if `amount` is below zero.\n * @param bipolarValue Bipolar value to nudge toward zero\n * @param amount Amount to nudge by\n * @returns Bipolar value -1...1\n */\nexport const towardZero = (bipolarValue, amount) => {\n    if (typeof bipolarValue !== `number`)\n        throw new Error(`Parameter 'v' must be a number. Got: ${typeof bipolarValue}`);\n    if (typeof amount !== `number`)\n        throw new Error(`Parameter 'amt' must be a number. Got: ${typeof amount}`);\n    if (amount < 0)\n        throw new Error(`Parameter 'amt' must be positive`);\n    if (bipolarValue < 0) {\n        bipolarValue += amount;\n        if (bipolarValue > 0)\n            bipolarValue = 0;\n    }\n    else if (bipolarValue > 0) {\n        bipolarValue -= amount;\n        if (bipolarValue < 0)\n            bipolarValue = 0;\n    }\n    return bipolarValue;\n};\n","/* eslint-disable unicorn/prevent-abbreviations */\nimport { numberTest, integerTest, resultThrow } from '@ixfx/guards';\n/**\n * Wraps an integer number within a specified range, defaulting to degrees (0-360). Use {@link wrap} for floating-point wrapping.\n *\n * This is useful for calculations involving degree angles and hue, which wrap from 0-360.\n * Eg: to add 200 to 200, we don't want 400, but 40.\n *\n * ```js\n * const v = wrapInteger(200+200, 0, 360); // 40\n * ```\n *\n * Or if we minus 100 from 10, we don't want -90 but 270\n * ```js\n * const v = wrapInteger(10-100, 0, 360); // 270\n * ```\n *\n * `wrapInteger` uses 0-360 as a default range, so both of these\n * examples could just as well be:\n *\n * ```js\n * wrapInteger(200+200);  // 40\n * wrapInteger(10-100);  // 270\n * ```\n *\n * Non-zero starting points can be used. A range of 20-70:\n * ```js\n * const v = wrapInteger(-20, 20, 70); // 50\n * ```\n *\n * Note that the minimum value is inclusive, while the maximum is _exclusive_.\n * So with the default range of 0-360, 360 is never reached:\n *\n * ```js\n * wrapInteger(360); // 0\n * wrapInteger(361); // 1\n * ```\n *\n * If you just want to lock values to a range without wrapping, consider {@link clamp}.\n *\n * @param v Value to wrap\n * @param min Integer minimum of range (default: 0). Inclusive\n * @param max Integer maximum of range (default: 360). Exlusive\n * @returns\n */\nexport const wrapInteger = (v, min = 0, max = 360) => {\n    resultThrow(integerTest(v, undefined, `v`), integerTest(min, undefined, `min`), integerTest(max, undefined, `max`));\n    if (v === min)\n        return min;\n    if (v === max)\n        return min; // Wraps\n    if (v > 0 && v < min)\n        v += min;\n    v -= min;\n    max -= min;\n    v = v % max;\n    if (v < 0)\n        v = max - Math.abs(v) + min;\n    return v + min;\n};\n/**\n * Wraps floating point numbers to be within a range (default: 0..1). Use {@link wrapInteger} if you want to wrap integer values.\n *\n * This logic makes sense for some things like rotation angle.\n *\n * If you just want to lock values to a range without wrapping, consider {@link clamp}.\n *\n * ```js\n * wrap(1.2);   // 0.2\n * wrap(2);     // 1.0\n * wrap(-0.2); // 0.8\n * ```\n *\n * A range can be provided too:\n * ```js\n * wrap(30, 20, 50);  \t // 30\n * wrap(60, 20, 50);    //  30\n * ```\n * @param v\n * @param min\n * @param max\n * @returns\n */\nexport const wrap = (v, min = 0, max = 1) => {\n    resultThrow(numberTest(v, ``, `min`), numberTest(min, ``, `min`), numberTest(max, ``, `max`));\n    if (v === min)\n        return min;\n    if (v === max)\n        return min; // Wraps\n    while (v <= min || v >= max) {\n        if (v === max)\n            break;\n        if (v === min)\n            break;\n        if (v > max) {\n            v = min + (v - max);\n        }\n        else if (v < min) {\n            v = max - (min - v);\n        }\n    }\n    return v;\n};\n/**\n * Performs a calculation within a wrapping number range. This is a lower-level function.\n * See also: {@link wrapInteger} for simple wrapping within a range.\n *\n * `min` and `max` define the start and end of the valid range, inclusive. Eg for hue degrees it'd be 0, 360.\n * `a` and `b` is the range you want to work in.\n *\n * For example, let's say you want to get the middle point between a hue of 30 and a hue of 330 (ie warmer colours):\n * ```js\n * wrapRange(0,360, (distance) => {\n *  // for a:0 and b:330, distance would be 90 from 30 degrees to 330 (via zero)\n *  return distance * 0.5; // eg return middle point\n * }, 30, 330);\n * ```\n *\n * The return value of the callback should be in the range of 0-distance. `wrapRange` will subsequently\n * conform it to the `min` and `max` range before it's returned to the caller.\n *\n * @param a Output start (eg. 60)\n * @param b Output end (eg 300)\n * @param min Range start (eg 0)\n * @param max Range end (eg 360)\n * @param fn Returns a computed value from 0 to `distance`.\n * @returns\n */\nexport const wrapRange = (min, max, fn, a, b) => {\n    let r = 0;\n    const distF = Math.abs(b - a);\n    // When b is wrapped forwards\n    const distFwrap = Math.abs(max - a + b);\n    // When b is wrapped backwards (10, 300)\n    const distBWrap = Math.abs(a + (360 - b));\n    const distMin = Math.min(distF, distFwrap, distBWrap);\n    if (distMin === distBWrap) {\n        // (10, 300) = 70\n        r = a - fn(distMin);\n    }\n    else if (distMin === distFwrap) {\n        // (300, 60) = 120\n        r = a + fn(distMin);\n    }\n    else {\n        // Forwards or backwards without wrapping\n        if (a > b) {\n            // (240,120) -- backwards\n            r = a - fn(distMin);\n        }\n        else {\n            // (120,240) -- forwards\n            r = a + fn(distMin);\n        }\n    }\n    return wrapInteger(r, min, max);\n};\n","export const piPi = Math.PI * 2;\n","import { wrap } from './wrap.js';\nimport { numberTest, resultThrow } from '@ixfx/guards';\nimport { clamp } from './clamp.js';\nimport { piPi } from './pi-pi.js';\n/**\n * Interpolates between `a` and `b` by `amount`. Aka `lerp`.\n *\n * [ixfx Guide on Interpolation](https://ixfx.fun/data/interpolation/overview/)\n *\n * @example Get the halfway point between 30 and 60\n * ```js\n * interpolate(0.5, 30, 60);\n * ```\n *\n * See also {@link interpolatorStepped} and {@link @ixfx/modulation.interpolatorInterval} for functions\n * which help to manage progression from A->B over steps or interval.\n *\n * Usually interpolation amount is on a 0...1 scale, inclusive. What is the interpolation result\n * if this scale is exceeded? By default it is clamped to 0..1, so the return value is always between `a` and `b` (inclusive).\n *\n * Alternatively, set the `limits` option to process `amount`:\n * * 'wrap': wrap amount, eg 1.5 is the same as 0.5, 2 is the same as 1\n * * 'ignore': allow exceeding values. eg 1.5 will yield b*1.5.\n * * 'clamp': default behaviour of clamping interpolation amount to 0..1\n *\n * Interpolation can be non-linear using 'easing' option or 'transform' funciton.\n * ```js\n * interpolate(0.1, 0, 100, { easing: `quadIn` });\n * ```\n * There are a few variations when calling `interpolate`, depending on what parameters are fixed.\n * * `interpolate(amount)`: returns a function that needs a & b\n * * `interpolate(a, b)`:  returns a function that needs the interpolation amount\n */\nexport function interpolate(pos1, pos2, pos3, pos4) {\n    let amountProcess;\n    let limits = `clamp`;\n    const handleAmount = (amount) => {\n        if (amountProcess)\n            amount = amountProcess(amount);\n        if (limits === undefined || limits === `clamp`) {\n            amount = clamp(amount);\n        }\n        else if (limits === `wrap`) {\n            if (amount > 1)\n                amount = amount % 1;\n            else if (amount < 0) {\n                amount = 1 + (amount % 1);\n            }\n        }\n        return amount;\n    };\n    const doTheEase = (_amt, _a, _b) => {\n        resultThrow(numberTest(_a, ``, `a`), numberTest(_b, ``, `b`), numberTest(_amt, ``, `amount`));\n        _amt = handleAmount(_amt);\n        return (1 - _amt) * _a + _amt * _b;\n    };\n    const readOpts = (o = {}) => {\n        if (o.transform) {\n            if (typeof o.transform !== `function`)\n                throw new Error(`Param 'transform' is expected to be a function. Got: ${typeof o.transform}`);\n            amountProcess = o.transform;\n        }\n        limits = o.limits ?? `clamp`;\n    };\n    const rawEase = (_amt, _a, _b) => (1 - _amt) * _a + _amt * _b;\n    if (typeof pos1 !== `number`)\n        throw new TypeError(`First param is expected to be a number. Got: ${typeof pos1}`);\n    if (typeof pos2 === `number`) {\n        let a;\n        let b;\n        if (pos3 === undefined || typeof pos3 === `object`) {\n            //interpolate(a: number, b: number, options?: Partial<InterpolateOptions>): (amount: number) => number;\n            a = pos1;\n            b = pos2;\n            readOpts(pos3);\n            return (amount) => doTheEase(amount, a, b);\n        }\n        else if (typeof pos3 === `number`) {\n            //interpolate(amount: number, a: number, b: number, options?: Partial<InterpolateOptions>): number;\n            a = pos2;\n            b = pos3;\n            readOpts(pos4);\n            return doTheEase(pos1, a, b);\n        }\n        else {\n            throw new Error(`Values for 'a' and 'b' not defined`);\n        }\n    }\n    else if (pos2 === undefined || typeof pos2 === `object`) {\n        //interpolate(amount: number, options?: Partial<InterpolateOptions>): (a:number,b:number)=>number;\n        const amount = handleAmount(pos1);\n        readOpts(pos2);\n        resultThrow(numberTest(amount, ``, `amount`));\n        return (aValue, bValue) => rawEase(amount, aValue, bValue);\n    }\n}\n;\n/**\n * Returns a function that interpolates from A to B.\n * It steps through the interpolation with each call to the returned function.\n * This means that the `incrementAmount` will hinge on the rate\n * at which the function is called. Alternatively, consider {@link @ixfx/numbers.interpolatorInterval}\n * which steps on the basis of clock time.\n *\n * ```js\n * // Interpolate from 0..1 by 0.01\n * const v = interpolatorStepped(0.01, 100, 200);\n * v(); // Each call returns a value closer to target\n * // Eg: 100, 110, 120, 130 ...\n * ```\n *\n * Under the hood, it calls `interpolate` with an amount that\n * increases by `incrementAmount` each time.\n *\n * When calling `v()` to step the interpolator, you can also pass\n * in new B and A values. Note that the order is swapped: the B (target) is provided first, and\n * then optionally A.\n *\n * ```js\n * const v = interpolatorStepped(0.1, 100, 200); // Interpolate 100->200\n * v(300, 200); // Retarget to 200->300 and return result\n * v(150); // Retarget 200->150 and return result\n * ```\n *\n * This allows you to maintain the current interpolation progress.\n * @param incrementAmount Amount to increment by\n * @param a Start value. Default: 0\n * @param b End value. Default: 1\n * @param startInterpolationAt Starting interpolation amount. Default: 0\n * @param options Options for interpolation\n * @returns\n */\nexport const interpolatorStepped = (incrementAmount, a = 0, b = 1, startInterpolationAt = 0, options) => {\n    let amount = startInterpolationAt;\n    return (retargetB, retargetA) => {\n        if (retargetB !== undefined)\n            b = retargetB;\n        if (retargetA !== undefined)\n            a = retargetA;\n        if (amount >= 1)\n            return b;\n        const value = interpolate(amount, a, b, options);\n        amount += incrementAmount;\n        return value;\n    };\n};\n/**\n * Interpolate between angles `a` and `b` by `amount`. Angles are in radians.\n *\n * ```js\n * interpolateAngle(0.5, Math.PI, Math.PI/2);\n * ```\n * @param amount\n * @param aRadians Start angle (radian)\n * @param bRadians End angle (radian)\n * @returns\n */\nexport const interpolateAngle = (amount, aRadians, bRadians, options) => {\n    const t = wrap(bRadians - aRadians, 0, piPi);\n    return interpolate(amount, aRadians, aRadians + (t > Math.PI ? t - piPi : t), options);\n};\n","import { numberTest, resultThrow } from \"@ixfx/guards\";\nimport { round } from \"./round.js\";\n/**\n * Generates a `step`-length series of values between `start` and `end` (inclusive).\n * Each value will be equally spaced.\n *\n * ```js\n * for (const v of linearSpace(1, 5, 6)) {\n *  // Yields: [ 1, 1.8, 2.6, 3.4, 4.2, 5 ]\n * }\n * ```\n *\n * Numbers can be produced from large to small as well\n * ```js\n * const values = [...linearSpace(10, 5, 3)];\n * // Yields: [10, 7.5, 5]\n * ```\n * @param start Start number (inclusive)\n * @param end  End number (inclusive)\n * @param steps How many steps to make from start -> end\n * @param precision Number of decimal points to round to\n */\nexport function* linearSpace(start, end, steps, precision) {\n    resultThrow(numberTest(start, ``, `start`), numberTest(end, ``, `end`), numberTest(steps, ``, `steps`));\n    const r = precision ? round(precision) : (v) => v;\n    const step = (end - start) / (steps - 1);\n    resultThrow(numberTest(step, ``, `step`));\n    if (!Number.isFinite(step)) {\n        throw new TypeError(`Calculated step value is infinite`);\n    }\n    for (let index = 0; index < steps; index++) {\n        const v = start + step * index;\n        yield r(v);\n    }\n}\n","export class BasicQueueMutable {\n    #store = [];\n    enqueue(data) {\n        this.#store.push(data);\n    }\n    dequeue() {\n        return this.#store.shift();\n    }\n    get data() {\n        return this.#store;\n    }\n    get size() {\n        return this.#store.length;\n    }\n}\n","import { numberTest, resultThrow } from \"@ixfx/guards\";\nimport { BasicQueueMutable } from \"./util/queue-mutable.js\";\nimport { averageWeighted } from \"./average-weighted.js\";\nimport { average } from \"./numeric-arrays.js\";\nconst PiPi = Math.PI * 2;\n/**\n * A moving average calculator (exponential weighted moving average) which does not keep track of\n * previous samples. Less accurate, but uses less system resources.\n *\n * The `scaling` parameter determines smoothing. A value of `1` means that\n * the latest value is used as the average - that is, no smoothing. Higher numbers\n * introduce progressively more smoothing by weighting the accumulated prior average more heavily.\n *\n * ```\n * const ma = movingAverageLight(); // default scaling of 3\n * ma(50);  // 50\n * ma(100); // 75\n * ma(75);  // 75\n * ma(0);   // 50\n * ```\n *\n * Note that the final average of 50 is pretty far from the last value of 0. To make it more responsive,\n * we could use a lower scaling factor: `movingAverageLight(2)`. This yields a final average of `37.5` instead.\n *\n * @param scaling Scaling factor. 1 is no smoothing. Default: 3\n * @returns Function that adds to average.\n */\nexport const movingAverageLight = (scaling = 3) => {\n    resultThrow(numberTest(scaling, `aboveZero`, `scaling`));\n    let average = 0;\n    let count = 0;\n    return (v) => {\n        const r = numberTest(v, ``, `v`);\n        if (r.success && v !== undefined) {\n            // Valid number\n            count++;\n            average = average + (v - average) / Math.min(count, scaling);\n        }\n        return average;\n    };\n};\n/**\n * Creates a moving average for a set number of `samples`.\n * It returns a function which in turn yields an average value.\n *\n * Moving average are useful for computing the average over a recent set of numbers.\n * A lower number of samples produces a computed value that is lower-latency yet more jittery.\n * A higher number of samples produces a smoother computed value which takes longer to respond to\n * changes in data.\n *\n * Sample size is considered with respect to the level of latency/smoothness trade-off, and also\n * the rate at which new data is added to the moving average.\n *\n *\n * ```js\n * const ma = movingAverage(10);\n * ma(10); // 10\n * ma(5);  // 7.5\n * ```\n *\n * A weighting function can be provided to shape how the average is\n * calculated - eg privileging the most recent data over older data.\n * It uses `Arrays.averageWeighted` under the hood.\n *\n * ```js\n * import { movingAverage } from '@ixfx/numbers.js';\n * import { gaussian } from '@ixfx/modulation.js';\n *\n * // Give more weight to data in middle of sampling window\n * const ma = movingAverage(100, gaussian());\n * ```\n *\n * Because it keeps track of `samples` previous data, there is a memory impact. A lighter version is {@link movingAverageLight} which does not keep a buffer of prior data, but can't be as easily fine-tuned.\n * @param samples Number of samples to compute average from\n * @param weighter Optional weighting function\n * @returns\n */\nexport const movingAverage = (samples = 100, weighter) => {\n    const q = new BasicQueueMutable();\n    return (v) => {\n        const r = numberTest(v);\n        if (r.success && v !== undefined) {\n            q.enqueue(v);\n            while (q.size > samples) {\n                q.dequeue();\n            }\n        }\n        return weighter === undefined ? average(q.data) : averageWeighted(q.data, weighter);\n    };\n};\n// export const movingAverageTimed = (\n//   updateRateMs = 200,\n//   value = 0,\n//   scaling = 3\n// ): MovingAverage => {\n//   throwNumberTest(scaling, `aboveZero`, `scaling`);\n//   throwNumberTest(updateRateMs, `aboveZero`, `decayRateMs`);\n//   const mal = movingAverageLight(scaling);\n//   //eslint-disable-next-line functional/no-let\n//   let timer = 0;\n//   const reschedule = () => {\n//     if (timer !== 0) clearTimeout(timer);\n//     // eslint-disable-next-line @typescript-eslint/prefer-ts-expect-error\n//     // @ts-ignore\n//     timer = setTimeout(decay, updateRateMs) as number;\n//   };\n//   const decay = () => {\n//     mal.add(value);\n//     if (!mal.isDisposed) setTimeout(decay, updateRateMs);\n//   };\n//   const ma: MovingAverage = {\n//     add(v: number) {\n//       reschedule();\n//       return mal.add(v);\n//     },\n//     dispose() {\n//       mal.dispose();\n//     },\n//     clear: function (): void {\n//       mal.clear();\n//     },\n//     compute: function (): number {\n//       return mal.compute();\n//     },\n//     isDisposed: false,\n//   };\n//   return ma;\n// };\nconst smoothingFactor = (timeDelta, cutoff) => {\n    const r = PiPi * cutoff * timeDelta;\n    return r / (r + 1);\n};\nconst exponentialSmoothing = (smoothingFactor, value, previous) => {\n    return smoothingFactor * value + (1 - smoothingFactor) * previous;\n};\n/**\n * Noise filtering\n *\n * Algorithm: https://gery.casiez.net/1euro/\n *\n * Based on [Jaan Tollander de Balsch's implementation](https://jaantollander.com/post/noise-filtering-using-one-euro-filter/)\n * @param cutoffMin Default: 1\n * @param speedCoefficient Default: 0\n * @param cutoffDefault Default: 1\n */\nexport const noiseFilter = (cutoffMin = 1, speedCoefficient = 0, cutoffDefault = 1) => {\n    let previousValue = 0;\n    let derivativeLast = 0;\n    let timestampLast = 0;\n    const compute = (value, timestamp) => {\n        timestamp ??= performance.now();\n        const timeDelta = timestamp - timestampLast;\n        // Filtered derivative\n        const s = smoothingFactor(timeDelta, cutoffDefault);\n        const valueDelta = (value - previousValue) / timeDelta;\n        const derivative = exponentialSmoothing(s, valueDelta, derivativeLast);\n        // Filtered signal\n        const cutoff = cutoffMin + speedCoefficient * Math.abs(derivative);\n        const a = smoothingFactor(timeDelta, cutoff);\n        const smoothed = exponentialSmoothing(a, value, previousValue);\n        previousValue = smoothed;\n        derivativeLast = derivative;\n        timestampLast = timestamp;\n        return smoothed;\n    };\n    return compute;\n};\n","import { clamp, clamper } from './clamp.js';\nimport { numberTest, resultThrow } from '@ixfx/guards';\n/**\n * Scales `v` from an input range to an output range (aka `map`)\n *\n * For example, if a sensor's useful range is 100-500, scale it to a percentage:\n *\n * ```js\n *\n * scale(sensorReading, 100, 500, 0, 1);\n * ```\n *\n * `scale` defaults to a percentage-range output, so you can get away with:\n * ```js\n * scale(sensorReading, 100, 500);\n * ```\n *\n * If `v` is outside of the input range, it will likewise be outside of the output range.\n * Use {@link scaleClamped} to clip value to range.\n *\n * If inMin and inMax are equal, outMax will be returned.\n *\n * An easing function can be provided for non-linear scaling. In this case\n * the input value is 'pre scaled' using the function before it is applied to the\n * output range.\n *\n * ```js\n * scale(sensorReading, 100, 500, 0, 1, Easings.gaussian());\n * ```\n * @param v Value to scale\n * @param inMin Input minimum\n * @param inMax Input maximum\n * @param outMin Output minimum. If not specified, 0\n * @param outMax Output maximum. If not specified, 1\n * @param easing Easing function\n * @returns Scaled value\n */\nexport const scale = (v, inMin, inMax, outMin, outMax, easing) => scaler(inMin, inMax, outMin, outMax, easing)(v);\n/**\n * Returns a scaling function\n * @param inMin Input minimum\n * @param inMax Input maximum\n * @param outMin Output minimum. If not specified, 0\n * @param outMax Output maximum. If not specified, 1\n * @param easing Easing function\n * @param clamped If true, value is clamped. Default: false\n * @returns\n */\nexport const scaler = (inMin, inMax, outMin, outMax, easing, clamped) => {\n    resultThrow(numberTest(inMin, `finite`, `inMin`), numberTest(inMax, `finite`, `inMax`));\n    const oMax = outMax ?? 1;\n    const oMin = outMin ?? 0;\n    const clampFunction = clamped ? clamper(outMin, outMax) : undefined;\n    return (v) => {\n        if (inMin === inMax)\n            return oMax;\n        let a = (v - inMin) / (inMax - inMin);\n        if (easing !== undefined)\n            a = easing(a);\n        const x = a * (oMax - oMin) + oMin;\n        if (clampFunction)\n            return clampFunction(x);\n        return x;\n    };\n};\n/**\n * Returns a 'null' scaler that does nothing - the input value is returned as output.\n * @returns\n */\nexport const scalerNull = () => (v) => v;\n/**\n * As {@link scale}, but result is clamped to be\n * within `outMin` and `outMax`.\n *\n * @param v\n * @param inMin\n * @param inMax\n * @param outMin 1 by default\n * @param outMax 0 by default d\n * @param easing\n * @returns\n */\nexport const scaleClamped = (v, inMin, inMax, outMin, outMax, easing) => {\n    if (typeof outMax === `undefined`)\n        outMax = 1;\n    if (typeof outMin === `undefined`)\n        outMin = 0;\n    if (inMin === inMax)\n        return outMax;\n    const x = scale(v, inMin, inMax, outMin, outMax, easing);\n    return clamp(x, outMin, outMax);\n};\n/**\n * Scales an input percentage to a new percentage range.\n *\n * If you have an input percentage (0-1), `scalePercentageOutput` maps it to an\n * _output_ percentage of `outMin`-`outMax`.\n *\n * ```js\n * // Scales 50% to a range of 0-10%\n * scalePercentages(0.5, 0, 0.10); // 0.05 - 5%\n * ```\n *\n * An error is thrown if any parameter is outside of percentage range. This added\n * safety is useful for catching bugs. Otherwise, you could just as well call\n * `scale(percentage, 0, 1, outMin, outMax)`.\n *\n * If you want to scale some input range to percentage output range, just use `scale`:\n * ```js\n * // Yields 0.5\n * scale(2.5, 0, 5);\n * ```\n * @param percentage Input value, within percentage range\n * @param outMin Output minimum, between 0-1\n * @param outMax Output maximum, between 0-1\n * @returns Scaled value between outMin-outMax.\n */\nexport const scalePercentages = (percentage, outMin, outMax = 1) => {\n    resultThrow(numberTest(percentage, `percentage`, `v`), numberTest(outMin, `percentage`, `outMin`), numberTest(outMax, `percentage`, `outMax`));\n    return scale(percentage, 0, 1, outMin, outMax);\n};\n/**\n * Scales an input percentage value to an output range\n * If you have an input percentage (0-1), `scalePercent` maps it to an output range of `outMin`-`outMax`.\n * ```js\n * scalePercent(0.5, 10, 20); // 15\n * ```\n *\n * @see {@link scalerPercent} Returns a function\n * @param v Value to scale\n * @param outMin Minimum for output\n * @param outMax Maximum for output\n * @returns\n */\nexport const scalePercent = (v, outMin, outMax) => scalerPercent(outMin, outMax)(v);\n/**\n * Returns a function that scales an input percentage value to an output range\n * @see {@link scalePercent} Calculates value\n * @param outMin\n * @param outMax\n * @returns Function that takes a single argument\n */\nexport const scalerPercent = (outMin, outMax) => {\n    return (v) => {\n        resultThrow(numberTest(v, `percentage`, `v`));\n        return scale(v, 0, 1, outMin, outMax);\n    };\n};\n/**\n * Returns a two-way scaler\n * ```js\n * // Input range 0..100, output range 0..1\n * const s = scalerTwoWay(0,100,0,1);\n *\n * // Scale from input to output\n * s.out(50); // 0.5\n *\n * // Scale from output range to input\n * s.in(1); // 100\n * ```\n * @param inMin\n * @param inMax\n * @param outMin\n * @param outMax\n * @returns\n */\nexport const scalerTwoWay = (inMin, inMax, outMin = 0, outMax = 1, clamped = false, easing) => {\n    const toOut = scaler(inMin, inMax, outMin, outMax, easing, clamped);\n    const toIn = scaler(outMin, outMax, inMin, inMax, easing, clamped);\n    return { out: toOut, in: toIn };\n};\n","/**\n * Calculate the min, max, total, average and count of input array `data`.\n * ```js\n * const { total, min, max, avg, count } = numberArrayCompute([ 1, 2, 3 ]);\n * ```\n * @param data\n * @param opts\n * @returns\n */\nexport const numberArrayCompute = (data, opts = {}) => {\n    if (data.length === 0) {\n        return {\n            total: Number.NaN,\n            min: Number.NaN,\n            max: Number.NaN,\n            avg: Number.NaN,\n            count: Number.NaN\n        };\n    }\n    const nonNumbers = opts.nonNumbers ?? `throw`;\n    let total = 0;\n    let min = Number.MAX_SAFE_INTEGER;\n    let max = Number.MIN_SAFE_INTEGER;\n    let count = 0;\n    for (let index = 0; index < data.length; index++) {\n        let value = data[index];\n        if (typeof value !== `number`) {\n            if (nonNumbers === `ignore`)\n                continue;\n            if (nonNumbers === `throw`)\n                throw new Error(`Param 'data' contains a non-number at index: ${index.toString()}`);\n            if (nonNumbers === `nan`)\n                value = Number.NaN;\n        }\n        if (Number.isNaN(value))\n            continue;\n        min = Math.min(min, value);\n        max = Math.max(max, value);\n        total += value;\n        count++;\n    }\n    return {\n        total, max, min, count,\n        avg: total / count\n    };\n};\n","import { scale } from './scale.js';\nimport { numberTest, resultThrow } from \"@ixfx/guards\";\nimport { clamp } from './clamp.js';\nimport { numberArrayCompute } from './number-array-compute.js';\n/**\n * Normalises numbers, adjusting min/max as new values are processed.\n * Normalised return values will be in the range of 0-1 (inclusive).\n *\n * [ixfx Guide on Normalising](https://ixfx.fun/cleaning/normal/)\n *\n * @example\n * ```js\n * const s = Normalise.stream();\n * s(2);    // 1 (because 2 is highest seen)\n * s(1);    // 0 (because 1 is the lowest so far)\n * s(1.5);  // 0.5 (50% of range 1-2)\n * s(0.5);  // 0 (because it's the new lowest)\n * ```\n *\n * Since normalisation is being adjusted as new min/max are encountered, it might\n * be that value normalised to 1 at one time is different to what normalises to 1\n * at a later time.\n *\n * If you already know what to expect of the number range, passing in `minDefault`\n * and `maxDefault` primes the normalisation.\n * ```js\n * const s = Normalise.stream();\n * s(5); // 1, because it's the highest seen\n *\n * // With priming:\n * const s = Normalise.stream(0, 10);\n * s(5); // 0.5, because we're expecting range 0-10\n * ```\n *\n * If a value exceeds the default range, normalisation adjusts.\n * Errors are thrown if min/max defaults are NaN or if one attempts to\n * normalise NaN.\n * @returns\n */\nexport const stream = (minDefault, maxDefault) => {\n    let min = minDefault ?? Number.MAX_SAFE_INTEGER;\n    let max = maxDefault ?? Number.MIN_SAFE_INTEGER;\n    resultThrow(numberTest(min), numberTest(max));\n    return (v) => {\n        resultThrow(numberTest(v));\n        min = Math.min(min, v);\n        max = Math.max(max, v);\n        return scale(v, min, max);\n    };\n};\n/**\n * Normalises an array. By default uses the actual min/max of the array\n * as the normalisation range. [ixfx Guide on Normalising](https://ixfx.fun/cleaning/normal/)\n *\n * ```js\n * // Yields: [0.5, 0.1, 0.0, 0.9, 1]\n * Normalise.array([5,1,0,9,10]);\n * ```\n *\n * `minForced` and/or `maxForced` can\n * be provided to use an arbitrary range.\n * ```js\n * // Forced range 0-100\n * // Yields: [0.05, 0.01, 0.0, 0.09, 0.10]\n * Normalise.array([5,1,0,9,10], 0, 100);\n * ```\n *\n * Return values are clamped to always be 0-1, inclusive.\n *\n * @param values Values\n * @param minForced If provided, this will be min value used\n * @param maxForced If provided, this will be the max value used\n */\nexport const array = (values, minForced, maxForced) => {\n    if (!Array.isArray(values)) {\n        throw new TypeError(`Param 'values' should be an array. Got: ${typeof values}`);\n    }\n    const mma = numberArrayCompute(values);\n    const min = minForced ?? mma.min;\n    const max = maxForced ?? mma.max;\n    return values.map((v) => clamp(scale(v, min, max)));\n};\n","import { numberTest, resultThrow } from \"@ixfx/guards\";\n/**\n * Scales a percentage-scale number, ie: `v * t`.\n *\n * The utility of this function is that it sanity-checks that\n * both parameters are in the 0..1 scale.\n *\n * Parameters can also be a function that takes no parameters\n * and returns a number. It will be invoked when `proportion` is called.\n * @param v Value\n * @param t Scale amount\n * @returns Scaled value\n */\nexport const proportion = (v, t) => {\n    if (typeof v === `function`)\n        v = v();\n    if (typeof t === `function`)\n        t = t();\n    resultThrow(numberTest(v, `percentage`, `v`), numberTest(t, `percentage`, `t`));\n    return v * t;\n};\n","import { integerTest, numberTest, resultThrow } from \"@ixfx/guards\";\n/**\n * Rounds `v` by `every`. Middle values are rounded up by default.\n *\n * ```js\n * quantiseEvery(11, 10);  // 10\n * quantiseEvery(25, 10);  // 30\n * quantiseEvery(0, 10);   // 0\n * quantiseEvery(4, 10);   // 0\n * quantiseEvery(100, 10); // 100\n * ```\n *\n * Also works with decimals\n * ```js\n * quantiseEvery(1.123, 0.1); // 1.1\n * quantiseEvery(1.21, 0.1);  // 1.2\n * ```\n *\n * @param v Value to quantise\n * @param every Number to quantise to\n * @param middleRoundsUp If _true_ (default), the exact middle rounds up to next step.\n * @returns\n */\nexport const quantiseEvery = (v, every, middleRoundsUp = true) => {\n    const everyString = every.toString();\n    const decimal = everyString.indexOf(`.`);\n    let multiplier = 1;\n    if (decimal >= 0) {\n        const d = everyString.substring(decimal + 1).length;\n        multiplier = 10 * d;\n        every = Math.floor(multiplier * every);\n        v = v * multiplier;\n    }\n    resultThrow(numberTest(v, ``, `v`), integerTest(every, ``, `every`));\n    let div = v / every;\n    const divModule = div % 1;\n    div = Math.floor(div);\n    if ((divModule === 0.5 && middleRoundsUp) || divModule > 0.5)\n        div++;\n    const vv = (every * div) / multiplier;\n    return vv;\n};\n","/**\n * Via: https://gist.github.com/cyphunk/6c255fa05dd30e69f438a930faeb53fe\n * @param logits\n * @returns\n */\nexport const softmax = (logits) => {\n    const maxLogit = logits.reduce((a, b) => Math.max(a, b), Number.NEGATIVE_INFINITY);\n    const scores = logits.map((l) => Math.exp(l - maxLogit));\n    const denom = scores.reduce((a, b) => a + b);\n    return scores.map((s) => s / denom);\n};\n","export * from './apply-to-values.js';\nexport * from './average-weighted.js';\nexport * from './clamp.js';\nexport * from './count.js';\nexport * from './difference.js';\nexport * from './filter.js';\nexport * from './flip.js';\nexport * from './generate.js';\nexport * from './guard.js';\nexport * from './is-approx.js';\nexport * as Bipolar from './bipolar.js';\nexport * from './interpolate.js';\nexport * from './linear-space.js';\nexport * from './moving-average.js';\nexport * as Normalise from './normalise.js';\nexport * from './number-array-compute.js';\nexport * from './numeric-arrays.js';\nexport * from './proportion.js';\nexport * from './quantise.js';\nexport * from './round.js';\nexport * from './scale.js';\nexport * from './softmax.js';\nexport * from './wrap.js';\nexport * from './types.js';\n"],"mappings":"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"}