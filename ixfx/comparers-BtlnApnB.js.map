{"version":3,"file":"comparers-BtlnApnB.js","names":[],"sources":["../../core/dist/src/comparers.js"],"sourcesContent":["import { defaultToString } from \"./to-string.js\";\n/**\n * Sort numbers in ascending order.\n *\n * ```js\n * [10, 4, 5, 0].sort(numericComparer);\n * // Yields: [0, 4, 5, 10]\n * [10, 4, 5, 0].sort(comparerInverse(numericComparer));\n * // Yields: [ 10, 5, 4, 0]\n * ```\n *\n * Returns:\n * * 0: values are equal\n * * negative: `a` should be before `b`\n * * positive: `a` should come after `b`\n * @param a\n * @param b\n * @returns\n */\nexport const numericComparer = (a, b) => {\n    // ✔️ Unit tested\n    if (a === b)\n        return 0;\n    if (a > b)\n        return 1;\n    return -1;\n};\n/**\n * Default sort comparer, following same sematics as Array.sort.\n * Consider using {@link defaultComparer} to get more logical sorting of numbers.\n *\n * Note: numbers are sorted in alphabetical order, eg:\n * ```js\n * [ 10, 20, 5, 100 ].sort(jsComparer); // same as .sort()\n * // Yields: [10, 100, 20, 5]\n * ```\n *\n * Returns -1 if x is less than y\n * Returns 1 if x is greater than y\n * Returns 0 if x is the same as y\n * @param x\n * @param y\n * @returns\n */\nexport const jsComparer = (x, y) => {\n    // ✔️ Unit tested\n    // Via https://stackoverflow.com/questions/47334234/how-to-implement-array-prototype-sort-default-compare-function\n    if (x === undefined && y === undefined)\n        return 0;\n    if (x === undefined)\n        return 1;\n    if (y === undefined)\n        return -1;\n    const xString = defaultToString(x);\n    const yString = defaultToString(y);\n    if (xString < yString)\n        return -1;\n    if (xString > yString)\n        return 1;\n    return 0;\n};\n/**\n * Inverts the source comparer.\n * @param comparer\n * @returns\n */\nexport const comparerInverse = (comparer) => {\n    return (x, y) => {\n        const v = comparer(x, y);\n        return v * -1;\n    };\n};\n/**\n * Compares numbers by numeric value, otherwise uses the default\n * logic of string comparison.\n *\n * Is an ascending sort:\n * * b, a, c -> a, b, c\n * * 10, 5, 100 -> 5, 10, 100\n *\n * Returns -1 if x is less than y\n * Returns 1 if x is greater than y\n * Returns 0 if x is the same as y\n * @param x\n * @param y\n * @see {@link comparerInverse} Inverted order\n * @returns\n */\nexport const defaultComparer = (x, y) => {\n    if (typeof x === `number` && typeof y === `number`) {\n        return numericComparer(x, y);\n    }\n    return jsComparer(x, y);\n};\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAmBA,MAAa,kBAAkB,CAAC,GAAG,MAAM;AAErC,KAAI,MAAM,EACN,QAAO;AACX,KAAI,IAAI,EACJ,QAAO;AACX,QAAO;AACV;;;;;;;;;;;;;;;;;;AAkBD,MAAa,aAAa,CAAC,GAAG,MAAM;AAGhC,KAAI,MAAM,UAAa,MAAM,OACzB,QAAO;AACX,KAAI,MAAM,OACN,QAAO;AACX,KAAI,MAAM,OACN,QAAO;CACX,MAAM,UAAU,gBAAgB,EAAE;CAClC,MAAM,UAAU,gBAAgB,EAAE;AAClC,KAAI,UAAU,QACV,QAAO;AACX,KAAI,UAAU,QACV,QAAO;AACX,QAAO;AACV;;;;;;AAMD,MAAa,kBAAkB,CAAC,aAAa;AACzC,QAAO,CAAC,GAAG,MAAM;EACb,MAAM,IAAI,SAAS,GAAG,EAAE;AACxB,SAAO,IAAI;CACd;AACJ;;;;;;;;;;;;;;;;;AAiBD,MAAa,kBAAkB,CAAC,GAAG,MAAM;AACrC,KAAI,OAAO,MAAM,CAAC,MAAM,CAAC,IAAI,OAAO,MAAM,CAAC,MAAM,CAAC,CAC9C,QAAO,gBAAgB,GAAG,EAAE;AAEhC,QAAO,WAAW,GAAG,EAAE;AAC1B"}