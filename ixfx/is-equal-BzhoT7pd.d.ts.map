{"version":3,"file":"is-equal-BzhoT7pd.d.ts","names":["IsEqual","T","toStringOrdered","isEqualDefault","isEqualValueDefault","isEqualValuePartial","Record","isEqualValueIgnoreOrder","isEmptyEntries","IsEqualContext","V","isEqualContextString"],"sources":["../../core/dist/src/is-equal.d.ts"],"sourcesContent":["/**\n * Function that returns true if `a` and `b` are considered equal\n */\nexport type IsEqual<T> = (a: T, b: T) => boolean;\n/**\n * If input is a string, it is returned.\n * Otherwise, it returns the result of JSON.stringify() with fields ordered.\n *\n * This allows for more consistent comparisons when object field orders are different but values the same.\n * @param itemToMakeStringFor\n * @returns\n */\nexport declare const toStringOrdered: (itemToMakeStringFor: unknown) => string;\n/**\n * Default comparer function is equiv to checking `a === b`.\n * Use {@link isEqualValueDefault} to compare by value, via comparing JSON string representation.\n */\nexport declare const isEqualDefault: <T>(a: T, b: T) => boolean;\n/**\n * Comparer returns true if string representation of `a` and `b` are equal.\n * Use {@link isEqualDefault} to compare using === semantics\n * Uses `toStringDefault` to generate a string representation (via `JSON.stringify`).\n *\n * Returns _false_ if the ordering of fields is different, even though values are identical:\n * ```js\n * isEqualValueDefault({ a: 10, b: 20}, { b: 20, a: 10 }); // false\n * ```\n *\n * Use {@link isEqualValueIgnoreOrder} to ignore order (with an overhead of additional processing).\n * ```js\n * isEqualValueIgnoreOrder({ a: 10, b: 20}, { b: 20, a: 10 }); // true\n * ```\n *\n * Use {@link isEqualValuePartial} to partially match `b` against `a`.\n * @returns True if the contents of `a` and `b` are equal\n */\nexport declare const isEqualValueDefault: <T>(a: T, b: T) => boolean;\n/**\n * Returns _true_ if `a` contains the values of `b`. `a` may contain other values, but we\n * only check against what is in `b`. `a` and `b` must both be simple objects.\n *\n * ```js\n * const obj = {\n *  name: `Elle`,\n *  size: 100,\n *  colour: {\n *    red: 0.5,\n *    green: 0.1,\n *    blue: 0.2\n *  }\n * }\n *\n * isEqualValuePartial(obj, { name: `Elle` }); // true\n * isEqualValuePartial(obj, { name: { colour: red: { 0.5, green: 0.1  }} }); // true\n *\n * isEqualValuePartial(obj, { name: `Ellen` });     // false\n * isEqualValuePartial(obj, { lastname: `Elle` });  // false\n * ```\n * @param a\n * @param b\n * @param fieldComparer\n * @returns\n */\nexport declare const isEqualValuePartial: (a: Record<string, unknown>, b: Record<string, unknown>, fieldComparer?: IsEqual<unknown>) => boolean;\n/**\n * Comparer returns true if string representation of `a` and `b` are equal, regardless of field ordering.\n * Uses `toStringOrdered` to generate a string representation (via JSON.stringify`).\n *\n * ```js\n * isEqualValueIgnoreOrder({ a: 10, b: 20}, { b: 20, a: 10 }); // true\n * isEqualValue({ a: 10, b: 20}, { b: 20, a: 10 }); // false, fields are different order\n * ```\n *\n * There is an overhead to ordering fields. Use {@link isEqualValueDefault} if it's not possible that field ordering will change.\n * @returns True if the contents of `a` and `b` are equal\n * @typeParam T - Type of objects being compared\n */\nexport declare const isEqualValueIgnoreOrder: <T>(a: T, b: T) => boolean;\n/**\n * Returns _true_ if Object.entries() is empty for `value`\n * @param value\n * @returns\n */\nexport declare const isEmptyEntries: (value: object) => boolean;\n/**\n * Return _true_ if `a` and `b` ought to be considered equal\n * at a given path\n */\nexport type IsEqualContext<V> = (a: V, b: V | undefined, path: string) => boolean;\n/**\n * Returns _true_ if `a` and `b` are equal based on their JSON representations.\n * `path` is ignored.\n * @param a\n * @param b\n * @param path\n * @returns\n */\nexport declare const isEqualContextString: IsEqualContext<unknown>;\n//# sourceMappingURL=is-equal.d.ts.map"],"mappings":";;AAGA;;AAA6BC,KAAjBD,OAAiBC,CAAAA,CAAAA,CAAAA,GAAAA,CAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAMA,CAANA,EAAAA,GAAAA,OAAAA;;AAAO;AASpC;AAKA;;;;AAAmD;AAmB9BG,cAxBAF,eAwB+C,EAAA,CAAA,mBAAA,EAAA,OAAA,EAAA,GAAA,MAAA;;;;AAAZ;AA2BnCG,cA9CAF,cA8C0H,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,EA9CnGF,CA8CmG,EAAA,CAAA,EA9C7FA,CA8C6F,EAAA,GAAA,OAAA;;;;;AAArB;AAc1H;;;;AAA4D;AAM5D;AAKA;;;;AAA2C;AAS3C;;cA7DqBG,4BAA4BH,MAAMA;;;;;;;;;;;;;;;;;;;;;;;;;;;cA2BlCI,yBAAyBC,4BAA4BA,yCAAyCN;;;;;;;;;;;;;;cAc9FO,gCAAgCN,MAAMA;;;;;;cAMtCO;;;;;KAKTC,wBAAwBC,MAAMA;;;;;;;;;cASrBC,sBAAsBF"}