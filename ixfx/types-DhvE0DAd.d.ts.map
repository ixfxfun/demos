{"version":3,"file":"types-DhvE0DAd.d.ts","names":["NumbersComputeResult","NumbersComputeOptions","Readonly","NumberScaler","NumberScalerTwoWay","BipolarWrapper","Symbol","toPrimitive"],"sources":["../../numbers/dist/src/types.d.ts"],"sourcesContent":["export type NumbersComputeResult = {\n    /**\n     * Tally of number of items\n     */\n    readonly count: number;\n    /**\n     * Smallest value in array\n     */\n    readonly min: number;\n    /**\n     * Total of all items\n     */\n    readonly total: number;\n    /**\n     * Largest value in array\n     */\n    readonly max: number;\n    /**\n     * Average value in array\n     */\n    readonly avg: number;\n};\nexport type NumbersComputeOptions = Readonly<{\n    /**\n     * Start index, inclusive\n     */\n    /**\n     * End index, exclusive\n     */\n    nonNumbers?: `throw` | `ignore` | `nan`;\n}>;\nexport type NumberScaler = (v: number) => number;\nexport type NumberScalerTwoWay = {\n    out: NumberScaler;\n    in: NumberScaler;\n};\n/**\n * Wrapper around a bipolar value. Immutable.\n *\n * ```js\n * let b = Bipolar.immutable();\n * let b = Bipolar.immutable(0.5);\n * b = b.add(0.1);\n * ```\n */\nexport type BipolarWrapper = {\n    value: number;\n    towardZero: (amt: number) => BipolarWrapper;\n    add: (amt: number) => BipolarWrapper;\n    multiply: (amt: number) => BipolarWrapper;\n    inverse: () => BipolarWrapper;\n    asScalar: () => number;\n    interpolate: (amt: number, b: number) => BipolarWrapper;\n    [Symbol.toPrimitive]: (hint: string) => number | string | boolean;\n};\n//# sourceMappingURL=types.d.ts.map"],"mappings":";KAAYA,oBAAAA;EAAAA;AAsBZ;;;;;;;;;;;;;;;;;;;;KAAYC,qBAAAA,GAAwBC"}