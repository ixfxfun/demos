{"version":3,"file":"index.d.ts","names":["Similarity","V","AlignOpts","DataWithId","align","alignById","defaultKeyer","V","Since","elapsedSince","elapsedInterval","elapsedOnce","elapsedInfinity","filterValue","V","IsEqual","isEqualTrace","T","isInteger","Primitive","PrimitiveOrObject","isPrimitive","isPrimitiveOrObject","compareIterableValuesShallow","V","Iterable","Interval","intervalToMs","isInterval","elapsedToHumanString","isMap","Map","isSet","Set","toStringDefault","V","defaultToString","ToString","TrackUnique","T","unique","uniqueInstances","runningiOS","promiseFromEvent","EventTarget","Promise","Reactive","ReactiveInitial","isReactive","V","hasLast","ReactiveNonInitial","ResolveToValue","ResolvedObject","Record","T","K","Promise","ReturnType","Awaited","V","Generator","AsyncGenerator","IterableIterator","AsyncIterableIterator","resolveFields","resolveFieldsSync","ArrayLengthMutationKeys","ArrayItems","T","TItems","FixedLengthArray","Exclude","Pick","IterableIterator","Symbol","iterator"],"sources":["../../core/dist/src/trackers/index.d.ts","../../core/dist/src/correlate.d.ts","../../core/dist/src/default-keyer.d.ts","../../core/dist/src/elapsed.d.ts","../../core/dist/src/filters.d.ts","../../core/dist/src/is-equal-test.d.ts","../../core/dist/src/is-integer.d.ts","../../core/dist/src/is-primitive.d.ts","../../core/dist/src/iterable-compare-values-shallow.d.ts","../../core/dist/src/interval-type.d.ts","../../core/dist/src/to-string.d.ts","../../core/dist/src/track-unique.d.ts","../../core/dist/src/platform.d.ts","../../core/dist/src/promise-from-event.d.ts","../../core/dist/src/reactive-core.d.ts","../../core/dist/src/resolve-fields.d.ts","../../core/dist/src/types-array.d.ts"],"sourcesContent":["export {};\n//# sourceMappingURL=index.d.ts.map","/**\n * Returns the similarity of `a` and `b` to each other,\n * where higher similarity should be a higher number.\n * @param a\n * @param b\n */\nexport type Similarity<V> = (a: V, b: V) => number;\n/**\n * Options for alignmnent\n */\nexport type AlignOpts = {\n    /**\n     * If the similarity score is above this threshold,\n     * consider them the same\n     */\n    readonly matchThreshold?: number;\n    /**\n     * If true, additional console messages are printed during\n     * execution.\n     */\n    readonly debug?: boolean;\n};\n/**\n * Some data with an id property.\n */\nexport type DataWithId<V> = V & {\n    readonly id: string;\n};\n/**\n * Attempts to align prior data with new data, based on a provided similarity function.\n *\n * See also `alignById` for a version which encloses parameters.\n *\n * ```js\n * // Compare data based on x,y distance\n * const fn = (a, b) => {\n *  return 1-Points.distance(a, b);\n * }\n * const lastData = [\n *  { id:`1`, x:100, y:200 }\n *  ...\n * ]\n * const newData = [\n *  { id:`2`, x:101, y:200 }\n * ]\n * const aligned = Correlate.align(fn, lastdata, newData, opts);\n *\n * // Result:\n * [\n *  { id:`1`, x:101, y:200 }\n * ]\n * ```\n * @param similarityFunction Function to compute similarity\n * @param lastData Old data\n * @param newData New data\n * @param options Options\n * @returns\n */\nexport declare const align: <V>(similarityFunction: Similarity<V>, lastData: readonly DataWithId<V>[] | undefined, newData: readonly DataWithId<V>[], options?: AlignOpts) => readonly DataWithId<V>[];\n/**\n * Returns a function that attempts to align a series of data by its id.\n * See also {@link align} for a version with no internal storage.\n *\n * ```js\n * // Compare data based on x,y distance\n * const fn = (a, b) => {\n *  return 1-Points.distance(a, b);\n * }\n * const aligner = Correlate.alignById(fn, opts);\n *\n * const lastData = [\n *  { id:`1`, x:100, y:200 }\n *  ...\n * ]\n * const aligned = aligner(lastData);\n *\n * ```\n * @param fn Function to compute similarity\n * @param options Options\n * @returns\n */\nexport declare const alignById: <V>(fn: Similarity<V>, options?: AlignOpts) => (newData: DataWithId<V>[]) => DataWithId<V>[];\n//# sourceMappingURL=correlate.d.ts.map","/**\n * If values are strings, uses that as the key.\n * Otherwise uses `JSON.stringify`.\n * @param a\n * @returns\n */\nexport declare const defaultKeyer: <V>(a: V) => string;\n//# sourceMappingURL=default-keyer.d.ts.map","export type Since = () => number;\n/**\n * Returns elapsed time since the initial call.\n *\n * ```js\n * // Record start\n * const elapsed = elapsedSince();\n *\n * // Get elapsed time in millis\n * // since Elapsed.since()\n * elapsed(); // Yields number\n * ```\n *\n * If you want to initialise a stopwatch, but not yet start it, consider:\n * ```js\n * // Init\n * let state = {\n *  clicked: Stopwatch.infinity()\n * };\n *\n * state.click(); // Returns a giant value\n *\n * // Later, when click happens:\n * state = { click: elapsedSince() }\n * ```\n *\n * See also:\n * * {@link elapsedOnce} if you want to measure a single period, and stop it.\n * * {@link elapsedInterval} time _between_ calls\n * @returns\n */\nexport declare const elapsedSince: () => Since;\n/**\n * Returns the interval between the start and each subsequent call.\n *\n * ```js\n * const interval = elapsedInterval();\n * interval(); // Time from elapsedInterval()\n * interval(); // Time since last interval() call\n * ```\n *\n * See also:\n * * {@link elapsedSince}: time since first call\n * * {@link elapsedOnce}: time between two events\n * @returns\n */\nexport declare const elapsedInterval: () => Since;\n/**\n * Returns elapsed time since initial call, however\n * unlike {@link elapsedSince}, timer stops when first invoked.\n *\n * ```js\n * const elapsed = elapsedOnce();\n * // ...do stuff\n * elapsed(); // Yields time since elapsedOnce() was called\n * // ...do more stuff\n * elapsed(); // Is still the same number as above\n * ```\n *\n * See also:\n * * {@link elapsedSince}: elapsed time\n * * {@link elapsedInterval}: time _between_ calls\n * @returns\n */\nexport declare const elapsedOnce: () => Since;\n/**\n * Returns a function that reports an 'infinite' elapsed time.\n * this can be useful as an initialiser for `elapsedSince` et al.\n *\n * ```js\n * // Init clicked to be an infinite time\n * let clicked = elapsedInfinity();\n *\n * document.addEventListener('click', () => {\n *  // Now that click has happened, we can assign it properly\n *  clicked = Stopwatch.since();\n * });\n * ```\n * @returns\n */\nexport declare const elapsedInfinity: () => Since;\n//# sourceMappingURL=elapsed.d.ts.map","/**\n * Returns `v` if `predicate` returns _true_,\n * alternatively returning `skipValue`.\n *\n * ```js\n * // Return true if value is less than 10\n * const p = v => v < 10;\n *\n * filterValue(5, p, 0);   // 5\n * filterValue(20, p, 0);  // 0\n * ```\n * @param v Value to test\n * @param predicate Predicate\n * @param skipValue Value to return if predicate returns false\n * @returns Input value if predicate is _true_, or `skipValue` if not.\n */\nexport declare const filterValue: <V>(v: V, predicate: (v: V) => boolean, skipValue: V | undefined) => V | undefined;\n//# sourceMappingURL=filters.d.ts.map","import type { IsEqual } from \"./is-equal.js\";\n/**\n * Wraps the `eq` function, tracing the input data result\n * ```js\n * // Init trace\n * const traceEq = isEqualTrace(isEqualValueDefault);\n * // Use it in some function that takes IsEqual<T>\n * compare(a, b, eq);\n * ```\n * @param eq\n * @returns\n */\nexport declare const isEqualTrace: <T>(eq: IsEqual<T>) => IsEqual<T>;\n//# sourceMappingURL=is-equal-test.d.ts.map","/**\n * Returns _true_ if `value` is an integer. Parses string input, but\n * all other data types return _false_.\n *\n * ```js\n * isInteger(1);      // true\n * isInteger(1.1);    // false\n * isInteger(`1`);    // true\n * isInteger(`1.1`);  // false\n * isInteger(true);   // false\n * isInteger(false);  // false\n * ```\n *\n * Returns _false_ for _undefined_, NaN, booleans and infinite numbers.\n * @param value\n * @returns\n */\nexport declare const isInteger: (value: string | number) => boolean;\n//# sourceMappingURL=is-integer.d.ts.map","import type { Primitive, PrimitiveOrObject } from \"./types.js\";\n/**\n * Returns _true_ if `value` is number, string, bigint or boolean.\n * Returns _false_ if `value` is an object, null, undefined\n *\n * Use {@link isPrimitiveOrObject} to also return true if `value` is an object.\n * @param value Value to check\n * @returns _True_ if value is number, string, bigint or boolean.\n */\nexport declare function isPrimitive(value: any): value is Primitive;\n/**\n * Returns _true_ if `value` is number, string, bigint, boolean or an object\n *\n * Use {@link isPrimitive} to not include objects.\n * @param value\n * @returns\n */\nexport declare function isPrimitiveOrObject(value: any): value is PrimitiveOrObject;\n//# sourceMappingURL=is-primitive.d.ts.map","/**\n * Compares the values of two iterables, returning a list\n * of items they have in common and those unique in `a` or `b`.\n * Ignores ordering of values, and is NOT recursive.\n *\n * ```js\n * const a = ['apples', 'oranges', 'pears' ]\n * const b = ['pears', 'kiwis', 'bananas' ];\n *\n * const r = compareValuesShallow(a, b);\n * r.shared;  // [ 'pears' ]\n * r.a;       // [ 'apples', 'oranges' ]\n * r.b;       // [ 'kiwis', 'bananas' ]\n * ```\n *\n * By default uses === semantics for comparison.\n * @param a\n * @param b\n * @param eq\n * @returns\n */\nexport declare const compareIterableValuesShallow: <V>(a: Iterable<V>, b: Iterable<V>, eq?: (a: V, b: V) => boolean) => {\n    shared: V[];\n    isSame: boolean;\n    a: V[];\n    b: V[];\n};\n//# sourceMappingURL=iterable-compare-values-shallow.d.ts.map","import type { Interval } from './types.js';\n/**\n * Return the millisecond value of an Interval.\n *\n * ```js\n * intervalToMs(100); // 100\n * intervalToMs({ millis: 100 }); // 100\n * ```\n *\n * Use `defaultNumber` to return a default in the case of\n * _undefined_ or invalid input.\n *\n * ```js\n * intervalToMs(undefined);      // throws error\n * intervalToMs(undefined, 100); // 100\n * ```\n *\n * If no default is provided, an exception is thrown.\n * @param interval Interval\n * @param defaultNumber Default value if `interval` is _undefined_ or invalid\n * @returns Milliseconds\n */\nexport declare function intervalToMs(interval: Interval | undefined, defaultNumber?: number): number;\n/**\n * Returns _true_ if `interval` matches the {@link Interval} type.\n * @param interval\n * @returns _True_ if `interval` is an {@link Interval}.\n */\nexport declare function isInterval(interval: number | Interval | undefined): interval is Interval;\n/**\n * Returns a human-readable representation\n * of some elapsed milliseconds\n *\n * @example\n * ```js\n * elapsedToHumanString(10);      // `10ms`\n * elapsedToHumanString(2000);    // `2s`\n * elapsedToHumanString(65*1000); // `1mins`\n * ```\n * @param millisOrFunction Milliseconds as a number, {@link Interval} or function that resolve to a number\n * @param rounding Rounding (default: 2)\n * @returns\n */\nexport declare const elapsedToHumanString: (millisOrFunction: number | (() => number) | Interval, rounding?: number) => string;\n//# sourceMappingURL=interval-type.d.ts.map","/**\n * Returns _true_ if `value` is a Map type\n * @param value\n * @returns\n */\nexport declare const isMap: (value: unknown) => value is Map<any, any>;\n/**\n * Returns _true_ if `value` is a Set type\n * @param value\n * @returns\n */\nexport declare const isSet: (value: unknown) => value is Set<any>;\n/**\n * A default converter to string that uses JSON.stringify if its an object, or the thing itself if it's a string\n */\nexport declare const toStringDefault: <V>(itemToMakeStringFor: V) => string;\n/**\n * Converts a value to string form.\n * For simple objects, .toString() is used, other JSON.stringify is used.\n * It is meant for creating debugging output or 'hash' versions of objects, and does\n * not necessarily maintain full fidelity of the input\n * @param value\n * @returns\n */\nexport declare const defaultToString: (value: null | boolean | string | object) => string;\n//# sourceMappingURL=to-string.d.ts.map","import { type ToString } from \"@ixfx/core\";\nexport type TrackUnique<T> = (value: T) => boolean;\n/**\n * Tracks unique values. Returns _true_ if value is unique.\n * Alternatively: {@link uniqueInstances}\n *\n * ```js\n * const t = unique();\n * t(`hello`); // true\n * t(`hello`); // false\n * ```\n *\n * Uses JSON.stringify to compare anything which is not a string.\n *\n * Provide a custom function to convert to string to track uniqueness\n * for more complicated objects.\n *\n * ```js\n * const t = unique(p => p.name);\n * t({ name:`John`, level:2 }); // true\n *\n * // Since we're judging uniques by name only\n * t({ name:`John`, level:3 }); // false\n * ```\n *\n * Return function throws an error if `value` is null or undefined.\n * @returns\n */\nexport declare const unique: <T>(toString?: ToString<T>) => TrackUnique<T>;\n/**\n * Tracks unique object instances. Returns _true_ if value is unique.\n * Alternatively: {@link unique} to track by value.\n */\nexport declare const uniqueInstances: <T>() => TrackUnique<T>;\n//# sourceMappingURL=track-unique.d.ts.map","/**\n * Returns _true_ if it seems like the code is running on iOS (iPad/iPhone)\n * @returns\n */\nexport declare const runningiOS: () => boolean;\n//# sourceMappingURL=platform.d.ts.map","export declare const promiseFromEvent: (target: EventTarget, name: string) => Promise<any>;\n//# sourceMappingURL=promise-from-event.d.ts.map","import type { Reactive, ReactiveInitial } from \"./types-reactive.js\";\n/**\n * Returns _true_ if `rx` is a Reactive\n * @param rx\n * @returns\n */\nexport declare const isReactive: <V>(rx: object) => rx is Reactive<V>;\n/**\n * Returns _true_ if `rx` has a last value\n *\n * Judged seeing if `.last()` exists on `rx`.\n * @param rx Reactive\n * @returns\n */\nexport declare const hasLast: <V>(rx: object) => rx is ReactiveInitial<V>;\n//# sourceMappingURL=reactive-core.d.ts.map","import { type ReactiveNonInitial, type ResolveToValue } from \"@ixfx/core\";\n/**\n * An object that can be 'resolved'.\n * @see {@link resolveFields}\n */\nexport type ResolvedObject<T extends Record<string, ResolveToValue<any>>> = {\n    [K in keyof T]: T[K] extends number ? number : T[K] extends string ? string : T[K] extends boolean ? boolean : T[K] extends bigint ? bigint : T[K] extends () => Promise<any> ? Awaited<ReturnType<T[K]>> : T[K] extends () => any ? ReturnType<T[K]> : T[K] extends ReactiveNonInitial<infer V> ? V : T[K] extends Generator<infer V> ? V : T[K] extends AsyncGenerator<infer V> ? V : T[K] extends IterableIterator<infer V> ? V : T[K] extends AsyncIterableIterator<infer V> ? V : T[K] extends (infer V)[] ? V : T[K] extends object ? T[K] : never;\n};\n/**\n * Returns a copy of `object`, with the same properties. For each property\n * that has a basic value (string, number, boolean, object), the value is set\n * for the return object. If the property is a function or generator, its value\n * is used instead. Async functions and generators are also usable.\n *\n * Use {@link resolveFieldsSync} for a synchronous version.\n *\n * Not recursive.\n *\n * In the below example, the function for the property `random` is invoked.\n * ```js\n * const state = {\n *  length: 10,\n *  random: () => Math.random();\n * }\n * const x = resolveFields(state);\n * // { length: 10, random: 0.1235 }\n * ```\n *\n * It also works with generators. Probably best with those that are infinite.\n *\n * ```js\n * import { count } from './numbers.js';\n *\n * const state = {\n *  length: 10,\n *  index: count(2) // Generator that yields: 0, 1 and then ends\n * }\n * resolveFields(state); // { length: 10, index: 0 }\n * resolveFields(state); // { length: 10, index: 1 }\n * // Generator finishes after counting twice:\n * resolveFields(state); // { length: 10, index: undefined }\n * ```\n * @param object\n * @returns\n */\nexport declare function resolveFields<T extends Record<string, ResolveToValue<any>>>(object: T): Promise<ResolvedObject<T>>;\n/**\n * 'Resolves' all the fields of `object` in a synchronous manner.\n * Uses {@link resolveSync} under-the-hood\n * @param object\n * @returns\n */\nexport declare function resolveFieldsSync<T extends Record<string, ResolveToValue<any>>>(object: T): ResolvedObject<T>;\n/**\n * Returns a function that resolves `object`.\n *\n * Use {@link resolveFields} to resolve an object directly.\n * @param object\n * @returns\n */\n//# sourceMappingURL=resolve-fields.d.ts.map","/**\n * Functions which modify an array\n */\nexport type ArrayLengthMutationKeys = `splice` | `push` | `pop` | `shift` | `unshift` | number;\n/**\n * Array items\n */\nexport type ArrayItems<T extends any[]> = T extends (infer TItems)[] ? TItems : never;\n/**\n * A fixed-length array\n */\nexport type FixedLengthArray<T extends any[]> = Pick<T, Exclude<keyof T, ArrayLengthMutationKeys>> & {\n    [Symbol.iterator]: () => IterableIterator<ArrayItems<T>>;\n};\n//# sourceMappingURL=types-array.d.ts.map"],"mappings":"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"}