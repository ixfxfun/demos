{"version":3,"file":"index.d.ts","names":["Similarity","V","AlignOpts","DataWithId","align","alignById","defaultKeyer","V","Since","elapsedSince","elapsedInterval","elapsedOnce","elapsedInfinity","filterValue","V","IsEqual","isEqualTrace","T","isInteger","Primitive","PrimitiveOrObject","isPrimitive","isPrimitiveOrObject","compareIterableValuesShallow","V","Iterable","Interval","intervalToMs","isInterval","elapsedToHumanString","isMap","Map","isSet","Set","toStringDefault","V","defaultToString","ToString","TrackUnique","T","unique","uniqueInstances","runningiOS","promiseFromEvent","EventTarget","Promise","Reactive","ReactiveInitial","isReactive","V","hasLast","ReactiveNonInitial","ResolveToValue","ResolvedObject","Record","T","K","Promise","ReturnType","Awaited","V","Generator","AsyncGenerator","IterableIterator","AsyncIterableIterator","resolveFields","resolveFieldsSync","ArrayLengthMutationKeys","ArrayItems","T","TItems","FixedLengthArray","Exclude","Pick","IterableIterator","Symbol","iterator","cycle","T","atWrap","V","chunks","V","contains","V","ArrayLike","containsDuplicateValues","Iterable","containsDuplicateInstances","ensureLength","V","IsEqual","T","isEqualDefault","isEqualValueDefault","isEqualValuePartial","Record","isEmptyEntries","IsEqualContext","V","isEqualContextString","IsEqual","isEqual","V","containsIdenticalValues","filterAB","V","filterBetween","Generator","flatten","ReadonlyArray","Array","mapWithEmptyFallback","TValue","TReturn","frequencyByGroup","TValue","TGroup","Map","groupBy","V","Iterable","K","Map","uniqueDeep","V","unique","V_1","insertAt","V","interleave","V","IsEqual","intersection","V","MergeReconcile","V","IsEqual","MergeReconcile","mergeByKey","V","pairwise","T","Generator","pairwiseReduce","V","X","shuffle","V","randomElement","ArrayLike","randomIndex","remove","V","sample","V","ArrayLike","sortByNumericProperty","V","K","sortByProperty","until","V","Generator","A","IsEqual","withoutUndefined","V","without","zip","Interval","WithEvents","IteratorControllerOptions","T","IterableIterator","Readonly","IteratorControllerState","ToArrayOptions","ForEachOptions","Interval","IsEqual","SleepOpts","ForEachOptions","ToArrayOptions","fromArray","V","AsyncGenerator","fromIterable","Iterable","AsyncIterable","chunks","concat","Awaited","dropWhile","until","Promise","repeat","T","AbortSignal","equals","every","fill","filter","find","flatten","forEach","Partial","last","map","X","max","min","reduce","asCallback","slice","withDelay","nextWithTimeout","AsyncIterableIterator","IterableIterator","IteratorResult","some","toArray","unique","uniqueByValue","Set","zip","slice","V","Iterable","Generator","reduce","V","Iterable","ToString","IsEqual","ToArrayOptions","slice","reduce","uniqueByValue","T","Iterable","Set","Generator","asCallback","V","yieldNumber","first","last","chunksOverlapping","chunks","concat","dropWhile","until","next","equals","IterableIterator","every","fill","forEach","filter","find","flatten","map","X","max","min","some","repeat","AbortSignal","unique","zip","fromIterable","toArray","Partial","fromArray","Interval","RankFunction","RankOptions","RankArrayOptions","SyncOptions","CombineLatestOptions","Gen","V","Generator","AsyncGenerator","IterableIterator","GenOrData","Link","In","Out","GenFactoryNoInput","LinksWithSource","Links","DelayOptions","TickOptions","LazyChain","Promise","Partial","GenValueTypeObject","Record","T","K","AsyncIterableIterator","ReturnType","Link","QueryOptions","HTMLElement","CreateOptions","In","ElementWithValue","T","perValue","Partial","query","Interval","RankFunction","RankOptions","RankArrayOptions","Link","DelayOptions","transform","In","Out","take","reduce","duration","delay","debounce","tally","min","max","rank","Partial","rankArray","average","sum","chunk","filter","drop","Interval","GenFactoryNoInput","array","Out","GenFactoryNoInput","event","EventTarget","Out","GenFactoryNoInput","func","Out","Promise","GenFactoryNoInput","iterable","Out","Iterable","AsyncIterable","GenFactoryNoInput","TickOptions","timestamp","GenFactoryNoInput","addToArray","Out","AsyncGenerator","Promise","GenFactoryNoInput","ToArrayOptions","asArray","Out","AsyncGenerator","Partial","Promise","GenFactoryNoInput","GenOrData","asCallback","V","Promise","GenFactoryNoInput","asPromise","V","AsyncGenerator","Promise","GenFactoryNoInput","asValue","V","AsyncGenerator","GenOrData","GenFactoryNoInput","CombineLatestOptions","combineLatestToArray","Partial","AsyncGenerator","GenOrData","GenFactoryNoInput","CombineLatestOptions","GenValueTypeObject","combineLatestToObject","Record","T","Partial","AsyncGenerator","LazyChain","lazy","In","Out","GenFactoryNoInput","GenOrData","mergeFlat","Out","AsyncGenerator","GenFactoryNoInput","GenOrData","Links","prepare","In","Out","AsyncGenerator","LinksWithSource","GenOrData","GenFactoryNoInput","Link","runN","In","Out","AsyncGenerator","run","T1","T2","T3","T4","T5","T6","T7","Link","single","In","Out","Promise","GenOrData","GenFactoryNoInput","SyncOptions","syncToArray","Partial","AsyncGenerator","GenOrData","GenFactoryNoInput","Gen","isGenFactoryNoInput","Out","resolveToGen","V","resolveToAsyncGen","AsyncGenerator","Dom","Links","From","IsEqual","maxScore","V","Iterable","minScore","hasEqualValuesShallow","IteratorControllerState","IteratorControllerOptions","IteratorController","iteratorController","T","WithEvents","fromEvent","AsyncIterator","isAsyncIterable","AsyncIterable","isIterable","Iterable","NumbersComputeOptions","NumbersComputeResult","numbersCompute","Iterable","computeAverage","Async","Sync","Chains","combineLatestToArray","combineLatestToObject","Interval","ForEachOptions","ToArrayOptions","min","V","AsyncIterable","AsyncGenerator","Iterable","Generator","max","dropWhile","until","Promise","chunks","filter","fill","concat","find","forEach","T","Partial","map","X","fromArray","flatten","some","last","reduce","slice","unique","uniqueByValue","Set","toArray","every","equals","IterableIterator","zip","fromIterable","fromFunction","fromFunctionAwaited","Awaited","asCallback","Codec","TextEncoder","TextDecoder","ArrayBufferLike","Uint8Array","AllowSharedBufferSource","StringReceiveBuffer","WritableStream","Promise","Interval","QueueMutable","Continuously","Opts","StringWriteBuffer","WritableStream","Promise","genericStateTransitionsInstance","Readonly","StateChangeEvent","Transitions","genericStateTransitionsInstance","IoDataEvent","IoEvents","StateMachineTransitions","GenericStateTransitions","Readonly","BleDeviceOptions","FrameProcessorSources","SimpleEventEmitter","StateMachineWithEvents","Codec","StringReceiveBuffer","StringWriteBuffer","BleDeviceOptions","GenericStateTransitions","IoEvents","BleDevice","BluetoothRemoteGATTCharacteristic","BluetoothRemoteGATTServer","BluetoothDevice","Promise","BleDevice","defaultOpts","Opts","NordicBleDevice","BluetoothDevice","AudioAnalyser","Point","AudioVisualiser","HTMLElement","HTMLCanvasElement","MouseEvent","PointerEvent","AudioVisualiser","Opts","DataAnalyser","AnalyserNode","AudioAnalyser","analyserBasic","Float32Array","analyserFrequency","analyserPeakLevel","AudioContext","AudioOscillatorOptions","OscillatorType","BasicAudio","AudioContext","StereoPannerNode","GainNode","BiquadFilterNode","BasicAudioElement","HTMLMediaElement","BasicAudioOscillator","OscillatorNode","BasicAudioElement","AudioElements","BiquadFilterType","createFromAudioElement","HTMLMediaElement","AudioOscillatorOptions","BasicAudioOscillator","createOscillator","Partial","MidiCommands","MidiMessage","NoteMidiMessage","MidiMessage","sendNote","MIDIOutput","DOMHighResTimeStamp","unpack","Uint8Array","pack","SimpleEventEmitter","MidiMessage","NoteMidiMessage","MidiManagerState","MidiManagerEvents","MIDIPort","MIDIInput","Uint8Array","MidiManager","Generator","MIDIOutput","Promise","DOMHighResTimeStamp","MidiCommands","MidiMessage","SimpleEventEmitter","ControlEvents","Control","Feedback","MIDIOutput","Partial","MIDIPort","SimpleEventEmitter","MidiMessage","MidiFighterEvents","MidiFighter","MidiFighterEncoder","MidiFighterState","MidiFighterEncoderEvents","MIDIPort","Generator","MIDIOutput","MIDIInput","ParsedNote","getParsedNotes","noteNameToNumber","noteNameToFrequency","noteNumberToName","noteNumberToFrequency","EvalOpts","Options","NordicBleDevice","EspruinoBleDevice","BluetoothDevice","Promise","SimpleEventEmitter","StateMachineWithEvents","StateChangeEvent","Codec","StringReceiveBuffer","StringWriteBuffer","GenericStateTransitions","JsonDeviceOpts","JsonDataEvent","JsonDeviceEvents","JsonDevice","Promise","JsonDeviceOpts","JsonDevice","SerialOpts","SerialPortFilter","Device","SerialPort","WritableStreamDefaultWriter","AbortController","Promise","JsonDeviceEvents","JsonDataEvent","EvalOpts","Device","SerialDevice","SerialOpts","EspruinoSerialDeviceOpts","EspruinoSerialDevice","Promise","ISimpleEventEmitter","EspruinoBleDevice","EspruinoSerialDevice","GenericStateTransitions","IoEvents","EspruinoSerialDeviceOpts","EspruinoStates","Options","EvalOpts","EspruinoBleOpts","BluetoothLEScanFilter","puck","Promise","bangle","serial","connectBle","Events","EspruinoDevice","deviceEval","Rect","dumpDevices","Promise","Constraints","StartResult","HTMLVideoElement","start","StartResult","HTMLVideoElement","start","File","Promise","Video","Camera","FrameProcessorOpts","CanvasRenderingContext2D","Constraints","HTMLCanvasElement","FrameProcessor","ManualCapturer","Promise","File","ImageData","Interval","ReconnectingWebsocket","ArrayBufferLike","ArrayBufferView","Blob","Promise","ReconnectingWebsocketStates","ReconnectingOptions","reconnectingWebsocket","URL","Partial","Bluetooth","Audio","Midi","StringReceiveBuffer","StringWriteBuffer","Opts","StringWriteBufferOpts","Codec","Espruino","Camera","VideoFile","FrameProcessor","FrameProcessorOpts","Serial","Interval","Rx","browserResizeObservable","Element","Readonly","ResizeObserverEntry","Reactive","windowResize","cssClassChange","HTMLElement","MutationRecord","_ixfx_rx0","Reactive","ReactiveInitial","ReactiveNonInitial","ReactiveWritable","HslScalar","ReactiveColour","colour","Reactive","EventSourceOptions","DomBindValueTarget","ElementBind","ElementsOptions","HTMLElement","Record","DomBindTargetNode","DomBindTargetNodeResolved","DomBindUnresolvedSource","TSource","TDestination","DomBindSourceValue","DomBindResolvedSource","DomBindInputOptions","BindUpdateOpts","V","DomCreateOptions","PipeDomBinding","DomValueOptions","DomFormOptions","T","DomNumberInputValueOptions","ReactiveInitial","ReactiveWritable","Reactive","DomFormOptions","DomNumberInputValueOptions","DomValueOptions","Colour","domNumberInputValue","HTMLInputElement","Partial","domHslInputValue","HslScalar","domInputValue","domForm","Record","HTMLFormElement","T","Pathed","Rx","ElementsOptions","PipeDomBinding","BindUpdateOpts","DomBindSourceValue","DomBindValueTarget","DomBindUnresolvedSource","fromDomQuery","HTMLElement","Reactive","ObjectFieldHandler","PathDataChange","_ixfx_core0","RecursivePartial","bindText","TSource","Partial","bindValueText","HTMLInputElement","bindHtml","bindElement","TDestination","bind","bindUpdate","V","bindDiffUpdate","ReactiveDiff","elements","T","ReactiveInitial","win","Event","RxUi"],"sources":["../../core/dist/src/correlate.d.ts","../../core/dist/src/default-keyer.d.ts","../../core/dist/src/elapsed.d.ts","../../core/dist/src/filters.d.ts","../../core/dist/src/is-equal-test.d.ts","../../core/dist/src/is-integer.d.ts","../../core/dist/src/is-primitive.d.ts","../../core/dist/src/iterable-compare-values-shallow.d.ts","../../core/dist/src/interval-type.d.ts","../../core/dist/src/to-string.d.ts","../../core/dist/src/track-unique.d.ts","../../core/dist/src/platform.d.ts","../../core/dist/src/promise-from-event.d.ts","../../core/dist/src/reactive-core.d.ts","../../core/dist/src/resolve-fields.d.ts","../../core/dist/src/types-array.d.ts","../../arrays/dist/src/cycle.d.ts","../../arrays/dist/src/at-wrap.d.ts","../../arrays/dist/src/chunks.d.ts","../../arrays/dist/src/contains.d.ts","../../arrays/dist/src/ensure-length.d.ts","../../arrays/dist/src/util/is-equal.d.ts","../../arrays/dist/src/equality.d.ts","../../arrays/dist/src/filter.d.ts","../../arrays/dist/src/flatten.d.ts","../../arrays/dist/src/for-each.d.ts","../../arrays/dist/src/frequency.d.ts","../../arrays/dist/src/group-by.d.ts","../../arrays/dist/src/unique.d.ts","../../arrays/dist/src/insert-at.d.ts","../../arrays/dist/src/interleave.d.ts","../../arrays/dist/src/intersection.d.ts","../../arrays/dist/src/types.d.ts","../../arrays/dist/src/merge-by-key.d.ts","../../arrays/dist/src/pairwise.d.ts","../../arrays/dist/src/random.d.ts","../../arrays/dist/src/remove.d.ts","../../arrays/dist/src/sample.d.ts","../../arrays/dist/src/sort.d.ts","../../arrays/dist/src/until.d.ts","../../arrays/dist/src/without.d.ts","../../arrays/dist/src/zip.d.ts","../../arrays/dist/src/index.d.ts","../../iterables/dist/src/types.d.ts","../../iterables/dist/src/async.d.ts","../../iterables/dist/src/sync/slice.d.ts","../../iterables/dist/src/sync/reduce.d.ts","../../iterables/dist/src/sync.d.ts","../../iterables/dist/src/chain/types.d.ts","../../iterables/dist/src/chain/dom.d.ts","../../iterables/dist/src/chain/links.d.ts","../../iterables/dist/src/chain/from/array.d.ts","../../iterables/dist/src/chain/from/event.d.ts","../../iterables/dist/src/chain/from/function.d.ts","../../iterables/dist/src/chain/from/iterable.d.ts","../../iterables/dist/src/chain/from/ticks.d.ts","../../iterables/dist/src/chain/from/index.d.ts","../../iterables/dist/src/chain/add-to-array.d.ts","../../iterables/dist/src/chain/as-array.d.ts","../../iterables/dist/src/chain/as-callback.d.ts","../../iterables/dist/src/chain/as-promise.d.ts","../../iterables/dist/src/chain/as-value.d.ts","../../iterables/dist/src/chain/combine-latest-to-array.d.ts","../../iterables/dist/src/chain/combine-latest-to-object.d.ts","../../iterables/dist/src/chain/lazy.d.ts","../../iterables/dist/src/chain/merge-flat.d.ts","../../iterables/dist/src/chain/prepare.d.ts","../../iterables/dist/src/chain/run.d.ts","../../iterables/dist/src/chain/single.d.ts","../../iterables/dist/src/chain/sync.d.ts","../../iterables/dist/src/chain/utility.d.ts","../../iterables/dist/src/chain/index.d.ts","../../iterables/dist/src/compare-values.d.ts","../../iterables/dist/src/controller.d.ts","../../iterables/dist/src/from-event.d.ts","../../iterables/dist/src/guard.d.ts","../../iterables/dist/src/numbers-compute.d.ts","../../iterables/dist/src/index.d.ts","../../io/dist/src/codec.d.ts","../../io/dist/src/string-receive-buffer.d.ts","../../io/dist/src/string-write-buffer.d.ts","../../io/dist/src/generic-state-transitions.d.ts","../../io/dist/src/types.d.ts","../../io/dist/src/ble-device.d.ts","../../io/dist/src/nordic-ble-device.d.ts","../../io/dist/src/audio/visualiser.d.ts","../../io/dist/src/audio/analyser.d.ts","../../io/dist/src/audio/types.d.ts","../../io/dist/src/audio/from-audio-element.d.ts","../../io/dist/src/audio/from-oscillator.d.ts","../../io/dist/src/audio/index.d.ts","../../io/dist/src/midi/types.d.ts","../../io/dist/src/midi/midi-fns.d.ts","../../io/dist/src/midi/manager.d.ts","../../io/dist/src/midi/control.d.ts","../../io/dist/src/midi/midi-fighter.d.ts","../../io/dist/src/midi/notes.d.ts","../../io/dist/src/midi/index.d.ts","../../io/dist/src/espruino-ble-device.d.ts","../../io/dist/src/json-device.d.ts","../../io/dist/src/serial.d.ts","../../io/dist/src/espruino-serial-device.d.ts","../../io/dist/src/espruino.d.ts","../../io/dist/src/camera.d.ts","../../io/dist/src/video-file.d.ts","../../io/dist/src/frame-processor.d.ts","../../io/dist/src/reconnecting-web-socket.d.ts","../../io/dist/src/index.d.ts","../../ui/dist/src/rx/browser-resize.d.ts","../../ui/dist/src/rx/browser-theme-change.d.ts","../../ui/dist/src/rx/colour.d.ts","../../ui/dist/src/rx/dom-types.d.ts","../../ui/dist/src/rx/dom-source.d.ts","../../ui/dist/src/rx/dom.d.ts","../../ui/dist/src/rx/index.d.ts","../../ui/dist/src/index.d.ts"],"sourcesContent":["/**\n * Returns the similarity of `a` and `b` to each other,\n * where higher similarity should be a higher number.\n * @param a\n * @param b\n */\nexport type Similarity<V> = (a: V, b: V) => number;\n/**\n * Options for alignmnent\n */\nexport type AlignOpts = {\n    /**\n     * If the similarity score is above this threshold,\n     * consider them the same\n     */\n    readonly matchThreshold?: number;\n    /**\n     * If true, additional console messages are printed during\n     * execution.\n     */\n    readonly debug?: boolean;\n};\n/**\n * Some data with an id property.\n */\nexport type DataWithId<V> = V & {\n    readonly id: string;\n};\n/**\n * Attempts to align prior data with new data, based on a provided similarity function.\n *\n * See also `alignById` for a version which encloses parameters.\n *\n * ```js\n * // Compare data based on x,y distance\n * const fn = (a, b) => {\n *  return 1-Points.distance(a, b);\n * }\n * const lastData = [\n *  { id:`1`, x:100, y:200 }\n *  ...\n * ]\n * const newData = [\n *  { id:`2`, x:101, y:200 }\n * ]\n * const aligned = Correlate.align(fn, lastdata, newData, opts);\n *\n * // Result:\n * [\n *  { id:`1`, x:101, y:200 }\n * ]\n * ```\n * @param similarityFunction Function to compute similarity\n * @param lastData Old data\n * @param newData New data\n * @param options Options\n * @returns\n */\nexport declare const align: <V>(similarityFunction: Similarity<V>, lastData: readonly DataWithId<V>[] | undefined, newData: readonly DataWithId<V>[], options?: AlignOpts) => readonly DataWithId<V>[];\n/**\n * Returns a function that attempts to align a series of data by its id.\n * See also {@link align} for a version with no internal storage.\n *\n * ```js\n * // Compare data based on x,y distance\n * const fn = (a, b) => {\n *  return 1-Points.distance(a, b);\n * }\n * const aligner = Correlate.alignById(fn, opts);\n *\n * const lastData = [\n *  { id:`1`, x:100, y:200 }\n *  ...\n * ]\n * const aligned = aligner(lastData);\n *\n * ```\n * @param fn Function to compute similarity\n * @param options Options\n * @returns\n */\nexport declare const alignById: <V>(fn: Similarity<V>, options?: AlignOpts) => (newData: DataWithId<V>[]) => DataWithId<V>[];\n//# sourceMappingURL=correlate.d.ts.map","/**\n * If values are strings, uses that as the key.\n * Otherwise uses `JSON.stringify`.\n * @param a\n * @returns\n */\nexport declare const defaultKeyer: <V>(a: V) => string;\n//# sourceMappingURL=default-keyer.d.ts.map","export type Since = () => number;\n/**\n * Returns elapsed time since the initial call.\n *\n * ```js\n * // Record start\n * const elapsed = elapsedSince();\n *\n * // Get elapsed time in millis\n * // since Elapsed.since()\n * elapsed(); // Yields number\n * ```\n *\n * If you want to initialise a stopwatch, but not yet start it, consider:\n * ```js\n * // Init\n * let state = {\n *  clicked: Stopwatch.infinity()\n * };\n *\n * state.click(); // Returns a giant value\n *\n * // Later, when click happens:\n * state = { click: elapsedSince() }\n * ```\n *\n * See also:\n * * {@link elapsedOnce} if you want to measure a single period, and stop it.\n * * {@link elapsedInterval} time _between_ calls\n * @returns\n */\nexport declare const elapsedSince: () => Since;\n/**\n * Returns the interval between the start and each subsequent call.\n *\n * ```js\n * const interval = elapsedInterval();\n * interval(); // Time from elapsedInterval()\n * interval(); // Time since last interval() call\n * ```\n *\n * See also:\n * * {@link elapsedSince}: time since first call\n * * {@link elapsedOnce}: time between two events\n * @returns\n */\nexport declare const elapsedInterval: () => Since;\n/**\n * Returns elapsed time since initial call, however\n * unlike {@link elapsedSince}, timer stops when first invoked.\n *\n * ```js\n * const elapsed = elapsedOnce();\n * // ...do stuff\n * elapsed(); // Yields time since elapsedOnce() was called\n * // ...do more stuff\n * elapsed(); // Is still the same number as above\n * ```\n *\n * See also:\n * * {@link elapsedSince}: elapsed time\n * * {@link elapsedInterval}: time _between_ calls\n * @returns\n */\nexport declare const elapsedOnce: () => Since;\n/**\n * Returns a function that reports an 'infinite' elapsed time.\n * this can be useful as an initialiser for `elapsedSince` et al.\n *\n * ```js\n * // Init clicked to be an infinite time\n * let clicked = elapsedInfinity();\n *\n * document.addEventListener('click', () => {\n *  // Now that click has happened, we can assign it properly\n *  clicked = Stopwatch.since();\n * });\n * ```\n * @returns\n */\nexport declare const elapsedInfinity: () => Since;\n//# sourceMappingURL=elapsed.d.ts.map","/**\n * Returns `v` if `predicate` returns _true_,\n * alternatively returning `skipValue`.\n *\n * ```js\n * // Return true if value is less than 10\n * const p = v => v < 10;\n *\n * filterValue(5, p, 0);   // 5\n * filterValue(20, p, 0);  // 0\n * ```\n * @param v Value to test\n * @param predicate Predicate\n * @param skipValue Value to return if predicate returns false\n * @returns Input value if predicate is _true_, or `skipValue` if not.\n */\nexport declare const filterValue: <V>(v: V, predicate: (v: V) => boolean, skipValue: V | undefined) => V | undefined;\n//# sourceMappingURL=filters.d.ts.map","import type { IsEqual } from \"./is-equal.js\";\n/**\n * Wraps the `eq` function, tracing the input data result\n * ```js\n * // Init trace\n * const traceEq = isEqualTrace(isEqualValueDefault);\n * // Use it in some function that takes IsEqual<T>\n * compare(a, b, eq);\n * ```\n * @param eq\n * @returns\n */\nexport declare const isEqualTrace: <T>(eq: IsEqual<T>) => IsEqual<T>;\n//# sourceMappingURL=is-equal-test.d.ts.map","/**\n * Returns _true_ if `value` is an integer. Parses string input, but\n * all other data types return _false_.\n *\n * ```js\n * isInteger(1);      // true\n * isInteger(1.1);    // false\n * isInteger(`1`);    // true\n * isInteger(`1.1`);  // false\n * isInteger(true);   // false\n * isInteger(false);  // false\n * ```\n *\n * Returns _false_ for _undefined_, NaN, booleans and infinite numbers.\n * @param value\n * @returns\n */\nexport declare const isInteger: (value: string | number) => boolean;\n//# sourceMappingURL=is-integer.d.ts.map","import type { Primitive, PrimitiveOrObject } from \"./types.js\";\n/**\n * Returns _true_ if `value` is number, string, bigint or boolean.\n * Returns _false_ if `value` is an object, null, undefined\n *\n * Use {@link isPrimitiveOrObject} to also return true if `value` is an object.\n * @param value Value to check\n * @returns _True_ if value is number, string, bigint or boolean.\n */\nexport declare function isPrimitive(value: any): value is Primitive;\n/**\n * Returns _true_ if `value` is number, string, bigint, boolean or an object\n *\n * Use {@link isPrimitive} to not include objects.\n * @param value\n * @returns\n */\nexport declare function isPrimitiveOrObject(value: any): value is PrimitiveOrObject;\n//# sourceMappingURL=is-primitive.d.ts.map","/**\n * Compares the values of two iterables, returning a list\n * of items they have in common and those unique in `a` or `b`.\n * Ignores ordering of values, and is NOT recursive.\n *\n * ```js\n * const a = ['apples', 'oranges', 'pears' ]\n * const b = ['pears', 'kiwis', 'bananas' ];\n *\n * const r = compareValuesShallow(a, b);\n * r.shared;  // [ 'pears' ]\n * r.a;       // [ 'apples', 'oranges' ]\n * r.b;       // [ 'kiwis', 'bananas' ]\n * ```\n *\n * By default uses === semantics for comparison.\n * @param a\n * @param b\n * @param eq\n * @returns\n */\nexport declare const compareIterableValuesShallow: <V>(a: Iterable<V>, b: Iterable<V>, eq?: (a: V, b: V) => boolean) => {\n    shared: V[];\n    isSame: boolean;\n    a: V[];\n    b: V[];\n};\n//# sourceMappingURL=iterable-compare-values-shallow.d.ts.map","import type { Interval } from './types.js';\n/**\n * Return the millisecond value of an Interval.\n *\n * ```js\n * intervalToMs(100); // 100\n * intervalToMs({ millis: 100 }); // 100\n * ```\n *\n * Use `defaultNumber` to return a default in the case of\n * _undefined_ or invalid input.\n *\n * ```js\n * intervalToMs(undefined);      // throws error\n * intervalToMs(undefined, 100); // 100\n * ```\n *\n * If no default is provided, an exception is thrown.\n * @param interval Interval\n * @param defaultNumber Default value if `interval` is _undefined_ or invalid\n * @returns Milliseconds\n */\nexport declare function intervalToMs(interval: Interval | undefined, defaultNumber?: number): number;\n/**\n * Returns _true_ if `interval` matches the {@link Interval} type.\n * @param interval\n * @returns _True_ if `interval` is an {@link Interval}.\n */\nexport declare function isInterval(interval: number | Interval | undefined): interval is Interval;\n/**\n * Returns a human-readable representation\n * of some elapsed milliseconds\n *\n * @example\n * ```js\n * elapsedToHumanString(10);      // `10ms`\n * elapsedToHumanString(2000);    // `2s`\n * elapsedToHumanString(65*1000); // `1mins`\n * ```\n * @param millisOrFunction Milliseconds as a number, {@link Interval} or function that resolve to a number\n * @param rounding Rounding (default: 2)\n * @returns\n */\nexport declare const elapsedToHumanString: (millisOrFunction: number | (() => number) | Interval, rounding?: number) => string;\n//# sourceMappingURL=interval-type.d.ts.map","/**\n * Returns _true_ if `value` is a Map type\n * @param value\n * @returns\n */\nexport declare const isMap: (value: unknown) => value is Map<any, any>;\n/**\n * Returns _true_ if `value` is a Set type\n * @param value\n * @returns\n */\nexport declare const isSet: (value: unknown) => value is Set<any>;\n/**\n * A default converter to string that uses JSON.stringify if its an object, or the thing itself if it's a string\n */\nexport declare const toStringDefault: <V>(itemToMakeStringFor: V) => string;\n/**\n * Converts a value to string form.\n * For simple objects, .toString() is used, other JSON.stringify is used.\n * It is meant for creating debugging output or 'hash' versions of objects, and does\n * not necessarily maintain full fidelity of the input\n * @param value\n * @returns\n */\nexport declare const defaultToString: (value: null | boolean | string | object) => string;\n//# sourceMappingURL=to-string.d.ts.map","import { type ToString } from \"@ixfx/core\";\nexport type TrackUnique<T> = (value: T) => boolean;\n/**\n * Tracks unique values. Returns _true_ if value is unique.\n * Alternatively: {@link uniqueInstances}\n *\n * ```js\n * const t = unique();\n * t(`hello`); // true\n * t(`hello`); // false\n * ```\n *\n * Uses JSON.stringify to compare anything which is not a string.\n *\n * Provide a custom function to convert to string to track uniqueness\n * for more complicated objects.\n *\n * ```js\n * const t = unique(p => p.name);\n * t({ name:`John`, level:2 }); // true\n *\n * // Since we're judging uniques by name only\n * t({ name:`John`, level:3 }); // false\n * ```\n *\n * Return function throws an error if `value` is null or undefined.\n * @returns\n */\nexport declare const unique: <T>(toString?: ToString<T>) => TrackUnique<T>;\n/**\n * Tracks unique object instances. Returns _true_ if value is unique.\n * Alternatively: {@link unique} to track by value.\n */\nexport declare const uniqueInstances: <T>() => TrackUnique<T>;\n//# sourceMappingURL=track-unique.d.ts.map","/**\n * Returns _true_ if it seems like the code is running on iOS (iPad/iPhone)\n * @returns\n */\nexport declare const runningiOS: () => boolean;\n//# sourceMappingURL=platform.d.ts.map","export declare const promiseFromEvent: (target: EventTarget, name: string) => Promise<any>;\n//# sourceMappingURL=promise-from-event.d.ts.map","import type { Reactive, ReactiveInitial } from \"./types-reactive.js\";\n/**\n * Returns _true_ if `rx` is a Reactive\n * @param rx\n * @returns\n */\nexport declare const isReactive: <V>(rx: object) => rx is Reactive<V>;\n/**\n * Returns _true_ if `rx` has a last value\n *\n * Judged seeing if `.last()` exists on `rx`.\n * @param rx Reactive\n * @returns\n */\nexport declare const hasLast: <V>(rx: object) => rx is ReactiveInitial<V>;\n//# sourceMappingURL=reactive-core.d.ts.map","import { type ReactiveNonInitial, type ResolveToValue } from \"@ixfx/core\";\n/**\n * An object that can be 'resolved'.\n * @see {@link resolveFields}\n */\nexport type ResolvedObject<T extends Record<string, ResolveToValue<any>>> = {\n    [K in keyof T]: T[K] extends number ? number : T[K] extends string ? string : T[K] extends boolean ? boolean : T[K] extends bigint ? bigint : T[K] extends () => Promise<any> ? Awaited<ReturnType<T[K]>> : T[K] extends () => any ? ReturnType<T[K]> : T[K] extends ReactiveNonInitial<infer V> ? V : T[K] extends Generator<infer V> ? V : T[K] extends AsyncGenerator<infer V> ? V : T[K] extends IterableIterator<infer V> ? V : T[K] extends AsyncIterableIterator<infer V> ? V : T[K] extends (infer V)[] ? V : T[K] extends object ? T[K] : never;\n};\n/**\n * Returns a copy of `object`, with the same properties. For each property\n * that has a basic value (string, number, boolean, object), the value is set\n * for the return object. If the property is a function or generator, its value\n * is used instead. Async functions and generators are also usable.\n *\n * Use {@link resolveFieldsSync} for a synchronous version.\n *\n * Not recursive.\n *\n * In the below example, the function for the property `random` is invoked.\n * ```js\n * const state = {\n *  length: 10,\n *  random: () => Math.random();\n * }\n * const x = resolveFields(state);\n * // { length: 10, random: 0.1235 }\n * ```\n *\n * It also works with generators. Probably best with those that are infinite.\n *\n * ```js\n * import { count } from './numbers.js';\n *\n * const state = {\n *  length: 10,\n *  index: count(2) // Generator that yields: 0, 1 and then ends\n * }\n * resolveFields(state); // { length: 10, index: 0 }\n * resolveFields(state); // { length: 10, index: 1 }\n * // Generator finishes after counting twice:\n * resolveFields(state); // { length: 10, index: undefined }\n * ```\n * @param object\n * @returns\n */\nexport declare function resolveFields<T extends Record<string, ResolveToValue<any>>>(object: T): Promise<ResolvedObject<T>>;\n/**\n * 'Resolves' all the fields of `object` in a synchronous manner.\n * Uses {@link resolveSync} under-the-hood\n * @param object\n * @returns\n */\nexport declare function resolveFieldsSync<T extends Record<string, ResolveToValue<any>>>(object: T): ResolvedObject<T>;\n/**\n * Returns a function that resolves `object`.\n *\n * Use {@link resolveFields} to resolve an object directly.\n * @param object\n * @returns\n */\n//# sourceMappingURL=resolve-fields.d.ts.map","/**\n * Functions which modify an array\n */\nexport type ArrayLengthMutationKeys = `splice` | `push` | `pop` | `shift` | `unshift` | number;\n/**\n * Array items\n */\nexport type ArrayItems<T extends any[]> = T extends (infer TItems)[] ? TItems : never;\n/**\n * A fixed-length array\n */\nexport type FixedLengthArray<T extends any[]> = Pick<T, Exclude<keyof T, ArrayLengthMutationKeys>> & {\n    [Symbol.iterator]: () => IterableIterator<ArrayItems<T>>;\n};\n//# sourceMappingURL=types-array.d.ts.map","/**\n * Returns a function that cycles through the contents of an array. By default starts at index 0.\n *\n * ```js\n * const c = arrayCycle([`apples`, `oranges`, `pears`]);\n * c.current; // `apples`\n * c.next();  // `oranges`\n * c.next();  // `pears`\n * c.next();  // `apples`\n * c.prev();  // `pears`\n * ```\n *\n * You can select an item by index or value:\n * ```\n * c.select(1); // `oranges`\n * c.select(`pears`); // `pears`\n * ```\n *\n * Other features:\n * ```js\n * c.current;   // Current value\n * c.toArray(); // Copy of array being cycled over\n * ```\n *\n * Additional info:\n * * Selecting by value uses === semantics.\n * * Works with a copy of input array\n * @param options Array to cycle over\n * @returns\n */\nexport declare const cycle: <T>(options: readonly T[] | T[]) => {\n    toArray: () => T[];\n    next: () => T;\n    prev: () => T;\n    readonly current: T;\n    select: (indexOrValue: number | T) => void;\n};\n//# sourceMappingURL=cycle.d.ts.map","/**\n * Similar to Javascript's in-built Array.at function, but allows offsets\n * to wrap.\n *\n * @remarks\n * ```js\n * const test = [1,2,3,4,5,6];\n * atWrap(0);   // 1\n * atWrap(-1);  // 6\n * atWrap(-6);  // 1\n * ```\n *\n * These values would return _undefined_ using Array.at since its beyond\n * the length of the array\n * ```js\n * atWrap(6);   // 1\n * atWrap(-7);  // 6\n * ```\n * @param array Array\n * @param index Index\n * @returns\n */\nexport declare const atWrap: <V>(array: V[], index: number) => V;\n//# sourceMappingURL=at-wrap.d.ts.map","/**\n * Return `array` broken up into chunks of `size` values\n *\n * ```js\n * chunks([1,2,3,4,5,6,7,8,9,10], 3);\n * // Yields: [[1, 2, 3], [4, 5, 6], [7, 8, 9], [10]]\n * ```\n * @param array\n * @param size\n * @returns\n */\nexport declare function chunks<V>(array: readonly V[], size: number): V[][];\n//# sourceMappingURL=chunks.d.ts.map","/**\n * Returns _true_ if all value in `needles` is contained in `haystack`.\n *\n * ```js\n * const a = ['apples','oranges','pears','mandarins'];\n * const b = ['pears', 'apples'];\n * contains(a, b); // True\n *\n * const c = ['pears', 'bananas'];\n * contains(a, b); // False ('bananas' does not exist in a)\n * ```\n *\n * If `needles` is empty, `contains` will return true.\n * @param haystack Array to search\n * @param needles Things to look for\n * @param eq\n */\nexport declare const contains: <V>(haystack: ArrayLike<V>, needles: ArrayLike<V>, eq?: (a: V, b: V) => boolean) => boolean;\n/**\n * Returns _true_ if array contains duplicate values.\n *\n * ```js\n * containsDuplicateValues(['a','b','a']); // True\n * containsDuplicateValues([\n *  { name: 'Apple' },\n *  { name: 'Apple' }\n * ]); // True\n * ```\n *\n * Uses JSON.toString() by default to compare values.\n *\n * See also:\n * * {@link unique}: Get unique set of values in an array\n * * {@link containsDuplicateInstances}: Compare based on reference, rather than value\n * * {@link containsDuplicateValues}: Returns _true_ if every item in array is the same\n * @param data Array to examine\n * @param keyFunction Function to generate key string for object, uses JSON.stringify by default.\n * @returns\n */\nexport declare const containsDuplicateValues: <V>(data: Iterable<V>, keyFunction?: (itemToMakeStringFor: V) => string) => boolean;\n/**\n * Returns _true_ if array contains duplicate instances based on `===` equality checking\n * Use {@link containsDuplicateValues} if you'd rather compare by value.\n * @param array\n * @returns\n */\nexport declare const containsDuplicateInstances: <V>(array: V[] | readonly V[]) => boolean;\n//# sourceMappingURL=contains.d.ts.map","export declare function ensureLength<V>(data: readonly V[] | V[], length: number, expand: `repeat` | `first` | `last`): (V)[];\nexport declare function ensureLength<V>(data: readonly V[] | V[], length: number, expand?: `undefined`): (V | undefined)[];\n//# sourceMappingURL=ensure-length.d.ts.map","/**\n * Function that returns true if `a` and `b` are considered equal\n */\nexport type IsEqual<T> = (a: T, b: T) => boolean;\n/**\n * If input is a string, it is returned.\n * Otherwise, it returns the result of JSON.stringify() with fields ordered.\n *\n * This allows for more consistent comparisons when object field orders are different but values the same.\n * @param itemToMakeStringFor\n * @returns\n */\n/**\n * Default comparer function is equiv to checking `a === b`.\n * Use {@link isEqualValueDefault} to compare by value, via comparing JSON string representation.\n */\nexport declare const isEqualDefault: <T>(a: T, b: T) => boolean;\n/**\n * Comparer returns true if string representation of `a` and `b` are equal.\n * Use {@link isEqualDefault} to compare using === semantics\n * Uses `toStringDefault` to generate a string representation (via `JSON.stringify`).\n *\n * Returns _false_ if the ordering of fields is different, even though values are identical:\n * ```js\n * isEqualValueDefault({ a: 10, b: 20}, { b: 20, a: 10 }); // false\n * ```\n *\n * Use {@link isEqualValueIgnoreOrder} to ignore order (with an overhead of additional processing).\n * ```js\n * isEqualValueIgnoreOrder({ a: 10, b: 20}, { b: 20, a: 10 }); // true\n * ```\n *\n * Use {@link isEqualValuePartial} to partially match `b` against `a`.\n * @returns True if the contents of `a` and `b` are equal\n */\nexport declare const isEqualValueDefault: <T>(a: T, b: T) => boolean;\n/**\n * Returns _true_ if `a` contains the values of `b`. `a` may contain other values, but we\n * only check against what is in `b`. `a` and `b` must both be simple objects.\n *\n * ```js\n * const obj = {\n *  name: `Elle`,\n *  size: 100,\n *  colour: {\n *    red: 0.5,\n *    green: 0.1,\n *    blue: 0.2\n *  }\n * }\n *\n * isEqualValuePartial(obj, { name: `Elle` }); // true\n * isEqualValuePartial(obj, { name: { colour: red: { 0.5, green: 0.1  }} }); // true\n *\n * isEqualValuePartial(obj, { name: `Ellen` });     // false\n * isEqualValuePartial(obj, { lastname: `Elle` });  // false\n * ```\n * @param a\n * @param b\n * @param fieldComparer\n * @returns\n */\nexport declare const isEqualValuePartial: (a: Record<string, unknown>, b: Record<string, unknown>, fieldComparer?: IsEqual<unknown>) => boolean;\n/**\n * Comparer returns true if string representation of `a` and `b` are equal, regardless of field ordering.\n * Uses `toStringOrdered` to generate a string representation (via JSON.stringify`).\n *\n * ```js\n * isEqualValueIgnoreOrder({ a: 10, b: 20}, { b: 20, a: 10 }); // true\n * isEqualValue({ a: 10, b: 20}, { b: 20, a: 10 }); // false, fields are different order\n * ```\n *\n * There is an overhead to ordering fields. Use {@link isEqualValueDefault} if it's not possible that field ordering will change.\n * @returns True if the contents of `a` and `b` are equal\n * @typeParam T - Type of objects being compared\n */\n/**\n * Returns _true_ if Object.entries() is empty for `value`\n * @param value\n * @returns\n */\nexport declare const isEmptyEntries: (value: object) => boolean;\n/**\n * Return _true_ if `a` and `b` ought to be considered equal\n * at a given path\n */\nexport type IsEqualContext<V> = (a: V, b: V | undefined, path: string) => boolean;\n/**\n * Returns _true_ if `a` and `b` are equal based on their JSON representations.\n * `path` parameter is ignored.\n * @param a\n * @param b\n * @param path\n * @returns\n */\nexport declare const isEqualContextString: IsEqualContext<unknown>;\n//# sourceMappingURL=is-equal.d.ts.map","import { type IsEqual } from \"./util/is-equal.js\";\n/**\n * Returns _true_ if the two arrays have the same items at same indexes.\n *\n * Returns _false_ if arrays are of different length.\n * By default uses === semantics for equality checking.\n *\n * ```js\n * isEqual([ 1, 2, 3], [ 1, 2, 3 ]); // true\n * isEqual([ 1, 2, 3], [ 3, 2, 1 ]); // false\n * ```\n *\n * Compare by value\n * ```js\n * isEqual(a, b, isEqualValueDefault);\n * ```\n *\n * Custom compare, eg based on `name` field:\n * ```js\n * isEqual(a, b, (compareA, compareB) => compareA.name === compareB.name);\n * ```\n * @param arrayA\n * @param arrayB\n * @param equality Function to compare values\n */\nexport declare const isEqual: <V>(arrayA: V[], arrayB: V[], equality?: (a: V, b: V) => boolean) => boolean;\n/**\n * Returns _true_ if all values in the array are the same. Uses value-based equality checking by default.\n *\n * @example Using default equality function\n * ```js\n * const a1 = [ 10, 10, 10 ];\n * containsIdenticalValues(a1); // True\n *\n * const a2 = [ { name:`Jane` }, { name:`John` } ];\n * containsIdenticalValues(a2); // True, even though object references are different\n * ```\n *\n * If we want to compare by value for objects that aren't readily\n * converted to JSON, you need to provide a function:\n *\n * ```js\n * containsIdenticalValues(someArray, (a, b) => {\n *  return (a.eventType === b.eventType);\n * });\n * ```\n *\n * Returns _true_ if `array` is empty.\n * @param array Array\n * @param equality Equality checker. Uses string-conversion checking by default\n * @returns\n */\nexport declare const containsIdenticalValues: <V>(array: readonly V[] | V[], equality?: IsEqual<V>) => boolean;\n//# sourceMappingURL=equality.d.ts.map","/**\n * Returns two separate arrays of everything that `filter` returns _true_,\n * and everything it returns _false_ on.\n *\n * Same idea as the in-built Array.filter, but that only returns values for one case.\n *\n * ```js\n * const [ matching, nonMatching ] = filterAB(data, v => v.enabled);\n * // `matching` is a list of items from `data` where .enabled is true\n * // `nonMatching` is a list of items from `data` where .enabled is false\n * ```\n * @param data Array of data to filter\n * @param filter Function which returns _true_ to add items to the A list, or _false_ for items to add to the B list\n * @returns Array of two elements. The first is items that match `filter`, the second is items that do not.\n */\nexport declare const filterAB: <V>(data: readonly V[], filter: (a: V) => boolean) => [a: V[], b: V[]];\n/**\n * Yields elements from `array` that match a given `predicate`, and moreover are between\n * the given `startIndex` (inclusive) and `endIndex` (exclusive).\n *\n * While this can be done with in the in-built `array.filter` function, it will\n * needlessly iterate through the whole array. It also avoids another alternative\n * of slicing the array before using `filter`.\n *\n * ```js\n * // Return 'registered' people between and including array indexes 5-10\n * const filtered = [...filterBetween(people, person => person.registered, 5, 10)];\n * ```\n * @param array Array to filter\n * @param predicate Filter function\n * @param startIndex Start index (defaults to 0)\n * @param endIndex End index (by default runs until end)\n */\nexport declare function filterBetween<V>(array: readonly V[] | V[], predicate: (value: V, index: number, array: readonly V[] | V[]) => boolean, startIndex?: number, endIndex?: number): Generator<V>;\n//# sourceMappingURL=filter.d.ts.map","/**\n * Returns a 'flattened' copy of array, un-nesting arrays one level\n * ```js\n * flatten([1, [2, 3], [[4]] ]);\n * // Yields: [ 1, 2, 3, [4]];\n * ```\n * @param array\n * @returns\n */\nexport declare const flatten: (array: ReadonlyArray<any> | Array<any>) => Array<any>;\n//# sourceMappingURL=flatten.d.ts.map","/**\n * Returns the array.map() output, or a value if `array`\n * is not an array or empty.\n *\n * ```js\n * mapWithEmptyFallback([1,2,3], v => v+2, 100); // Yields: [3,4,5]\n * mapWithEmptyFallback([], v=>v+2, 100); // Yields: [100]\n * mapWithEmptyFallback({}, v=>v+2, [100]); // Yields: [100]\n * ```\n *\n * If the fallback value is an array, it is returned as an\n * array if needed. If it's a single value, it is wrapped as an array.\n * @param array Array of values\n * @param fn Function to use for mapping values\n * @param fallback Fallback single value or array of values\n * @returns\n */\nexport declare const mapWithEmptyFallback: <TValue, TReturn>(array: TValue[], fn: (value: TValue) => TReturn, fallback: TReturn | TReturn[]) => TReturn[];\n//# sourceMappingURL=for-each.d.ts.map","/**\n * Computes the frequency of values by a grouping function.\n *\n * ```js\n * const data = [1,2,3,4,5,6,7,8,9,10];\n * // Returns 'odd' or 'even' for an input value\n *\n * const groupBy = v => v % 2 === 0 ? `even`:`odd`;\n *\n * const data = frequencyByGroup(groupBy, data);\n * // Yields map with:\n * //  key: 'even', value: 5\n * //  key: 'odd', value: 5\n * @param groupBy\n * @param data\n * @returns\n */\nexport declare const frequencyByGroup: <TValue, TGroup extends string | number>(groupBy: ((value: TValue) => TGroup), data: TValue[]) => Map<TGroup, number>;\n//# sourceMappingURL=frequency.d.ts.map","/**\n * Groups data by a function `grouper`, returning data as a map with string\n * keys and array values. Multiple values can be assigned to the same group.\n *\n * `grouper` must yield a string designated group for a given item.\n *\n * @example\n * ```js\n * const data = [\n *  { age: 39, city: `London` },\n *  { age: 14, city: `Copenhagen` },\n *  { age: 23, city: `Stockholm` },\n *  { age: 56, city: `London` }\n * ];\n *\n * // Whatever the function returns will be the designated group\n * // for an item\n * const map = Arrays.groupBy(data, item => item.city);\n * ```\n *\n * This yields a Map with keys London, Stockholm and Copenhagen, and the corresponding values.\n *\n * ```\n * London: [{ age: 39, city: `London` }, { age: 56, city: `London` }]\n * Stockhom: [{ age: 23, city: `Stockholm` }]\n * Copenhagen: [{ age: 14, city: `Copenhagen` }]\n * ```\n * @param array Array to group\n * @param grouper Function that returns a key for a given item\n * @typeParam K Type of key to group by. Typically string.\n * @typeParam V Type of values\n * @returns Map\n */\nexport declare const groupBy: <K, V>(array: Iterable<V>, grouper: (item: V) => K) => Map<K, V[]>;\n//# sourceMappingURL=group-by.d.ts.map","/**\n * Combines the values of one or more arrays, removing duplicates.\n * ```js\n * const v = Arrays.uniqueDeep([ [1, 2, 3, 4], [ 3, 4, 5, 6] ]);\n * // [ 1, 2, 3, 4, 5, 6]\n * ```\n *\n * A single array can be provided as well:\n * ```js\n * const v = Arrays.uniqueDeep([ 1, 2, 3, 1, 2, 3 ]);\n * // [ 1, 2, 3 ]\n * ```\n *\n * By default uses Javascript's default equality checking\n *\n * See also:\n * * {@link intersection}: Overlap between two arrays\n * * Iterables.additionalValues: Yield values from an iterable not present in the other\n * * {@link containsDuplicateValues}: Returns true if array contains duplicates\n * @param arrays\n * @param comparer\n * @returns\n */\nexport declare const uniqueDeep: <V>(arrays: V[][] | V[] | readonly V[] | readonly (readonly V[])[], comparer?: (a: V, b: V) => boolean) => V[];\n/**\n * Combines the values of one or more arrays, removing duplicates.\n * Compares based on a string representation of object. Uses a Set\n * to avoid unnecessary comparisons, perhaps faster than `uniqueDeep`.\n *\n * ```js\n * const v = Arrays.unique([ [1, 2, 3, 4], [ 3, 4, 5, 6] ]);\n * // [ 1, 2, 3, 4, 5, 6]\n * ```\n *\n * A single array can be provided as well:\n * ```js\n * const v = Arrays.unique([ 1, 2, 3, 1, 2, 3 ]);\n * // [ 1, 2, 3 ]\n * ```\n *\n * By default uses JSON.toString() to compare values.\n *\n * See also:\n * * {@link intersection}: Overlap between two arrays\n * * Iterables.additionalValues: Yield values from an iterable not present in the other\n * * {@link containsDuplicateValues}: Returns true if array contains duplicates\n * @param arrays Array (or array of arrays) to examine\n * @param toString Function to convert values to a string for comparison purposes. By default uses JSON formatting.\n * @returns\n */\nexport declare const unique: <V>(arrays: V[][] | V[] | readonly V[] | readonly (readonly V[])[], toString?: <V_1>(itemToMakeStringFor: V_1) => string) => V[];\n//# sourceMappingURL=unique.d.ts.map","/**\n * Inserts `values` at position `index`, shuffling remaining\n * items further down and returning changed result.\n *\n * Does not modify the input array.\n *\n * ```js\n * const data = [ 1, 2, 3 ]\n *\n * // Inserts 20,30,40 at index 1\n * Arrays.insertAt(data, 1, 20, 30, 40);\n *\n * // Yields: 1, 20, 30, 40, 2, 3\n * ```\n * @param data\n * @param index\n * @param values\n * @returns\n */\nexport declare const insertAt: <V>(data: readonly V[] | V[], index: number, ...values: V[]) => V[];\n//# sourceMappingURL=insert-at.d.ts.map","/**\n * Returns an interleaving of two or more arrays. All arrays must be the same length.\n *\n * ```js\n * const a = [`a`, `b`, `c`];\n * const b = [`1`, `2`, `3`];\n * const c = Arrays.interleave(a, b);\n * // Yields:\n * // [`a`, `1`, `b`, `2`, `c`, `3`]\n * ```\n * @param arrays\n * @returns\n */\nexport declare const interleave: <V>(...arrays: readonly (readonly V[])[] | V[][]) => V[];\n//# sourceMappingURL=interleave.d.ts.map","import { type IsEqual } from \"./util/is-equal.js\";\n/**\n * Returns the _intersection_ of two arrays: the elements that are in common.\n *\n * ```js\n * intersection([1, 2, 3], [2, 4, 6]);\n// returns [2]\n * ```\n * See also:\n * * {@link unique}: Unique set of items amongst one or more arrays\n * @param arrayA\n * @param arrayB\n * @param equality\n * @returns\n */\nexport declare const intersection: <V>(arrayA: readonly V[] | V[], arrayB: readonly V[] | V[], equality?: IsEqual<V>) => V[];\n//# sourceMappingURL=intersection.d.ts.map","/**\n * Returns a result of a merged into b.\n * B is always the 'newer' data that takes\n * precedence.\n */\nexport type MergeReconcile<V> = (a: V, b: V) => V;\nexport { type IsEqual } from \"./util/is-equal.js\";\n//# sourceMappingURL=types.d.ts.map","import type { MergeReconcile } from \"./types.js\";\n/**\n * Merges arrays left to right, using the provided\n * `reconcile` function to choose a winner when keys overlap.\n *\n * There's also Core.Maps.mergeByKey if the input data is in Map form.\n *\n * For example, if we have the array A:\n * [`A-1`, `A-2`, `A-3`]\n *\n * And array B:\n * [`B-1`, `B-2`, `B-4`]\n *\n * And with the key function:\n * ```js\n * // Make a key for value based on last char\n * const keyFn = (v) => v.substr(-1, 1);\n * ```\n *\n * If they are merged with the reconile function:\n * ```js\n * const reconcile = (a, b) => b.replace(`-`, `!`);\n * const output = mergeByKey(keyFn, reconcile, arrayA, arrayB);\n * ```\n *\n * The final result will be:\n *\n * [`B!1`, `B!2`, `A-3`, `B-4`]\n *\n * In this toy example, it's obvious how the reconciler transforms\n * data where the keys overlap. For the keys that do not overlap -\n * 3 and 4 in this example - they are copied unaltered.\n *\n * A practical use for `mergeByKey` has been in smoothing keypoints\n * from a TensorFlow pose. In this case, we want to smooth new keypoints\n * with older keypoints. But if a keypoint is not present, for it to be\n * passed through.\n *\n * @param keyFunction Function to generate a unique key for data\n * @param reconcile Returns value to decide 'winner' when keys conflict.\n * @param arrays Arrays of data to merge\n */\nexport declare const mergeByKey: <V>(keyFunction: (value: V) => string, reconcile: MergeReconcile<V>, ...arrays: readonly (readonly V[])[]) => V[];\n//# sourceMappingURL=merge-by-key.d.ts.map","/**\n * Yields pairs made up of overlapping items from the input array.\n *\n * Throws an error if there are less than two entries.\n *\n * ```js\n * pairwise([1, 2, 3, 4, 5]);\n * Yields:\n * [ [1,2], [2,3], [3,4], [4,5] ]\n * ```\n * @param values\n */\nexport declare function pairwise<T>(values: T[]): Generator<T[], void, unknown>;\n/**\n * Reduces in a pairwise fashion.\n *\n * Eg, if we have input array of [1, 2, 3, 4, 5], the\n * `reducer` fn will run with 1,2 as parameters, then 2,3, then 3,4 etc.\n * ```js\n * const values = [1, 2, 3, 4, 5]\n * reducePairwise(values, (acc, a, b) => {\n *  return acc + (b - a);\n * }, 0);\n * ```\n *\n * If input array has less than two elements, the initial value is returned.\n *\n * ```js\n * const reducer = (acc:string, a:string, b:string) => acc + `[${a}-${b}]`;\n * const result = reducePairwise(`a b c d e f g`.split(` `), reducer, `!`);\n * Yields: `![a-b][b-c][c-d][d-e][e-f][f-g]`\n * ```\n * @param array\n * @param reducer\n * @param initial\n * @returns\n */\nexport declare const pairwiseReduce: <V, X>(array: readonly V[], reducer: (accumulator: X, a: V, b: V) => X, initial: X) => X;\n//# sourceMappingURL=pairwise.d.ts.map","/**\n * Returns a shuffled copy of the input array.\n * @example\n * ```js\n * const d = [1, 2, 3, 4];\n * const s = shuffle(d);\n * // d: [1, 2, 3, 4], s: [3, 1, 2, 4]\n * ```\n *\n * It can be useful to randomly access each item from an array exactly once:\n * ```js\n * for (const value of shuffle(inputArray)) {\n *  // Do something with the value...\n * }\n * ```\n * @param dataToShuffle Input array\n * @param rand Random generator. `Math.random` by default.\n * @returns Copy with items moved around randomly\n * @typeParam V - Type of array items\n */\nexport declare const shuffle: <V>(dataToShuffle: readonly V[], rand?: () => number) => V[];\n/**\n * Returns a random element of an array\n *\n * ```js\n * const v = [`blue`, `red`, `orange`];\n * randomElement(v); // Yields `blue`, `red` or `orange`\n * ```\n *\n * Note that repeated calls might yield the same value\n * multiple times. If you want to random unique values, consider using {@link shuffle}.\n *\n * See also:\n * * {@link randomIndex} if you want a random index rather than value.\n *\n * @param array\n * @param rand Random generator. `Math.random` by default.\n * @returns\n */\nexport declare const randomElement: <V>(array: ArrayLike<V>, rand?: () => number) => V;\n/**\n * Returns a random array index.\n *\n * ```js\n * const v = [`blue`, `red`, `orange`];\n * randomIndex(v); // Yields 0, 1 or 2\n * ```\n *\n * Use {@link randomElement} if you want a value from `array`, not index.\n *\n * @param array Array\n * @param rand Random generator. `Math.random` by default.\n * @returns\n */\nexport declare const randomIndex: <V>(array: ArrayLike<V>, rand?: () => number) => number;\n//# sourceMappingURL=random.d.ts.map","/**\n * Removes an element at `index` index from `data`, returning the resulting array without modifying the original.\n *\n * ```js\n * const v = [ 100, 20, 50 ];\n * const vv = Arrays.remove(2);\n *\n * Yields:\n *  v: [ 100, 20, 50 ]\n * vv: [ 100, 20 ]\n * ```\n *\n * Consider {@link without} if you want to remove an item by value.\n *\n * Throws an exception if `index` is outside the range of `data` array.\n * @param data Input array\n * @param index Index to remove\n * @typeParam V Type of array\n * @returns\n */\nexport declare const remove: <V>(data: readonly V[] | V[], index: number) => V[];\n//# sourceMappingURL=remove.d.ts.map","/**\n * Samples values from an array.\n *\n * If `amount` is less or equal to 1, it's treated as a percentage to sample.\n * Otherwise it's treated as every _n_th value to sample.\n *\n * @example\n * By percentage - get half of the items\n * ```\n * const list = [1,2,3,4,5,6,7,8,9,10];\n * const sub = Arrays.sample(list, 0.5);\n * // Yields: [2, 4, 6, 8, 10]\n * ```\n *\n * @example\n * By steps - every third value\n * ```\n * const list = [1,2,3,4,5,6,7,8,9,10];\n * const sub = Arrays.sample(list, 3);\n * // Yields:\n * // [3, 6, 9]\n * ```\n * @param array Array to sample\n * @param amount Amount, given as a percentage (0..1) or the number of interval (ie 3 for every third item)\n * @returns\n */\nexport declare const sample: <V>(array: ArrayLike<V>, amount: number) => V[];\n//# sourceMappingURL=sample.d.ts.map","/**\n * Sorts an array of objects in ascending order\n * by the given property name, assuming it is a number.\n *\n * ```js\n * const data = [\n *  { size: 10, colour: `red` },\n *  { size: 20, colour: `blue` },\n *  { size: 5, colour: `pink` }\n * ];\n * const sorted = Arrays.sortByNumericProperty(data, `size`);\n *\n * Yields items ascending order:\n * [ { size: 5, colour: `pink` }, { size: 10, colour: `red` }, { size: 20, colour: `blue` } ]\n * ```\n * @param data\n * @param propertyName\n */\nexport declare const sortByNumericProperty: <V, K extends keyof V>(data: readonly V[] | V[], propertyName: K) => V[];\n/**\n * Sorts an array of objects by some named property.\n *\n * ```js\n * const data = [\n *  { size: 10, colour: `red` },\n *  { size: 20, colour: `blue` },\n *  { size: 5, colour: `pink` }\n * ];\n * sortByProperty(data, `colour`);\n *\n * Yields [\n *  { size: 20, colour: `blue` },\n *  { size: 5, colour: `pink` }\n *  { size: 10, colour: `red` },\n * ]\n * ```\n *\n * You can also provide a custom comparer that is passed property values.\n * This function should return 0 if values are equal, 1 if `a > b` and -1 if `a < b`.\n * @param data\n * @param propertyName\n * @returns\n */\nexport declare const sortByProperty: <V, K extends keyof V>(data: readonly V[] | V[], propertyName: K, comparer?: (a: any, b: any) => number) => V[];\n//# sourceMappingURL=sort.d.ts.map","/**\n * Yields all items in the input array, stopping when `predicate` returns _true_.\n *\n * @example Yield values until we hit 3\n * ```js\n * const data = [ 1, 2, 3, 4, 5 ];\n * until(data, v => v === 3)\n * // [ 1, 2 ]\n * ```\n */\nexport declare function until<V>(data: readonly V[] | V[], predicate: (v: V) => boolean): Generator<V>;\n/**\n * Yields all items in the input array, stopping when `predicate` returns _true_.\n * This version allows a value to be 'accumulated' somehow\n *\n * @example Yield values until a total of 4\n * ```js\n * const data = [ 1, 2, 3, 4, 5 ];\n * until(data, (v, accumulated) => [accumulated >= 6, accumulated + v ]);\n * // [ 1, 2, 3 ]\n * ```\n */\nexport declare function until<V, A>(data: readonly V[] | V[], predicate: (v: V, accumulator: A) => readonly [stop: boolean, acc: A], initial: A): Generator<V>;\n//# sourceMappingURL=until.d.ts.map","import { type IsEqual } from \"./util/is-equal.js\";\n/**\n * Returns a copy of an input array with _undefined_ values removed.\n * @param data\n * @returns\n */\nexport declare const withoutUndefined: <V>(data: readonly V[] | V[]) => V[];\n/**\n * Returns an array with value(s) omitted.\n *\n * If value is not found, result will be a copy of input.\n * Value checking is completed via the provided `comparer` function.\n * By default checking whether `a === b`. To compare based on value, use the `isEqualValueDefault` comparer.\n *\n * @example\n * ```js\n * const data = [100, 20, 40];\n * const filtered = without(data, 20); // [100, 40]\n * ```\n *\n * @example Using value-based comparison\n * ```js\n * const data = [{ name: `Alice` }, { name:`Sam` }];\n *\n * // This wouldn't work as expected, because the default comparer uses instance,\n * // not value:\n * without(data, { name: `Alice` });\n *\n * // So instead we can use a value comparer:\n * without(data, { name:`Alice` }, isEqualValueDefault);\n * ```\n *\n * @example Use a function\n * ```js\n * const data = [ { name: `Alice` }, { name:`Sam` }];\n * without(data, { name:`ALICE` }, (a, b) => {\n *  return (a.name.toLowerCase() === b.name.toLowerCase());\n * });\n * ```\n *\n * Consider {@link remove} to remove an item by index.\n *\n * @typeParam V - Type of array items\n * @param sourceArray Source array\n * @param toRemove Value(s) to remove\n * @param comparer Comparison function. If not provided `isEqualDefault` is used, which compares using `===`\n * @return Copy of array without value.\n */\nexport declare const without: <V>(sourceArray: readonly V[] | V[], toRemove: V | V[], comparer?: IsEqual<V>) => V[];\n//# sourceMappingURL=without.d.ts.map","/**\n * Zip combines the elements of two or more arrays based on their index.\n *\n * ```js\n * const a = [1,2,3];\n * const b = [`red`, `blue`, `green`];\n *\n * const c = Arrays.zip(a, b);\n * // Yields:\n * // [\n * //   [1, `red`],\n * //   [2, `blue`],\n * //   [3, `green`]\n * // ]\n * ```\n *\n * Typically the arrays you zip together are all about the same logical item. Eg, in the above example\n * perhaps `a` is size and `b` is colour. So thing #1 (at array index 0) is a red thing of size 1. Before\n * zipping we'd access it by `a[0]` and `b[0]`. After zipping, we'd have c[0], which is array of [1, `red`].\n * @param arrays\n * @returns Zipped together array\n */\nexport declare const zip: (...arrays: any[][] | readonly any[][] | readonly (readonly any[])[]) => any[];\n//# sourceMappingURL=zip.d.ts.map","export * from './cycle.js';\nexport * from './at-wrap.js';\nexport * from './chunks.js';\nexport * from './contains.js';\nexport * from './ensure-length.js';\nexport * from './equality.js';\nexport * from './filter.js';\nexport * from './flatten.js';\nexport * from './for-each.js';\nexport * from './frequency.js';\nexport * from './group-by.js';\nexport * from './unique.js';\nexport * from './insert-at.js';\nexport * from './interleave.js';\nexport * from './intersection.js';\nexport * from './merge-by-key.js';\nexport * from './pairwise.js';\nexport * from './random.js';\nexport * from './remove.js';\nexport * from './sample.js';\nexport * from './sort.js';\nexport type * from './types.js';\nexport * from './unique.js';\nexport * from './until.js';\nexport * from './without.js';\nexport * from './zip.js';\n//# sourceMappingURL=index.d.ts.map","import type { Interval } from \"@ixfx/core\";\nexport type WithEvents = {\n    addEventListener(type: string, callbackfn: any): void;\n    removeEventListener(type: string, callbackfn: any): void;\n};\nexport type IteratorControllerOptions<T> = Readonly<{\n    delay?: Interval;\n    onValue: (value: T) => boolean | void;\n    iterator: () => IterableIterator<T>;\n}>;\nexport type IteratorControllerState = `stopped` | `running` | `paused`;\nexport type ToArrayOptions = {\n    /**\n     * If set `toArray` continues until reaching this many results\n     */\n    limit: number;\n    /**\n     * If set, `toArray` continues until this function returns false\n     * @param count\n     * @returns\n     */\n    while: (count: number) => boolean;\n    /**\n     * If set, `toArray` continues until this much time elapses.\n     */\n    elapsed: Interval;\n};\nexport type ForEachOptions = {\n    /**\n     * Interval after each iteration.\n     * Only works with asynchronous forEach.\n     */\n    interval?: Interval;\n};\n//# sourceMappingURL=types.d.ts.map","import { type Interval, type IsEqual } from '@ixfx/core';\nimport { type SleepOpts } from '@ixfx/core';\nimport type { ForEachOptions, ToArrayOptions } from './types.js';\n/**\n * Yield values from `array`, one at a time.\n * Use `interval` to add time between each item.\n * The first item is yielded without delay.\n *\n * @param array Array of values\n * @param interval Interval (defaults: 1ms)\n */\nexport declare function fromArray<V>(array: V[], interval?: Interval): AsyncGenerator<V>;\n/**\n * Yield values from `iterable`, one at a time.\n * Use `interval` to add time between each item.\n * The first item is yielded without delay.\n * @param iterable Iterable or AsyncIterable\n * @param [interval=1] Interval to wait between yield\n */\nexport declare function fromIterable<V>(iterable: Iterable<V> | AsyncIterable<V>, interval?: Interval): AsyncGenerator<V>;\nexport declare function chunks<V>(it: AsyncIterable<V>, size: number): AsyncGenerator<V[], void, unknown>;\nexport declare function concat<V>(...its: readonly AsyncIterable<V>[]): AsyncGenerator<Awaited<V>, void, any>;\nexport declare function dropWhile<V>(it: AsyncIterable<V>, f: (v: V) => boolean): AsyncGenerator<Awaited<V>, void, unknown>;\n/**\n * Loops over a generator until it finishes, calling `callback`.\n * Useful if you don't care about the value generator produces, just the number of loops.\n *\n * In this version, we do a `for await of` over `gen`, and also `await callback()`.\n\n * ```js\n * await until(count(5), () => {\n * // do something 5 times\n * });\n * ```\n *\n * If you want the value from the generator, use a `for of` loop as usual.\n *\n * If `callback` explicitly returns _false_, the generator is aborted.\n * @param it Generator to run\n * @param callback Code to call for each iteration\n */\nexport declare const until: (it: AsyncIterable<any> | Iterable<any>, callback: () => (void | Promise<boolean> | undefined | boolean | Promise<undefined> | Promise<void>)) => Promise<undefined>;\n/**\n * This generator will repeat another generator up until some condition. This is the version\n * that can handle async generators.\n *\n * For example, {@link https://api.ixfx.fun/_ixfx/numbers/count/ @ixfx/numbers.count} will count from 0..number and then finish:\n * ```js\n * import { count } from '@ixfx/numbers'\n * for (const v of count(5)) {\n *  // v: 0, 1, 2, 3, 4\n * }\n * ```\n *\n * But what if we want to repeat the count? We have to provide a function to create the generator,\n * rather than using the generator directly, since it's \"one time use\"\n * ```js\n * for await (const v of repeat(() => count(5))) {\n *  // v: 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, ...\n *  // warning: never ends\n * }\n * ```\n *\n * Limiting the number of repeats can be done by passing in extra parameters\n * ```js\n * repeat(generator, { count: 5} ); // Iterate over `generator` five times\n * ```\n *\n * ```js\n * const ac = new AbortController();\n * repeat(generator, { signal: ac.signal }); // Pass in signal\n * ...\n * ac.abort(); // Trigger signal at some point\n * ```\n * @param genCreator\n * @param repeatsOrSignal\n */\nexport declare const repeat: <T>(genCreator: () => Iterable<T> | AsyncIterable<T>, repeatsOrSignal: number | AbortSignal) => AsyncGenerator<T>;\n/**\n * Returns true if items in two iterables are equal, as\n * determined by the `equality` function.\n * Order matters. It compares items at the same 'step' of each iterable.\n * @param it1\n * @param it2\n * @param equality\n * @returns\n */\nexport declare function equals<V>(it1: AsyncIterable<V>, it2: AsyncIterable<V>, equality?: IsEqual<V>): Promise<boolean | undefined>;\nexport declare function every<V>(it: AsyncIterable<V>, f: (v: V) => boolean | Promise<boolean>): Promise<boolean>;\nexport declare function fill<V>(it: AsyncIterable<V>, v: V): AsyncGenerator<Awaited<V>, void, unknown>;\n/**\n * Filters an iterable, only yielding items which match `f`.\n *\n * ```js\n * filter([1, 2, 3, 4], e => e % 2 == 0);\n * returns [2, 4]\n * ```\n * @param it\n * @param f\n */\nexport declare function filter<V>(it: AsyncIterable<V>, f: (v: V) => boolean | Promise<boolean>): AsyncGenerator<Awaited<V>, void, unknown>;\nexport declare function find<V>(it: AsyncIterable<V>, f: (v: V) => boolean | Promise<boolean>): Promise<V | undefined>;\nexport declare function flatten<V>(it: AsyncIterable<V>): AsyncGenerator<any, void, unknown>;\n/**\n * Iterates over an async iterable or array, calling `fn` for each value, with optional\n * interval between each loop. If the async `fn` returns _false_, iterator cancels.\n *\n * ```\n * import { forEach } from \"@ixfx/flow.js\"\n * // Prints items from array every second\n * await forEach([0,1,2,3], i => console.log(i), 1000);\n * ```\n *\n * ```\n * // Retry up to five times, with 5 seconds between each attempt\n * await forEach(count(5), i=> {\n *  try {\n *    await doSomething();\n *    return false; // Succeeded, exit early\n *  } catch (ex) {\n *    console.log(ex);\n *    return true; // Keep trying\n *  }\n * }, 5000);\n * ```\n * @param iterator Iterable thing to loop over\n * @param fn Function to invoke on each item. If it returns _false_ loop ends.\n * @param options Options\n * @typeParam V Type of iterable\n */\nexport declare const forEach: <T>(iterator: AsyncIterable<T> | T[], fn: (v?: T) => Promise<boolean> | Promise<void> | boolean | void, options?: Partial<ForEachOptions>) => Promise<void>;\n/**\n * Returns last value from an iterable, or _undefined_\n * if no values are generated\n * @param it\n */\nexport declare function last<V>(it: AsyncIterable<V>, opts?: Partial<{\n    abort: AbortSignal;\n}>): Promise<V | undefined>;\n/**\n * Maps an iterable through function `f`\n * ```js\n * // For every input value, multiply it by itself\n * map([1, 2, 3], e => e*e)\n * // Yields: 1, 4, 9\n * ```\n *\n * It can also be used to transform types:\n * ```js\n * map([1, 2, 3], e => { value: e });\n * // Yields: { value: 1 }, { value: 2 }, { value: 3 }\n * ```\n * @param it\n * @param f\n */\nexport declare function map<V, X>(it: AsyncIterable<V>, f: (v: V) => X): AsyncGenerator<Awaited<X>, void, unknown>;\nexport declare function max<V>(it: AsyncIterable<V>, gt?: (a: V, b: V) => boolean): AsyncGenerator<Awaited<V>, void, unknown>;\n/**\n * Returns the minimum seen of an iterable as it changes.\n * Streaming result: works with endless iterables.\n *\n * Note that `gt` function returns true if A is _greater_ than B, even\n * though we're looking for the minimum.\n *\n * ```js\n * // Rank objects based on 'v' value\n * const rank = (a,b) => a.v > b.v;\n * min([\n *  {i:0,v:1},\n *  {i:1,v:9},\n *  {i:2,v:-2}\n * ], rank);\n * // Yields: {i:2, v:1}, {i:2,v:-2}\n * ```\n * @param it Iterable\n * @param gt Should return _true_ if `a` is greater than `b`.\n * @returns\n */\nexport declare function min<V>(it: AsyncIterable<V>, gt?: (a: V, b: V) => boolean): AsyncGenerator<Awaited<V>, Awaited<V> | undefined, unknown>;\nexport declare function reduce<V>(it: AsyncIterable<V>, f: (accumulator: V, current: V) => V, start: V): Promise<V>;\n/**\n * Calls `callback` whenever the async generator produces a value.\n *\n * When using `asCallback`, call it with `await` to let generator\n * run its course before continuing:\n * ```js\n * await asCallback(tick({ interval:1000, loops:5 }), x => {\n *  // Gets called 5 times, with 1000ms interval\n * });\n * console.log(`Hi`); // Prints after 5 seconds\n * ```\n *\n * Or if you skip the `await`, code continues and callback will still run:\n * ```js\n * asCallback(tick({ interval: 1000, loops: 5}), x => {\n *  // Gets called 5 times, with 1000ms interval\n * });\n * console.log(`Hi`); // Prints immediately\n * ```\n * @param input\n * @param callback\n */\nexport declare function asCallback<V>(input: AsyncIterable<V>, callback: (v: V) => unknown, onDone?: () => void): Promise<void>;\nexport declare function slice<V>(it: AsyncIterable<V>, start?: number, end?: number): AsyncGenerator<Awaited<V>, void, unknown>;\n/**\n * Enumerates over an input iterable, with a delay between items.\n * @param it\n * @param delay\n */\nexport declare function withDelay<V>(it: Iterable<V>, delay: Interval): AsyncGenerator<Awaited<V>, void, unknown>;\n/***\n * Returns the next IteratorResult,\n * throwing an error if it does not happen\n * within `interval` (default: 1s)\n */\nexport declare function nextWithTimeout<V>(it: AsyncIterableIterator<V> | IterableIterator<V>, options: SleepOpts<any>): Promise<IteratorResult<V, any>>;\nexport declare function some<V>(it: AsyncIterable<V>, f: (v: V) => boolean | Promise<boolean>): Promise<boolean>;\n/**\n * Returns an array of values from an iterator.\n *\n * ```js\n * const data = await toArray(adsrIterable(opts, 10));\n * ```\n *\n * Note: If the iterator is infinite, be sure to provide limits via the options.\n * ```js\n * // Return maximum five items\n * const data = await toArray(iterable, { limit: 5 });\n * // Return results for a maximum of 5 seconds\n * const data = await toArray(iterable, { elapsed: 5000 });\n * ```\n * Note that limits are ORed, `toArray` will finish if either of them is true.\n *\n * @param it Asynchronous iterable\n * @param options Options when converting to array\n * @returns\n */\nexport declare function toArray<V>(it: AsyncIterable<V>, options?: Partial<ToArrayOptions>): Promise<V[]>;\nexport declare function unique<V>(iterable: AsyncIterable<V> | AsyncIterable<V>[]): AsyncGenerator<Awaited<V>, void, unknown>;\nexport declare function uniqueByValue<T>(input: AsyncIterable<T>, toString?: (value: T) => string, seen?: Set<string>): AsyncGenerator<T>;\n/**\n * Returns unique items from iterables, given a particular key function\n * ```js\n * unique([{i:0,v:2},{i:1,v:3},{i:2,v:2}], e => e.v);\n * Yields:  [{i:0,v:2},{i:1,v:3}]\n * @param it\n * @param f\n */\n/**\n * Combine same-positioned items from several iterables\n * ```js\n * zip( [1, 2, 3], [4, 5, 6], [7, 8, 9] );\n * Yields: [ [1, 4, 7], [2, 5, 8], [3, 6, 9] ]\n * ```\n * @param its\n * @returns\n */\nexport declare function zip<V>(...its: readonly AsyncIterable<V>[]): AsyncGenerator<V[], void, unknown>;\n//# sourceMappingURL=async.d.ts.map","export declare function slice<V>(it: Iterable<V>, start?: number, end?: number): Generator<V, void, unknown>;\n//# sourceMappingURL=slice.d.ts.map","export declare function reduce<V>(it: Iterable<V>, f: (accumulator: V, current: V) => V, start: V): V;\n//# sourceMappingURL=reduce.d.ts.map","import { type ToString } from '@ixfx/core';\nimport { type IsEqual } from '@ixfx/core';\nimport type { ToArrayOptions } from './types.js';\nexport { slice } from './sync/slice.js';\nexport { reduce } from './sync/reduce.js';\nexport declare function uniqueByValue<T>(input: Iterable<T>, toString?: ToString<T>, seen?: Set<string>): Generator<T>;\n/**\n * Calls `callback` whenever the generator produces a value.\n *\n * When using `asCallback`, call it with `await` to let generator\n * run its course before continuing:\n * ```js\n * await asCallback(tick({ interval:1000, loops:5 }), x => {\n *  // Gets called 5 times, with 1000ms interval\n * });\n * console.log(`Hi`); // Prints after 5 seconds\n * ```\n *\n * Or if you skip the `await`, code continues and callback will still run:\n * ```js\n * asCallback(tick({ interval: 1000, loops: 5}), x => {\n *  // Gets called 5 times, with 1000ms interval\n * });\n * console.log(`Hi`); // Prints immediately\n * ```\n * @param input\n * @param callback\n */\nexport declare function asCallback<V>(input: Iterable<V>, callback: (v: V) => unknown, onDone?: () => void): void;\n/**\n * Returns a function that yields a value from a generator.\n * ```js\n * const spring = yieldNumber(Oscillators.spring());\n *\n * spring(); // latest value\n * ```\n *\n * Instead of:\n * ```js\n * const spring = Oscillators.spring();\n *\n * spring.next().value\n * ```\n *\n * A `defaultValue` can be provided if the source generator returns undefined:\n * ```js\n * const spring = yieldNumber(Oscillators.spring(), 0);\n * spring(); // Returns 0 if the generator returns undefined\n * ```\n * @param generator\n * @param defaultValue\n * @returns\n */\nexport declare function yieldNumber(generator: Generator<number>, defaultValue?: number): () => number | undefined;\n/**\n * Return first value from an iterable, or _undefined_ if\n * no values are generated\n * @param it\n * @returns\n */\nexport declare function first<V>(it: Iterable<V>): V | undefined;\n/**\n * Returns last value from an iterable, or _undefined_\n * if no values are generated\n * @param it\n */\nexport declare function last<V>(it: Iterable<V>): V | undefined;\n/**\n * Yields chunks of the iterable `it` such that the end of a chunk is the\n * start of the next chunk.\n *\n * Eg, with the input [1,2,3,4,5] and a size of 2, we would get back\n * [1,2], [2,3], [3,4], [4,5].\n *\n *\n * @param it\n * @param size\n * @returns\n */\nexport declare function chunksOverlapping<V>(it: Iterable<V>, size: number): Generator<V[], void, unknown>;\nexport declare function chunks<V>(it: Iterable<V>, size: number): Generator<V[], void, unknown>;\nexport declare function concat<V>(...its: readonly Iterable<V>[]): Generator<V, void, any>;\nexport declare function dropWhile<V>(it: Iterable<V>, f: (v: V) => boolean): Generator<V, void, unknown>;\n/**\n* Loops over a generator until it finishes, calling `callback`.\n* Useful if you don't care about the value generator produces, just the number of loops.\n*\n* ```js\n* until(count(5), () => {\n* // do something 5 times\n* });\n* ```\n*\n* If you want the value from the generator, use a `for of` loop as usual.\n* If `callback` explicitly returns _false_, the generator is aborted.\n* @param it Generator to run\n* @param callback Code to call for each iteration\n*/\nexport declare const until: (it: Iterable<any>, callback: () => (void | boolean | never)) => void;\nexport declare const next: <T>(it: Generator<T>) => () => T | undefined;\n/**\n * Returns true if items in two iterables are equal, as\n * determined by the `equality` function.\n * @param it1\n * @param it2\n * @param equality\n * @returns\n */\nexport declare function equals<V>(it1: IterableIterator<V>, it2: IterableIterator<V>, equality?: IsEqual<V>): boolean | undefined;\nexport declare function every<V>(it: Iterable<V>, f: (v: V) => boolean): boolean;\nexport declare function fill<V>(it: Iterable<V>, v: V): Generator<V, void, unknown>;\n/**\n * Iterates over `iterator` (iterable/array), calling `fn` for each value.\n * If `fn` returns _false_, iterator cancels.\n *\n * Over the default JS `forEach` function, this one allows you to exit the\n * iteration early.\n *\n * @example\n * ```js\n * import { Sync } from \"@ixfx/iterables.js\"\n * Sync.forEach(count(5), () => console.log(`Hi`));  // Prints `Hi` 5x\n * Sync.forEach(count(5), i => console.log(i));      // Prints 0 1 2 3 4\n * Sync.forEach([0,1,2,3,4], i => console.log(i));   // Prints 0 1 2 3 4\n * ```\n *\n * Use {@link forEach} if you want to use an async `iterator` and async `fn`.\n *\n * Alternatives:\n * * {@link https://api.ixfx.fun/_ixfx/flow/repeat/ @ixfx/flow.repeat}/{@link https://api.ixfx.fun/_ixfx/flow/repeatSync/ @ixfx/flow.repeatSync}: if you want to call something a given number of times and get the result\n * @param iterator Iterable or array\n * @typeParam T Type of iterable's values\n * @param fn Function to call for each item. If function returns _false_, iteration cancels\n */\nexport declare function forEach<T>(iterator: Iterable<T> | T[], fn: (v: T) => boolean | void): void;\n/**\n * ```js\n * filter([1, 2, 3, 4], e => e % 2 == 0);\n * returns [2, 4]\n * ```\n * @param it\n * @param f\n */\nexport declare function filter<V>(it: Iterable<V>, f: (v: V) => boolean): Generator<V, void, unknown>;\nexport declare function find<V>(it: Iterable<V>, f: (v: V) => boolean): V | undefined;\nexport declare function flatten<V>(it: Iterable<V>): Generator<any, void, unknown>;\n/**\n * Maps an iterable of type `V` to type `X`.\n * ```js\n * map([1, 2, 3], e => e*e)\n * returns [1, 4, 9]\n * ```\n * @param it\n * @param f\n */\nexport declare function map<V, X>(it: Iterable<V>, f: (v: V) => X): Generator<X, void, unknown>;\nexport declare function max<V>(it: Iterable<V>, gt?: (a: V, b: V) => boolean): Generator<V>;\nexport declare function min<V>(it: Iterable<V>, gt?: (a: V, b: V) => boolean): Generator<V, void, unknown>;\nexport declare function some<V>(it: Iterable<V>, f: (v: V) => boolean): boolean;\nexport declare function repeat<T>(genCreator: () => Iterable<T>, repeatsOrSignal: number | AbortSignal): Generator<T>;\nexport declare function unique<V>(iterable: Iterable<V> | Iterable<V>[]): Generator<V, void, unknown>;\n/**\n * Combine same-positioned items from several iterables\n * ```js\n * zip( [1, 2, 3], [4, 5, 6], [7, 8, 9] );\n * Yields: [ [1, 4, 7], [2, 5, 8], [3, 6, 9] ]\n * ```\n * @param its\n * @returns\n */\nexport declare function zip<V>(...its: readonly Iterable<V>[]): Generator<V[], void, unknown>;\nexport declare function fromIterable<T>(iterable: Iterable<T>): Generator<T, void, unknown>;\n/**\n * Returns an array of values from an iterator.\n *\n * ```js\n * const data = await toArray(adsrIterable(opts, 10));\n * ```\n *\n * Note: If the iterator is infinite, be sure to provide a limit via the options or the function\n * will never return.\n *\n * @param it Asynchronous iterable\n * @param options Options when converting to array.\n * @returns\n */\nexport declare function toArray<V>(it: Iterable<V>, options?: Partial<ToArrayOptions>): V[];\n/**\n * Yield values from `array`, one at a time.\n * Use `interval` to add time between each item.\n * The first item is yielded without delay.\n * @param array Array of values\n */\nexport declare function fromArray<V>(array: V[]): Generator<V>;\n//# sourceMappingURL=sync.d.ts.map","import type { Interval, RankFunction, RankOptions, RankArrayOptions } from \"@ixfx/core\";\nexport type SyncOptions = {\n    /**\n     * How to handle when a source completes.\n     * * 'allow' means we continue synchronising with remaining alive sources. Use 'finalValue' option to control what data is returned for completed sources\n     * * 'break' means we stop the stream, because synchronisation across all sources is no longer possible.\n     *\n     * Default: 'break'.\n     */\n    onSourceDone: `allow` | `break`;\n    /**\n     * Maximum time to wait for synchronisation to happen.\n     * If interval is exceeded, stream closes.\n     * Default: 2s\n     */\n    maximumWait: Interval;\n    /**\n     * If we continue synchronisation when a source is done (via `onSourceDone:'allow'`),\n     * what source should be returned for a completed source?\n     * * 'undefined': _undefined_\n     * * 'last': the last received value, or _undefined_\n     *\n     * Default: 'undefined'\n     */\n    finalValue: `undefined` | `last`;\n};\nexport type CombineLatestOptions = {\n    onSourceDone: `allow` | `break`;\n    /**\n   * If we continue synchronisation when a source is done (via `onSourceDone:'allow'`),\n   * what source should be returned for a completed source?\n   * * 'undefined': _undefined_\n   * * 'last': the last received value, or _undefined_\n   *\n   * Default: 'undefined'\n   */\n    finalValue: `undefined` | `last`;\n    /**\n     * After an array is emitted, what to do with\n     * last values. By default, the last value is kept.\n     * If 'undefined' is used, _undefined_ is used until\n     * source emits again.\n     *\n     * Default: 'last'\n     */\n    afterEmit: `undefined` | `last`;\n};\n/**\n * A Generator, AsyncGenerator or IterableIterator\n */\nexport type Gen<V> = Generator<V> | AsyncGenerator<V> | IterableIterator<V>;\n/**\n * Some kind of (async) generator or an array of data of type V\n */\nexport type GenOrData<V> = V[] | Gen<V>;\n/**\n * A function which can form part of a chain.\n * It takes an input {@link GenOrData}, and returns a new generator.\n */\nexport type Link<In, Out> = {\n    (input: GenOrData<In>): AsyncGenerator<Out>;\n    _name?: string;\n};\n/**\n * A function which can start a chain, since it takes no input\n */\nexport type GenFactoryNoInput<Out> = {\n    (): AsyncGenerator<Out>;\n    _type: `GenFactoryNoInput`;\n    _name: string;\n};\n/**\n * An array of chain links where first one is a source\n */\nexport type LinksWithSource<In, Out> = [\n    Link<In, any> | GenOrData<In> | GenFactoryNoInput<In>,\n    ...Link<any, any>[],\n    Link<any, Out>\n];\n/**\n * An array of chain links without a source\n */\nexport type Links<In, Out> = [\n    Link<In, any>,\n    ...Link<any, any>[],\n    Link<any, Out>\n];\n/**\n * Delay options\n */\nexport type DelayOptions = {\n    /**\n     * Time before yielding\n     */\n    before?: Interval;\n    /**\n     * Time after yielding\n     */\n    after?: Interval;\n};\nexport type TickOptions = {\n    interval: Interval;\n    loops?: number;\n    elapsed?: Interval;\n    asClockTime?: boolean;\n};\n/**\n * Lazy execution of a chain\n */\nexport type LazyChain<In, Out> = {\n    /**\n     * Sets `data` to be the data for the chain\n     * @param data\n     * @returns\n     */\n    input: (data: GenOrData<In>) => LazyChain<In, Out>;\n    /**\n     * Return the results of the chain as a regular generator.\n     * If `data` is not supplied, the last value given calling `input(data)` is used.\n     * @param data\n     * @returns\n     */\n    asGenerator: (data?: GenOrData<In>) => AsyncGenerator<Out>;\n    /**\n     * Returns the results of the chain as an array.\n     * If `data` is not supplied, the last value given calling `input(data)` is used.\n     * @param data\n     * @returns\n     */\n    asArray: (data?: GenOrData<In>) => Promise<Out[]>;\n    asAsync: (data?: GenOrData<In>) => LazyChain<In, Out>;\n    /**\n     * Gets the last output value from the chain.\n     * If `data` is not supplied, the last value given calling `input(data)` is used.\n     * @param data\n     * @returns\n     */\n    lastOutput: (data?: GenOrData<In>) => Promise<Out | undefined>;\n    /**\n     * Gets the first output value from the chain.\n     * If `data` is not supplied, the last value given calling `input(data)` is used.\n     * @param data\n     * @returns\n     */\n    firstOutput: (data?: GenOrData<In>) => Promise<Out | undefined>;\n    /**\n     * Uses a function as a source of values\n     * @param callback\n     * @returns\n     */\n    fromFunction: (callback: () => any) => LazyChain<any, any>;\n    /**\n     * Take `limit` number of values from the chain before ending\n     * @param limit\n     * @returns\n     */\n    take: (limit: number) => LazyChain<In, Out>;\n    /**\n     * Only emit values that have ranked higher than previously seen\n     */\n    rank: (r: RankFunction<In>, options: Partial<RankOptions>) => LazyChain<In, Out>;\n    rankArray: (r: RankFunction<In>, options: Partial<RankArrayOptions>) => LazyChain<In, Out>;\n    /**\n     * Debounce values\n     * @param duration\n     * @returns\n     */\n    debounce: (duration: Interval) => LazyChain<In, Out>;\n    /**\n     * Delay emitting values\n     * @param options\n     * @returns\n     */\n    delay: (options: DelayOptions) => LazyChain<In, Out>;\n    /**\n     * Chunk values into arrays\n     * @param size\n     * @param returnRemainers\n     * @returns\n     */\n    chunk: (size: number, returnRemainers?: boolean) => LazyChain<In, Out>;\n    /**\n     * Only allow values that meet `predicate` to pass\n     * @param predicate\n     * @returns\n     */\n    filter: (predicate: (input: any) => boolean) => LazyChain<In, Out>;\n    /**\n     * Gets the minimum numerical value (if relevant)\n     * @returns\n     */\n    min: () => LazyChain<any, number>;\n    /**\n     * Gets the maximum numerical value (if relevant)\n     * @returns\n     */\n    max: () => LazyChain<any, number>;\n    /**\n     * Gets the average numerical value (if relevant)\n     * @returns\n     */\n    average: () => LazyChain<any, number>;\n    /**\n     * Gets the total of numerical values\n     * @returns\n     */\n    sum: () => LazyChain<In, number>;\n    /**\n     * Emits a running tally of how many values have been emitted\n     * @returns\n     */\n    tally: (countArrayItems: boolean) => LazyChain<In, number>;\n    /**\n     * Ignore values that match `predicate` (opposite of `filter()`)\n     * @param predicate\n     * @returns\n     */\n    drop: (predicate: (value: In) => boolean) => LazyChain<In, Out>;\n    /**\n     * Emit values until `period` has elapsed\n     * @param period\n     * @returns\n     */\n    duration: (period: Interval) => LazyChain<In, Out>;\n    /**\n     * Flatten values in an array into a single value\n     * @param reducer\n     * @returns\n     */\n    reduce: (reducer: (values: any[]) => any) => LazyChain<In, Out>;\n    /**\n     * Transform an input value to an output\n     * @param transformer\n     * @returns\n     */\n    transform: (transformer: (v: any) => any) => LazyChain<In, Out>;\n};\nexport type GenValueTypeObject<T extends Record<string, GenOrData<any> | GenFactoryNoInput<any>>> = {\n    [K in keyof T]: T[K] extends Generator<infer V> ? V | undefined : T[K] extends AsyncGenerator<infer V> ? V | undefined : T[K] extends IterableIterator<infer V> ? V | undefined : T[K] extends AsyncIterableIterator<infer V> ? V | undefined : T[K] extends (infer V)[] ? V | undefined : T[K] extends (...args: any) => any ? ReturnType<T[K]> | undefined : never;\n};\n//# sourceMappingURL=types.d.ts.map","import type { Link } from \"./types.js\";\nexport type QueryOptions = {\n    baseElement: HTMLElement;\n};\nexport type CreateOptions<In> = {\n    /**\n     * Parent element to create elements in. Defaults to `document.body`.\n     */\n    parentEl: string | HTMLElement;\n    /**\n     * When set, provide a custom function to return a unique key for a value.\n     * This is used for matching values with elements when using immutable data.\n     *\n     * By default uses the\n     * JSON.stringify() representation.\n     *\n     * To match elements with values by reference, set `byReference` instead.\n     *\n     * @param value\n     * @returns\n     */\n    key: (value: In) => string;\n    /**\n     * Default: _false_. When _true_, associate created elements\n     * to values by reference rather than value. This can be useful with mutable values.\n     *\n     * Use this _or_ the `key` option.\n     */\n    byReference: boolean;\n    /**\n     * What kind of HTML element to make, defaults to DIV\n     */\n    tagName: string;\n    /**\n     * Called whenever an element is created but not yet added to parent element\n     * @param element\n     * @returns\n     */\n    beforeInsert: (element: HTMLElement) => void;\n    /**\n     * Called after an element is inserted to the parent element\n     */\n    afterInsert: (element: HTMLElement) => void;\n    /**\n     * Called after an element has been removed\n     * @param element\n     * @returns\n     */\n    beforeRemove: (element: HTMLElement) => void;\n};\nexport type ElementWithValue<T> = {\n    el: HTMLElement;\n    value: T;\n};\n/**\n * Creates a HTML element per value. By default compares\n * values by `JSON.stringify`. Set `byReference:true` to\n * compare values based on reference. Or provide a toString\n * function via `key`.\n *\n * ```js\n * // Generate a random number between 0...4 every second\n * const looper = Generators.interval(() => Math.floor(Math.random()*5), 1000);\n *\n * // Make a chain\n * const ch = Chains.run(\n *  looper,\n *  Chains.Links.delay({before:1000}),\n *  Chains.Dom.perValue()\n * );\n *\n * setTimeout(async () => {\n *    for await (const v of ch) {\n *      const {el,value} = v;\n *      el.textContent = `${value} - ${Date.now().toString()}`;\n *    }\n *    console.log(`ch iteration done`);\n *  });\n * ```\n */\nexport declare function perValue<In>(options?: Partial<CreateOptions<In>>): Link<In, ElementWithValue<In>>;\n/**\n * From an input stream of strings, yields an output of HTMLElememnts\n * @param options\n * @returns\n */\nexport declare function query(options?: Partial<QueryOptions>): Link<string, HTMLElement>;\n//# sourceMappingURL=dom.d.ts.map","import { type Interval, type RankFunction, type RankOptions, type RankArrayOptions } from \"@ixfx/core\";\nimport type { Link, DelayOptions } from \"./types.js\";\n/**\n * Transform values from one type to another. Just like a map function.\n * @param transformer\n * @returns\n */\nexport declare function transform<In, Out>(transformer: (v: In) => Out): Link<In, Out>;\n/**\n * Take `limit` number of results from the stream, before closing\n * @param limit\n * @returns\n */\nexport declare function take<In>(limit: number): Link<In, In>;\n/**\n * Takes an array of values, flattening to a single one\n * using the provided `reducer` function.\n *\n * ```js\n * // Create a chain that flattens values\n * const reduce = Chains.reduce(values => Math.max(...values));\n * // Feed it a single input (an array), get a single output back:\n * const result = await Chains.single(reduce, [ 1, 2, 3]); // 3\n * ```\n * @param reducer Function to reduce array of values to a single value\n * @returns\n */\nexport declare function reduce<In, Out>(reducer: (v: In[]) => Out): Link<In[], Out>;\n/**\n * Allow values through until a duration has elapsed. After\n * that, the chain stops.\n * @param elapsed\n * @returns\n */\nexport declare function duration<In>(elapsed: Interval): Link<In, In>;\n/**\n * Add delay before/after values are emitted from the input stream.\n * @param options\n * @returns\n */\nexport declare function delay<In>(options: DelayOptions): Link<In, In>;\n/**\n * Ensure a minimum length of time between values.\n * Values being produced too quickly are dropped.\n *\n * In the following example, only three values will be let through.\n * ```js\n * const chain = Chains.run(\n *  // Produce values every 10ms for 350ms\n *  Chains.From.timestamp({ interval: 10, elapsed: 350 }),\n *  // Only let a value through every 100ms\n *  Chains.Links.debounce(100)\n * );\n * ```\n * @param rate\n * @returns\n */\nexport declare function debounce<In>(rate: Interval): Link<In, In>;\n/**\n * Returns a running tally of how many items have been\n * emitted from the input source.\n * ```js\n * const ch = Chains.run(\n *  Chains.From.timestamp({ interval: 100 }),\n *  Chains.Links.tally()\n * );\n *\n * for await (const v of ch) {\n *   // Produces: 1, 2, 3 ... every 100ms\n * }\n * ```\n * This is different than {@link sum} which adds up numeric values.\n * By default it adds up individual array items\n * @returns\n */\nexport declare function tally<In>(countArrayItems?: boolean): Link<In, number>;\n/**\n * Returns the smallest value from the input.\n * Can work with numbers or number[] as input.\n * Non-numeric data is filtered out.\n * @returns\n */\nexport declare function min(): Link<number | number[], number>;\n/**\n * Returns the largest value from the input.\n * - Non-numeric data is filtered out.\n * - Looks inside of numeric arrays.\n * @returns\n */\nexport declare function max(): Link<number | number[], number>;\n/**\n * Emits the currently ranked 'highest' value from a stream. Only\n * values exceeding the current highest are emitted.\n *\n * eg, if we are ranking on numerical value, an input stream of:\n * ```\n * 4, 1, 6, 10, 2, 4\n * ```\n *\n * Results in the output stream of:\n * ```\n * 4, 6, 10\n * ```\n *\n * @example\n * ```js\n * // Rank based on a field\n * Chains.Links.rank((a,b) => {\n *  if (a.size > b.size) return `a`; // Signals the first param is highest\n *  if (a.size < b.size) return `b`; // Signals the second param is highest\n *  return `eq`;\n * });\n * ```\n * @param options\n * @returns\n */\nexport declare function rank<In>(r: RankFunction<In>, options?: Partial<RankOptions>): Link<In, In>;\n/**\n * Emits the highest-ranked value from amongst an array of values.\n *\n * By default, it tracks the highest-ranked _between_ arrays.\n *\n * For example:\n * ```js\n * // Input\n * [ [4,5,6], [1,2,3] ]\n * // Outputs:\n * [ 6 ]\n * ```\n *\n * This behaviour can be modified with an option to only compare _within_ arrays.\n * ```\n * // Input\n * [ [4,5,6], [1,2,3] ]\n * // Output:\n * [ 6, 3 ]\n * ```\n *\n * Uses the `rank` option to determine which is more highly ranked.\n * ```js\n * Chains.Links.rankArray(\n *  (a, b) => {\n *    if (a > b) return `a`; // a is higher\n *    else if (b > a) return `b`; // b is higher\n *    return `eq`; // same\n *  }\n * )\n * ```\n * @param options\n * @returns\n */\nexport declare function rankArray<In>(r: RankFunction<In>, options?: Partial<RankArrayOptions>): Link<In[], In>;\n/**\n * Returns the average from the input.\n * Non-numeric values are filtered out.\n * @returns\n */\nexport declare function average(): Link<number, number>;\n/**\n * Returns the total of the numeric values.\n * Non-numeric values are filtered out.\n * @returns\n */\nexport declare function sum(): Link<number, number>;\n/**\n * Chunks an input stream into `size` chunks.\n *\n * Eg, with a chunk size of 3, the input stream of:\n *  1, 2, 3, 4, 5, 6\n * Yields:\n *  [ 1, 2, 3 ], [ 4, 5, 6 ]\n *\n * If `returnRemainders` is _true_ (default), any left over values are returned even if\n * it's less than `size`.\n * @param size\n * @param returnRemainders If true (default) left over data that didn't make a full chunk is also returned\n * @returns\n */\nexport declare function chunk<In>(size: number, returnRemainders?: boolean): Link<In, In[]>;\n/**\n * Filters the input source, only allowing through\n * data for which `predicate` returns _true_\n *\n * {@link drop}, on the other hand excludes values for which predicate is _true_\n * @param predicate\n * @returns\n */\nexport declare function filter<In>(predicate: (v: In) => boolean): Link<In, In>;\n/**\n * Drops all values from input stream for which `predicate` returns _true_\n *\n * {@link filter}, on the other hand includes values where the predicate is _true_\n * @param predicate\n * @returns\n */\nexport declare function drop<In>(predicate: (v: In) => boolean): Link<In, In>;\n//# sourceMappingURL=links.d.ts.map","import { type Interval } from \"@ixfx/core\";\nimport type { GenFactoryNoInput } from \"../types.js\";\n/**\n * Creates a chain from an array, reading values at a given interval\n * @param it\n * @param delay\n * @returns\n */\nexport declare function array<Out>(it: Out[], delay?: Interval): GenFactoryNoInput<Out>;\n//# sourceMappingURL=array.d.ts.map","import type { GenFactoryNoInput } from \"../types.js\";\n/**\n * Create an iterable from an event\n * @param target Event source (eg HTML element)\n * @param name Name of event (eg. 'pointermove')\n * @returns\n */\nexport declare function event<Out>(target: EventTarget, name: string): GenFactoryNoInput<Out>;\n//# sourceMappingURL=event.d.ts.map","import type { GenFactoryNoInput } from \"../types.js\";\n/**\n * Produce a value from a callback. When\n * the callback returns _undefined_ it is considered done.\n *\n * ```js\n * const callback = () => Math.random();\n *\n * const f = Chains.From.func(callback);\n * for await (const v of f) {\n *  // v is a new random number\n * }\n * ```\n *\n * In the context of a chain:\n * ```js\n * let produced = 0;\n * const chain = Chains.chain<number, string>(\n *  // Produce incrementing numbers\n *  Chains.From.func(() => produced++),\n *  // Convert to `x:0`, `x:1` ...\n *  Chains.transform(v => `x:${ v }`),\n *  // Take first 5 results\n *  Chains.cap(5)\n * );\n * const data = await Chains.asArray(chain);\n * ```\n * @param callback\n * @returns\n */\nexport declare function func<Out>(callback: () => Promise<Out> | Out): GenFactoryNoInput<Out>;\n//# sourceMappingURL=function.d.ts.map","import type { GenFactoryNoInput } from \"../types.js\";\n/**\n * Creates a chain from an interable\n * @param it\n * @returns\n */\nexport declare function iterable<Out>(it: Iterable<Out> | AsyncIterable<Out>): GenFactoryNoInput<Out>;\n//# sourceMappingURL=iterable.d.ts.map","import type { GenFactoryNoInput, TickOptions } from \"../types.js\";\n/**\n * Generate timestamp values at `interval` rate. By default it runs forever.\n * Use `loops` or `elapsed` to set upper limit on how long it should run.\n *\n * ```js\n * const c = Chains.From.timestamp({ interval: 1000 });\n * ```\n * Options:\n * - `asClockTime`: If _true_, yielded value will be clock time rather than elapsed milliseconds\n * @param options\n * @returns\n */\nexport declare function timestamp(options: TickOptions): GenFactoryNoInput<number>;\n//# sourceMappingURL=ticks.d.ts.map","export * from './array.js';\nexport * from './event.js';\nexport * from './function.js';\nexport * from './iterable.js';\nexport * from './ticks.js';\n//# sourceMappingURL=index.d.ts.map","import type { GenFactoryNoInput } from \"./types.js\";\n/**\n * Adds values to the provided array as they are produced,\n * mutating array.\n *\n * ```js\n * const data = [];\n * addToArray(data, tick({ interval: 1000, loops: 5 }));\n * // Execution continues immediately, with `data` mutated over time\n * ```\n * @param valueToWrap\n * @param array\n */\nexport declare function addToArray<Out>(array: Out[], valueToWrap: AsyncGenerator<Out> | GenFactoryNoInput<Out>): Promise<void>;\n//# sourceMappingURL=add-to-array.d.ts.map","import type { GenFactoryNoInput } from \"./types.js\";\nimport type { ToArrayOptions } from \"../types.js\";\n/**\n * Async function that returns the chain as an array of values\n * ```js\n * const values = await asArray(tick( { interval: 1000, loops: 5 }));\n * // After 5 seconds, values will be a set of timestamps.\n * ```\n *\n * If the chain is infinite, be sure to specify limits:\n * ```js\n * // Stop after we have five items\n * const values = await asArray(chain, { limit: 5 });\n * // Stop after 5 seconds has elapsed\n * const values = await asArray(chain, { elapsed: 5000 });\n * ```\n * @param valueToWrap\n * @returns\n */\nexport declare function asArray<Out>(valueToWrap: AsyncGenerator<Out> | GenFactoryNoInput<Out>, options?: Partial<ToArrayOptions>): Promise<Out[]>;\n//# sourceMappingURL=as-array.d.ts.map","import type { GenFactoryNoInput, GenOrData } from \"./types.js\";\n/**\n * Calls `callback` whenever the chain/generator produces a value.\n *\n * When using `asCallback`, call it with `await` to let generator\n * run its course before continuing:\n * ```js\n * await asCallback(tick({ interval:1000, loops:5 }), x => {\n *  // Gets called 5 times, with 1000ms interval\n * });\n * console.log(`Hi`); // Prints after 5 seconds\n * ```\n *\n * Or if you skip the `await`, code continues and callback will still run:\n * ```js\n * asCallback(tick({ interval: 1000, loops: 5}), x => {\n *  // Gets called 5 times, with 1000ms interval\n * });\n * console.log(`Hi`); // Prints immediately\n * ```\n * @param valueToWrap\n * @param callback\n */\nexport declare function asCallback<V>(valueToWrap: GenOrData<V> | GenFactoryNoInput<V>, callback: (v: V) => unknown, onDone?: () => void): Promise<void>;\n//# sourceMappingURL=as-callback.d.ts.map","import type { GenFactoryNoInput } from \"./types.js\";\n/**\n * Treats the chain/generator as a promise\n *\n * ```js\n * const ticker = asPromise(tick({ interval: 1000 }));\n * const x = await ticker(); //  Waits for 1000ms before giving a value\n * ```\n *\n * This will only ever return one value. To return multiple values, it's necessary\n * to call `asPromise` and `await` the result in a loop.\n * @param valueToWrap\n * @returns\n */\nexport declare function asPromise<V>(valueToWrap: AsyncGenerator<V> | GenFactoryNoInput<V>): () => Promise<V | undefined>;\n//# sourceMappingURL=as-promise.d.ts.map","import type { GenFactoryNoInput } from \"./types.js\";\n/**\n * Returns the most recent value from the chain/generator, or\n * `initialValue` (defaulting to _undefined_) if no value\n * has been emitted yet.\n *\n * ```js\n * const ticker = asValue(tick({ interval: 1000 }));\n * x = ticker(); // Get the most recent value\n * ```\n *\n * Every time it's called, it fetches a new value from the generator, assuming\n * it isn't already awaiting a result.\n *\n * In the meantime, the last value (or `initialValue`) is returned.\n * @param valueToWrap Value to wrap\n * @param initialValue Initial value\n * @returns\n */\nexport declare function asValue<V>(valueToWrap: AsyncGenerator<V> | GenFactoryNoInput<V>, initialValue?: V): () => V | undefined;\n//# sourceMappingURL=as-value.d.ts.map","import type { GenOrData, GenFactoryNoInput, CombineLatestOptions } from \"./types.js\";\n/**\n * Monitors sources, storing as they happen to an array.\n * Whenever a new value is emitted, the whole array is sent out, containing current\n * values from each source, or _undefined_ if not yet emitted.\n *\n * The tempo of this stream will be set by the fastest source stream.\n * See {@link syncToArray} to have pace determined by slowest source, and only\n * send when each source has produce a new value compared to last time.\n *\n * Set `onSourceDone` to choose behaviour if a source stops. The default is\n * 'break', meaning the whole combined stream stops.\n *\n * If a source completes and onSourceDone = 'allow', the option\n * 'finalValue' sets the logic for what values get returned for the source.\n * By default the setting is 'undefined', thus _undefined_ results. 'last' will be the last (old) value\n * from that source.\n */\nexport declare function combineLatestToArray(sources: (GenOrData<any> | GenFactoryNoInput<any>)[], options?: Partial<CombineLatestOptions>): AsyncGenerator<any[]>;\n//# sourceMappingURL=combine-latest-to-array.d.ts.map","import type { GenOrData, GenFactoryNoInput, CombineLatestOptions, GenValueTypeObject } from \"./types.js\";\n/**\n * Monitors sources, storing as they happen to an object.\n * Whenever a new value is emitted, the object is sent out, containing current\n * values from each source, or _undefined_ if not yet emitted.\n *\n * The tempo of this stream will be set by the fastest source stream.\n * See {@link syncToObject} to have pace determined by slowest source, and only\n * send when each source has produce a new value compared to last time.\n *\n * Set `onSourceDone` to choose behaviour if a source stops. By default it\n * is 'break', meaning the whole merged stream stops.\n *\n * If a source completes and onSourceDone = 'allow', the option\n * 'finalValue' sets the logic for what values get returned for the source.\n * By default the setting is 'undefined', thus _undefined_ results. 'last' will be the last (old) value\n * from that source.\n */\nexport declare function combineLatestToObject<const T extends Record<string, GenOrData<any> | GenFactoryNoInput<any>>>(sources: T, options?: Partial<CombineLatestOptions>): AsyncGenerator<GenValueTypeObject<T>>;\n//# sourceMappingURL=combine-latest-to-object.d.ts.map","import type { LazyChain } from \"./types.js\";\nexport declare function lazy<In, Out>(): LazyChain<In, Out>;\n//# sourceMappingURL=lazy.d.ts.map","import type { GenFactoryNoInput, GenOrData } from \"./types.js\";\n/**\n * Merge values from several sources into one stream, interleaving values.\n * When all streams are complete it finishes.\n *\n * Alternatively:\n * - {@link combineLatestToArray}/{@link combineLatestToObject} emits snapshots of all the generators, as quickly as the fastest one\n * - {@link syncToArray}/{@link syncToObject} which releases a set of results when all inputs have emitted a value\n * @param sources\n */\nexport declare function mergeFlat<Out>(...sources: (GenOrData<any> | GenFactoryNoInput<any>)[]): AsyncGenerator<Out>;\n//# sourceMappingURL=merge-flat.d.ts.map","import type { GenFactoryNoInput, GenOrData, Links } from \"./types.js\";\n/**\n * Prepare a chain, allowing you to provide a source at execution time.\n * ```js\n * const chain = Chains.prepare(\n *  Chains.transform<string,number>( v => Number.parseInt(v) ),\n *  Chains.filter<number>(v => v % 2 === 0)\n * );\n *\n * // Run it with provided source\n * for await (const v of chain([`1`, `2`, `3`])) {\n *\n * }\n * ```\n * @param functions\n * @returns\n */\nexport declare function prepare<In, Out>(...functions: Links<In, Out>): (source: GenOrData<In> | GenFactoryNoInput<In>) => AsyncGenerator<Out, any, any>;\n//# sourceMappingURL=prepare.d.ts.map","import type { LinksWithSource, GenOrData, GenFactoryNoInput, Link } from \"./types.js\";\n/**\n * Chain functions together. First argument is the source.\n * `runN` takes any number of chain functions. Use {@link run} if\n * possible, because it has improved type hinting.\n *\n * @example Process an array of strings. Transforming into\n * integers, and then filtering only even numbers.\n * ```js\n * const ch = Chains.runN(\n *  [ `1`, `2`, `3`, `4`, `5`, `6`, `7`, `8`, `9`, `10` ],\n *  Chains.transform<string, number>(v => Number.parseInt(v)),\n *  Chains.filter(v => v % 2 === 0)\n *);\n * const output = await Async.toArray(ch2);\n * // [ 2, 4, 6, 8, 10 ]\n * ```\n *\n * @example Grab the x/y coordinate from pointermove\n * ```js\n * const c1 = Chains.run(\n *  Chains.fromEvent(window, `pointermove`),\n *  Chains.Links.transform(event => ({ x: event.x, y: event.y }))\n * );\n *\n * // Eg: print out data as it comes in\n * Iterables.forEach(c1, coord => {\n *   console.log(coord);\n * });\n * // Execution continues immediately\n * ```\n * @param functions\n * @returns\n */\nexport declare function runN<In, Out>(...functions: LinksWithSource<In, Out>): AsyncGenerator<Out>;\nexport declare function run<T1>(gen: GenOrData<T1> | GenFactoryNoInput<T1>): AsyncGenerator<T1>;\nexport declare function run<T1, T2>(gen: GenOrData<T1> | GenFactoryNoInput<T1>, l0: Link<T1, T2>): AsyncGenerator<T2>;\nexport declare function run<T1, T2, T3>(gen: GenOrData<T1> | GenFactoryNoInput<T1>, l0: Link<T1, T2>, l1: Link<T2, T3>): AsyncGenerator<T3>;\nexport declare function run<T1, T2, T3, T4>(gen: GenOrData<T1> | GenFactoryNoInput<T1>, l0: Link<T1, T2>, l1: Link<T2, T3>, l2: Link<T3, T4>): AsyncGenerator<T4>;\nexport declare function run<T1, T2, T3, T4, T5>(gen: GenOrData<T1> | GenFactoryNoInput<T1>, l0: Link<T1, T2>, l1: Link<T2, T3>, l2: Link<T3, T4>, l3: Link<T4, T5>): AsyncGenerator<T5>;\nexport declare function run<T1, T2, T3, T4, T5, T6>(gen: GenOrData<T1> | GenFactoryNoInput<T1>, l0: Link<T1, T2>, l1: Link<T2, T3>, l2: Link<T3, T4>, l3: Link<T4, T5>, l4: Link<T5, T6>): AsyncGenerator<T6>;\nexport declare function run<T1, T2, T3, T4, T5, T6, T7>(gen: GenOrData<T1> | GenFactoryNoInput<T1>, l0: Link<T1, T2>, l1: Link<T2, T3>, l2: Link<T3, T4>, l3: Link<T4, T5>, l4: Link<T5, T6>, l5: Link<T6, T7>): AsyncGenerator<T7>;\n//# sourceMappingURL=run.d.ts.map","import type { Link } from \"./types.js\";\n/**\n * Input a single value to the chain, return a single result\n *\n *\n * ```js\n * // Create chain link\n * const f = Chains.Links.flatten<string, string>(data => data.join(`-`));\n * // Input a single value (an array)\n * const r1 = await Chains.single(f, [ `a`, `b`, `c` ]);\n * // r1 = `a-b-c`\n * ```\n * @param f\n * @param input\n * @returns\n */\nexport declare function single<In, Out>(f: Link<In, Out>, input: In): Promise<Out | undefined>;\n//# sourceMappingURL=single.d.ts.map","import type { GenOrData, GenFactoryNoInput, SyncOptions } from \"./types.js\";\n/**\n * Waits for all sources to produce a value, sending the combined results as an array.\n * After sending, it waits again for each source to send at least one value.\n *\n * Use {@link syncToObject} to output objects based on labelled sources rather than an array of values.\n *\n * Pace will be set by the slowest source. Alternatively, use {@link combineLatestToArray} where the rate is determined by fastest source.\n *\n * Only complete results are sent. For example if source A & B finish and\n * source C is still producing values, synchronisation is not possible\n * because A & B stopped producing values. Thus the stream will terminate\n * after `maximumWait` (2 seconds). Newer values from C are lost.\n */\nexport declare function syncToArray(sources: (GenOrData<any> | GenFactoryNoInput<any>)[], options?: Partial<SyncOptions>): AsyncGenerator<any[]>;\n//# sourceMappingURL=sync.d.ts.map","import type { GenOrData, GenFactoryNoInput, Gen } from \"./types.js\";\nexport declare function isGenFactoryNoInput<Out>(c: any): c is GenFactoryNoInput<Out>;\n/**\n * Resolve the array, data or function to a Generator\n * @param input\n * @returns\n */\nexport declare function resolveToGen<V>(input: GenOrData<V> | GenFactoryNoInput<V>): Gen<V>;\n/**\n * Resolve the data, primitive or function to an AsyncGenerator\n * @param input\n * @returns\n */\nexport declare function resolveToAsyncGen<V>(input: GenOrData<V> | GenFactoryNoInput<V> | undefined): AsyncGenerator<V> | undefined;\n//# sourceMappingURL=utility.d.ts.map","export * as Dom from './dom.js';\nexport * as Links from './links.js';\nexport * as From from './from/index.js';\nexport * from './add-to-array.js';\nexport * from './as-array.js';\nexport * from './as-callback.js';\nexport * from './as-promise.js';\nexport * from './as-value.js';\nexport * from './combine-latest-to-array.js';\nexport * from './combine-latest-to-object.js';\nexport * from './lazy.js';\nexport * from './merge-flat.js';\nexport * from './prepare.js';\nexport * from './run.js';\nexport * from './single.js';\nexport * from './sync.js';\nexport * from './types.js';\nexport * from './utility.js';\n//# sourceMappingURL=index.d.ts.map","import { type IsEqual } from \"@ixfx/core\";\n/**\n * Returns the 'max' of some iterable using the provided scoring function.\n * It only yields a value when iterator finishes.\n * @param iterable\n * @param scorer\n * @returns\n */\nexport declare const maxScore: <V>(iterable: Iterable<V>, scorer: (v: V) => number) => V | undefined;\n/**\n * Returns the 'min' of some iterable using the provided scoring function.\n * It only yields a value when iterator finishes.\n * @param iterable\n * @param scorer\n * @returns\n */\nexport declare const minScore: <V>(iterable: Iterable<V>, scorer: (v: V) => number) => V | undefined;\n/**\n * Returns _true_ if all values in iterables are equal, regardless\n * of their position. Uses === equality semantics by default.\n *\n * Is NOT recursive.\n *\n * @example Default equality checking\n * ```js\n * const a = ['apples','oranges','pears'];\n * const b = ['pears','oranges','apples'];\n * hasEqualValuesShallow(a, b); // True\n * ```\n *\n * @example Custom equality checking\n * ```js\n * const a = [ { name: 'John' }];\n * const b = [ { name: 'John' }];\n * // False, since object identies are different\n * hasEqualValuesShallow(a, b);\n * // True, since now we're comparing by value\n * hasEqualValuesShallow(a, b, (aa,bb) => aa.name === bb.name);\n * ```\n * @param iterableA First iterable to check\n * @param iterableB Iterable to compare against\n * @param eq Equality function, uses === by default\n */\nexport declare const hasEqualValuesShallow: <V>(iterableA: Iterable<V>, iterableB: Iterable<V>, eq?: IsEqual<V>) => boolean;\n//# sourceMappingURL=compare-values.d.ts.map","import type { IteratorControllerState, IteratorControllerOptions } from \"./types.js\";\nexport type IteratorController = {\n    get state(): IteratorControllerState;\n    /**\n     * Starts 'playback' of the iterator.\n     * If already started, this does nothing.\n     * If paused, continues playback.\n     * Use {@link restart} if you want to start with a reset.\n     * @returns\n     */\n    start: () => void;\n    /**\n     * Starts or restarts 'playback' of the iterator.\n     * @returns\n     */\n    restart: () => void;\n    /**\n     * Pauses 'playback' of the iterator.\n     * If already paused, does nothing.\n     * Use {@link start} to resume.\n     * @returns\n     */\n    pause: () => void;\n    /**\n     * Cancels the running timer. This will\n     * stop playback, and next time {@link start}\n     * is called, it will be from the beginning.\n     * @returns\n     */\n    cancel: () => void;\n};\n/**\n * Retrieve values from an iterator, passing them to a callback.\n * Allows iterator to be started, paused, or restarted and an optional delay between reading items from iterator.\n * @param options\n * @returns\n */\nexport declare const iteratorController: <T>(options: IteratorControllerOptions<T>) => IteratorController;\n//# sourceMappingURL=controller.d.ts.map","import type { WithEvents } from \"./types.js\";\nexport declare const fromEvent: <V>(eventSource: WithEvents, eventType: string) => AsyncIterator<any>;\n//# sourceMappingURL=from-event.d.ts.map","export declare const isAsyncIterable: (v: any) => v is AsyncIterable<any>;\nexport declare const isIterable: (v: any) => v is Iterable<any>;\n//# sourceMappingURL=guard.d.ts.map","import { type NumbersComputeOptions, type NumbersComputeResult } from \"@ixfx/numbers\";\n/**\n * Returns the min, max, avg and total of the array or iterable.\n * Any values that are invalid are silently skipped over.\n *\n * ```js\n * const v = [ 10, 2, 4.2, 99 ];\n * const mma = numbersCompute(v);\n * // Yields: { min: 2, max: 99, total: 115.2, avg: 28.8 }\n * ```\n *\n * Use {@link https://api.ixfx.fun/_ixfx/numbers/average/ @ixfx/numbers.average}, {@link https://api.ixfx.fun/_ixfx/numbers/max/ @ixfx/numbers.max}, {@link https://api.ixfx.fun/_ixfx/numbers/min/ @ixfx/numbers.min} or {@link https://api.ixfx.fun/_ixfx/numbers/total/ @ixfx/numers.total} if you only need one of these.\n *\n * A start and end range can be provided if the calculation should be restricted to a part\n * of the input array. By default the whole array is used.\n *\n * It's also possible to use an iterable as input.\n * ```js\n * import { count } from '@ixfx/numbers';\n * numbersCompute(count(5,1)); // Averages 1,2,3,4,5\n * ```\n *\n * Returns `NaN` if the input data is empty.\n * @param data\n * @param options Allows restriction of range that is examined\n * @returns `{min, max, avg, total}`\n */\nexport declare const numbersCompute: (data: readonly number[] | number[] | Iterable<number>, options?: NumbersComputeOptions) => NumbersComputeResult;\nexport declare function computeAverage(data: Iterable<number>, options?: NumbersComputeOptions): number;\n//# sourceMappingURL=numbers-compute.d.ts.map","export * as Async from './async.js';\nexport * as Sync from './sync.js';\nexport * as Chains from './chain/index.js';\nexport { combineLatestToArray } from './chain/combine-latest-to-array.js';\nexport { combineLatestToObject } from './chain/combine-latest-to-object.js';\nexport * from './compare-values.js';\nexport * from './controller.js';\nexport * from './from-event.js';\nexport * from './guard.js';\nexport * from './types.js';\nimport type { Interval } from '@ixfx/core';\nimport type { ForEachOptions, ToArrayOptions } from './types.js';\nexport * from './numbers-compute.js';\nexport declare function min<V>(it: AsyncIterable<V>, gt?: (a: V, b: V) => boolean): AsyncGenerator<V>;\nexport declare function min<V>(it: Iterable<V>, gt?: (a: V, b: V) => boolean): Generator<V>;\nexport declare function max<V>(it: AsyncIterable<V>, gt?: (a: V, b: V) => boolean): AsyncGenerator<V>;\nexport declare function max<V>(it: Iterable<V>, gt?: (a: V, b: V) => boolean): Generator<V>;\nexport declare function dropWhile<V>(it: AsyncIterable<V>, f: (v: V) => boolean): AsyncGenerator<V>;\nexport declare function dropWhile<V>(it: Iterable<V>, f: (v: V) => boolean): Generator<V>;\nexport declare function until(it: AsyncIterable<any>, f: () => Promise<boolean> | Promise<undefined>): Promise<undefined>;\nexport declare function until(it: Iterable<any>, f: () => boolean | never): void;\nexport declare function until(it: Iterable<any>, f: () => Promise<boolean>): Promise<undefined>;\nexport declare function chunks<V>(it: Iterable<V>, size: number): Generator<V[]>;\nexport declare function chunks<V>(it: AsyncIterable<V>, size: number): AsyncGenerator<V[]>;\nexport declare function filter<V>(it: AsyncIterable<V>, f: (v: V) => boolean | Promise<boolean>): AsyncGenerator<V>;\nexport declare function filter<V>(it: AsyncIterable<V>, f: (v: V) => boolean): Generator<V>;\nexport declare function fill<V>(it: AsyncIterable<V>, v: V): AsyncGenerator<V>;\nexport declare function fill<V>(it: Iterable<V>, v: V): Generator<V>;\nexport declare function concat<V>(...its: Iterable<V>[]): Generator<V>;\nexport declare function concat<V>(...its: AsyncIterable<V>[]): AsyncGenerator<V>;\nexport declare function find<V>(it: V[] | Iterable<V>, f: (v: V) => boolean): V | undefined;\nexport declare function find<V>(it: AsyncIterable<V>, f: (v: V) => boolean | Promise<boolean>): Promise<V | undefined>;\n/**\n * Execute function `f` for each item in iterable.\n * If `f` returns _false_, iteration stops.\n * ```js\n * forEach(iterable, v => {\n *  // do something with value\n * });\n * ```\n *\n * When using an async iterable, `fn` can also be async.\n * @param it Iterable or array\n * @param fn Function to execute\n */\nexport declare function forEach<T>(it: T[] | AsyncIterable<T> | Iterable<T>, fn: (v: T | undefined) => boolean | Promise<boolean> | void | Promise<void>, options?: Partial<ForEachOptions>): Promise<void> | undefined;\nexport declare function map<V, X>(it: AsyncIterable<V>, f: (v: V) => Promise<X> | X): Generator<X>;\nexport declare function map<V, X>(it: V[] | Iterable<V>, f: (v: V) => X): Generator<X>;\nexport declare function fromArray<V>(array: V[], interval: Interval): AsyncGenerator<V>;\nexport declare function fromArray<V>(array: V[]): Generator<V>;\nexport declare function flatten<V>(it: AsyncIterable<V[] | V>): AsyncIterable<V>;\nexport declare function flatten<V>(it: Iterable<V[] | V> | V[]): Iterable<V>;\nexport declare function some<V>(it: AsyncIterable<V>, f: (v: V) => boolean | Promise<boolean>): Promise<boolean>;\nexport declare function some<V>(it: Iterable<V> | V[], f: (v: V) => boolean): boolean;\nexport declare function last<V>(it: AsyncIterable<V>): Promise<V | undefined>;\nexport declare function last<V>(it: Iterable<V>): V;\nexport declare function reduce<V>(it: AsyncIterable<V>, f: (accumulator: V, current: V) => V, start: V): Promise<V>;\nexport declare function reduce<V>(it: Iterable<V> | V[], f: (accumulator: V, current: V) => V, start: V): V;\nexport declare function slice<V>(it: AsyncIterable<V>, start?: number, end?: number): AsyncGenerator<V>;\nexport declare function slice<V>(it: Iterable<V> | V[], start?: number, end?: number): Generator<V>;\nexport declare function unique<V>(iterable: Iterable<V> | Iterable<V>[]): Generator<V>;\nexport declare function unique<V>(iterable: AsyncIterable<V> | AsyncIterable<V>[]): AsyncGenerator<V>;\nexport declare function uniqueByValue<T>(input: Iterable<T> | T[], toString: (v: T) => string, seen?: Set<string>): Generator<T>;\nexport declare function uniqueByValue<T>(input: AsyncIterable<T>, toString: (v: T) => string, seen?: Set<string>): AsyncGenerator<T>;\nexport declare function toArray<V>(it: AsyncIterable<V>, options?: Partial<ToArrayOptions>): Promise<V[]>;\nexport declare function toArray<V>(it: Iterable<V>, options?: Partial<ToArrayOptions>): V[];\nexport declare function every<V>(it: Iterable<V> | V[], f: (v: V) => boolean): boolean;\nexport declare function every<V>(it: AsyncIterable<V>, f: (v: V) => boolean | Promise<boolean>): Promise<boolean>;\nexport declare function equals<V>(it1: AsyncIterable<V>, it2: AsyncIterable<V>, equality?: (a: V, b: V) => boolean): Promise<boolean>;\nexport declare function equals<V>(it1: IterableIterator<V>, it2: IterableIterator<V>, equality?: (a: V, b: V) => boolean): boolean;\nexport declare function zip<V>(...its: readonly AsyncIterable<V>[]): Generator<V[]>;\nexport declare function zip<V>(...its: readonly Iterable<V>[]): Generator<V>;\nexport declare function fromIterable<V>(iterable: Iterable<V>): Generator<V>;\nexport declare function fromIterable<V>(iterable: AsyncIterable<V> | Iterable<V>, interval: Interval): AsyncGenerator<V>;\n/**\n * Access `callback` as an iterable:\n * ```js\n * const fn = () => Math.random();\n * for (const v of fromFunction(fn)) {\n *  // Generate infinite random numbers\n * }\n * ```\n *\n * Use {@link fromFunctionAwaited} to await `callback`.\n * @param callback Function that generates a value\n */\nexport declare function fromFunction<T>(callback: () => T): Generator<T, void, unknown>;\n/**\n * Access awaited `callback` as an iterable:\n * ```js\n * const fn = () => Math.random();\n * for await (const v of fromFunctionAwaited(fn)) {\n *  // Generate infinite random numbers\n * }\n * ```\n *\n * `callback` can be async, result is awaited.\n * This requires the use of `for await`.\n * Use {@link fromFunction} otherwise;\n * @param callback\n */\nexport declare function fromFunctionAwaited<T>(callback: () => Promise<T> | T): AsyncGenerator<Awaited<T>, void, unknown>;\n/**\n * Calls `callback` whenever the generator produces a value.\n *\n * When using `asCallback`, call it with `await` to let generator\n * run its course before continuing:\n * ```js\n * await asCallback(tick({ interval:1000, loops:5 }), x => {\n *  // Gets called 5 times, with 1000ms interval\n * });\n * console.log(`Hi`); // Prints after 5 seconds\n * ```\n *\n * Or if you skip the `await`, code continues and callback will still run:\n * ```js\n * asCallback(tick({ interval: 1000, loops: 5}), x => {\n *  // Gets called 5 times, with 1000ms interval\n * });\n * console.log(`Hi`); // Prints immediately\n * ```\n * @param input\n * @param callback\n */\nexport declare function asCallback<V>(input: AsyncIterable<V> | Iterable<V>, callback: (v: V) => unknown, onDone?: () => void): Promise<void> | undefined;\n//# sourceMappingURL=index.d.ts.map","/**\n * Handles utf-8 text encoding/decoding\n */\nexport declare class Codec {\n    enc: TextEncoder;\n    dec: TextDecoder;\n    /**\n     * Convert string to Uint8Array buffer\n     * @param text\n     * @returns\n     */\n    toBuffer(text: string): Uint8Array<ArrayBufferLike>;\n    /**\n     * Returns a string from a provided buffer\n     * @param buffer\n     * @returns\n     */\n    fromBuffer(buffer: AllowSharedBufferSource): string;\n}\n//# sourceMappingURL=codec.d.ts.map","/**\n * Receives text\n */\nexport declare class StringReceiveBuffer {\n    private onData;\n    separator: string;\n    buffer: string;\n    stream: WritableStream<string> | undefined;\n    constructor(onData: (data: string) => void, separator?: string);\n    close(): Promise<void>;\n    clear(): void;\n    writable(): WritableStream<string>;\n    private createWritable;\n    addImpl(string_: string): string;\n    add(string_: string): void;\n}\n//# sourceMappingURL=string-receive-buffer.d.ts.map","import type { Interval } from '@ixfx/core';\nimport { QueueMutable } from '@ixfx/collections/queue';\nimport { type Continuously } from '@ixfx/core';\nexport type Opts = {\n    readonly chunkSize?: number;\n    readonly interval?: Interval;\n};\n/**\n * Buffers a queue of strings.\n *\n * When text is queued via {@link add}, it is chopped up\n * into chunks and sent in serial to the `dataHandler` function.\n * Data is processed at a set rate, by default 10ms.\n *\n * ```js\n * const dataHandler = (data:string) => {\n *  // Do something with queued data.\n *  // eg. send to serial port\n * }\n *\n * // Create a buffer with a chunk size of 100 characters\n * const b = new StringWriteBuffer(dataHandler, { chunkSize: 100 });\n * b.add('some text'); // Write to buffer\n * // dataHandler will be called until queued data is empty\n * ```\n *\n * It's also possible to get the buffer as a WritableStream<string>:\n * ```js\n * const dataHandler = (data:string) => { ... }\n * const b = new StringWriteBuffer(dataHandler, 100);\n * const s = b.writable();\n * ```\n *\n * Other functions:\n * ```js\n * b.close(); // Close buffer\n * b.clear(); // Clear queued data, but don't close anything\n * ```\n */\nexport declare class StringWriteBuffer {\n    private dataHandler;\n    paused: boolean;\n    queue: QueueMutable<string>;\n    writer: Continuously;\n    stream: WritableStream<string> | undefined;\n    closed: boolean;\n    chunkSize: number;\n    /**\n     * Constructor\n     * @param dataHandler Calback to 'send' data onwards\n     * @param opts Options\n     */\n    constructor(dataHandler: (data: string) => Promise<void>, opts?: Opts);\n    /**\n     * Close writer (async)\n     */\n    close(): Promise<void>;\n    /**\n     * Clear queued data.\n     *\n     * Throws an error if {@link close} has been called.\n     */\n    clear(): void;\n    /**\n     * Gets the buffer as a writable stream.\n     *\n     * Do not close stream directly, use .close on this class instead.\n     *\n     * Throws an error if .close() has been called.\n     * @returns Underlying stream\n     */\n    writable(): WritableStream<string>;\n    private createWritable;\n    /**\n     * Run in a `continunously` loop to process queued data\n     * @returns _False_ if queue is empty and loop should stop. _True_ if it shoud continue.\n     */\n    onWrite(): Promise<boolean>;\n    /**\n     * Returns _true_ if {@link close} has been called.\n     */\n    get isClosed(): boolean;\n    /**\n     * Adds some queued data to send.\n     * Longer strings are automatically chunked up according to the buffer's settings.\n     *\n     * Throws an error if {@link close} has been called.\n     * @param stringToQueue\n     */\n    add(stringToQueue: string): void;\n}\n//# sourceMappingURL=string-write-buffer.d.ts.map","export declare const genericStateTransitionsInstance: Readonly<{\n    ready: \"connecting\";\n    connecting: string[];\n    connected: string[];\n    closed: \"connecting\";\n}>;\n//# sourceMappingURL=generic-state-transitions.d.ts.map","import { type StateChangeEvent } from '@ixfx/flow/state-machine';\nimport { type Transitions } from '@ixfx/flow/state-machine';\nimport type { genericStateTransitionsInstance } from './generic-state-transitions.js';\nexport { type StateChangeEvent } from '@ixfx/flow/state-machine';\nexport type IoDataEvent = {\n    readonly data: string;\n};\nexport type IoEvents<StateMachineTransitions extends Transitions> = {\n    readonly data: IoDataEvent;\n    readonly change: StateChangeEvent<StateMachineTransitions>;\n};\nexport type GenericStateTransitions = Readonly<typeof genericStateTransitionsInstance>;\nexport type BleDeviceOptions = {\n    readonly service: string;\n    readonly rxGattCharacteristic: string;\n    readonly txGattCharacteristic: string;\n    readonly chunkSize: number;\n    readonly name: string;\n    readonly connectAttempts: number;\n    readonly debug: boolean;\n};\nexport type FrameProcessorSources = `` | `camera` | `video`;\n//# sourceMappingURL=types.d.ts.map","import { SimpleEventEmitter } from '@ixfx/events';\nimport { StateMachineWithEvents } from '@ixfx/flow/state-machine';\nimport { Codec } from './codec.js';\nimport { StringReceiveBuffer } from './string-receive-buffer.js';\nimport { StringWriteBuffer } from './string-write-buffer.js';\nimport { type BleDeviceOptions, type GenericStateTransitions, type IoEvents } from './types.js';\nexport declare class BleDevice extends SimpleEventEmitter<IoEvents<GenericStateTransitions>> {\n    private device;\n    private config;\n    states: StateMachineWithEvents<GenericStateTransitions>;\n    codec: Codec;\n    rx: BluetoothRemoteGATTCharacteristic | undefined;\n    tx: BluetoothRemoteGATTCharacteristic | undefined;\n    gatt: BluetoothRemoteGATTServer | undefined;\n    verboseLogging: boolean;\n    rxBuffer: StringReceiveBuffer;\n    txBuffer: StringWriteBuffer;\n    constructor(device: BluetoothDevice, config: BleDeviceOptions);\n    get isConnected(): boolean;\n    get isClosed(): boolean;\n    write(txt: string): void;\n    private writeInternal;\n    disconnect(): void;\n    connect(): Promise<void>;\n    private onRx;\n    protected verbose(m: string): void;\n    protected log(m: string): void;\n    protected warn(m: unknown): void;\n}\n//# sourceMappingURL=ble-device.d.ts.map","import { BleDevice } from './ble-device.js';\nexport declare const defaultOpts: {\n    chunkSize: number;\n    service: string;\n    txGattCharacteristic: string;\n    rxGattCharacteristic: string;\n    name: string;\n    connectAttempts: number;\n    debug: boolean;\n};\nexport type Opts = {\n    readonly chunkSize?: number;\n    readonly name?: string;\n    readonly connectAttempts?: number;\n    readonly debug?: boolean;\n};\nexport declare class NordicBleDevice extends BleDevice {\n    constructor(device: BluetoothDevice, opts?: Opts);\n}\n//# sourceMappingURL=nordic-ble-device.d.ts.map","/**\n * Visualiser component\n *\n * Usage: import visualiser.js. Instantiate on document load, and pass in the\n * parent element into the constructor.\n *\n * eg: const v = new Visualiser(document.getElementById('renderer'));\n *\n * Data must be passed to the component via renderFreq or renderWave.\n *\n * Draws on https://developer.mozilla.org/en-US/docs/Web/API/Web_Audio_API/Visualizations_with_Web_Audio_API\n */\nimport { AudioAnalyser } from './analyser.js';\nimport type { Point } from '@ixfx/geometry/point';\nexport declare class AudioVisualiser {\n    freqMaxRange: number;\n    audio: AudioAnalyser;\n    parent: HTMLElement;\n    lastPointer: Point;\n    pointerDown: boolean;\n    pointerClicking: boolean;\n    pointerClickDelayMs: number;\n    pointerDelaying: boolean;\n    waveTracker: any;\n    freqTracker: any;\n    el: HTMLElement;\n    constructor(parentElement: HTMLElement, audio: AudioAnalyser);\n    renderFreq(freq: readonly number[]): void;\n    isExpanded(): boolean;\n    setExpanded(value: boolean): void;\n    clear(): void;\n    clearCanvas(canvas: HTMLCanvasElement | null): void;\n    renderWave(wave: readonly number[], bipolar?: boolean): void;\n    getPointerRelativeTo(elem: HTMLElement): {\n        x: number;\n        y: number;\n    };\n    onPointer(event: MouseEvent | PointerEvent): void;\n}\n//# sourceMappingURL=visualiser.d.ts.map","import { AudioVisualiser } from './visualiser.js';\n/**\n * Options for audio processing\n *\n * fftSize: Must be a power of 2, from 32 - 32768. Higher number means\n * more precision and higher CPU overhead\n * @see https://developer.mozilla.org/en-US/docs/Web/API/AnalyserNode/fftSize\n *\n * smoothingTimeConstant: Range from 0-1, default is 0.8.\n * @see https://developer.mozilla.org/en-US/docs/Web/API/AnalyserNode/smoothingTimeConstant\n *\n * debug: If true, additonal console logging will happen\n */\nexport type Opts = {\n    readonly showVis?: boolean;\n    /**\n     * FFT size. Must be a power of 2, from 32 - 32768. Higher number means\n     * more precision and higher CPU overhead\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/AnalyserNode/fftSize\n     */\n    readonly fftSize?: number;\n    /**\n     * Range from 0-1, default is 0.8\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/AnalyserNode/smoothingTimeConstant\n     */\n    readonly smoothingTimeConstant?: number;\n    readonly debug?: boolean;\n};\nexport type DataAnalyser = (node: AnalyserNode, analyser: AudioAnalyser) => void;\n/**\n * Basic audio analyser. Returns back waveform and FFT analysis. Use {@link analyserPeakLevel} if you want sound level, or {@link analyserFrequency} if you just want FFT results.\n *\n * ```js\n * const onData = (freq, wave, analyser) => {\n *  // Demo: Get FFT results just for 100Hz-1KHz.\n *  const freqSlice = analyser.sliceByFrequency(100,1000,freq);\n *\n *  // Demo: Get FFT value for a particular frequency (1KHz)\n *  const amt = freq[analyser.getIndexForFrequency(1000)];\n * }\n * analyserBasic(onData, {fftSize: 512});\n * ```\n *\n * An `Analyser` instance is returned and can be controlled:\n * ```js\n * const analyser = analyserBasic(onData);\n * analyser.paused = true;\n * ```\n *\n * Note: Browers won't allow microphone access unless the call has come from a user-interaction, eg pointerup event handler.\n *\n* @param onData Handler for data\n * @param opts Options\n * @returns Analyser instance\n */\nexport declare const analyserBasic: (onData: (freq: Float32Array, wave: Float32Array, analyser: AudioAnalyser) => void, opts?: Opts) => AudioAnalyser;\n/**\n * Basic audio analyser. Returns FFT analysis. Use {@link analyserPeakLevel} if you want the sound level, or {@link analyserBasic} if you also want the waveform.\n *\n * ```js\n * const onData = (freq, analyser) => {\n *  // Demo: Print out each sound frequency (Hz) and amount of energy in that band\n *  for (let i=0;i<freq.length;i++) {\n *    const f = analyser.getFrequencyAtIndex(0);\n *    console.log(`${i}. frequency: ${f} amount: ${freq[i]}`);\n *  }\n * }\n * analyserFrequency(onData, {fftSize:512});\n * ```\n *\n * Note: Browers won't allow microphone access unless the call has come from a user-interaction, eg pointerup event handler.\n *\n * @param onData\n * @param opts\n * @returns\n */\nexport declare const analyserFrequency: (onData: (freq: Float32Array, analyser: AudioAnalyser) => void, opts?: Opts) => AudioAnalyser;\n/**\n * Basic audio analyser which reports the peak sound level.\n *\n * ```js\n * analyserPeakLevel(level => {\n *  console.log(level);\n * });\n * ```\n *\n * Note: Browers won't allow microphone access unless the call has come from a user-interaction, eg pointerup event handler.\n * @param onData\n * @param opts\n * @returns\n */\nexport declare const analyserPeakLevel: (onData: (level: number, analyser: AudioAnalyser) => void, opts?: Opts) => AudioAnalyser;\n/**\n * Helper for doing audio analysis. It takes case of connecting the audio stream, running in a loop and pause capability.\n *\n * Provide a function which works with an [AnalyserNode](https://developer.mozilla.org/en-US/docs/Web/API/AnalyserNode), and does something with the result.\n * ```js\n * const myAnalysis = (node, analyser) => {\n *  const freq = new Float32Array(node.frequencyBinCount);\n *  node.getFloatFrequencyData(freq);\n *  // Do something with frequency data...\n * }\n * const a = new Analyser(myAnalysis);\n * ```\n *\n * Helper functions provide ready-to-use Analysers:\n * * {@link analyserPeakLevel} peak decibel reading\n * * {@link analyserFrequency} FFT results\n * * {@link analyserBasic} FFT results and waveform\n *\n * Note: Browers won't allow microphone access unless the call has come from a user-interaction, eg pointerup event handler.\n *\n */\nexport declare class AudioAnalyser {\n    #private;\n    showVis: boolean;\n    fftSize: number;\n    smoothingTimeConstant: number;\n    debug: boolean;\n    visualiser: AudioVisualiser | undefined;\n    audioCtx: AudioContext | undefined;\n    analyserNode: AnalyserNode | undefined;\n    analyse: DataAnalyser;\n    constructor(analyse: DataAnalyser, opts?: Opts);\n    init(): void;\n    get paused(): boolean;\n    set paused(v: boolean);\n    private setup;\n    private onMicSuccess;\n    private analyseLoop;\n    /**\n     * Returns the maximum FFT value within the given frequency range\n     */\n    getFrequencyRangeMax(lowFreq: number, highFreq: number, freqData: readonly number[]): number;\n    /**\n     * Returns a sub-sampling of frequency analysis data that falls between\n     * `lowFreq` and `highFreq`.\n     * @param lowFreq Low frequency\n     * @param highFreq High frequency\n     * @param freqData Full-spectrum frequency data\n     * @returns Sub-sampling of analysis\n     */\n    sliceByFrequency(lowFreq: number, highFreq: number, freqData: readonly number[]): number[];\n    /**\n     * Returns the starting frequency for a given binned frequency index.\n     * @param index Array index\n     * @returns Sound frequency\n     */\n    getFrequencyAtIndex(index: number): number;\n    /**\n     * Returns a binned array index for a given frequency\n     * @param freq Sound frequency\n     * @returns Array index into frequency bins\n     */\n    getIndexForFrequency(freq: number): number;\n}\n//# sourceMappingURL=analyser.d.ts.map","export type AudioOscillatorOptions = {\n    type: OscillatorType;\n    frequency: number;\n    id: string;\n};\nexport type BasicAudio = {\n    ctx: AudioContext;\n    pan: StereoPannerNode;\n    gain: GainNode;\n    filter: BiquadFilterNode;\n    id: string;\n};\nexport type BasicAudioElement = BasicAudio & {\n    el: HTMLMediaElement;\n};\nexport type BasicAudioOscillator = BasicAudio & {\n    osc: OscillatorNode;\n};\n//# sourceMappingURL=types.d.ts.map","import type { BasicAudioElement } from \"./types.js\";\n/**\n * Scans page for <AUDIO> elements and creates playable controllers for them.\n * It uses the element's 'id' attribute as a way of fetching one later.\n *\n * ```js\n * const ae = new AudioElements();\n * ae.init(); // Initialise\n *\n * const a = ae.get('kick'); // Get the source that had id 'kick'\n * ```\n */\nexport declare class AudioElements {\n    #private;\n    filterType: BiquadFilterType;\n    constructor();\n    init(): void;\n    /**\n     * Gets a BasicAudio instance by key\n     * @param key\n     * @returns BasicAudio instance, or undefined\n     */\n    get(key: string): BasicAudioElement | undefined;\n}\n/**\n * Create a BasicAudioElement instance from an <AUDIO> tag in the HTML document.\n *\n * See {@link AudioElements} to automatically create sources from all <AUDIO> elements.\n * @param audioElementOrQuery Element or query (eg '#some-id')\n * @param filterType Filter type. Defaults to 'lowpass'\n * @returns\n */\nexport declare function createFromAudioElement(audioElementOrQuery: HTMLMediaElement | string, filterType?: BiquadFilterType): BasicAudioElement;\n//# sourceMappingURL=from-audio-element.d.ts.map","import type { AudioOscillatorOptions, BasicAudioOscillator } from \"./types.js\";\n/**\n * Initialise audio with an oscillator source\n * @param oscillatorOptions\n * @returns BasicAudio instance\n */\nexport declare function createOscillator(oscillatorOptions?: Partial<AudioOscillatorOptions>): BasicAudioOscillator;\n//# sourceMappingURL=from-oscillator.d.ts.map","export * from './analyser.js';\nexport type * from './types.js';\nexport * from './visualiser.js';\nexport * from './from-audio-element.js';\nexport * from './from-oscillator.js';\n//# sourceMappingURL=index.d.ts.map","export type MidiCommands = 'noteon' | 'noteoff' | 'pitchbend' | 'cc' | 'poly-at' | 'progchange' | 'at';\nexport type MidiMessage = {\n    command: MidiCommands;\n    channel: number;\n    note: number;\n    velocity: number;\n};\nexport type NoteMidiMessage = MidiMessage & {\n    command: `noteon` | `noteoff`;\n    noteName: string;\n    frequency: number;\n};\n//# sourceMappingURL=types.d.ts.map","import type { MidiMessage } from \"./types.js\";\n/**\n * Sends a note on and note off\n * @param port\n * @param channel\n * @param note\n * @param velocity\n * @param duration\n * @param delay\n */\nexport declare const sendNote: (port: MIDIOutput, channel: number, note: number, velocity: number, duration?: number, delay?: DOMHighResTimeStamp) => void;\n/**\n * Parses MIDI data from an array into a MidiMessage\n *\n * ```js\n * function onMidiMessage(event: MIDIMessageEvent) {\n *  const msg = unpack(event.data);\n *  // { command, channel, note, velocity }\n * }\n *\n * // Where 'input' is a MIDIInput\n * input.addEventListener(`midimessage`, onMidiMessage);\n * ```\n * @param data\n * @returns\n */\nexport declare const unpack: (data: Uint8Array) => MidiMessage;\n/**\n * Packs a MidiMessage into an array for sending to a MIDIOutput.\n *\n * ```js\n * const msg: Midi.MidiMessage = {\n *  command: `cc`,\n *  channel: 1,\n *  velocity: 50,\n *  note: 40\n * }\n *\n * // Where 'output' is a MIDIOutput\n * output.send(pack(msg));\n * ```\n * @param message\n * @returns\n */\nexport declare const pack: (message: MidiMessage) => Uint8Array;\n//# sourceMappingURL=midi-fns.d.ts.map","import { SimpleEventEmitter } from \"@ixfx/events\";\nimport type { MidiMessage, NoteMidiMessage } from \"./types.js\";\nexport type MidiManagerState = {\n    initialised: boolean;\n    errorReason: string;\n};\nexport type MidiManagerEvents = {\n    open: {\n        port: MIDIPort;\n    };\n    close: {\n        port: MIDIPort;\n    };\n    deviceConnected: {\n        port: MIDIPort;\n    };\n    deviceDisconnected: {\n        port: MIDIPort;\n    };\n    message: (MidiMessage | NoteMidiMessage) & {\n        port: MIDIInput;\n        raw: Uint8Array;\n    };\n};\n/**\n * Midi Manager makes simplifies connecting to ports\n * and having omni input/output\n *\n * ```js\n * const midi = new MidiManager(); // By default connects to all ins and outs\n * midi.addEventListener(`message`, event => {\n *  // Do something with received MIDI data from any input\n * })\n *\n * midi.scan();\n * midi.send({ command: `cc`, note: 10, channel: 1, velocity: 20 });\n *\n * // Sends note '10' on channel 1, velocity 100, duration 200ms\n * midi.sendNote(1, 10, 100, 200);\n * ```\n * Events:\n * * open/close: Connected port is open/closed\n * * deviceConnected/deviceDisconnected: A port is newly available or unavailable\n * * message: MIDI event received\n */\nexport declare class MidiManager extends SimpleEventEmitter<MidiManagerEvents> {\n    #private;\n    verbose: boolean;\n    constructor();\n    getInUse(): Generator<MIDIPort, void, unknown>;\n    getInUseInput(): Generator<MIDIInput, void, unknown>;\n    getInUseOutput(): Generator<MIDIOutput, void, unknown>;\n    known(): Generator<MIDIPort, void, unknown>;\n    knownInput(): Generator<MIDIInput, void, unknown>;\n    knownOutput(): Generator<MIDIOutput, void, unknown>;\n    scan(): Promise<void>;\n    /**\n     * Sends a message to a port.\n     *\n     * If port is omitted, all open output ports are used.\n     * @param message\n     * @param port\n     * @param timestamp\n     */\n    send(message: MidiMessage, port?: MIDIOutput, timestamp?: DOMHighResTimeStamp): void;\n    sendNote(channel: number, note: number, velocity: number, duration: number, delay?: DOMHighResTimeStamp, port?: MIDIOutput): void;\n    closeAll(what?: `input` | `output` | `both`): Promise<void>;\n    setOmniInput(value: boolean): Promise<void>;\n    get omniInput(): boolean;\n    setOmniOutput(value: boolean): Promise<void>;\n    get omniOutput(): boolean;\n    dumpToStringLines(): string[];\n    /**\n     * Opens `port`.\n     *\n     * If `exclusive` is _true_, all other ports of that type\n     * (ie. input or output) are closed before the port is opened.\n     *\n     * If `exclusive` is _false_ (default), already open ports are left open.\n     * @param port\n     * @param exclusive\n     */\n    open(port: MIDIPort, exclusive?: boolean): Promise<void>;\n    findKnownPort(fn: (p: MIDIPort) => boolean): MIDIPort | undefined;\n    filterKnownPort(fn: (p: MIDIPort) => boolean): Generator<MIDIPort, void, unknown>;\n    findInUsePort(fn: (p: MIDIPort) => boolean): MIDIPort | undefined;\n    filterInUsePort(fn: (p: MIDIPort) => boolean): Generator<MIDIPort, void, unknown>;\n}\n//# sourceMappingURL=manager.d.ts.map","import type { MidiCommands, MidiMessage } from \"./types.js\";\nimport { SimpleEventEmitter } from \"@ixfx/events\";\nexport type ControlEvents = {\n    change: {\n        velocity: number;\n        velocityScaled: number;\n        control: Control;\n    };\n};\nexport declare class Feedback {\n    channel: number;\n    cc: number;\n    note: number;\n    output?: MIDIOutput;\n    portName?: string;\n    constructor(options?: Partial<{\n        channel: number;\n        cc: number;\n        note: number;\n        output: MIDIOutput;\n        portName: string;\n    }>);\n    setOutputPort(port: MIDIPort): boolean;\n    sendRaw(value: number): boolean;\n}\nexport declare class Control extends SimpleEventEmitter<ControlEvents> {\n    #private;\n    static controlCount: number;\n    inputChannel: number;\n    inputCommand?: MidiCommands;\n    inputNote: number;\n    inputVelocityScale: number[];\n    feedbackChannel: number;\n    feedbackCommand?: MidiCommands;\n    feedbackNote: number;\n    feedbackVelocity: number;\n    name: string;\n    lastMessage?: MidiMessage;\n    onInputMessage(message: MidiMessage): boolean;\n    get scaledVelocity(): number;\n}\n//# sourceMappingURL=control.d.ts.map","import { SimpleEventEmitter } from \"@ixfx/events\";\nimport type { MidiMessage } from \"./types.js\";\n/**\n * Events fired by a {@link MidiFighter}} instance\n */\nexport type MidiFighterEvents = {\n    /**\n     * Virtual bank has changed\n     */\n    bankChange: {\n        prev: number;\n        current: number;\n        mf: MidiFighter;\n        implicit: boolean;\n    };\n    /**\n     * A side button has been pressed\n     */\n    sideButton: {\n        position: `top` | `bottom`;\n        side: `left` | `right`;\n        bank: number;\n        mf: MidiFighter;\n    };\n    /**\n     * An encoder has been pressed\n     */\n    switch: {\n        previous: number;\n        encoder: MidiFighterEncoder;\n        value: number;\n    };\n    /**\n     * An encoder has been changed\n     */\n    encoder: {\n        previous: number;\n        encoder: MidiFighterEncoder;\n        value: number;\n    };\n    /**\n     * Connection state changed\n     */\n    state: {\n        previous: MidiFighterState;\n        state: MidiFighterState;\n        mf: MidiFighter;\n    };\n};\n/**\n * Events of a {@link MidiFighterEncoder}\n */\nexport type MidiFighterEncoderEvents = {\n    switch: {\n        previous: number;\n        encoder: MidiFighterEncoder;\n        value: number;\n    };\n    encoder: {\n        previous: number;\n        encoder: MidiFighterEncoder;\n        value: number;\n    };\n};\n/**\n * States for a {@link MidiFighter} instance\n */\nexport type MidiFighterState = `ready` | `disconnected`;\n/**\n * Connects to a DJ Tech Tools Midi Fighter controller.\n *\n * Use the 'state' event and wait for state to be 'ready'.\n *\n * ```js\n * const mf = new MidiFighter();\n * mf.addEventListener(`state`, event => {\n *  if (event.state === `ready`) {\n *    // Can work with device now\n *    mf.bank = 1;\n *  }\n * });\n * mf.addEventListener(`encoder`, event => {\n *  // Do something with encoder value\n * });\n * mf.setPort(someMidiInputPort);\n * mf.setPort(someMidiOutputPort);\n * ```\n * Assumes default settings are loaded on the controller\n *\n * Supports\n * * Listening for encoder moves and button presses\n * * Changing colour pip below each encoder\n * * Setting LED bar for each encoder\n * * Changing banks, or detecting when the user has done so via the physical buttons\n *\n * Events:\n * * bankChange: Current bank has changed\n * * sideButton: Side button pressed\n * * switch: Encoder has been pressed\n * * encoder: Encoder has been moved\n * * state: Midi Fighter has both input/output ports or not.\n */\nexport declare class MidiFighter extends SimpleEventEmitter<MidiFighterEvents> {\n    #private;\n    readonly encoders: MidiFighterEncoder[];\n    /**\n     * If true, messages sent to Midi Fighter are printed to console\n     */\n    logOutgoing: boolean;\n    /**\n     * Channel bank change events are received on\n     */\n    bankChangeChannel: number;\n    /**\n     * Channel side button press events are received on\n     */\n    sideButtonChannel: number;\n    constructor();\n    /**\n     * Sets a port for this instance to use.\n     * This will need to be called separately for the input and output ports\n     * @param port\n     */\n    setPort(port: MIDIPort): void;\n    /**\n     * Sets the current bank (1..4)\n     *\n     * Triggers `bankChange` event.\n     */\n    set bank(bank: number);\n    /**\n     * Gets the current bank number (1-4)\n     */\n    get bank(): number;\n    /**\n     * Yields all encooders within the specified bank number.\n     * If no bank number is given, current bank is used\n     * @param bank\n     */\n    getBank(bank?: number): Generator<MidiFighterEncoder, void, unknown>;\n    /**\n     * Gets an encoder by its index and bank. If no bank is specified,\n     * the current is used.\n     *\n     * ```js\n     * mf.getEncoder(4);    // Get encoder #4 on current bank\n     * mf.getEncoder(4, 2); // Get encoder #4 from bank #2\n     * ```\n     * @param encoder Encoder number (1..16)\n     * @param bank Bank number (1..4)\n     * @returns Encoder\n     */\n    getEncoder(encoder: number, bank?: number): MidiFighterEncoder | undefined;\n    /**\n     * Sends a message to the output port associated with this instance.\n     * If there's no output port, message is dropped and _false_ returned.\n     * @param message\n     */\n    send(message: MidiMessage): boolean;\n    /**\n     * Gets the current output port\n     */\n    get outputPort(): MIDIOutput | undefined;\n    /**\n     * Gets the current input port\n     */\n    get inputPort(): MIDIInput | undefined;\n    /**\n   * Returns the current state\n   */\n    get state(): MidiFighterState;\n}\n/**\n * Represents a single encoder.\n */\nexport declare class MidiFighterEncoder extends SimpleEventEmitter<MidiFighterEncoderEvents> {\n    readonly mf: MidiFighter;\n    /**\n     * Bank (1..4) of encoder\n     */\n    readonly bank: number;\n    /**\n     * Encoder index (1..16)\n     */\n    readonly encoder: number;\n    /**\n     * Note/CC for received encoder values\n     */\n    inputEncoderNoteOrCc: number;\n    /**\n     * Midi channel for received encoder values\n     */\n    inputEncoderChannel: number;\n    /**\n     * Midi channel for received switch values\n     */\n    inputSwitchChannel: number;\n    /**\n     * Note/CC for received switch values\n     */\n    inputSwitchNoteOrCc: number;\n    /**\n     * Channel to change LED effect (eg strobe)\n     */\n    ledEffectChannel: number;\n    /**\n     * Channel to change LED colour\n     */\n    ledColourChannel: number;\n    /**\n     * Channel to change LED ring value\n     */\n    ledRingChannel: number;\n    /**\n     * Note for this encoder.\n     */\n    encoderStaticNote: number;\n    /**\n     * The last encoder value received\n     */\n    lastEncoderValue: number;\n    /**\n     * The last switch value received\n     */\n    lastSwitchValue: number;\n    /**\n     * Do not create yourself. Access via a {@link MidiFighter} instance.\n     * @private\n     * @param mf\n     * @param options\n     */\n    constructor(mf: MidiFighter, options: {\n        bank: number;\n        encoder: number;\n    });\n    /**\n     * Called by a {@link MidiFighter} instance when a value is received associated with this encoder.\n     * Do not call directly\n     * @private\n     * @param value\n     */\n    onValueSet(value: number): void;\n    /**\n     * Called by a {@link MidiFighter} instance when the switch value for this encoder changes\n     * @private\n     * @param value\n     */\n    onSwitchSet(value: number): void;\n    /**\n     * Set a scalar LED ring value (0..1).\n     *\n     * ```js\n     * encoder.setLedRing(0.5); // Set to 50%\n     * ```\n     * Use {@link setLedRingRaw} to set 0..127 integer value\n     * @param v Scalar (0..1)\n     */\n    setLedRing(v: number): void;\n    /**\n     * Sets the raw (0..127) value for the LED ring feedback. Use {@link setLedRing} for scalar values (0..1)\n     *\n     * ```js\n     * encoder.setLedRingRaw(50);\n     * ```\n     *\n     * @param v Raw value (0..127)\n     */\n    setLedRingRaw(v: number): void;\n    /**\n     * Sets the switch colour based on a 0..1 standard hue degree\n     * ```js\n     * const hsl = Colour.HslSpace.fromCss(`orange`);\n     * encoder.setSwitchColourHue(hsl.hue);\n     * ```\n     * @param v Hue degree (0..1) range\n     */\n    setSwitchColourHue(v: number): void;\n    /**\n     * Set the switch colour based on 0..127 Midi Fighter range (start/end in blue).\n     * Use {@link setSwitchColourHue} to set colour based on hue angle instead\n     *\n     * See page 4 of the MF manual.\n     * @param v\n     * @returns\n     */\n    setSwitchColourRaw(v: number): void;\n    /**\n     * Set the effect of the colour pip\n     * ```js\n     * encoder.setSwitchEffect(`strobe`, 3);\n     * ```\n     * @param kind\n     * @param value\n     */\n    setSwitchEffect(kind: `none` | `strobe` | `pulse` | `rainbow`, value?: number): void;\n}\n//# sourceMappingURL=midi-fighter.d.ts.map","type ParsedNote = [noteNumber: number, name: string, frequency: number];\nexport declare const getParsedNotes: () => ParsedNote[];\nexport declare const noteNameToNumber: (name: string) => number;\nexport declare const noteNameToFrequency: (name: string) => number;\nexport declare const noteNumberToName: (number: number) => string;\nexport declare const noteNumberToFrequency: (number: number) => number;\nexport {};\n//# sourceMappingURL=notes.d.ts.map","export * from './midi-fns.js';\nexport * from './types.js';\nexport * from './manager.js';\nexport * from './control.js';\nexport * from './midi-fighter.js';\nexport * from './notes.js';\n//# sourceMappingURL=index.d.ts.map","import { type EvalOpts, type Options } from './espruino.js';\nimport { NordicBleDevice } from './nordic-ble-device.js';\n/**\n * An Espruino BLE-connection\n *\n * See [online demos](https://demos.ixfx.fun/io/)\n *\n * Use the `puck` function to initialise and connect to a Puck.js.\n * It must be called in a UI event handler for browser security reasons.\n *\n * ```js\n * const e = await Espruino.puck();\n * ```\n *\n * To connect to a particular device:\n *\n * ```js\n * const e = await Espruino.puck({name:`Puck.js a123`});\n * ```\n *\n * Listen for events:\n * ```js\n * // Received something\n * e.addEventListener(`data`, d => console.log(d.data));\n * // Monitor connection state\n * e.addEventListener(`change`, c => console.log(`${d.priorState} -> ${d.newState}`));\n * ```\n *\n * Write to the device (note the \\n for a new line at the end of the string). This will\n * execute the code on the Espruino.\n *\n * ```js\n * e.write(`digitalPulse(LED1,1,[10,500,10,500,10]);\\n`);\n * ```\n *\n * Run some code and return result:\n * ```js\n * const result = await e.eval(`2+2\\n`);\n * ```\n */\nexport declare class EspruinoBleDevice extends NordicBleDevice {\n    evalTimeoutMs: number;\n    evalReplyBluetooth: boolean;\n    /**\n     * Creates instance. You probably would rather use {@link puck} to create.\n     * @param device\n     * @param opts\n     */\n    constructor(device: BluetoothDevice, opts?: Options);\n    /**\n     * Writes a script to Espruino.\n     *\n     * It will first send a CTRL+C to cancel any previous input, `reset()` to clear the board,\n     * and then the provided `code` followed by a new line.\n     *\n     * Use {@link eval} instead to execute remote code and get the result back.\n     *\n     * ```js\n     * // Eg from https://www.espruino.com/Web+Bluetooth\n     * writeScript(`\n     *  setInterval(() => Bluetooth.println(E.getTemperature()), 1000);\n     *  NRF.on('disconnect',()=>reset());\n     * `);\n     * ```\n     *\n     * @param code Code to send. A new line is added automatically.\n     */\n    writeScript(code: string): Promise<void>;\n    /**\n     * Sends some code to be executed on the Espruino. The result\n     * is packaged into JSON and sent back to your code. An exception is\n     * thrown if code can't be executed for some reason.\n     *\n     * ```js\n     * const sum = await e.eval(`2+2`);\n     * ```\n     *\n     * It will wait for a period of time for a well-formed response from the\n     * Espruino. This might not happen if there is a connection problem\n     * or a syntax error in the code being evaled. In cases like the latter,\n     * it will take up to `timeoutMs` (default 5 seconds) before we give up\n     * waiting for a correct response and throw an error.\n     *\n     * Tweaking of the timeout may be required if `eval()` is giving up too quickly\n     * or too slowly. A default timeout can be given when creating the class.\n     *\n     * Options:\n     *  timeoutMs: Timeout for execution. 5 seconds by default\n     *  assumeExclusive If true, eval assumes all replies from controller are in response to eval. True by default\n     *  debug: If true, execution is traced via `warn` callback\n     * @param code Code to run on the Espruino.\n     * @param opts Options\n     * @param warn Function to pass warning/trace messages to. If undefined, this.warn is used, printing to console.\n     */\n    eval(code: string, opts?: EvalOpts, warn?: (message: string) => void): Promise<string>;\n}\n//# sourceMappingURL=espruino-ble-device.d.ts.map","import { SimpleEventEmitter } from '@ixfx/events';\nimport { StateMachineWithEvents, type StateChangeEvent } from '@ixfx/flow/state-machine';\nimport { Codec } from './codec.js';\nimport { StringReceiveBuffer } from './string-receive-buffer.js';\nimport { StringWriteBuffer } from './string-write-buffer.js';\nimport { type GenericStateTransitions } from './types.js';\n/**\n * Options for JsonDevice\n */\nexport type JsonDeviceOpts = {\n    /**\n     * How much data to transfer at a time\n     */\n    readonly chunkSize?: number;\n    /**\n     * Name of device. This is only used for assisting the console.log output\n     */\n    readonly name?: string;\n    /**\n     * Number of times to automatically try to reconnect\n     */\n    readonly connectAttempts?: number;\n    /**\n     * If true, additional logging will be done\n     */\n    readonly debug?: boolean;\n};\n/**\n * Data received event\n */\nexport type JsonDataEvent = {\n    /**\n     * Data received\n     */\n    readonly data: string;\n};\n/**\n * Events emitted by JsonDevice\n */\nexport type JsonDeviceEvents = {\n    /**\n     * Data received\n     */\n    readonly data: JsonDataEvent;\n    /**\n     * State changed\n     */\n    readonly change: StateChangeEvent<GenericStateTransitions>;\n};\nexport declare abstract class JsonDevice extends SimpleEventEmitter<JsonDeviceEvents> {\n    states: StateMachineWithEvents<GenericStateTransitions>;\n    codec: Codec;\n    verboseLogging: boolean;\n    name: string;\n    connectAttempts: number;\n    chunkSize: number;\n    rxBuffer: StringReceiveBuffer;\n    txBuffer: StringWriteBuffer;\n    constructor(config?: JsonDeviceOpts);\n    get isConnected(): boolean;\n    get isClosed(): boolean;\n    write(txt: string): void;\n    /**\n     * Writes text to output device\n     * @param txt\n     */\n    protected abstract writeInternal(txt: string): void;\n    close(): Promise<void>;\n    /**\n     * Must change state\n     */\n    abstract onClosed(): void;\n    abstract onPreConnect(): Promise<void>;\n    connect(): Promise<void>;\n    /**\n     * Should throw if did not succeed.\n     */\n    protected abstract onConnectAttempt(): Promise<void>;\n    private onRx;\n    protected verbose(m: string): void;\n    protected log(m: string): void;\n    protected warn(m: unknown): void;\n}\n//# sourceMappingURL=json-device.d.ts.map","import { type JsonDeviceOpts, JsonDevice } from './json-device.js';\nexport type SerialOpts = JsonDeviceOpts & {\n    readonly filters?: readonly SerialPortFilter[];\n    readonly baudRate?: number;\n    /**\n     * End-of-line string sequence. \\r\\n by default.\n     */\n    readonly eol?: string;\n};\n/**\n * Serial device. Assumes data is sent with new line characters (\\r\\n) between messages.\n *\n * ```\n * import { Serial } from '@ixfx/io.js'\n * const s = new Serial.Device();\n * s.addEventListener(`change`, evt => {\n *  console.log(`State change ${evt.priorState} -> ${evt.newState}`);\n *  if (evt.newState === `connected`) {\n *    // Do something when connected...\n *  }\n * });\n *\n * // In a UI event handler...\n * s.connect();\n * ```\n *\n * Reading incoming data:\n * ```\n * // Parse incoming data as JSON\n * s.addEventListener(`data`, evt => {\n *  try {\n *    const o = JSON.parse(evt.data);\n *    // If we get this far, JSON is legit\n *  } catch (ex) {\n *  }\n * });\n * ```\n *\n * Writing to the microcontroller\n * ```\n * s.write(JSON.stringify({msg:\"hello\"}));\n * ```\n */\nexport declare class Device extends JsonDevice {\n    private config;\n    port: SerialPort | undefined;\n    tx: WritableStreamDefaultWriter<string> | undefined;\n    abort: AbortController;\n    baudRate: number;\n    constructor(config?: SerialOpts);\n    /**\n     * Writes text collected in buffer\n     * @param txt\n     */\n    protected writeInternal(txt: string): Promise<void>;\n    onClosed(): void;\n    onPreConnect(): Promise<void>;\n    onConnectAttempt(): Promise<void>;\n}\nexport { type JsonDeviceEvents, type JsonDataEvent, type JsonDeviceOpts } from './json-device.js';\n//# sourceMappingURL=serial.d.ts.map","import { type EvalOpts } from './espruino.js';\nimport { Device as SerialDevice, type SerialOpts } from './serial.js';\nexport type EspruinoSerialDeviceOpts = SerialOpts & {\n    readonly evalTimeoutMs?: number;\n};\nexport declare class EspruinoSerialDevice extends SerialDevice {\n    evalTimeoutMs: number;\n    evalReplyBluetooth: boolean;\n    constructor(opts?: EspruinoSerialDeviceOpts);\n    disconnect(): Promise<void>;\n    /**\n     * Writes a script to Espruino.\n     *\n     * It will first send a CTRL+C to cancel any previous input, `reset()` to clear the board,\n     * and then the provided `code` followed by a new line.\n     *\n     * Use {@link eval} instead to execute remote code and get the result back.\n     *\n     * ```js\n     * // Eg from https://www.espruino.com/Web+Bluetooth\n     * writeScript(`\n     *  setInterval(() => Bluetooth.println(E.getTemperature()), 1000);\n     *  NRF.on('disconnect',()=>reset());\n     * `);\n     * ```\n     *\n     * @param code Code to send. A new line is added automatically.\n     */\n    writeScript(code: string): void;\n    /**\n     * Sends some code to be executed on the Espruino. The result\n     * is packaged into JSON and sent back to your code. An exception is\n     * thrown if code can't be executed for some reason.\n     *\n     * ```js\n     * const sum = await e.eval(`2+2`);\n     * ```\n     *\n     * It will wait for a period of time for a well-formed response from the\n     * Espruino. This might not happen if there is a connection problem\n     * or a syntax error in the code being evaled. In cases like the latter,\n     * it will take up to `timeoutMs` (default 5 seconds) before we give up\n     * waiting for a correct response and throw an error.\n     *\n     * Tweaking of the timeout may be required if `eval()` is giving up too quickly\n     * or too slowly. A default timeout can be given when creating the class.\n     *\n     * Options:\n     *  timeoutMs: Timeout for execution. 5 seconds by default\n     *  assumeExclusive: If true, eval assumes all replies from controller are in response to eval. True by default\n     *  debug: If true, execution is traced via `warn` callback\n     * @param code Code to run on the Espruino.\n     * @param opts Options\n     * @param warn Function to pass warning/trace messages to. If undefined, this.warn is used, printing to console.\n     */\n    eval(code: string, opts?: EvalOpts, warn?: (message: string) => void): Promise<string>;\n}\n//# sourceMappingURL=espruino-serial-device.d.ts.map","import { type ISimpleEventEmitter } from '@ixfx/events';\nimport { EspruinoBleDevice } from './espruino-ble-device.js';\nimport { EspruinoSerialDevice } from './espruino-serial-device.js';\nimport type { GenericStateTransitions, IoEvents } from './types.js';\nexport { type EspruinoSerialDeviceOpts, EspruinoSerialDevice } from './espruino-serial-device.js';\nexport { EspruinoBleDevice } from './espruino-ble-device.js';\nexport type EspruinoStates = `ready` | `connecting` | `connected` | `closed` | `closing`;\n/**\n * Options for device\n */\nexport type Options = {\n    /**\n     * Default milliseconds to wait before giving up on a well-formed reply. 5 seconds is the default.\n     */\n    readonly evalTimeoutMs?: number;\n    /**\n     * Name of device. Only used for printing log mesages to the console\n     */\n    readonly name?: string;\n    /**\n     * If true, additional logging information is printed\n     */\n    readonly debug?: boolean;\n};\n/**\n * Options for code evaluation\n */\nexport type EvalOpts = {\n    /**\n     * Milliseconds to wait before giving up on well-formed reply. 5 seconds is the default.\n     */\n    readonly timeoutMs?: number;\n    /**\n     * If true (default), it assumes that anything received from the board\n     * is a response to the eval\n     */\n    readonly assumeExclusive?: boolean;\n    /**\n     * If true, executed code is traced\n     */\n    readonly debug?: boolean;\n};\nexport type EspruinoBleOpts = {\n    /**\n     * If the name is specified, this value is used\n     * for filtering Bluetooth devices\n     */\n    readonly name?: string;\n    /**\n     * If true, additional logging messages are\n     * displayed on the console\n     */\n    readonly debug?: boolean;\n    /**\n     * If specified, these filtering options are used instead\n     */\n    readonly filters?: readonly BluetoothLEScanFilter[];\n};\n/**\n * Instantiates a Puck.js. See {@link EspruinoBleDevice} for more info.\n * [Online demos](https://demos.ixfx.fun/io/)\n *\n * If `opts.name` is specified, this will the the Bluetooth device sought.\n *\n * ```js\n * import { Espruino } from '@ixfx/io.js'\n * const e = await Espruino.puck({ name:`Puck.js a123` });\n * ```\n *\n * If no name is specified, a list of all devices starting with `Puck.js` are shown.\n *\n * To get more control over filtering, pass in `opts.filter`. `opts.name` is not used as a filter in this scenario.\n *\n * ```js\n * import { Espruino } from '@ixfx/io.js'\n * const filters = [\n *  { namePrefix: `Puck.js` },\n *  { namePrefix: `Pixl.js` },\n *  {services: [NordicDefaults.service] }\n * ]\n * const e = await Espruino.puck({ filters });\n * ```\n *\n * @returns Returns a connected instance, or throws exception if user cancelled or could not connect.\n */\nexport declare const puck: (opts?: EspruinoBleOpts) => Promise<EspruinoBleDevice>;\nexport declare const bangle: (opts?: EspruinoBleOpts) => Promise<EspruinoBleDevice>;\n/**\n * Create a serial-connected Espruino device.\n *\n * ```js\n * import { Espruino } from '@ixfx/io.js'\n * const e = await Espruio.serial();\n * e.connect();\n * ```\n *\n * Options:\n * ```js\n * import { Espruino } from '@ixfx/io.js'\n * const e = await Espruino.serial({ debug: true, evalTimeoutMs: 1000, name: `My Pico` });\n * e.connect();\n * ```\n *\n * Listen for events:\n * ```js\n * e.addEventListener(`change`, evt => {\n *  console.log(`State change ${evt.priorState} -> ${evt.newState}`);\n *  if (evt.newState === `connected`) {\n *    // Do something when connected...\n *  }\n * });\n * ```\n *\n * Reading incoming data:\n * ```\n * // Parse incoming data as JSON\n * s.addEventListener(`data`, evt => {\n *  try {\n *    const o = JSON.parse(evt.data);\n *    // If we get this far, JSON is legit\n *  } catch (ex) {\n *  }\n * });\n * ```\n *\n * Writing to the microcontroller\n * ```\n * s.write(JSON.stringify({msg:\"hello\"}));\n * ```\n * @param opts\n * @returns Returns a connected instance, or throws exception if user cancelled or could not connect.\n */\nexport declare const serial: (opts?: {\n    readonly name?: string;\n    readonly debug?: boolean;\n    readonly evalTimeoutMs?: number;\n}) => Promise<EspruinoSerialDevice>;\n/**\n * Connects to a generic Espruino BLE device. See  {@link EspruinoBleDevice} for more info.\n * Use {@link puck} if you're connecting to a Puck.js\n *\n * If `opts.name` is specified, only this BLE device will be shown.\n * ```js\n * const e = await connectBle({ name: `Puck.js a123` });\n * ```\n *\n * `opts.filters` overrides and sets arbitary filters.\n *\n * ```js\n * import { Espruino } from '@ixfx/io.js'\n * const filters = [\n *  { namePrefix: `Puck.js` },\n *  { namePrefix: `Pixl.js` },\n *  {services: [NordicDefaults.service] }\n * ]\n * const e = await Espruino.connectBle({ filters });\n * ```\n *\n * @returns Returns a connected instance, or throws exception if user cancelled or could not connect.\n */\nexport declare const connectBle: (opts?: EspruinoBleOpts) => Promise<EspruinoBleDevice>;\nexport type Events = IoEvents<GenericStateTransitions>;\n/**\n * EspruinoDevice\n *\n * This base interface is implemented by {@link EspruinoBleDevice} and {@link EspruinoSerialDevice}.\n */\nexport type EspruinoDevice = {\n    /**\n     * Sends some code to be executed on the Espruino. The result\n     * is packaged into JSON and sent back to your code. An exception is\n     * thrown if code can't be executed for some reason.\n     *\n     * ```js\n     * const sum = await e.eval(`2+2`);\n     * ```\n     *\n     * It will wait for a period of time for a well-formed response from the\n     * Espruino. This might not happen if there is a connection problem\n     * or a syntax error in the code being evaled. In cases like the latter,\n     * it will take up to `timeoutMs` (default 5 seconds) before we give up\n     * waiting for a correct response and throw an error.\n     *\n     * Tweaking of the timeout may be required if `eval()` is giving up too quickly\n     * or too slowly. A default timeout can be given when creating the class.\n     *\n     * Options:\n     *  timeoutMs: Timeout for execution. 5 seconds by default\n     *  assumeExclusive If true, eval assumes all replies from controller are in response to eval. True by default\n     *  debug: If true, execution is traced via `warn` callback\n     * @param code Code to run on the Espruino.\n     * @param opts Options\n     * @param warn Function to pass warning/trace messages to. If undefined, this.warn is used, printing to console.\n     */\n    eval(code: string, opts?: EvalOpts, warn?: (message: string) => void): Promise<string>;\n    /**\n     * Write some code for immediate execution. This is a lower-level\n     * alternative to {@link writeScript}. Be sure to include a new line character '\\n' at the end.\n     * @param m Code\n     */\n    write(m: string): void;\n    /**\n     * Writes a script to Espruino.\n     *\n     * It will first send a CTRL+C to cancel any previous input, `reset()` to clear the board,\n     * and then the provided `code` followed by a new line.\n     *\n     * Use {@link eval} instead to execute remote code and get the result back.\n     *\n     * ```js\n     * // Eg from https://www.espruino.com/Web+Bluetooth\n     * espruino.writeScript(`\n     *  setInterval(() => Bluetooth.println(E.getTemperature()), 1000);\n     *  NRF.on('disconnect',()=>reset());\n     * `);\n     * ```\n     *\n     * @param code Code to send. A new line is added automatically.\n     */\n    writeScript(code: string): void;\n    /**\n     * Disconnect\n     */\n    disconnect(): void;\n    /**\n     * Gets the current evaluation (millis)\n     */\n    get evalTimeoutMs(): number;\n    get isConnected(): boolean;\n} & ISimpleEventEmitter<Events>;\n/**\n * Evaluates some code on an Espruino device.\n *\n * Options:\n * * timeoutMs: how many millis to wait before assuming code failed. If not specified, `device.evalTimeoutMs` is used as a default.\n * * assumeExlusive: assume device is not producing any other output than for our evaluation\n *\n * A random string is created to pair eval requests and responses. `code` will be run on the device, with the result\n * wrapped in JSON, and in turn wrapped in a object that is sent back.\n *\n * The actual code that gets sent to the device is then:\n * `\\x10${evalReplyPrefix}(JSON.stringify({reply:\"${id}\", result:JSON.stringify(${code})}))\\n`\n *\n * For example, it might end up being:\n * `\\x10Bluetooth.println(JSON.stringify({reply: \"a35gP\", result: \"{ 'x': '10' }\" }))\\n`\n *\n * @param code Code to evaluation\n * @param opts Options for evaluation\n * @param device Device to execute on\n * @param evalReplyPrefix How to send code back (eg `Bluetooth.println`, `console.log`)\n * @param debug If true, the full evaled code is printed locally to the console\n * @param warn Callback to display warnings\n * @returns\n */\nexport declare const deviceEval: (code: string, opts: EvalOpts | undefined, device: EspruinoDevice, evalReplyPrefix: string, debug: boolean, warn: (m: string) => void) => Promise<string>;\n//# sourceMappingURL=espruino.d.ts.map","import type { Rect } from '@ixfx/geometry/rect';\n/**\n * Print available media devices to console\n *\n * ```js\n * camera.dumpDevices(); // Will print results to console\n * ```\n * @param filterKind Defaults `videoinput`\n */\nexport declare const dumpDevices: (filterKind?: string) => Promise<void>;\n/**\n * Constraints when requesting a camera source\n */\nexport type Constraints = {\n    /**\n     * Camera facing: user is front-facing, environment is a rear camera\n     */\n    readonly facingMode?: `user` | `environment`;\n    /**\n     * Maximum resolution\n     */\n    readonly max?: Rect;\n    /**\n     * Minimum resolution\n     */\n    readonly min?: Rect;\n    /**\n     * Ideal resolution\n     */\n    readonly ideal?: Rect;\n    /**\n     * If specified, will try to use this media device id\n     */\n    readonly deviceId?: string;\n    /**\n     * Number of milliseconds to wait on `getUserMedia` before giving up.\n     * Defaults to 30seconds\n     */\n    readonly startTimeoutMs?: number;\n};\n/**\n * Result from starting a camera\n */\nexport type StartResult = {\n    /**\n     * Call dispose to stop the camera feed and remove any created resources,\n     * such as a VIDEO element\n     */\n    readonly dispose: () => void;\n    /**\n     * Video element camera is connected to\n     */\n    readonly videoEl: HTMLVideoElement;\n};\n/**\n * Attempts to start a video-only stream from a camera into a hidden\n * VIDEO element for frame capture. The VIDEO element is created automatically.\n *\n *\n * ```js\n * import { Camera } from '@ixfx/io.js'\n * import { Video } from '@ixfx/visual.js'\n * try {\n *  const { videoEl, dispose } = await Camera.start();\n *  for await (const frame of Video.frames(videoEl)) {\n *    // Do something with pixels...\n *  }\n * } catch (ex) {\n *  console.error(`Video could not be started`);\n * }\n * ```\n *\n * Be sure to call the dispose() function to stop the video stream and remov\n * the created VIDEO element.\n *\n * _Constraints_ can be specified to select a camera and resolution:\n * ```js\n * import { Camera } from '@ixfx/io.js'\n * import { Video } from '@ixfx/visual.js'\n *\n * try {\n *  const { videoEl, dispose } = await Camera.start({\n *    facingMode: `environment`,\n *    max: { width: 640, height: 480 }\n *  });\n *\n *  for await (const frame of Video.frames(videoEl)) {\n *    // Do something with pixels...\n *  }\n * } catch (ex) {\n *  // Can happen if user cancels camera request, for example.\n *  console.error(`Video could not be started`, ex);\n * }\n * ```\n *\n * An alternative to Video.frames is Video.capture.\n * @param constraints\n * @returns Returns `{ videoEl, dispose }`, where `videoEl` is the created VIDEO element, and `dispose` is a function for removing the element and stopping the video.\n */\nexport declare const start: (constraints?: Constraints) => Promise<StartResult>;\n//# sourceMappingURL=camera.d.ts.map","/**\n * Result from starting a camera\n */\nexport type StartResult = {\n    /**\n     * Call dispose to stop the camera feed and remove any created resources,\n     * such as a VIDEO element\n     */\n    readonly dispose: () => void;\n    /**\n     * Video element camera is connected to\n     */\n    readonly videoEl: HTMLVideoElement;\n};\n/**\n * Starts video file playback, creating a VIDEO element automatically.\n * @param file File\n * @returns StartResult\n */\nexport declare const start: (file: File) => Promise<StartResult>;\n//# sourceMappingURL=video-file.d.ts.map","import { Video } from '@ixfx/visual';\nimport * as Camera from './camera.js';\n/**\n * Frame procesor options\n */\nexport type FrameProcessorOpts = {\n    /**\n     * If true, capture canvas will be shown. Default: false\n     */\n    readonly showCanvas?: boolean;\n    /**\n     * If true, raw source will be shown. Default: false.\n     */\n    readonly showPreview?: boolean;\n    /**\n     * If specified, this function will be called after ImageData is captured\n     * from the intermediate canvs. This allows for drawing on top of the\n     * captured image.\n     */\n    readonly postCaptureDraw?: (ctx: CanvasRenderingContext2D, width: number, height: number) => void;\n    /**\n     * Default constraints to use for the camera source\n     */\n    readonly cameraConstraints?: Camera.Constraints;\n    /**\n     * If specified, this canvas will be used for capturing frames to\n     */\n    readonly captureCanvasEl?: HTMLCanvasElement;\n};\n/**\n * Frame Processor\n * Simplifies grabbing frames from a camera or video file.\n *\n * First, create:\n * ```js\n * const fp = new FrameProcessor();\n * ```\n *\n * Then either use the camera or a video file:\n * ```js\n * fp.useCamera(constraints);\n * // or:\n * gp.useVideo(file);\n * ```\n *\n * With `useCamera`, optionally specify {@link Camera.Constraints} to pick which camera and resolution.\n *\n * ```js\n * fp.getFrame(); // Gets the last frame\n * fp.dispose(); // Close down camera/file\n * ```\n *\n * See {@link FrameProcessorOpts} for details on available options.\n */\nexport declare class FrameProcessor {\n    private _source;\n    private _state;\n    private _teardownNeeded;\n    private _cameraConstraints;\n    private _cameraStartResult;\n    private _videoSourceCapture;\n    private _videoFile;\n    private _videoStartResult;\n    private _showCanvas;\n    private _showPreview;\n    private _postCaptureDraw;\n    private _timer;\n    private _captureCanvasEl?;\n    /**\n     * Create a new frame processor\n     * @param opts\n     */\n    constructor(opts?: FrameProcessorOpts);\n    /**\n     * Hides or shows the raw source in the DOM\n     * @param enabled Preview enabled\n     */\n    showPreview(enabled: boolean): void;\n    /**\n     * Shows or hides the Canvas we're capturing to\n     * @param enabled\n     */\n    showCanvas(enabled: boolean): void;\n    /**\n     * Returns the current capturer instance\n     * @returns\n     */\n    getCapturer(): Video.ManualCapturer | undefined;\n    /**\n     * Grab frames from a video camera source and initialises\n     * frame processor.\n     *\n     * If `constraints` are not specified, it will use the ones\n     * provided when creating the class, or defaults.\n     *\n     * @param constraints Override of constraints when requesting camera access\n     */\n    useCamera(constraints?: Camera.Constraints): Promise<void>;\n    useVideo(file: File): Promise<void>;\n    /**\n     * Initialises camera\n     */\n    private initCamera;\n    private initVideo;\n    private postInit;\n    /**\n     * Closes down connections and removes created elements.\n     * Once disposed, the frame processor cannot be used\n     * @returns\n     */\n    dispose(): void;\n    private init;\n    private teardown;\n    /**\n     * Get the last frame\n     * @returns\n     */\n    getFrame(): ImageData | undefined;\n    /**\n     * Get the timestamp of the processor (elapsed time since starting)\n     * @returns\n     */\n    getTimestamp(): number;\n    private getFrameCamera;\n}\n//# sourceMappingURL=frame-processor.d.ts.map","import { type Interval } from \"@ixfx/core\";\nexport type ReconnectingWebsocket = {\n    /**\n     * Sends data\n     * @param data\n     * @returns\n     */\n    send: (data: string | ArrayBufferLike | ArrayBufferView | Blob) => void;\n    /**\n     * Closes websocket, disabling reconnection\n     * @returns\n     */\n    close: () => void;\n    /**\n     * Opens websocket if it's not already connected or connecting\n     * @returns\n     */\n    open: () => Promise<boolean>;\n    /**\n     * Returns _true_ if it seems the websocket is connected\n     * @returns\n     */\n    isConnected: () => boolean;\n};\nexport type ReconnectingWebsocketStates = `connecting` | `open` | `closed`;\nexport type ReconnectingOptions = {\n    startDelay: Interval;\n    maxDelay: Interval;\n    limitAttempts: number;\n    /**\n     * How often to check the state of the\n     * underlying websocket.\n     *\n     * Default: 5s\n     */\n    checkStateMs: Interval;\n    /**\n     * Callback when message is received\n     * @param message\n     * @returns\n     */\n    onMessage: (message: any) => void;\n    onConnected: () => void;\n    onDisconnected: () => void;\n    onError: (error: any) => void;\n};\n/**\n * Maintains a web socket connection. Connects automatically.\n *\n * The essential usage is:\n * ```js\n * import { reconnectingWebsocket } from '@ixfx/io.js'\n * const ws = reconnectingWebsocket(`wss://somehost.com/ws`, {\n *  onMessage: (msg) => {\n *    // Do something with received message...\n *  }\n * }\n *\n * // Send some data\n * ws.send(JSON.stringify(someData));\n *\n * // Check state of connection\n * ws.isConnected();\n * ```\n *\n * More options can be provided to monitor state\n * ```js\n * import { reconnectingWebsocket } from '@ixfx/io.js'\n * const ws = reconnectingWebsocket(`wss://somehost.com/ws`, {\n *  onError: (err) => {\n *    console.error(err)\n *  },\n *  onMessage: (msg) => {\n *    // Received data\n *    console.log(msg);\n *  },\n *  onConnected: () => {\n *    // Connected!\n *  },\n *  onDisconnected: () => {\n *    // Disconnected :(\n *  }\n * });\n * ```\n * @param url\n * @param opts\n * @returns\n */\nexport declare const reconnectingWebsocket: (url: string | URL, opts?: Partial<ReconnectingOptions>) => ReconnectingWebsocket;\n//# sourceMappingURL=reconnecting-web-socket.d.ts.map","/**\n * Generic support for Bluetooth LE devices\n */\nexport * as Bluetooth from './nordic-ble-device.js';\nexport * as Audio from './audio/index.js';\nexport * from './types.js';\nexport * from './generic-state-transitions.js';\nexport * as Midi from './midi/index.js';\nexport { StringReceiveBuffer } from './string-receive-buffer.js';\nexport { StringWriteBuffer, type Opts as StringWriteBufferOpts, } from './string-write-buffer.js';\nexport { Codec } from './codec.js';\n/**\n * Espruino-based devices connected via Bluetooth LE\n *\n * See [demos](https://demos.ixfx.fun/io/)\n *\n * Overview:\n * * {@link puck}: Connects a {@link Espruino.EspruinoBleDevice | Espruino BLE Device}.\n * * {@link Espruino.connectBle}: Connect to a generic Espruino via BLE\n */\nexport * as Espruino from './espruino.js';\nexport * as Camera from './camera.js';\nexport * as VideoFile from './video-file.js';\nexport { FrameProcessor } from './frame-processor.js';\nexport type { FrameProcessorOpts } from './frame-processor.js';\n/**\n * Microcontrollers such as Arduinos connected via USB serial\n *\n * Overview\n * * {@link Serial.Device}\n *\n */\nexport * as Serial from './serial.js';\nexport * from './reconnecting-web-socket.js';\n//# sourceMappingURL=index.d.ts.map","import type { Interval } from \"@ixfx/core\";\nimport * as Rx from \"@ixfx/rx\";\n/**\n * Observe when element resizes. Specify `interval` to debounce, uses 100ms by default.\n *\n * ```\n * const o = resizeObservable(myEl, 500);\n * o.subscribe(() => {\n *  // called 500ms after last resize\n * });\n * ```\n * @param elem\n * @param interval Tiemout before event gets triggered\n * @returns\n */\nexport declare const browserResizeObservable: (elem: Readonly<Element>, interval?: Interval) => Rx.Reactive<ResizeObserverEntry[]>;\n/**\n * Returns an Reactive for window resize. Default 100ms debounce.\n * @param elapsed\n * @returns\n */\nexport declare const windowResize: (elapsed?: Interval) => Rx.Reactive<{\n    innerWidth: number;\n    innerHeight: number;\n}>;\n//# sourceMappingURL=browser-resize.d.ts.map","/**\n * Observe when a class changes on a target element, by default the document.\n * Useful for tracking theme changes.\n *\n * ```js\n * const c = cssClassChange();\n * c.on(msg => {\n *  // some class has changed on the document\n * });\n * ```\n */\nexport declare const cssClassChange: (target?: HTMLElement) => import(\"@ixfx/rx\").Reactive<MutationRecord[]>;\n//# sourceMappingURL=browser-theme-change.d.ts.map","import { type ReactiveInitial, type ReactiveNonInitial, type ReactiveWritable } from \"@ixfx/rx\";\nimport type { HslScalar } from \"@ixfx/visual/colour\";\nexport type ReactiveColour = ReactiveWritable<HslScalar> & {\n    setHsl: (hsl: HslScalar) => void;\n};\nexport declare function colour(initialValue: HslScalar): ReactiveColour & ReactiveInitial<HslScalar>;\nexport declare function colour(): ReactiveColour & ReactiveNonInitial<HslScalar>;\n//# sourceMappingURL=colour.d.ts.map","import type { Reactive } from \"@ixfx/rx\";\nimport type { EventSourceOptions } from \"@ixfx/rx/from\";\nexport type DomBindValueTarget = {\n    /**\n     * If _true_ `innerHTML` is set (a shortcut for elField:`innerHTML`)\n     */\n    htmlContent?: boolean;\n    /**\n     * If _true_, 'textContent' is set (a shortcut for elField:'textContext')\n     */\n    textContent?: boolean;\n    /**\n     * If set, this DOM element field is set. Eg 'textContent'\n     */\n    elField?: string;\n    /**\n     * If set, this DOM attribute is set, Eg 'width'\n     */\n    attribName?: string;\n    /**\n     * If set, this CSS variable is set, Eg 'hue' (sets '--hue')\n     */\n    cssVariable?: string;\n    /**\n     * If set, this CSS property is set, Eg 'background-color'\n     */\n    cssProperty?: string;\n};\nexport type ElementBind = {\n    /**\n     * Tag name for this binding.\n     * Overrides `defaultTag`\n     */\n    tagName?: string;\n    /**\n     * If _true_, sub-paths are appended to element, rather than `container`\n     */\n    nestChildren?: boolean;\n    transform?: (value: any) => string;\n};\nexport type ElementsOptions = {\n    container: HTMLElement | string;\n    defaultTag: string;\n    binds: Record<string, DomBindValueTarget & ElementBind>;\n};\nexport type DomBindTargetNode = {\n    query?: string;\n    element?: HTMLElement;\n};\nexport type DomBindTargetNodeResolved = {\n    element: HTMLElement;\n};\nexport type DomBindUnresolvedSource<TSource, TDestination> = DomBindTargetNode & DomBindSourceValue<TSource, TDestination> & DomBindValueTarget;\nexport type DomBindResolvedSource<TSource, TDestination> = DomBindTargetNodeResolved & DomBindSourceValue<TSource, TDestination> & DomBindValueTarget;\nexport type DomBindSourceValue<TSource, TDestination> = {\n    twoway?: boolean;\n    /**\n     * Field from source value to pluck and use.\n     * This will also be the value passed to the transform\n     */\n    sourceField?: keyof TSource;\n    transform?: (input: TSource) => TDestination;\n    transformValue?: (input: any) => TDestination;\n};\nexport type DomBindInputOptions<TSource, TDestination> = DomBindSourceValue<TSource, TDestination> & {\n    transformFromInput: (input: TDestination) => TSource;\n};\nexport type BindUpdateOpts<V> = {\n    initial: (v: V, el: HTMLElement) => void;\n    binds: Record<string, DomBindValueTarget & {\n        transform?: (value: any) => string;\n    }>;\n};\nexport type DomCreateOptions = {\n    tagName: string;\n    parentEl: string | HTMLElement;\n};\nexport type PipeDomBinding = {\n    /**\n     * Remove binding and optionally delete element(s) (false by default)\n     */\n    remove(deleteElements: boolean): void;\n};\nexport type DomValueOptions = EventSourceOptions & {\n    /**\n     * If true, the current value will be emitted even though it wasn't\n     * triggered by an event.\n     * Default: false\n     */\n    emitInitialValue: boolean;\n    attributeName: string;\n    fieldName: string;\n    /**\n     * Respond to when value has changed or when value is changing\n     * Default: `changed`\n     */\n    when: `changed` | `changing`;\n    fallbackValue: string;\n    upstreamSource?: Reactive<unknown>;\n    upstreamFilter?: (value: unknown) => string;\n};\nexport type DomFormOptions<T extends Record<string, unknown>> = EventSourceOptions & {\n    /**\n     * If true, the current value will be emitted even though it wasn't\n     * triggered by an event.\n     * Default: false\n     */\n    emitInitialValue: boolean;\n    /**\n     * Respond to when value has changed or when value is changing\n     * Default: `changed`\n     */\n    when: `changed` | `changing`;\n    upstreamSource?: Reactive<T>;\n    upstreamFilter?: (name: string, value: unknown) => string;\n};\nexport type DomNumberInputValueOptions = DomValueOptions & {\n    /**\n     * If true, sets up INPUT element to operate with relative values\n     */\n    relative?: boolean;\n    /**\n     * If true, when setting up, sets max to be on left side\n     */\n    inverted?: boolean;\n    upstreamSource?: Reactive<number>;\n};\n//# sourceMappingURL=dom-types.d.ts.map","import type { ReactiveInitial, ReactiveWritable, Reactive } from \"@ixfx/rx\";\nimport type { DomFormOptions, DomNumberInputValueOptions, DomValueOptions } from \"./dom-types.js\";\nimport { Colour } from \"@ixfx/visual\";\n/**\n * Reactive getting/setting of values to a HTML INPUT element.\n *\n * Options:\n * - relative: if _true_, values are 0..1 (default: false)\n * - inverted: if _true_, values are 1..0 (default: false)\n *\n * If element is missing a 'type' attribute, this will be set to 'range'.\n * @param targetOrQuery\n * @param options\n * @returns\n */\nexport declare function domNumberInputValue(targetOrQuery: HTMLInputElement | string, options?: Partial<DomNumberInputValueOptions>): ReactiveInitial<number> & ReactiveWritable<number>;\nexport declare function domHslInputValue(targetOrQuery: HTMLInputElement | string, options?: Partial<DomValueOptions>): ReactiveInitial<Colour.HslScalar> & Reactive<Colour.HslScalar> & ReactiveWritable<Colour.HslScalar>;\n/**\n * A stream of values when the a HTMLInputElement changes. Eg a <input type=\"range\">\n * ```js\n * const r = Rx.From.domInputValue(`#myEl`);\n * r.onValue(value => {\n *  // value will be string\n * });\n * ```\n *\n * Options:\n * * emitInitialValue: If _true_ emits the HTML value of element (default: false)\n * * attributeName: If set, this is the HTML attribute value is set to when writing to stream (default: 'value')\n * * fieldName: If set, this is the DOM object field set when writing to stream (default: 'value')\n * * when: 'changed'|'changing' when values are emitted. (default: 'changed')\n * * fallbackValue:  Fallback value to use if field/attribute cannot be read (default: '')\n * @param targetOrQuery\n * @param options\n * @returns\n */\nexport declare function domInputValue(targetOrQuery: HTMLInputElement | string, options?: Partial<DomValueOptions>): {\n    el: HTMLInputElement;\n} & ReactiveInitial<string> & ReactiveWritable<string>;\n/**\n * Listens for data changes from elements within a HTML form element.\n * Input elements must have a 'name' attribute.\n *\n * Simple usage:\n * ```js\n * const rx = Rx.From.domForm(`#my-form`);\n * rx.onValue(value => {\n *  // Object containing values from form\n * });\n *\n * rx.last(); // Read current values of form\n * ```\n *\n * UI can be updated\n * ```js\n * // Set using an object of key-value pairs\n * rx.set({\n *  size: 'large'\n * });\n *\n * // Or set a single name-value pair\n * rx.setNamedValue(`size`, `large`);\n * ```\n *\n * If an 'upstream' reactive is provided, this is used to set initial values of the UI, overriding\n * whatever may be in the HTML. Upstream changes modify UI elements, but UI changes do not modify the upstream\n * source.\n *\n * ```js\n * // Create a reactive object\n * const obj = Rx.From.object({\n *  when: `2024-10-03`,\n *  size: 12,\n *  checked: true\n * });\n *\n * // Use this as initial values for a HTML form\n * // (assuming appropriate INPUT/SELECT elements exist)\n * const rx = Rx.From.domForm(`form`, {\n *  upstreamSource: obj\n * });\n *\n * // Listen for changes in the UI\n * rx.onValue(value => {\n *\n * });\n * ```\n * @param formElOrQuery\n * @param options\n * @returns\n */\nexport declare function domForm<T extends Record<string, any>>(formElOrQuery: HTMLFormElement | string, options?: Partial<DomFormOptions<T>>): {\n    setNamedValue: (name: string, value: any) => void;\n    el: HTMLFormElement;\n} & ReactiveInitial<T> & ReactiveWritable<T>;\n//# sourceMappingURL=dom-source.d.ts.map","import { Pathed } from \"@ixfx/core\";\nimport * as Rx from \"@ixfx/rx\";\nimport type { ElementsOptions, PipeDomBinding, BindUpdateOpts, DomBindSourceValue, DomBindValueTarget, DomBindUnresolvedSource } from './dom-types.js';\n/**\n * Reactive stream of array of elements that match `query`.\n * @param query\n * @returns\n */\nexport declare function fromDomQuery(query: string): Rx.Reactive<HTMLElement[]> & {\n    set(value: HTMLElement[]): void;\n} & {\n    onField(fieldName: string, handler: (result: Rx.ObjectFieldHandler) => void): () => void;\n    onDiff(changes: (changes: Pathed.PathDataChange<any>[]) => void): () => void;\n    update(changedPart: (import(\"@ixfx/core\").RecursivePartial<HTMLElement> | undefined)[]): HTMLElement[];\n    updateField(field: string, value: any): void;\n} & {\n    last(): HTMLElement[];\n};\n/**\n * Updates an element's `textContent` when the source value changes.\n * ```js\n * bindText(source, `#blah`);\n * ```\n * @param elOrQuery\n * @param source\n * @param bindOpts\n */\nexport declare const bindText: <TSource>(source: Rx.Reactive<TSource>, elOrQuery: string | HTMLElement | null, bindOpts?: Partial<DomBindSourceValue<TSource, string>>) => PipeDomBinding;\n/**\n * Updates an element's `value` (as well as the 'value' attribute) when the source value changes.s\n * @param source\n * @param elOrQuery\n * @param bindOpts\n * @returns\n */\nexport declare const bindValueText: <TSource>(source: Rx.Reactive<TSource>, elOrQuery: string | HTMLInputElement | null, bindOpts?: Partial<DomBindSourceValue<TSource, string>>) => PipeDomBinding;\n/**\n * Updates an element's `innerHTML` when the source value changes\n * ```js\n * bindHtml(source, `#blah`);\n * ```\n *\n * Uses {@link bindElement}, with `{elField:'innerHTML'}` as the options.\n * @param elOrQuery\n * @param source\n * @param bindOpts\n * @returns\n */\nexport declare const bindHtml: <TSource>(source: Rx.Reactive<TSource>, elOrQuery: string | HTMLElement | null, bindOpts?: DomBindSourceValue<TSource, string>) => PipeDomBinding;\n/**\n * Shortcut to bind to an elements attribute\n * @param elOrQuery\n * @param source\n * @param attribute\n * @param bindOpts\n * @returns\n */\n/**\n * Shortcut to bind to a CSS variable\n * @param elOrQuery\n * @param source\n * @param cssVariable\n * @param bindOpts\n * @returns\n */\n/**\n * Creates a new HTML element, calling {@link bind} on it to update when `source` emits new values.\n *\n *\n * ```js\n * // Set textContent of a SPAN with values from `source`\n * create(source, { tagName: `span`, parentEl: document.body })\n * ```\n *\n * If `parentEl` is not given in the options, the created element needs to be manually added\n * ```js\n * const b = create(source);\n * someEl.append(b.el); // Append manually\n * ```\n *\n * ```\n * // Set 'title' attribute based on values from `source`\n * create(source, { parentEl: document.body, attribName: `title` })\n * ```\n * @param source\n * @param options\n * @returns\n */\n/**\n * Update a DOM element's field, attribute or CSS variable when `source` produces a value.\n *\n * ```js\n * // Access via DOM query. Binds to 'textContent' by default\n * bind(readableSource, `#someEl`);\n *\n * // Set innerHTML instead\n * bind(readableSource, someEl, { elField: `innerHTML` });\n *\n * // An attribute\n * bind(readableSource, someEl, { attribName: `width` });\n *\n * // A css variable ('--' optiona)\n * bind(readableSource, someEl, { cssVariable: `hue` });\n *\n * // Pluck a particular field from source data.\n * // Ie someEl.textContent = value.colour\n * bind(readableSource, someEl, { sourceField: `colour` });\n *\n * // Transform value before setting it to field\n * bind(readableSource, someEl, {\n *  field: `innerHTML`,\n *  transform: (v) => `Colour: ${v.colour}`\n * })\n * ```\n *\n * If `source` has an initial value, this is used when first bound.\n *\n * Returns {@link PipeDomBinding} to control binding:\n * ```js\n * const bind = bind(source, `#someEl`);\n * bind.remove();     // Unbind\n * bind.remove(true); // Unbind and remove HTML element\n * ```\n *\n * If several fields need to be updated based on a new value, consider using {@link bindUpdate} instead.\n * @param elOrQuery Element to update to, or query string such as '#someid'\n * @param source Source of data\n * @param binds Bindings\n */\nexport declare const bindElement: <TSource, TDestination>(source: Rx.Reactive<TSource>, elOrQuery: string | HTMLElement | null, ...binds: (DomBindSourceValue<TSource, TDestination> & DomBindValueTarget)[]) => PipeDomBinding;\n/**\n * Binds `source` to one or more element(s). One or more bindings for the same source\n * can be provided.\n *\n * ```js\n * bind(source,\n *  // Binds .name field of source values to textContent of #some-element\n *  { query: `#some-element`, sourceField: `name` },\n *  { query: `section`, }\n * );\n * ```\n *\n * Can update\n * * CSS variables\n * * CSS styles\n * * textContent / innerHTML\n * * HTML DOM attributes and object fields\n *\n * Can use a particular field on source values, or use the whole value. These can\n * pass through `transformValue` or `transform` respectively.\n *\n * Returns a function to unbind from source and optionally remove HTML element\n * ```js\n * const unbind = bind( . . . );\n * unbind();     // Unbind\n * unbind(true); // Unbind and remove HTML element(s)\n * ```\n * @param source\n * @param bindsUnresolvedElements\n * @returns\n */\nexport declare const bind: <TSource, TDestination>(source: Rx.Reactive<TSource>, ...bindsUnresolvedElements: DomBindUnresolvedSource<TSource, TDestination>[]) => PipeDomBinding;\n/**\n * Calls `updater` whenever `source` produces a value. Useful when several fields from a value\n * are needed to update an element.\n * ```js\n * bindUpdate(source, `#someEl`, (v, el) => {\n *  el.setAttribute(`width`, v.width);\n *  el.setAttribute(`height`, v.height);\n * });\n * ```\n *\n * Returns a {@link PipeDomBinding} to manage binding\n * ```js\n * const b = bindUpdate(...);\n * b.remove();     // Disconnect binding\n * b.remove(true); // Disconnect binding and remove element\n * b.el;           // HTML element\n * ```\n * @param elOrQuery\n * @param source\n * @param updater\n * @returns\n */\nexport declare const bindUpdate: <V>(source: Rx.Reactive<V>, elOrQuery: string | HTMLElement, updater: (v: V, el: HTMLElement) => void) => PipeDomBinding;\n/**\n * Updates a HTML element based on diffs on an object.\n * ```js\n * // Wrap an object\n * const o = Rx.object({ name: `Jane`, ticks: 0 });\n * const b = bindDiffUpdate(`#test`, o, (diffs, el) => {\n *  // el = reference to #test\n * // diff = Array of Changes,\n * //  eg [ { path: `ticks`, value: 797, previous: 0 } ]\n *  for (const diff of diffs) {\n *    if (diff.path === `ticks`) el.textContent = `${diff.previous} -> ${diff.value}`\n *  }\n * })\n *\n * // Eg. update field\n * o.updateField(`ticks`, Math.floor(Math.random()*1000));\n * ```\n *\n * If `initial` is provided as an option, this will be called if `source` has an initial value. Without this, the DOM won't be updated until the first data\n * update happens.\n * ```js\n * bindDiffUpdate(el, source, updater, {\n *  initial: (v, el) => {\n *    el.innerHTML = v.name;\n *  }\n * })\n * ```\n * @param elOrQuery\n * @param source\n * @param updater\n * @param opts\n * @returns\n */\nexport declare const bindDiffUpdate: <V>(source: Rx.ReactiveDiff<V>, elOrQuery: string | HTMLElement | null, updater: (diffs: Pathed.PathDataChange<any>[], el: HTMLElement) => void, opts?: Partial<BindUpdateOpts<V>>) => PipeDomBinding & {\n    refresh: () => void;\n};\n/**\n * Creates a new HTML element and calls `bindUpdate` so values from `source` can be used\n * to update it.\n *\n *\n * ```js\n * // Creates a span, adding it to <body>\n * const b = createUpdate(dataSource, (value, el) => {\n *  el.width = value.width;\n *  el.height = value.height;\n * }, {\n *  tagName: `SPAN`,\n *  parentEl: document.body\n * })\n * ```\n * @param source\n * @param updater\n * @param options\n * @returns\n */\n/**\n * Creates, updates & deletes elements based on pathed values from a reactive.\n *\n * This means that elements are only manipulated if its associated data changes,\n * and elements are not modified if there's no need to.\n * @param source\n * @param options\n */\nexport declare const elements: <T>(source: Rx.ReactiveDiff<T> | (Rx.ReactiveDiff<T> & Rx.ReactiveInitial<T>), options: Partial<ElementsOptions>) => void;\nexport declare function win(): {\n    dispose: (reason?: string) => void;\n    size: Rx.Reactive<{\n        lazy: string;\n        transform: () => {\n            width: number;\n            height: number;\n        };\n    }> & {\n        last(): {\n            lazy: string;\n            transform: () => {\n                width: number;\n                height: number;\n            };\n        };\n    };\n    pointer: Rx.Reactive<{\n        lazy: string;\n        transform: (args: Event | undefined) => {\n            x: number;\n            y: number;\n        };\n    }> & {\n        last(): {\n            lazy: string;\n            transform: (args: Event | undefined) => {\n                x: number;\n                y: number;\n            };\n        };\n    };\n};\n//# sourceMappingURL=dom.d.ts.map","export * from './browser-resize.js';\nexport * from './browser-theme-change.js';\nexport * from './colour.js';\nexport * from './dom-source.js';\nexport type * from './dom-types.js';\nexport * from './dom.js';\n//# sourceMappingURL=index.d.ts.map","export * as RxUi from './rx/index.js';\n//# sourceMappingURL=index.d.ts.map"],"mappings":"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,EmEvBTse,cnEuBSte,CmEvBMsa,EnEuBNta,CAAAA;AAA0Dy0B,iBmEtBxHpa,GnEsBwHoa,CAAAA,EAAAA,EAAAA,EAAAA,CAAAA,CAAAA,GAAAA,EmEtBvGjZ,SnEsBuGiZ,CmEtB7Fna,EnEsB6Fma,CAAAA,GmEtBvFhZ,iBnEsBuFgZ,CmEtBrEna,EnEsBqEma,CAAAA,EAAAA,EAAAA,EmEtB5D5Z,InEsB4D4Z,CmEtBvDna,EnEsBuDma,EmEtBnDla,EnEsBmDka,CAAAA,CAAAA,EmEtB7CnW,cnEsB6CmW,CmEtB9Bla,EnEsB8Bka,CAAAA;AAAXz0B,iBmErB7Gqa,GnEqB6Gra,CAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,CAAAA,CAAAA,GAAAA,EmErBxFwb,SnEqBwFxb,CmErB9Esa,EnEqB8Eta,CAAAA,GmErBxEyb,iBnEqBwEzb,CmErBtDsa,EnEqBsDta,CAAAA,EAAAA,EAAAA,EmErB7C6a,InEqB6C7a,CmErBxCsa,EnEqBwCta,EmErBpCua,EnEqBoCva,CAAAA,EAAAA,EAAAA,EmErB3B6a,InEqB2B7a,CmErBtBua,EnEqBsBva,EmErBlBwa,EnEqBkBxa,CAAAA,CAAAA,EmErBZse,cnEqBYte,CmErBGwa,EnEqBHxa,CAAAA;AAA2BD,iBmEpBxIsa,GnEoBwIta,CAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,CAAAA,CAAAA,GAAAA,EmEpB/Gyb,SnEoB+Gzb,CmEpBrGua,EnEoBqGva,CAAAA,GmEpB/F0b,iBnEoB+F1b,CmEpB7Eua,EnEoB6Eva,CAAAA,EAAAA,EAAAA,EmEpBpE8a,InEoBoE9a,CmEpB/Dua,EnEoB+Dva,EmEpB3Dwa,EnEoB2Dxa,CAAAA,EAAAA,EAAAA,EmEpBlD8a,InEoBkD9a,CmEpB7Cwa,EnEoB6Cxa,EmEpBzCya,EnEoByCza,CAAAA,EAAAA,EAAAA,EmEpBhC8a,InEoBgC9a,CmEpB3Bya,EnEoB2Bza,EmEpBvB0a,EnEoBuB1a,CAAAA,CAAAA,EmEpBjBue,cnEoBiBve,CmEpBF0a,EnEoBE1a,CAAAA;AAAkC00B,iBmEnB1Kpa,GnEmB0Koa,CAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,CAAAA,CAAAA,GAAAA,EmEnB7IjZ,SnEmB6IiZ,CmEnBnIna,EnEmBmIma,CAAAA,GmEnB7HhZ,iBnEmB6HgZ,CmEnB3Gna,EnEmB2Gma,CAAAA,EAAAA,EAAAA,EmEnBlG5Z,InEmBkG4Z,CmEnB7Fna,EnEmB6Fma,EmEnBzFla,EnEmByFka,CAAAA,EAAAA,EAAAA,EmEnBhF5Z,InEmBgF4Z,CmEnB3Ela,EnEmB2Eka,EmEnBvEja,EnEmBuEia,CAAAA,EAAAA,EAAAA,EmEnB9D5Z,InEmB8D4Z,CmEnBzDja,EnEmByDia,EmEnBrDha,EnEmBqDga,CAAAA,EAAAA,EAAAA,EmEnB5C5Z,InEmB4C4Z,CmEnBvCha,EnEmBuCga,EmEnBnC/Z,EnEmBmC+Z,CAAAA,CAAAA,EmEnB7BnW,cnEmB6BmW,CmEnBd/Z,EnEmBc+Z,CAAAA;AAAXz0B,iBmElB/Jqa,GnEkB+Jra,CAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,CAAAA,CAAAA,GAAAA,EmElB9Hwb,SnEkB8Hxb,CmElBpHsa,EnEkBoHta,CAAAA,GmElB9Gyb,iBnEkB8Gzb,CmElB5Fsa,EnEkB4Fta,CAAAA,EAAAA,EAAAA,EmElBnF6a,InEkBmF7a,CmElB9Esa,EnEkB8Eta,EmElB1Eua,EnEkB0Eva,CAAAA,EAAAA,EAAAA,EmElBjE6a,InEkBiE7a,CmElB5Dua,EnEkB4Dva,EmElBxDwa,EnEkBwDxa,CAAAA,EAAAA,EAAAA,EmElB/C6a,InEkB+C7a,CmElB1Cwa,EnEkB0Cxa,EmElBtCya,EnEkBsCza,CAAAA,EAAAA,EAAAA,EmElB7B6a,InEkB6B7a,CmElBxBya,EnEkBwBza,EmElBpB0a,EnEkBoB1a,CAAAA,EAAAA,EAAAA,EmElBX6a,InEkBW7a,CmElBN0a,EnEkBM1a,EmElBF2a,EnEkBE3a,CAAAA,CAAAA,EmElBIse,cnEkBJte,CmElBmB2a,EnEkBnB3a,CAAAA;AA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"}