{"version":3,"file":"index-Dah5ZkDn.d.ts","names":["ChangeKind","ChangeRecord","TKey","CompareChangeSet","Record","IsEqual","CompareChangeSet","compareObjectKeys","changedObjectDataFields","Record","compareArrays","TValue","compareObjectData","T","cloneFromFields","T","RemapObjectPropertyType","mapObjectShallow","Record","TSource","MapObjectArgs","TFieldValue","mapObjectByObject","mapObjectKeys","TKeySource","Record","TKeyDestination","RecordEntry","Readonly","RecordEntryWithAncestors","RecordEntryStatic","PathOpts","RecordChildrenOptions","prettyPrintEntries","recordEntryPrettyPrint","Partial","recordChildren","T","IterableIterator","recordEntriesDepthFirst","getRecordEntryByPath","traceRecordEntryByPath","Iterable","OptionalPropertyNames","T","K","Record","SpreadProperties","L","R","P","Exclude","Id","U","SpreadTwo","Pick","Spread","A","mergeObjects","keysToNumbers","T","Record","IsEqualContext","Result","PathData","V","PathDataChange","CompareDataOptions","WeakSet","compareData","Record","Partial","Generator","applyChanges","updateByPath","getField","getPaths","getPathsAndData","HasCompletion","ModSettableOptions","ModSettableFeedback","ModSettable","Partial","ModSource","ModFunction","ModulatorTimed","SpringOptions","ModSettable","ModuleSettable","ModSettableOptions","ModuleSettableOptions","TicksModSettableOptions","ticks","Partial","Interval","ModSettableOptions","ModuleSettableOptions","ModSettable","ModuleSettable","elapsed","Partial","bpm","hertz","ModSource","perSecond","Partial","perMinute","Flow","sine","Timer","Generator","sineBipolar","triangle","saw","square","bounceOut","quintIn","quintOut","arch","smoothstep","smootherstep","sineIn","sineOut","quadIn","quadOut","sineInOut","quadInOut","cubicIn","cubicOut","quartIn","quartOut","expoIn","expoOut","quintInOut","expoInOut","circIn","circOut","backIn","backOut","circInOut","backInOut","elasticIn","elasticOut","bounceIn","bell","elasticInOut","bounceInOut","Points","line","Point","Named","Interval","ModFunction","EasingName","EasingOptions","EasingTickOptions","EasingTimeOptions","Interval","ModFunction","ModulatorTimed","Named","EasingName","EasingOptions","create","timeEasing","time","ticks","tickEasing","get","getEasingNames","Iterable","EnvelopeOpts","AdsrOpts","AdsrTimingOpts","Partial","AdsrIterableOpts","AbortSignal","StateChangeEvent","CompleteEvent","AdsrEvents","adsrStateTransitions","Readonly","AdsrStateTransitions","SimpleEventEmitter","AdsrEvents","AdsrTimingOpts","defaultAdsrTimingOpts","Readonly","AdsrBase","Paths","AdsrBase","EnvelopeOpts","defaultAdsrOpts","Readonly","AdsrIterator","Adsr","IteratorResult","Symbol","toStringTag","Iterator","Path","iterator","Iterable","AdsrIterableOpts","EnvelopeOpts","adsr","adsrIterable","AsyncGenerator","Points","Rects","MassApplication","ForceAffected","Point","ForceFn","ForceKind","guard","constrainBounce","Rect","attractionForce","computeAttractionForce","TargetOpts","targetForce","apply","accelerationForce","magnitudeForce","nullForce","velocityForce","angularForce","Readonly","angleFromAccelerationForce","angleFromVelocityForce","springForce","PendulumOpts","pendulumForce","computeVelocity","computeAccelerationToTarget","computePositionFromVelocity","computePositionFromAngle","orientationForce","ModFunction","cubicBezierShape","Drifter","drift","gaussian","BasicInterpolateOptions","EasingName","Interval","InterpolateOptions","interpolate","Partial","interpolatorStepped","interpolateAngle","interpolatorInterval","RandomSource","JitterOpts","Jitterer","jitterAbsolute","jitter","ModFunction","mix","mixModulators","crossfade","Interval","ModFunction","ModulatorTimed","time","timeModulator","ticks","tickModulator","ModFunction","noop","pingPongPercent","Generator","pingPong","Flow","ModFunction","SpringOptions","spring","Timer","Generator","springValue","springShape","ModSettable","ModSettableOptions","TimingSources","timingSourceFactory","Partial","TimingSourceFactory","ModSettable","ModSettableFeedback","ModSettableOptions","ModFunction","WaveModulator","WaveShaperFeedback","Partial","Waveforms","WaveOptions","triangleShape","squareShape","sineShape","arcShape","sineBipolarShape","wave","waveFromSource","weightedAverage","RandomSource","EasingName","WeightedOptions","Readonly","weighted","weightedSource","Sources","Oscillators","Easings","Envelopes","Forces","interpolate","Process","TIn","TOut","ProcessFactory","Processors1","T1","T2","Processors2","T3","Processors3","T4","Processors4","T5","Processors5","T6","Processors","RankFunction","T","RankOptions","Process","RankFunction","RankOptions","max","min","sum","average","tally","rank","In","Partial","CancelError","Error","Process","flow","T1","T2","T3","T4","T5","T6","ifNotUndefined","TIn","Exclude","TOut","cancelIfUndefined","ifUndefined","Process","seenLastToUndefined","TIn","seenToUndefined","seenToUndefinedByKey"],"sources":["../../core/dist/src/types-compare.d.ts","../../core/dist/src/records/compare.d.ts","../../core/dist/src/records/clone-from-fields.d.ts","../../core/dist/src/records/map-object.d.ts","../../core/dist/src/records/map-object-keys.d.ts","../../core/dist/src/records/traverse.d.ts","../../core/dist/src/records/merge.d.ts","../../core/dist/src/records/keys-to-numbers.d.ts","../../core/dist/src/records/index.d.ts","../../core/dist/src/pathed.d.ts","../../modulation/dist/src/types.d.ts","../../modulation/dist/src/source/ticks.d.ts","../../modulation/dist/src/source/time.d.ts","../../modulation/dist/src/source/per-second.d.ts","../../modulation/dist/src/source/index.d.ts","../../modulation/dist/src/oscillator.d.ts","../../modulation/dist/src/easing/easings-named.d.ts","../../modulation/dist/src/easing/line.d.ts","../../modulation/dist/src/easing/types.d.ts","../../modulation/dist/src/easing/index.d.ts","../../modulation/dist/src/envelope/Types.d.ts","../../modulation/dist/src/envelope/AdsrBase.d.ts","../../modulation/dist/src/envelope/Adsr.d.ts","../../modulation/dist/src/envelope/index.d.ts","../../modulation/dist/src/forces.d.ts","../../modulation/dist/src/cubic-bezier.d.ts","../../modulation/dist/src/drift.d.ts","../../modulation/dist/src/gaussian.d.ts","../../modulation/dist/src/interpolate.d.ts","../../modulation/dist/src/jitter.d.ts","../../modulation/dist/src/mix.d.ts","../../modulation/dist/src/modulator-timed.d.ts","../../modulation/dist/src/no-op.d.ts","../../modulation/dist/src/ping-pong.d.ts","../../modulation/dist/src/spring.d.ts","../../modulation/dist/src/timing-source-factory.d.ts","../../modulation/dist/src/waveforms.d.ts","../../modulation/dist/src/weighted-average.d.ts","../../modulation/dist/src/weighted-random.d.ts","../../modulation/dist/src/index.d.ts","../../process/dist/src/types.d.ts","../../process/dist/src/basic.d.ts","../../process/dist/src/cancel-error.d.ts","../../process/dist/src/flow.d.ts","../../process/dist/src/if-undefined.d.ts","../../process/dist/src/seen.d.ts","../../process/dist/src/index.d.ts"],"sourcesContent":["/**\n * Kind of change\n */\nexport type ChangeKind = `mutate` | `add` | `del`;\n/**\n * Change record\n */\nexport type ChangeRecord<TKey extends string | number | symbol> = [kind: ChangeKind, path: TKey, value: unknown];\n/**\n * Result of compareObjectData\n */\nexport type CompareChangeSet<TKey extends string | number> = {\n    /**\n     * _True_ if there are any changes\n     */\n    hasChanged: boolean;\n    /**\n     * Results for child objects\n     */\n    children: Record<TKey, CompareChangeSet<string | number>>;\n    /**\n     * Values that have changed\n     */\n    changed: Record<TKey, unknown>;\n    /**\n     * Fields that have been added\n     */\n    added: Record<TKey, unknown>;\n    /**\n     * Fields that have been removed\n     */\n    removed: TKey[];\n    /**\n     * _True_ if value is an array\n     */\n    isArray: boolean;\n    /**\n     * Summary of changes\n     */\n    summary: ChangeRecord<TKey>[];\n};\n//# sourceMappingURL=types-compare.d.ts.map","import { type IsEqual } from '@ixfx/core';\nimport type { CompareChangeSet } from '../types-compare.js';\n/**\n * Compares the keys of two objects, returning a set of those in\n * common, and those in either A or B exclusively.\n * ```js\n * const a = { colour: `red`, intensity: 5 };\n * const b = { colour: `pink`, size: 10 };\n * const c = compareObjectKeys(a, b);\n * // c.shared = [ `colour` ]\n * // c.a = [ `intensity` ]\n * // c.b = [ `size`  ]\n * ```\n * @param a\n * @param b\n * @returns\n */\nexport declare const compareObjectKeys: (a: object, b: object) => {\n    shared: string[];\n    isSame: boolean;\n    a: string[];\n    b: string[];\n};\n/**\n * Returns the changed fields from A -> B. It's assumed that A and B have the same shape.\n * ie. returns an object that only consists of fields which have changed in B compared to A.\n *\n * ```js\n * const a = { msg: `hi`, v: 10 };\n *\n * changedObjectDataFields(a, { msg: `hi`,   v: 10 }); // {}\n * changedObjectDataFields(a, { msg: `hi!!`, v: 10 }); // { msg: `hi!!` }\n * changedObjectDataFields(a, { msg: `hi!!` });       // { msg: `hi!!`, v: undefined }\n * ```\n *\n * If B has additional or removed fields, this is considered an error.\n *\n * If a field is an array, the whole array is returned, rather than a diff.\n * @param a\n * @param b\n */\nexport declare const changedObjectDataFields: (a: object, b: object) => Record<string, unknown> | object[];\n/**\n * Produces a {@link CompareChangeSet} between two arrays.\n *\n * @param a Earlier array to compare\n * @param b Later array to compare\n * @param eq Equality comparison for values\n * @returns Change set.\n */\nexport declare const compareArrays: <TValue>(a: TValue[], b: TValue[], eq?: IsEqual<TValue>) => CompareChangeSet<number>;\n/**\n * Compares A to B. Assumes they are simple objects, essentially key-value pairs, where the\n * values are primitive values or other simple objects. It also works with arrays.\n *\n * Uses === equality semantics by default.\n * @param a\n * @param b\n */\nexport declare const compareObjectData: <T>(a: object | null, b: object | null, assumeSameShape?: boolean, eq?: IsEqual<T>) => CompareChangeSet<string>;\n//# sourceMappingURL=compare.d.ts.map","export declare const cloneFromFields: <T extends object>(source: T) => T;\n//# sourceMappingURL=clone-from-fields.d.ts.map","import type { RemapObjectPropertyType } from \"../ts-utility.js\";\n/**\n * Maps the top-level properties of an object through a map function.\n * That is, run each of the values of an object through a function,\n * setting the result onto the same key structure as original.\n *\n * It is NOT recursive.\n *\n * The mapping function gets a single args object, consisting of `{ value, field, index }`,\n * where 'value' is the value of the field, 'field' the name, and 'index' a numeric count.\n * @example Double the value of all fields\n * ```js\n * const rect = { width: 100, height: 250 };\n * const doubled = mapObjectShallow(rect, args => {\n *  return args.value*2;\n * });\n * // Yields: { width: 200, height: 500 }\n * ```\n *\n * Since the map callback gets the name of the property, it can do context-dependent things.\n * ```js\n * const rect = { width: 100, height: 250, colour: 'red' }\n * const doubled = mapObjectShallow(rect, args => {\n *  if (args.field === 'width') return args.value*3;\n *  else if (typeof args.value === 'number') return args.value*2;\n *  return args.value;\n * });\n * // Yields: { width: 300, height: 500, colour: 'red' }\n * ```\n * In addition to bulk processing, it allows remapping of property types.\n *\n * In terms of type-safety, the mapped properties are assumed to have the\n * same type.\n *\n * ```js\n * const o = {\n *  x: 10,\n *  y: 20,\n *  width: 200,\n *  height: 200\n * }\n *\n * // Make each property use an averager instead\n * const oAvg = mapObjectShallow(o, args => {\n *  return movingAverage(10);\n * });\n *\n * // Instead of { x:number, y:number... }, we now have { x:movingAverage(), y:movingAverage()... }\n * // Add a value to the averager\n * oAvg.x.add(20);\n * ```\n */\nexport declare const mapObjectShallow: <TSource extends Record<string, any>, TFieldValue>(object: TSource, mapFunction: (args: MapObjectArgs) => TFieldValue) => RemapObjectPropertyType<TSource, TFieldValue>;\nexport type MapObjectArgs = {\n    field: string;\n    path: string;\n    value: any;\n    index: number;\n};\n/**\n * Maps the contents of `data` using `mapper` as a structured set of map functions.\n * ```js\n * const a = {\n *  person: {\n *    size: 20\n *  }\n *  hello: `there`\n * }\n * mapObjectByObject(a, {\n *  person: {\n *    size: (value, context) => {\n *      return value * 2\n *    }\n *  }\n * });\n * // Yields: { person: { size: 40 }, hello: `there` }\n * ```\n * @param data\n * @param mapper\n * @returns\n */\nexport declare function mapObjectByObject(data: object, mapper: Record<string, (value: any, context: any) => any>): {\n    [k: string]: any;\n};\n//# sourceMappingURL=map-object.d.ts.map","/**\n * Maps the keys of an object, returning a transformed object.\n * ```js\n * const input = {\n *  hello: `there`,\n *  chap: `chappie`\n * }\n *\n * mapObjectKeys(input, key => key.toUppercase());\n *\n * // Yields: { HELLO: `there`, CHAP: `chappie` }\n * ```\n * @param object\n * @param mapFunction\n * @returns\n */\nexport declare const mapObjectKeys: <TKeySource extends string | number | symbol, TKeyDestination extends string | number | symbol>(object: Record<TKeySource, unknown>, mapFunction: (key: TKeySource) => TKeyDestination) => Record<TKeyDestination, unknown>;\n//# sourceMappingURL=map-object-keys.d.ts.map","export type RecordEntry = Readonly<{\n    name: string;\n    sourceValue: any;\n    nodeValue: any;\n}>;\nexport type RecordEntryWithAncestors = Readonly<{\n    name: string;\n    sourceValue: any;\n    nodeValue: any;\n    ancestors: string[];\n}>;\nexport type RecordEntryStatic = Readonly<{\n    name: string;\n    value: any;\n    ancestors: string[];\n}>;\n/**\n * Options for parsing a path\n */\nexport type PathOpts = {\n    /**\n     * Separator for path, eg '.'\n     */\n    readonly separator?: string;\n};\nexport type RecordChildrenOptions = Readonly<{\n    /**\n     * If set, only uses leaves or branches. 'none' means there is no filter.\n     */\n    filter: `none` | `leaves` | `branches`;\n    /**\n     * Default name to use. This is necessary in some cases, eg a root object.\n     */\n    name: string;\n}>;\n/**\n * Helper function to get a 'friendly' string representation of an array of {@link RecordEntry}.\n * @param entries\n * @returns\n */\nexport declare function prettyPrintEntries(entries: readonly RecordEntry[]): string;\n/**\n * Returns a human-friendly debug string for a tree-like structure\n * ```js\n * console.log(Trees.prettyPrint(obj));\n * ```\n * @param indent\n * @param node\n * @param options\n * @returns\n */\nexport declare const recordEntryPrettyPrint: (node: object, indent?: number, options?: Partial<RecordChildrenOptions>) => string;\n/**\n * Returns the direct children of a tree-like object as a pairing\n * of node name and value. Supports basic objects, Maps and arrays.\n *\n * Sub-children are included as an object blob.\n *\n * @example Simple object\n * ```js\n * const o = {\n *  colour: {\n *    r: 0.5, g: 0.5, b: 0.5\n *  }\n * };\n *\n * const children = [ ...Trees.children(o) ];\n * // Children:\n * // [\n * //  { name: \"colour\", value: { b: 0.5, g: 0.5, r: 0.5 } }\n * // ]\n * const subChildren = [ ...Trees.children(o.colour) ];\n * // [ { name: \"r\", value: 0.5 }, { name: \"g\", value: 0.5 }, { name: \"b\", value: 0.5 } ]\n * ```\n *\n * Arrays are assigned a name based on index.\n * @example Arrays\n * ```js\n * const colours = [ { r: 1, g: 0, b: 0 }, { r: 0, g: 1, b: 0 }, { r: 0, g: 0, b: 1 } ];\n * // Children:\n * // [\n * //  { name: \"array[0]\", value: {r:1,g:0,b:0} },\n * //  { name: \"array[1]\", value: {r:0,g:1,b:0} },\n * //  { name: \"array[2]\", value: {r:0,g:0,b:1} },\n * // ]\n * ```\n *\n * Pass in `options.name` (eg 'colours') to have names generated as 'colours[0]', etc.\n * Options can also be used to filter children. By default all direct children are returned.\n * @param node\n * @param options\n */\nexport declare function recordChildren<T extends object>(node: T, options?: Partial<RecordChildrenOptions>): IterableIterator<RecordEntry>;\nexport declare function recordEntriesDepthFirst<T extends object>(node: T, options?: Partial<RecordChildrenOptions>, ancestors?: string[]): IterableIterator<RecordEntryWithAncestors>;\n/**\n * Returns the closest matching entry, tracing `path` in an array, Map or simple object.\n * Returns an entry with _undefined_ value at the point where tracing stopped.\n * Use {@link traceRecordEntryByPath} to step through all the segments.\n *\n * ```js\n  * const people = {\n    *  jane: {\n *   address: {\n *    postcode: 1000,\n    *    street: 'West St',\n    *    city: 'Blahville'\n *   },\n * colour: 'red'\n  *  }\n * }\n * Trees.getByPath('jane.address.postcode', people); // '.' default separator\n * // ['postcode', 1000]\n * Trees.getByPath('jane.address.country.state', people);\n * // ['country', undefined] - since full path could not be resolved.\n * ```\n * @param path Path, eg `jane.address.postcode`\n * @param node Node to look within\n * @param options Options for parsing path. By default '.' is used as a separator\n * @returns\n */\nexport declare function getRecordEntryByPath<T extends object>(path: string, node: T, options?: PathOpts): RecordEntry;\n/**\n * Enumerates over children of `node` towards the node named in `path`.\n * This is useful if you want to get the interim steps to the target node.\n *\n * Use {@link getRecordEntryByPath} if you don't care about interim steps.\n *\n * ```js\n * const people = {\n *  jane: {\n *   address: {\n *    postcode: 1000,\n *    street: 'West St',\n *    city: 'Blahville'\n *   },\n * colour: 'red'\n *  }\n * }\n * for (const p of Trees.traceByPath('jane.address.street', people)) {\n * // { name: \"jane\", value: { address: { postcode: 1000,street: 'West St', city: 'Blahville' }, colour: 'red'} },\n * // { name: \"address\", value: { postcode: 1000, street: 'West St', city: 'Blahville' } },\n * // { name: \"street\", value: \"West St\" } }\n * }\n * ```\n *\n * Results stop when the path can't be followed any further.\n * The last entry will have a name of the last sought path segment, and _undefined_ as its value.\n *\n * @param path Path to traverse\n * @param node Starting node\n * @param options Options for path traversal logic\n * @returns\n */\nexport declare function traceRecordEntryByPath<T extends object>(path: string, node: T, options?: PathOpts): Iterable<RecordEntryWithAncestors>;\n//# sourceMappingURL=traverse.d.ts.map","type OptionalPropertyNames<T> = {\n    [K in keyof T]-?: ({} extends Record<K, T[K]> ? K : never);\n}[keyof T];\ntype SpreadProperties<L, R, K extends keyof L & keyof R> = {\n    [P in K]: L[P] | Exclude<R[P], undefined>;\n};\ntype Id<T> = T extends infer U ? {\n    [K in keyof U]: U[K];\n} : never;\ntype SpreadTwo<L, R> = Id<Pick<L, Exclude<keyof L, keyof R>> & Pick<R, Exclude<keyof R, OptionalPropertyNames<R>>> & Pick<R, Exclude<OptionalPropertyNames<R>, keyof L>> & SpreadProperties<L, R, OptionalPropertyNames<R> & keyof L>>;\nexport type Spread<A extends readonly [...any]> = A extends [infer L, ...infer R] ? SpreadTwo<L, Spread<R>> : unknown;\nexport declare function mergeObjects<A extends object[]>(...a: [...A]): Spread<A>;\nexport {};\n//# sourceMappingURL=merge.d.ts.map","/**\n * Returns a copy of `object` with integer numbers as keys instead of whatever it has.\n * ```js\n * keysToNumbers({ '1': true }); // Yields: { 1: true }\n * ```\n *\n * The `onInvalidKey` sets how to handle keys that cannot be converted to integers.\n * * 'throw' (default): throws an exception\n * * 'ignore': that key & value is ignored\n * * 'keep': uses the string key instead\n *\n *\n * ```js\n * keysToNumber({ hello: 'there' }, `ignore`); // Yields: {  }\n * keysToNumber({ hello: 'there' }, `throw`);  // Exception\n * keysToNumber({ hello: 'there' }, `keep`);   // Yields: { hello: 'there' }\n * ```\n *\n * Floating-point numbers will be converted to integer by rounding.\n * ```js\n * keysToNumbers({ '2.4': 'hello' }); // Yields: { 2: 'hello' }\n * ```\n * @param object\n * @param onInvalidKey\n * @returns\n */\nexport declare const keysToNumbers: <T>(object: Record<string | number | symbol, T>, onInvalidKey?: `throw` | `ignore` | `keep`) => Record<number, T>;\n//# sourceMappingURL=keys-to-numbers.d.ts.map","export * from './compare.js';\nexport * from './clone-from-fields.js';\nexport * from './map-object.js';\nexport * from './map-object-keys.js';\nexport * from './traverse.js';\nexport * from './merge.js';\nexport * from './keys-to-numbers.js';\nexport type * from '../types-compare.js';\n//# sourceMappingURL=index.d.ts.map","import type { IsEqualContext } from '@ixfx/core';\nimport type { Result } from '@ixfx/guards';\n/**\n * Data at a particular path\n */\nexport type PathData<V> = {\n    /**\n     * Path\n     */\n    path: string;\n    /**\n     * Value\n     */\n    value: V;\n};\n/**\n * A change to a value\n */\nexport type PathDataChange<V> = PathData<V> & {\n    /**\n     * Previous value, if any\n     */\n    previous?: V;\n    /**\n     * Nature of the change\n     */\n    state: `change` | `added` | `removed`;\n};\n/**\n * Compare data\n */\nexport type CompareDataOptions<V> = {\n    /**\n     * If _true_, it treats the B value as a partial\n     * version of B. Only the things present in B are compared.\n     * Omissions from B are not treated as removed keys.\n     */\n    asPartial: boolean;\n    /**\n     * If _true_ (default), if a value is undefined,\n     * it signals that the key itself is removed.\n     */\n    undefinedValueMeansRemoved: boolean;\n    pathPrefix: string;\n    /**\n     * Comparison function for values. By default uses\n     * JSON.stringify() to compare by value.\n     */\n    eq: IsEqualContext<V>;\n    /**\n     * If true, inherited fields are also compared.\n     * This is necessary for events, for example.\n     *\n     * Only plain-object values are used, the other keys are ignored.\n     */\n    deepEntries: boolean;\n    /**\n     * If _true_, includes fields that are present in B, but missing in A.\n     * _False_ by default.\n     */\n    includeMissingFromA: boolean;\n    /**\n     * If _true_, emits a change under the path of a parent if its child has changed.\n     * If _false_ (default) only changed keys are emitted.\n     *\n     * Eg if data is:\n     * `{ colour: { h:0.5, s: 0.3, l: 0.5 }}`\n     * and we compare with:\n     * `{ colour: { h:1, s: 0.3, l: 0.5 }}`\n     *\n     * By default only 'colour.h' is emitted. If _true_ is set, 'colour' and 'colour.h' is emitted.\n     */\n    includeParents: boolean;\n    skipInstances: WeakSet<any>;\n};\n/**\n * Scans object, producing a list of changed fields where B's value (newer) differs from A (older).\n *\n * Options:\n * - `deepEntries` (_false_): If _false_ Object.entries are used to scan the object. However this won't work for some objects, eg event args, thus _true_ is needed.\n * - `eq` (JSON.stringify): By-value comparison function\n * - `includeMissingFromA` (_false): If _true_ includes fields present on B but missing on A.\n * - `asPartial` (_false): If _true_, treats B as a partial update to B. This means that things missing from B are not considered removals.\n * @param a 'Old' value\n * @param b 'New' value\n * @param options Options for comparison\n * @returns\n */\nexport declare function compareData<V extends Record<string, any>>(a: V, b: Partial<V>, options?: Partial<CompareDataOptions<V>>): Generator<PathDataChange<any>>;\n/**\n * Returns a copy of `source` with `changes` applied.\n * @param source\n * @param changes\n */\nexport declare const applyChanges: <V extends Record<string, any>>(source: V, changes: PathDataChange<any>[]) => V;\n/**\n * Returns a copy of `target` object with a specified path changed to `value`.\n *\n * ```js\n * const a = {\n *  message: `Hello`,\n *  position: { x: 10, y: 20 }\n * }\n *\n * const a1 = updateByPath(a, `message`, `new message`);\n * // a1 = { message: `new message`, position: { x: 10, y: 20 }}\n * const a2 = updateByPath(a, `position.x`, 20);\n * // a2 = { message: `hello`, position: { x: 20, y: 20 }}\n * ```\n *\n * Paths can also be array indexes:\n * ```js\n * updateByPath([`a`,`b`,`c`], 2, `d`);\n * // Yields: [ `a`, `b`, `d` ]\n * ```\n *\n * By default, only existing array indexes can be updated. Use the `allowShapeChange` parameter\n * to allow setting arbitrary indexes.\n * ```js\n * // Throws because array index 3 is undefined\n * updateByPath([ `a`, `b`, `c` ], `3`, `d`);\n *\n * // With allowShapeChange flag\n * updateByPath([ `a`, `b`, `c` ], `3`, `d`, true);\n * // Returns: [ `a`, `b`, `c`, `d` ]\n * ```\n *\n * Throws an error if:\n * * `path` cannot be resolved (eg. `position.z` in the above example)\n * * `value` applied to `target` results in the object having a different shape (eg missing a field, field\n * changing type, or array index out of bounds). Use `allowShapeChange` to suppress this error.\n * * Path is undefined or not a string\n * * Target is undefined/null\n * @param target Object to update\n * @param path Path to set value\n * @param value Value to set\n * @param allowShapeChange By default _false_, throwing an error if an update change the shape of the original object.\n * @returns\n */\nexport declare const updateByPath: <V extends Record<string, any>>(target: V, path: string, value: any, allowShapeChange?: boolean) => V;\n/**\n * Gets the data at `path` in `object`. Assumes '.' separates each segment of path.\n *\n * ```js\n * getField({ name: { first: `Thom`, last: `Yorke` }}, `name.first`); // { value: `Thom`  success: true }\n * getField({ colours: [`red`, `green`, `blue` ]}, `colours.1`);      // { value: `green` success: true }\n * ```\n *\n * Returns an error result with more details, eg `{ success: false, error: 'Path could not be found' }`\n *\n * Throws if:\n * * `path` is not a string or empty\n * * `object` is _undefined_ or null\n * @param object Object to query\n * @param path Path\n * @param separator Separator of chunks of path. Defaults to '.'\n * @returns\n */\nexport declare const getField: <V>(object: Record<string, any>, path: string, separator?: string) => Result<V, any>;\n/**\n * Iterates 'paths' for all the fields on `o`\n * ```\n * const d = {\n *  accel: { x: 1, y: 2, z: 3 },\n *  gyro: { x: 4, y: 5, z: 6 }\n * };\n * const paths = [...getFieldPaths(d)];\n * // Yields [ `accel`, `gyro`, `accel.x`, `accel.y`,`accel.z`,`gyro.x`,`gyro.y`,`gyro.z` ]\n * ```\n *\n * Use {@link getField} to fetch data based on a path\n *\n * If object is _null_ or _undefined_, no results are returned.\n *\n * If `onlyLeaves` is _true_ (default: _false_), only 'leaf' nodes are included.\n * Leaf nodes are those that contain a primitive value.\n * ```js\n * const paths = getFieldPaths(d, true);\n * // Yields [ `accel.x`, `accel.y`,`accel.z`,`gyro.x`,`gyro.y`,`gyro.z` ]\n * ```\n *\n * @param object Object to get paths for.\n * @param onlyLeaves If true, only paths with a primitive value are returned.\n * @returns\n */\nexport declare function getPaths(object: object | null, onlyLeaves?: boolean): Generator<string>;\n/**\n * Returns a representation of the object as a set of paths and data.\n * ```js\n * const o = { name: `hello`, size: 20, colour: { r:200, g:100, b:40 } }\n * const pd = [...getPathsAndData(o)];\n * // Yields:\n * // [\n * // { path: `name`, value: `hello` },\n * // { path: `size`, value: `20` },\n * // { path: `colour.r`, value: `200` },\n * // { path: `colour.g`, value: `100` },\n * // { path: `colour.b`, value: `40` }\n * //]\n * ```\n * @param o Object to get paths and data for\n * @param maxDepth Set maximum recursion depth. By default unlimited.\n * @param prefix Manually set a path prefix if it's necessary\n * @returns\n */\nexport declare function getPathsAndData(o: object, onlyLeaves?: boolean, maxDepth?: number, prefix?: string): Generator<PathData<any>>;\n//# sourceMappingURL=pathed.d.ts.map","import type { HasCompletion } from \"@ixfx/core\";\nexport type ModSettableOptions = {\n    /**\n     * Starting absolute value of source.\n     */\n    startAt: number;\n    /**\n     * Starting relative value of source (eg 0.5 for 50%)\n     */\n    startAtRelative: number;\n    /**\n     * If set, determines how many cycles. By default unlimited.\n     * Use 1 for example for a one-shot wave.\n     */\n    cycleLimit: number;\n};\nexport type ModSettableFeedback = {\n    /**\n     * If set, resets absolute position of clock\n     */\n    resetAt: number;\n    /**\n     * If set, resets relative position of clock\n     */\n    resetAtRelative: number;\n};\nexport type ModSettable = (feedback?: Partial<ModSettableFeedback>) => number;\n/**\n * A mod source returns numbers on a 0..1 scale.\n * Usually invoked just a function, some sources also support\n * 'feedback' allowing source to be adjusted dynamically.\n *\n * See Modulation.Sources for more.\n */\nexport type ModSource = (feedback?: any) => number;\n/**\n * A function that modulates `v`.\n *\n * Example modulators:\n * * {@link wave}: Generate different wave shapes\n * * Raw access to waves: {@link arcShape}, {@link sineShape},{@link sineBipolarShape}, {@link triangleShape}, {@link squareShape}\n * * {@link Easings}: Easing functions\n * * {@link springShape}: Spring\n */\nexport type ModFunction = (v: number) => number;\nexport type ModulatorTimed = HasCompletion & {\n    /**\n     * Computes the current value of the easing\n     *\n     * @returns {number}\n     */\n    compute(): number;\n    /**\n     * Reset the easing\n     */\n    reset(): void;\n    /**\n     * Returns true if the easing is complete\n     *\n     * @returns {boolean}\n     */\n    get isDone(): boolean;\n};\nexport type SpringOptions = Partial<{\n    /**\n     * How much 'weight' the spring has.\n     * Favour adjusting 'damping' or 'stiffness' before changing mass.\n     * Default: 1\n     */\n    readonly mass: number;\n    /**\n     * Absorbs the energy, acting as a kind of friction. Helps\n     * to avoid oscillations where the spring doesn't 'end'\n     * Default: 10\n     */\n    readonly damping: number;\n    /**\n     * How bouncy the spring is\n     * Default: 100\n     */\n    readonly stiffness: number;\n    /**\n     * Default: false\n     */\n    readonly soft: boolean;\n    /**\n     * Default: 0.1\n     */\n    readonly velocity: number;\n    /**\n     * How many iterations to wait for spring settling. Longer values may be\n     * needed if it seems the spring gets prematurely cut off.\n     * Default: 10\n     */\n    readonly countdown: number;\n}>;\n//# sourceMappingURL=types.d.ts.map","import type { ModSettable as ModuleSettable, ModSettableOptions as ModuleSettableOptions } from \"../types.js\";\nexport type TicksModSettableOptions = ModuleSettableOptions & {\n    exclusiveStart: boolean;\n    exclusiveEnd: boolean;\n};\n/**\n * Returns a function which cycles between 0..1 (inclusive of 0 and 1).\n * `totalTicks` is how many ticks it takes to get to 1. Since we want an inclusive 0 & 1,\n * the total ticks is actually +1.\n *\n * Ie. if totalTicks = 10, we get: 0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0\n *\n * Use 'exclusiveStart' and 'exclusiveEnd' flags to shift range. Eg, with `totalTicks` of 10:\n * * 'exclusiveStart:true': first value is 0.1, last value is 1.0 (10 values total)\n * * 'exclusiveEnd:true': first value is 0, last value is 0.9 (10 values total)\n * * If both are true, first value is 0.1, last value is 0.9 (9 values total)\n * * If both are false (or not set), we get the case described earlier, first value is 0, last value is 1 (11 values total)\n *\n * Other examples:\n * * totalTicks: 20, value goes up by 0.05\n * * totalTicks: 1, value goes up by 1\n * @param totalTicks Positive, integer value. How many ticks to complete a cycle\n * @param options\n * @returns\n */\nexport declare function ticks(totalTicks: number, options?: Partial<TicksModSettableOptions>): ModuleSettable;\n//# sourceMappingURL=ticks.d.ts.map","import { type Interval } from \"@ixfx/core\";\nimport type { ModSettableOptions as ModuleSettableOptions, ModSettable as ModuleSettable } from \"../types.js\";\n/**\n * Returns the percentage of time toward `interval`. See also: {@link bpm}, {@link hertz} which are the same but\n * using different units for time.\n *\n * By default, it continues forever, cycling from 0..1 repeatedly for each interval. Use\n * `cycleLimit` to restrict this. A value of 1 means it won't loop.\n *\n * The starting 'position' is `performance.now()`. If `startAt` option is provided, this will be used instead.\n * It probably should be an offset of `performance.now()`, eg: `{ startAt: performance.now() - 500 }` to shift\n * the cycle by 500ms.\n *\n * When using `startAtRelative`, the starting position will be set backward by the relative amount. A value\n * of 0.5, for example, will set the timer back 50% of the interval, meaning the cycle will start half way through.\n *\n * @param interval\n * @param options\n * @returns\n */\nexport declare function elapsed(interval: Interval, options?: Partial<ModuleSettableOptions>): ModuleSettable;\n/**\n * Counts beats based on a BPM.\n * Uses {@link elapsed} internally.\n * @param bpm\n * @param options\n * @returns\n */\nexport declare function bpm(bpm: number, options?: Partial<ModuleSettableOptions>): ModuleSettable;\n/**\n * Counts based on hertz (oscillations per second).\n * Uses {@link elapsed} internally.\n * @param hz\n * @param options\n * @returns\n */\nexport declare function hertz(hz: number, options?: Partial<ModuleSettableOptions>): ModuleSettable;\n//# sourceMappingURL=time.d.ts.map","import type { ModSource } from \"../types.js\";\n/**\n * Returns a proportion of `amount` depending on elapsed time.\n * Cumulatively, `amount` is yielded every second.\n *\n * ```js\n * // Calculate a proportion of 0.1 every second\n * const x = perSecond(0.1);\n * x();\n * ```\n *\n * The faster `x()` is called, the smaller the chunks of `amount` are returned.\n * Values accumulate. For example, `x()` isn't called for two seconds, 2*amount is returned.\n *\n * @example Usage\n * ```js\n * const settings = {\n *  ageMod: perSecond(0.1);\n * };\n *\n * let state = {\n *  age: 1\n * };\n *\n * // Update\n * setInterval(() => {\n *  let { age } = state;\n *  // Add 0.1 per second, regardless of\n *  // loop speed\n *  age += settings.ageMod();\n *  state = {\n *    ...state,\n *    age: clamp(age)\n *  }\n * });\n * ```\n *\n * Use the `clamp` option so the returned value never exceeds `amount`.\n * Alternatively, `min`/`max` options allow you to set arbitrary limits.\n * @param amount\n * @returns\n */\nexport declare const perSecond: (amount: number, options?: Partial<{\n    clamp: boolean;\n    max: number;\n    min: number;\n}>) => ModSource;\n/**\n * As {@link perSecond}, but per minute.\n * @param amount\n * @param options\n * @returns\n */\nexport declare const perMinute: (amount: number, options?: Partial<{\n    clamp: boolean;\n    max: number;\n    min: number;\n}>) => ModSource;\n//# sourceMappingURL=per-second.d.ts.map","export * from './ticks.js';\nexport * from './time.js';\nexport * from './per-second.js';\n//# sourceMappingURL=index.d.ts.map","import * as Flow from '@ixfx/flow';\n/**\n * Sine oscillator.\n *\n * ```js\n * import { Oscillators } from \"@ixfx/modulation.js\"\n * import { frequencyTimer } from \"@ixfx/flow.js\";\n * // Setup\n * const osc = Oscillators.sine(frequencyTimer(10));\n * const osc = Oscillators.sine(0.1);\n *\n * // Call whenever a value is needed\n * const v = osc.next().value;\n * ```\n *\n * @example Saw/tri pinch\n * ```js\n * const v = Math.pow(osc.value, 2);\n * ```\n *\n * @example Saw/tri bulge\n * ```js\n * const v = Math.pow(osc.value, 0.5);\n * ```\n *\n */\nexport declare function sine(timerOrFreq: Flow.Timer | number): Generator<number, void, unknown>;\n/**\n * Bipolar sine (-1 to 1)\n * @param timerOrFreq\n */\nexport declare function sineBipolar(timerOrFreq: Flow.Timer | number): Generator<number, void, unknown>;\n/**\n * Triangle oscillator\n *\n * ```js\n * // Setup\n * const osc = triangle(Timers.frequencyTimer(0.1));\n * const osc = triangle(0.1);\n *\n * // Call whenver a value is needed\n * const v = osc.next().value;\n * ```\n */\nexport declare function triangle(timerOrFreq: Flow.Timer | number): Generator<number, void, unknown>;\n/**\n * Saw oscillator\n *\n * ```js\n * import { Oscillators } from \"@ixfx/modulation.js\"\n * import { frequencyTimer } from \"@ixfx/flow.js\";\n * // Setup\n * const osc = Oscillators.saw(Timers.frequencyTimer(0.1));\n *\n * // Or\n * const osc = Oscillators.saw(0.1);\n *\n * // Call whenever a value is needed\n * const v = osc.next().value;\n * ```\n */\nexport declare function saw(timerOrFreq: Flow.Timer | number): Generator<number, void, unknown>;\n/**\n * Square oscillator\n *\n * ```js\n * import { Oscillators } from \"@ixfx/modulation.js\"\n *\n * // Setup\n * const osc = Oscillators.square(Timers.frequencyTimer(0.1));\n * const osc = Oscillators.square(0.1);\n *\n * // Call whenever a value is needed\n * osc.next().value;\n * ```\n */\nexport declare function square(timerOrFreq: Flow.Timer | number): Generator<0 | 1, void, unknown>;\n//# sourceMappingURL=oscillator.d.ts.map","export declare const bounceOut: (x: number) => number;\nexport declare const quintIn: (x: number) => number;\nexport declare const quintOut: (x: number) => number;\nexport declare const arch: (x: number) => number;\nexport declare const smoothstep: (x: number) => number;\nexport declare const smootherstep: (x: number) => number;\nexport declare const sineIn: (x: number) => number;\nexport declare const sineOut: (x: number) => number;\nexport declare const quadIn: (x: number) => number;\nexport declare const quadOut: (x: number) => number;\nexport declare const sineInOut: (x: number) => number;\nexport declare const quadInOut: (x: number) => number;\nexport declare const cubicIn: (x: number) => number;\nexport declare const cubicOut: (x: number) => number;\nexport declare const quartIn: (x: number) => number;\nexport declare const quartOut: (x: number) => number;\nexport declare const expoIn: (x: number) => number;\nexport declare const expoOut: (x: number) => number;\nexport declare const quintInOut: (x: number) => number;\nexport declare const expoInOut: (x: number) => number;\nexport declare const circIn: (x: number) => number;\nexport declare const circOut: (x: number) => number;\nexport declare const backIn: (x: number) => number;\nexport declare const backOut: (x: number) => number;\nexport declare const circInOut: (x: number) => number;\nexport declare const backInOut: (x: number) => number;\nexport declare const elasticIn: (x: number) => number;\nexport declare const elasticOut: (x: number) => number;\nexport declare const bounceIn: (x: number) => number;\nexport declare const bell: (t: number) => number;\nexport declare const elasticInOut: (x: number) => number;\nexport declare const bounceInOut: (x: number) => number;\n//# sourceMappingURL=easings-named.d.ts.map","import { Points } from '@ixfx/geometry';\n/**\n * Interpolates points along a line.\n * By default it's a straight line, so use `bend` to make a non-linear curve.\n * @param bend -1...1. -1 will pull line up, 1 will push it down.\n * @returns\n */\nexport declare const line: (bend?: number, warp?: number) => (value: number) => Points.Point;\n//# sourceMappingURL=line.d.ts.map","import * as Named from './easings-named.js';\nimport { type Interval } from '@ixfx/core';\nimport type { ModFunction } from '../types.js';\n/**\n * Easing name\n */\nexport type EasingName = keyof typeof Named;\nexport type EasingOptions = (EasingTickOptions | EasingTimeOptions) & {\n    name?: EasingName;\n    fn?: ModFunction;\n};\nexport type EasingTimeOptions = {\n    duration: Interval;\n};\nexport type EasingTickOptions = {\n    ticks: number;\n};\n//# sourceMappingURL=types.d.ts.map","import { type Interval } from '@ixfx/core';\nimport type { ModFunction, ModulatorTimed } from '../types.js';\nexport * as Named from './easings-named.js';\nexport * from './line.js';\nexport type * from './types.js';\nimport type { EasingName, EasingOptions } from './types.js';\n/**\n * Creates an easing function\n * ```js\n * const e = Easings.create({ duration: 1000, name: `quadIn` });\n * const e = Easings.create({ ticks: 100, name: `sineOut` });\n * const e = Easings.create({\n *  duration: 1000,\n *  fn: (v) => {\n *    // v will be 0..1 based on time\n *    return Math.random() * v\n *  }\n * });\n * ```\n * @param options\n * @returns\n */\nexport declare const create: (options: EasingOptions) => () => number;\n/**\n * Creates an easing based on clock time. Time\n * starts being counted when easing function is created.\n *\n * `timeEasing` allows you to reset and check for completion.\n * Alternatively, use {@link time} which is a simple function that just returns a value.\n *\n *\n * @example Time based easing\n * ```\n * const t = Easings.timeEasing(`quintIn`, 5*1000); // Will take 5 seconds to complete\n * ...\n * t.compute(); // Get current value of easing\n * t.reset();   // Reset to 0\n * t.isDone;    // _True_ if finished\n * ```\n *\n * Thisi function is just a wrapper around Modulator.timedModulator.\n * @param nameOrFunction Name of easing, or an easing function\n * @param duration Duration\n * @returns Easing\n */\nexport declare const timeEasing: (nameOrFunction: EasingName | ((v: number) => number), duration: Interval) => ModulatorTimed;\n/**\n * Produce easing values over time. When the easing is complete, the final\n * value continues to return. Timer starts when return function is first invoked.\n *\n * If you need to check if an easing is done or reset it, consider {@link timeEasing}.\n *\n * ```js\n * // Quad-in easing over one second\n * const e = Easings.time(`quadIn`, 1000);\n *\n * // Keep calling e() to get the current value\n * e();\n * ```\n *\n * This function is just a wrapper around Modulate.time\n * @param nameOrFunction Easing name or a function that produces 0..1 scale\n * @param duration Duration\n * @returns\n */\nexport declare const time: (nameOrFunction: EasingName | ((v: number) => number), duration: Interval) => () => number;\n/**\n * Produce easing values with each invocation. When the easing is complete, the final\n * value continues to return. Timer starts when return function is first invoked.\n *\n * If you need to check if an easing is done or reset it, consider {@link tickEasing}.\n *\n * ```js\n * // Quad-in easing over 100 ticks\n * const e = Easings.ticks(`quadIn`, 100);\n *\n * // Keep calling e() to get the current value\n * e();\n * ```\n *\n * This is just a wrapper around Modulator.ticks\n * @param nameOrFunction Easing name or a function that produces 0..1 scale\n * @param totalTicks Total length of ticks\n * @returns\n */\nexport declare const ticks: (nameOrFunction: EasingName | ((v: number) => number), totalTicks: number) => () => number;\n/**\n * Creates an easing based on ticks.\n *\n * `tickEasing` allows you to reset and check for completion.\n * Alternatively, use {@link ticks} which is a simple function that just returns a value.\n *\n * @example Tick-based easing\n * ```\n * const t = Easings.tickEasing(`sineIn`, 1000);   // Will take 1000 ticks to complete\n * t.compute(); // Each call to `compute` progresses the tick count\n * t.reset();   // Reset to 0\n * t.isDone;    // _True_ if finished\n * ```\n * @param nameOrFunction Name of easing, or an easing function\n * @param durationTicks Duration in ticks\n * @returns Easing\n */\nexport declare const tickEasing: (nameOrFunction: EasingName | ((v: number) => number), durationTicks: number) => ModulatorTimed;\n/**\n * Returns an easing function by name. Throws an error if\n * easing is not found.\n *\n * ```js\n * const fn = Easings.get(`sineIn`);\n * // Returns 'eased' transformation of 0.5\n * fn(0.5);\n * ```\n * @param easingName eg `sineIn`\n * @returns Easing function\n */\nexport declare const get: (easingName: EasingName) => ModFunction;\n/**\n * Iterate over available easings.\n * @private\n * @returns Returns list of available easing names\n */\nexport declare function getEasingNames(): Iterable<string>;\n//# sourceMappingURL=index.d.ts.map","export type EnvelopeOpts = AdsrOpts & AdsrTimingOpts;\n/**\n * Options for the ADSR envelope.\n */\nexport type AdsrOpts = Partial<{\n    /**\n     * Attack bezier 'bend'. Bend from -1 to 1. 0 for a straight line\n     */\n    readonly attackBend: number;\n    /**\n     * Decay bezier 'bend'. Bend from -1 to 1. 0 for a straight line\n     */\n    readonly decayBend: number;\n    /**\n     * Release bezier 'bend'. Bend from -1 to 1. 0 for a straight line\n     */\n    readonly releaseBend: number;\n    /**\n     * Peak level (maximum of attack stage)\n     */\n    readonly peakLevel: number;\n    /**\n     * Starting level (usually 0)\n     */\n    readonly initialLevel: number;\n    /**\n     * Sustain level. Only valid if trigger and hold happens\n     */\n    readonly sustainLevel: number;\n    /**\n     * Release level, when envelope is done (usually 0)\n     */\n    readonly releaseLevel: number;\n    /**\n     * When _false_, envelope starts from it's current level when being triggered.\n     * _True_ by default.\n     */\n    readonly retrigger: boolean;\n}>;\nexport type AdsrTimingOpts = Partial<{\n    /**\n     * If true, envelope indefinately returns to attack stage after release\n     *\n     * @type {boolean}\n     */\n    readonly shouldLoop: boolean;\n    /**\n     * Duration for attack stage\n     * Unit depends on timer source\n     * @type {number}\n     */\n    readonly attackDuration: number;\n    /**\n     * Duration for decay stage\n     * Unit depends on timer source\n     * @type {number}\n     */\n    readonly decayDuration: number;\n    /**\n     * Duration for release stage\n     * Unit depends on timer source\n     * @type {number}\n     */\n    readonly releaseDuration: number;\n}>;\nexport type AdsrIterableOpts = {\n    readonly signal?: AbortSignal;\n    readonly sampleRateMs?: number;\n    readonly env: EnvelopeOpts;\n};\n/**\n * State change event\n */\nexport interface StateChangeEvent {\n    readonly newState: string;\n    readonly priorState: string;\n}\nexport interface CompleteEvent {\n}\nexport type AdsrEvents = {\n    readonly change: StateChangeEvent;\n    readonly complete: CompleteEvent;\n};\nexport declare const adsrStateTransitions: Readonly<{\n    attack: string[];\n    decay: string[];\n    sustain: string[];\n    release: string[];\n    complete: null;\n}>;\nexport type AdsrStateTransitions = Readonly<typeof adsrStateTransitions>;\n//# sourceMappingURL=Types.d.ts.map","import { SimpleEventEmitter } from '@ixfx/events';\nimport { type AdsrEvents, type AdsrTimingOpts } from './Types.js';\nexport declare const defaultAdsrTimingOpts: Readonly<{\n    attackDuration: 600;\n    decayDuration: 200;\n    releaseDuration: 800;\n    shouldLoop: false;\n}>;\n/**\n * Base class for an ADSR envelope.\n *\n * It outputs values on a scale of 0..1 corresponding to each phase.\n */\nexport declare class AdsrBase extends SimpleEventEmitter<AdsrEvents> {\n    #private;\n    protected attackDuration: number;\n    protected decayDuration: number;\n    protected releaseDuration: number;\n    protected decayDurationTotal: number;\n    /**\n     * If _true_ envelope will loop\n     */\n    shouldLoop: boolean;\n    constructor(opts?: AdsrTimingOpts);\n    dispose(): void;\n    get isDisposed(): boolean;\n    /**\n     * Changes state based on timer status\n     * @returns _True_ if state was changed\n     */\n    protected switchStateIfNeeded(allowLooping: boolean): boolean;\n    /**\n     * Computes a stage's progress from 0-1\n     * @param allowStateChange\n     * @returns\n     */\n    protected computeRaw(allowStateChange?: boolean, allowLooping?: boolean): [stage: string | undefined, amount: number, prevStage: string];\n    /**\n     * Returns _true_ if envelope has finished\n     */\n    get isDone(): boolean;\n    protected onTrigger(): void;\n    /**\n     * Triggers envelope, optionally _holding_ it.\n     *\n     * If `hold` is _false_ (default), envelope will run through all stages,\n     * but sustain stage won't have an affect.\n     *\n     * If `hold` is _true_, it will run to, and stay at the sustain stage.\n     * Use {@link release} to later release the envelope.\n     *\n     * If event is already trigged it will be _retriggered_.\n     * Initial value depends on `opts.retrigger`\n     * * _false_ (default): envelope continues at current value.\n     * * _true_: envelope value resets to `opts.initialValue`.\n     *\n     * @param hold If _true_ envelope will hold at sustain stage\n     */\n    trigger(hold?: boolean): void;\n    get hasTriggered(): boolean;\n    compute(): void;\n    /**\n     * Release if 'trigger(true)' was previouslly called.\n     * Has no effect if not triggered or held.\n     * @returns\n     */\n    release(): void;\n}\n//# sourceMappingURL=AdsrBase.d.ts.map","import { Paths } from '@ixfx/geometry';\nimport { AdsrBase } from './AdsrBase.js';\nimport type { EnvelopeOpts } from './Types.js';\nexport declare const defaultAdsrOpts: Readonly<{\n    attackBend: -1;\n    decayBend: -0.3;\n    releaseBend: -0.3;\n    peakLevel: 1;\n    initialLevel: 0;\n    sustainLevel: 0.6;\n    releaseLevel: 0;\n    retrigger: false;\n}>;\nexport declare class AdsrIterator implements Iterator<number> {\n    private adsr;\n    constructor(adsr: Adsr);\n    next(...args: [] | [undefined]): IteratorResult<number>;\n    get [Symbol.toStringTag](): string;\n}\n/**\n * ADSR (Attack Decay Sustain Release) envelope. An envelope is a value that changes over time,\n * usually in response to an intial trigger.\n *\n * [See the ixfx Guide on Envelopes](https://ixfx.fun/modulation/envelopes/introduction/).\n *\n * @example Setup\n * ```js\n * const env = new Envelopes.Adsr({\n *  attackDuration: 1000,\n *  decayDuration: 200,\n *  sustainDuration: 100\n * });\n * ```\n *\n * Options for envelope are as follows:\n *\n * ```js\n * initialLevel?: number\n * attackBend: number\n * attackDuration: number\n * decayBend: number\n * decayDuration:number\n * sustainLevel: number\n * releaseBend: number\n * releaseDuration: number\n * releaseLevel?: number\n * peakLevel: number\n * retrigger?: boolean\n * shouldLoop: boolean\n * ```\n *\n * If `retrigger` is _false_ (default), a re-triggered envelope continues at current value\n * rather than resetting to `initialLevel`.\n *\n * If `shouldLoop` is true, envelope loops until `release()` is called.\n *\n * @example Using\n * ```js\n * env.trigger(); // Start envelope\n * ...\n * // Get current value of envelope\n * const [state, scaled, raw] = env.compute();\n * ```\n *\n * * `state` is a string, one of the following: 'attack', 'decay', 'sustain', 'release', 'complete'\n * * `scaled` is a value scaled according to the stage's _levels_\n * * `raw` is the progress from 0 to 1 within a stage. ie. 0.5 means we're halfway through a stage.\n *\n * Instead of `compute()`, most usage of the envelope is just fetching the `value` property, which returns the same scaled value of `compute()`:\n *\n * ```js\n * const value = env.value; // Get scaled number\n * ```\n *\n * @example Hold & release\n * ```js\n * env.trigger(true);   // Pass in true to hold\n * ...envelope will stop at sustain stage...\n * env.release();      // Release into decay\n * ```\n *\n * Check if it's done:\n *\n * ```js\n * env.isDone; // True if envelope is completed\n * ```\n *\n * Envelope has events to track activity: 'change' and 'complete':\n *\n * ```\n * env.addEventListener(`change`, ev => {\n *  console.log(`Old: ${evt.oldState} new: ${ev.newState}`);\n * })\n * ```\n *\n * It's also possible to iterate over the values of the envelope:\n * ```js\n * const env = new Envelopes.Adsr();\n * for await (const v of env) {\n *  // v is the numeric value\n *  await Flow.sleep(100); // Want to pause a little to give envelope time to run\n * }\n * // Envelope has finished\n * ```\n */\nexport declare class Adsr extends AdsrBase implements Iterable<number> {\n    readonly attackPath: Paths.Path;\n    readonly decayPath: Paths.Path;\n    readonly releasePath: Paths.Path;\n    readonly initialLevel: any;\n    readonly peakLevel: any;\n    readonly releaseLevel: any;\n    readonly sustainLevel: any;\n    readonly attackBend: any;\n    readonly decayBend: any;\n    readonly releaseBend: any;\n    protected initialLevelOverride: number | undefined;\n    readonly retrigger: boolean;\n    private releasedAt;\n    constructor(opts?: EnvelopeOpts);\n    protected onTrigger(): void;\n    [Symbol.iterator](): Iterator<number>;\n    /**\n     * Returns the scaled value\n     * Same as .compute()[1]\n     */\n    get value(): number;\n    /**\n     * Compute value of envelope at this point in time.\n     *\n     * Returns an array of [stage, scaled, raw]. Most likely you want to use {@link value} to just get the scaled value.\n     * @param allowStateChange If true (default) envelope will be allowed to change state if necessary before returning value\n     */\n    compute(allowStateChange?: boolean, allowLooping?: boolean): [stage: string | undefined, scaled: number, raw: number];\n}\n//# sourceMappingURL=Adsr.d.ts.map","import type { AdsrIterableOpts, EnvelopeOpts } from './Types.js';\nexport * from './Types.js';\nexport * from './Adsr.js';\nexport * from './AdsrBase.js';\n/**\n * Returns a function that iterates over an envelope\n * ```js\n * const e = Envelopes.adsr();\n *\n * e(); // Yields current value\n * ```\n *\n * Starts the envelope the first time the return function is called.\n * When the envelope finishes, it continues to return the `releaseLevel` of the envelope.\n *\n * Options can be provided to set the shape of the envelope as usual, eg:\n * ```js\n * const e = Envelopes.adsr({\n *  attackDuration: 1000,\n *  releaseDuration: 500\n * });\n * ```\n * @param opts\n * @returns\n */\nexport declare const adsr: (opts?: EnvelopeOpts) => () => any;\n/**\n * Creates and runs an envelope, sampling its values at `sampleRateMs`.\n * Note that if the envelope loops, iterator never returns.\n *\n * @example Init\n * ```js\n * import { Envelopes } from '@ixfx/modulation.js';\n * import { IterableAsync } from  '@ixfx/iterable.js';\n *\n * const opts = {\n *  attackDuration: 1000,\n *  releaseDuration: 1000,\n *  sustainLevel: 1,\n *  attackBend: 1,\n *  decayBend: -1\n * };\n * ```\n *\n * ```js\n * //  Add data to array\n * // Sample an envelope every 20ms into an array\n * const data = await IterableAsync.toArray(Envelopes.adsrIterable(opts, 20));\n * ```\n *\n * ```js\n * // Iterate with `for await`\n * // Work with values as sampled\n * for await (const v of Envelopes.adsrIterable(opts, 5)) {\n *  // Work with envelope value `v`...\n * }\n * ```\n * @param opts Envelope options\n * @returns\n */\nexport declare function adsrIterable(opts: AdsrIterableOpts): AsyncGenerator<number>;\n//# sourceMappingURL=index.d.ts.map","/**\n * Acknowledgements: much of the work here is an adapation from Daniel Shiffman's excellent _The Nature of Code_ website.\n */\nimport { Points, Rects } from '@ixfx/geometry';\n/**\n * Logic for applying mass\n */\nexport type MassApplication = `dampen` | `multiply` | `ignored`;\n/**\n * Basic properties of a thing that can be\n * affected by forces\n */\nexport type ForceAffected = {\n    /**\n     * Position. Probably best to use relative coordinates\n     */\n    readonly position?: Points.Point;\n    /**\n     * Velocity vector.\n     * Probably don't want to assign this yourself, but rather have it computed based on acceleration and applied forces\n     */\n    readonly velocity?: Points.Point;\n    /**\n     * Acceleration vector. Most applied forces will alter the acceleration, culminating in a new velocity being set and the\n     * acceleraton value zeroed\n     */\n    readonly acceleration?: Points.Point;\n    /**\n     * Mass. The unit is undefined, again best to think of this being on a 0..1 scale. Mass is particularly important\n     * for the attraction/repulsion force, but other forces can incorporate mass too.\n     */\n    readonly mass?: number;\n    readonly angularAcceleration?: number;\n    readonly angularVelocity?: number;\n    readonly angle?: number;\n};\n/**\n * A function that updates values of a thing.\n *\n * These can be created using the xxxForce functions, eg {@link attractionForce}, {@link accelerationForce}, {@link magnitudeForce}, {@link velocityForce}\n */\nexport type ForceFn = (t: ForceAffected) => ForceAffected;\n/**\n * A vector to apply to acceleration or a force function\n */\nexport type ForceKind = Points.Point | ForceFn | null;\n/**\n * Throws an error if `t` is not of the `ForceAffected` shape.\n * @param t\n * @param name\n */\nexport declare const guard: (t: ForceAffected, name?: string) => void;\n/**\n * `constrainBounce` yields a function that affects `t`'s position and velocity such that it\n * bounces within bounds.\n *\n * ```js\n * // Setup bounce with area constraints\n * // Reduce velocity by 10% with each impact\n * const b = constrainBounce({ width:200, height:500 }, 0.9);\n *\n * // Thing\n * const t = {\n *  position: { x: 50,  y: 50 },\n *  velocity: { x: 0.3, y: 0.01 }\n * };\n *\n * // `b` returns an altereted version of `t`, with the\n * // bounce logic applied.\n * const bounced = b(t);\n * ```\n *\n * `dampen` parameter allows velocity to be dampened with each bounce. A value\n * of 0.9 for example reduces velocity by 10%. A value of 1.1 will increase velocity by\n * 10% with each bounce.\n * @param bounds Constraints of area\n * @param dampen How much to dampen velocity by. Defaults to 1 meaning there is no damping.\n * @returns A function that can perform bounce logic\n */\nexport declare const constrainBounce: (bounds?: Rects.Rect, dampen?: number) => (t: ForceAffected) => ForceAffected;\n/**\n * For a given set of attractors, returns a function that a sets acceleration of attractee.\n * Keep note though that this bakes-in the values of the attractor, it won't reflect changes to their state. For dynamic\n * attractors, it might be easier to use `computeAttractionForce`.\n *\n * @example Force\n * ```js\n * const f = Forces.attractionForce(sun, gravity);\n * earth = Forces.apply(earth, f);\n * ```\n *\n * @example Everything mutually attracted\n * ```js\n * // Create a force with all things as attractors.\n * const f = Forces.attractionForce(things, gravity);\n * // Apply force to all things.\n * // The function returned by attractionForce will automatically ignore self-attraction\n * things = things.map(a => Forces.apply(a, f));\n * ```\n * @param attractors\n * @param gravity\n * @param distanceRange\n * @returns\n */\nexport declare const attractionForce: (attractors: readonly ForceAffected[], gravity: number, distanceRange?: {\n    readonly min?: number;\n    readonly max?: number;\n}) => (attractee: ForceAffected) => ForceAffected;\n/**\n * Computes the attraction force between two things.\n * Value for `gravity` will depend on what range is used for `mass`. It's probably a good idea\n * to keep mass to mean something relative - ie 1 is 'full' mass, and adjust the `gravity`\n * value until it behaves as you like. Keeping mass in 0..1 range makes it easier to apply to\n * visual properties later.\n *\n * @example Attractee and attractor, gravity 0.005\n * ```js\n * const attractor = { position: { x:0.5, y:0.5 }, mass: 1 };\n * const attractee = { position: Points.random(), mass: 0.01 };\n * attractee = Forces.apply(attractee, Forces.computeAttractionForce(attractor, attractee, 0.005));\n * ```\n *\n * @example Many attractees for one attractor, gravity 0.005\n * ```js\n * attractor =  { position: { x:0.5, y:0.5 }, mass: 1 };\n * attractees = attractees.map(a => Forces.apply(a, Forces.computeAttractionForce(attractor, a, 0.005)));\n * ```\n *\n * @example Everything mutually attracted\n * ```js\n * // Create a force with all things as attractors.\n * const f = Forces.attractionForce(things, gravity);\n * // Apply force to all things.\n * // The function returned by attractionForce will automatically ignore self-attraction\n * things = things.map(a => Forces.apply(a, f));\n * ```\n *\n * `attractor` thing attracting (eg, earth)\n * `attractee` thing being attracted (eg. satellite)\n *\n *\n * `gravity` will have to be tweaked to taste.\n * `distanceRange` clamps the computed distance. This affects how tightly the particles will orbit and can also determine speed. By default it is 0.001-0.7\n * @param attractor Attractor (eg earth)\n * @param attractee Attractee (eg satellite)\n * @param gravity Gravity constant\n * @param distanceRange Min/max that distance is clamped to.\n * @returns\n */\nexport declare const computeAttractionForce: (attractor: ForceAffected, attractee: ForceAffected, gravity: number, distanceRange?: {\n    readonly min?: number;\n    readonly max?: number;\n}) => Points.Point;\nexport type TargetOpts = {\n    /**\n     * Acceleration scaling. Defaults to 0.001\n     */\n    readonly diminishBy?: number;\n    /**\n     * If distance is less than this range, don't move.\n     * If undefined (default), will try to get an exact position\n     */\n    readonly range?: Points.Point;\n};\n/**\n * A force that moves a thing toward `targetPos`.\n *\n * ```js\n * const t = Forces.apply(t, Forces.targetForce(targetPos));\n * ```\n * @param targetPos\n * @param opts\n * @returns\n */\nexport declare const targetForce: (targetPos: Points.Point, opts?: TargetOpts) => (t: ForceAffected) => ForceAffected;\n/**\n * Returns `pt` with x and y set to `setpoint` if either's absolute value is below `v`\n * @param pt\n * @param v\n * @returns\n */\n/**\n * Apply a series of force functions or forces to `t`. Null/undefined entries are skipped silently.\n * It also updates the velocity and position of the returned version of `t`.\n *\n * ```js\n * // Wind adds acceleration. Force is dampened by mass\n * const wind = Forces.accelerationForce({ x: 0.00001, y: 0 }, `dampen`);\n *\n * // Gravity adds acceleration. Force is magnified by mass\n * const gravity = Forces.accelerationForce({ x: 0, y: 0.0001 }, `multiply`);\n *\n * // Friction is calculated based on velocity. Force is magnified by mass\n * const friction = Forces.velocityForce(0.00001, `multiply`);\n *\n *  // Flip movement velocity if we hit a wall. And dampen it by 10%\n * const bouncer = Forces.constrainBounce({ width: 1, height: 1 }, 0.9);\n *\n * let t = {\n *  position: Points.random(),\n *  mass: 0.1\n * };\n *\n * // Apply list of forces, returning a new version of the thing\n * t = Forces.apply(t,\n *   gravity,\n *   wind,\n *   friction,\n *   bouncer\n * );\n * ```\n */\nexport declare const apply: (t: ForceAffected, ...accelForces: readonly ForceKind[]) => ForceAffected;\n/**\n * Apples `vector` to acceleration, scaling according to mass, based on the `mass` option.\n * It returns a function which can later be applied to a thing.\n *\n * ```js\n * // Acceleration vector of (0.1, 0), ie moving straight on horizontal axis\n * const f = Forces.accelerationForce({ x:0.1, y:0 }, `dampen`);\n *\n * // Thing to move\n * let t = { position: ..., acceleration: ... }\n *\n * // Apply force\n * t = f(t);\n * ```\n * @param vector\n * @returns Force function\n */\nexport declare const accelerationForce: (vector: Points.Point, mass?: MassApplication) => ForceFn;\n/**\n * A force based on the square of the thing's velocity.\n * It's like {@link velocityForce}, but here the velocity has a bigger impact.\n *\n * ```js\n * const thing = {\n *  position: { x: 0.5, y:0.5 },\n *  velocity: { x: 0.001, y:0 }\n * };\n * const drag = magnitudeForce(0.1);\n *\n * // Apply drag force to thing, returning result\n * const t = Forces.apply(thing, drag);\n * ```\n * @param force Force value\n * @param mass How to factor in mass\n * @returns Function that computes force\n */\nexport declare const magnitudeForce: (force: number, mass?: MassApplication) => ForceFn;\n/**\n * Null force does nothing\n * @returns A force that does nothing\n */\nexport declare const nullForce: (t: ForceAffected) => ForceAffected;\n/**\n * Force calculated from velocity of object. Reads velocity and influences acceleration.\n *\n * ```js\n * let t = { position: Points.random(), mass: 0.1 };\n * const friction = velocityForce(0.1, `dampen`);\n *\n * // Apply force, updating position and velocity\n * t = Forces.apply(t, friction);\n * ```\n * @param force Force\n * @param mass How to factor in mass\n * @returns Function that computes force\n */\nexport declare const velocityForce: (force: number, mass: MassApplication) => ForceFn;\n/**\n * Sets angle, angularVelocity and angularAcceleration based on\n *  angularAcceleration, angularVelocity, angle\n * @returns\n */\nexport declare const angularForce: () => (t: ForceAffected) => Readonly<{\n    angle: number;\n    angularVelocity: number;\n    angularAcceleration: 0;\n    position?: Points.Point;\n    velocity?: Points.Point;\n    acceleration?: Points.Point;\n    mass?: number;\n}>;\n/**\n * Yields a force function that applies the thing's acceleration.x to its angular acceleration.\n * @param scaling Use this to scale the accel.x value. Defaults to 20 (ie accel.x*20). Adjust if rotation is too much or too little\n * @returns\n */\nexport declare const angleFromAccelerationForce: (scaling?: number) => (t: ForceAffected) => Readonly<{\n    angularAcceleration: number;\n    position?: Points.Point;\n    velocity?: Points.Point;\n    acceleration?: Points.Point;\n    mass?: number;\n    angularVelocity?: number;\n    angle?: number;\n}>;\n/**\n * Yields a force function that applies the thing's velocity to its angle.\n * This will mean it points in the direction of travel.\n * @param interpolateAmt If provided, the angle will be interpolated toward by this amount. Defaults to 1, no interpolation\n * @returns\n */\nexport declare const angleFromVelocityForce: (interpolateAmt?: number) => (t: ForceAffected) => Readonly<{\n    angle: number;\n    position?: Points.Point;\n    velocity?: Points.Point;\n    acceleration?: Points.Point;\n    mass?: number;\n    angularAcceleration?: number;\n    angularVelocity?: number;\n}>;\n/**\n * Spring force\n *\n *  * ```js\n * // End of spring that moves\n * let thing = {\n *   position: { x: 1, y: 0.5 },\n *   mass: 0.1\n * };\n *\n * // Anchored other end of spring\n * const pinnedAt = {x: 0.5, y: 0.5};\n *\n * // Create force: length of 0.4\n * const springForce = Forces.springForce(pinnedAt, 0.4);\n *\n * continuously(() => {\n *  // Apply force\n *  thing = Forces.apply(thing, springForce);\n * }).start();\n * ```\n * [Read more](https://www.joshwcomeau.com/animation/a-friendly-introduction-to-spring-physics/)\n *\n * @param pinnedAt Anchored end of the spring\n * @param restingLength Length of spring-at-rest (default: 0.5)\n * @param k Spring stiffness (default: 0.0002)\n * @param damping Damping factor to apply, so spring slows over time. (default: 0.995)\n * @returns\n */\nexport declare const springForce: (pinnedAt: Points.Point, restingLength?: number, k?: number, damping?: number) => (t: ForceAffected) => ForceAffected;\n/**\n * Pendulum force options\n */\nexport type PendulumOpts = {\n    /**\n     * Length of 'string' thing is hanging from. If\n     * undefined, the current length between thing and\n     * pinnedAt is used.\n     */\n    readonly length?: number;\n    /**\n     * Max speed of swing. Slower speed can reach equilibrium faster, since it\n     * might not swing past resting point.\n     * Default 0.001.\n     */\n    readonly speed?: number;\n    /**\n     * Damping, how much to reduce velocity. Default 0.995 (ie 0.5% loss)\n     */\n    readonly damping?: number;\n};\n/**\n * The pendulum force swings something back and forth.\n *\n * ```js\n * // Swinger\n * let thing = {\n *   position: { x: 1, y: 0.5 },\n *   mass: 0.1\n * };\n *\n * // Position thing swings from (middle of screen)\n * const pinnedAt = {x: 0.5, y: 0.5};\n *\n * // Create force: length of 0.4\n * const pendulumForce = Forces.pendulumForce(pinnedAt, { length: 0.4 });\n *\n * continuously(() => {\n *  // Apply force\n *  // Returns a new thing with recalculated angularVelocity, angle and position.\n *  thing = Forces.apply(thing, pendulumForce);\n * }).start();\n * ```\n *\n * [Read more](https://natureofcode.com/book/chapter-3-oscillation/)\n *\n * @param pinnedAt Location to swing from (x:0.5, y:0.5 default)\n * @param opts Options\n * @returns\n */\nexport declare const pendulumForce: (pinnedAt?: Points.Point, opts?: PendulumOpts) => (t: ForceAffected) => ForceAffected;\n/**\n * Compute velocity based on acceleration and current velocity\n * @param acceleration Acceleration\n * @param velocity Velocity\n * @param velocityMax If specified, velocity will be capped at this value\n * @returns\n */\nexport declare const computeVelocity: (acceleration: Points.Point, velocity: Points.Point, velocityMax?: number) => Points.Point;\n/**\n * Returns the acceleration to get from `currentPos` to `targetPos`.\n *\n * @example Barebones usage:\n * ```js\n * const accel = Forces.computeAccelerationToTarget(targetPos, currentPos);\n * const vel = Forces.computeVelocity(accel, currentVelocity);\n *\n * // New position:\n * const pos = Points.sum(currentPos, vel);\n * ```\n *\n * @example Implementation:\n * ```js\n * const direction = Points.subtract(targetPos, currentPos);\n * const accel = Points.multiply(direction, diminishBy);\n * ```\n * @param currentPos Current position\n * @param targetPos Target position\n * @param opts Options\n * @returns\n */\nexport declare const computeAccelerationToTarget: (targetPos: Points.Point, currentPos: Points.Point, opts?: TargetOpts) => Points.Point | {\n    readonly x: 0;\n    readonly y: 0;\n};\n/**\n * Compute a new position based on existing position and velocity vector\n * @param position Position Current position\n * @param velocity Velocity vector\n * @returns Point\n */\nexport declare const computePositionFromVelocity: (position: Points.Point, velocity: Points.Point) => Points.Point;\n/**\n * Compute a position based on distance and angle from origin\n * @param distance Distance from origin\n * @param angleRadians Angle, in radians from origin\n * @param origin Origin point\n * @returns Point\n */\nexport declare const computePositionFromAngle: (distance: number, angleRadians: number, origin: Points.Point) => Points.Point;\n/**\n * A force that orients things according to direction of travel.\n *\n * Under the hood, it applies:\n * * angularForce,\n * * angleFromAccelerationForce, and\n * * angleFromVelocityForce\n * @param interpolationAmt\n * @returns\n */\nexport declare const orientationForce: (interpolationAmt?: number) => ForceFn;\n//# sourceMappingURL=forces.d.ts.map","import type { ModFunction } from \"./types.js\";\n/**\n * Creates an easing function using a simple cubic bezier defined by two points.\n *\n * Eg: https://cubic-bezier.com/#0,1.33,1,-1.25\n *  a:0, b: 1.33, c: 1, d: -1.25\n *\n * ```js\n * import { Easings } from \"@ixfx/modulation.js\";\n * // Time-based easing using bezier\n * const e = Easings.time(fromCubicBezier(1.33, -1.25), 1000);\n * e.compute();\n * ```\n * @param b\n * @param d\n * @returns Value\n */\nexport declare const cubicBezierShape: (b: number, d: number) => ModFunction;\n//# sourceMappingURL=cubic-bezier.d.ts.map","export type Drifter = {\n    update(v: number): number;\n    reset(): void;\n};\n/**\n * WIP\n * Returns a {@link Drifter} that moves a value over time.\n *\n * It keeps track of how much time has elapsed, accumulating `driftAmtPerMs`.\n * The accumulated drift is wrapped on a 0..1 scale.\n * ```js\n * // Set up the drifer\n * const d = drif(0.001);\n *\n * d.update(1.0);\n * // Returns 1.0 + accumulated drift\n * ```\n * @param driftAmtPerMs\n * @returns\n */\nexport declare const drift: (driftAmtPerMs: number) => Drifter;\n//# sourceMappingURL=drift.d.ts.map","/**\n * Returns a roughly gaussian easing function\n * ```js\n * const fn = Easings.gaussian();\n * ```\n *\n * Try different positive and negative values for `stdDev` to pinch\n * or flatten the bell shape.\n * @param standardDeviation\n * @returns\n */\nexport declare const gaussian: (standardDeviation?: number) => (t: number) => number;\n//# sourceMappingURL=gaussian.d.ts.map","import { type BasicInterpolateOptions } from \"@ixfx/numbers\";\nimport { type EasingName } from './easing/index.js';\nimport type { Interval } from \"@ixfx/core\";\n/**\n * Interpolation options.\n *\n * Limit: What to do if interpolation amount exceeds 0..1 range\n * * clamp: lock to A & B (inclusive) Default.\n * * wrap: wrap from end to start again\n * * ignore: allow return values outside of A..B range\n *\n * Easing: name of easing function for non-linear interpolation\n *\n * Transform: name of function to transform `amount` prior to interpolate. This is useful for creating non-linear interpolation results.\n *\n * For example:\n * ```js\n * // Divide interpolation amount in half\n * const interpolatorInterval({ mins: 1 }, 10, 100, {\n *  transform: (amount) => amount * Math.random()\n * });\n * ```\n * In the above example, the results would get more random over time.\n * `interpolatorInterval` will still step through the interpolation range of 0..1 in an orderly fashion, but we're transforming that range using a custom function before producing the result.\n *\n */\nexport type InterpolateOptions = BasicInterpolateOptions & {\n    easing: EasingName;\n};\n/**\n * Returns an interpolation function with a fixed interpolation amount. This\n * function will need the A and B values to interpolate between (ie start and end)\n *\n * Interpolation amount is usually 0..1, where 0 will return the A value, 1 will return the B value, 0.5 will be halfway between the two etc.\n *\n * ```js\n * import { interpolate } from '@ixfx/numbers.js';\n *\n * // Create function\n * const fn = interpolate(0.1);\n *\n * // Later, use to interpolate between a and b\n * fn(50, 100); // 10% of 50..100 range\n * ```\n *\n * This is useful if you have a fixed interpolation amount, but varying A and B values.\n * @param amount Interpolation value (0..1 usually)\n * @param options Options\n */\nexport declare function interpolate(amount: number, options?: Partial<InterpolateOptions>): (a: number, b: number) => number;\n/**\n * Interpolates between `a` and `b` by `amount`.\n *\n * Interpolation amount is usually 0..1, where 0 will return the A value, 1 will return the B value, 0.5 will be halfway between the two etc.\n *\n * ```js\n * import { interpolate } from '@ixfx/numbers.js';\n *\n * // Get the value at 10% of range between 50-100\n * const fn = interpolate(0.1, 50, 100);\n * ```\n *\n * This is useful if you have dynamic interpolation amount as well as A & B values.\n * Consider using `interpolate(amount)` if you have a fixed interpolation amount.\n * @param amount Interpolation value (0..1 usually)\n * @param a Starting value (corresponding to an interpolation of 0)\n * @param b End value (corresponding to an interpolation value of 1)\n * @param options Options\n */\nexport declare function interpolate(amount: number, a: number, b: number, options?: Partial<InterpolateOptions>): number;\n/**\n * Returns an interpolation function with a fixed A and B values.\n * The returned function requires an interpolation amount. This is usually 0..1, where 0 will return the A value, 1 will return the B value, 0.5 will be halfway between the two etc.\n *\n * ```js\n * import { interpolate } from '@ixfx/numbers.js';\n *\n * // Create function to interpolate between 50..100\n * const fn = interpolate(50, 100);\n *\n * // Later, use to interpolate\n * fn(0.1); // 10% of 50..100 range\n * ```\n * @param a Starting value (corresponding to an interpolation of 0)\n * @param b End value (corresponding to an interpolation value of 1)\n * @param options Options\n */\nexport declare function interpolate(a: number, b: number, options?: Partial<InterpolateOptions>): (amount: number) => number;\n/**\n * Returns a function that interpolates from A to B.\n *\n * It steps through the interpolation with each call to the returned function.\n * This means that the `incrementAmount` will hinge on the rate\n * at which the function is called. Alternatively, consider {@link interpolatorInterval}\n * which steps on the basis of clock time.\n *\n * ```js\n * // Interpolate from 0..1 by 0.01\n * const v = interpolatorStepped(0.01, 100, 200);\n * v(); // Each call returns a value closer to target\n * // Eg: 100, 110, 120, 130 ...\n * ```\n *\n * Under the hood, it calls `interpolate` with an amount that\n * increases by `incrementAmount` each time.\n *\n * When calling `v()` to step the interpolator, you can also pass\n * in new B and A values. Note that the order is swapped: the B (target) is provided first, and\n * then optionally A.\n *\n * ```js\n * const v = interpolatorStepped(0.1, 100, 200); // Interpolate 100->200\n * v(300, 200); // Retarget to 200->300 and return result\n * v(150); // Retarget 200->150 and return result\n * ```\n *\n * This allows you to maintain the current interpolation progress.\n * @param incrementAmount Amount to increment by\n * @param a Start value. Default: 0\n * @param b End value. Default: 1\n * @param startInterpolationAt Starting interpolation amount. Default: 0\n * @param options Options for interpolation\n * @returns\n */\nexport declare const interpolatorStepped: (incrementAmount: number, a?: number, b?: number, startInterpolationAt?: number, options?: Partial<InterpolateOptions>) => (retargetB?: number, retargetA?: number) => number;\n/**\n * Interpolate between angles `a` and `b` by `amount`. Angles are in radians.\n *\n * ```js\n * interpolateAngle(0.5, Math.PI, Math.PI/2);\n * ```\n * @param amount\n * @param aRadians Start angle (radian)\n * @param bRadians End angle (radian)\n * @returns\n */\nexport declare const interpolateAngle: (amount: number, aRadians: number, bRadians: number, options?: Partial<InterpolateOptions>) => number;\n/**\n * Interpolates between A->B over `duration`.\n * Given the same A & B values, steps will be larger if it's a longer\n * duration, and shorter if it's a smaller duration.\n *\n * A function is returned, which when invoked yields a value between A..B.\n *\n * Alternatively to step through by the same amount regardless\n * of time, use {@link interpolatorStepped}.\n *\n * ```js\n * // Interpolate from 0..1 over one minute\n * const v = interpolatorInterval({mins:1});\n * v(); // Compute current value\n * ```\n *\n * Use start and end points:\n * ```js\n * // Interpolate from 100-200 over 10 seconds\n * const v = interpolatorInterval({secs:10}, 100, 200);\n * v(); // Compute current value\n * ```\n * @param duration Duration for interpolation\n * @param a Start point\n * @param b End point\n * @param options Options for interpolation\n * @returns\n */\nexport declare const interpolatorInterval: (duration: Interval, a?: number, b?: number, options?: Partial<InterpolateOptions>) => (retargetB?: number, retargetA?: number) => number;\n//# sourceMappingURL=interpolate.d.ts.map","import type { RandomSource } from '@ixfx/random';\nexport type JitterOpts = {\n    readonly relative?: number;\n    readonly absolute?: number;\n    readonly clamped?: boolean;\n    readonly source?: RandomSource;\n};\nexport type Jitterer = (value: number) => number;\n/**\n * Returns a {@link Jitterer} that works with absolute values,\n * ie. values outside of 0..1 range.\n *\n * Jitter amount is _absolute_, meaning a fixed value regardless of input value,\n * or _relative_, meaning it is scaled according to input value.\n *\n * ```js\n * // Jitter by -10 to +10 (absolute value: 10)\n * const j1 = jitterAbsolute({ absolute: 10 });\n * j1(100); // Produces range of 90...110\n *\n * // Jitter by -20 to +20 (relative value 20%)\n * const j2 = jitterAbsolute({ relative: 0.20 });\n * j2(100); // Produces a range of -80...120\n * ```\n *\n * The expected used case is calling `jitterAbsolute` to set up a jitterer\n * and then reusing it with different input values, as above with the `j1` and `j2`.\n *\n * However to use it 'one-off', just call the returned function immediately:\n * ```js\n * const v = jitterAbsolute({ absolute: 10 })(100); // v is in range of 90-110\n * ```\n *\n * When `clamped` is true, return value is clamped to 0...value.\n * That is, rather than the usual bipolar jittering, the jittering only goes below.\n * ```js\n * const j = jitterAbsolute({ absolute: 10, clamped: true })\n * j(100); // Produces range of 90-100\n * ```\n * @param options\n * @returns\n */\nexport declare const jitterAbsolute: (options: JitterOpts) => Jitterer;\n/**\n * Jitters `value` by the absolute `jitter` amount. Returns a function.\n *\n * All values should be on a 0..1 scale, and the return value is by default clamped to 0..1.\n * Pass `clamped:false` as an option to allow for arbitary ranges.\n *\n * `jitter` returns a function that calculates jitter. If you only need a one-off\n * jitter, you can immediately execute the returned function:\n * ```js\n * // Compute 10% jitter of input 0.5\n * const value = jitter({ relative: 0.1 })(0.5);\n * ```\n *\n * However, if the returned jitter function is to be used again,\n * assign it to a variable:\n * ```js\n * const myJitter = jitter({ absolute: 0.5 });\n *\n * // Jitter an input value 1.0\n * const value = myJitter(1);\n * ```\n *\n * A custom source for random numbers can be provided. Eg, use a weighted\n * random number generator:\n *\n * ```js\n * import { weighted } from '@ixfx/random.js';\n * jitter({ relative: 0.1, source: weighted });\n * ```\n *\n * Options\n * * clamped: If false, `value`s out of percentage range can be used and return value may be beyond percentage range. True by default\n * * random: Random source (default is Math.random)\n * @param options Options\n * @returns Function that performs jitter\n */\nexport declare const jitter: (options?: JitterOpts) => Jitterer;\n//# sourceMappingURL=jitter.d.ts.map","import type { ModFunction } from \"./types.js\";\n/**\n * Mixes in modulation. This is used when you want to\n * fold in a controllable amount of modulation.\n *\n * For example, we have a base value of 0.5 (50%) that we want to modulate\n * by 0.9 (90%). That is, reduce its value by 10%. `mix` allows us\n * to slowly ramp up to the fully modulated value.\n *\n * ```js\n * // When 'amt' is 0, modulation doesn't affect value at all,\n * // original is returned\n * mix(0, 0.5, 0.9); // 0.5\n * // Mixing in 50% of modulation\n * mix(0.5, 0.5, 0.9); // 0.475\n * // All modulation applied, so now we get 90% of 0.5\n * mix(1, 0.5, 0.9); // 0.45 (ie. 90% of 0.5)\n * ```\n * @param amount Amount of modulation (0..1). 0 means modulation value has no effect\n * @param original Original value to modulate\n * @param modulation Modulation amount (0..1)\n * @returns\n */\nexport declare const mix: (amount: number, original: number, modulation: number) => number;\n/**\n * Returns a modulator that mixes between two modulation functions.\n * Both modulators are given the same input value.\n *\n * ```js\n * import { Easings } from \"@ixfx/modulation.js\";\n * // Get a 50/50 mix of two easing functions\n * const mix = Easings.mix(0.5, Easings.Named.sineIn, Easings.Named.sineOut);\n *\n * // 10% of sineIn, 90% of sineOut\n * Easings.mix(0.90, 0.25, Easings.Named.sineIn, Easings.Named.sineOut);\n * ```\n * @param balance Mix between a and b\n * @param a\n * @param b\n * @returns Numeric value\n */\nexport declare const mixModulators: (balance: number, a: ModFunction, b: ModFunction) => ModFunction;\n/**\n * Returns a 'crossfader` function of two easing functions, synchronised with the progress through the easing.\n *\n * Example `amt` values:\n * * 0.0 will yield 100% of easingA at its `easing(0)` value.\n * * 0.2 will yield 80% of easingA, 20% of easingB, both at their `easing(0.2)` values\n * * 0.5 will yield 50% of both functions both at their `easing(0.5)` values\n * * 0.8 will yield 20% of easingA, 80% of easingB, with both at their `easing(0.8)` values\n * * 1.0 will yield 100% of easingB at its `easing(1)` value.\n *\n * So easingB will only ever kick in at higher `amt` values and `easingA` will only be present in lower values.\n *\n * ```js\n * import { Easings } from \"@ixfx/modulation.js\";\n * Easings.crossFade(0.5, Easings.Named.sineIn, Easings.Named.sineOut);\n * ```\n * @param a Easing A\n * @param b Easing B\n * @returns Numeric value\n */\nexport declare const crossfade: (a: ModFunction, b: ModFunction) => ModFunction;\n//# sourceMappingURL=mix.d.ts.map","import { type Interval } from \"@ixfx/core\";\nimport type { ModFunction, ModulatorTimed } from \"./types.js\";\n/**\n * Produce values over time. When the modulate function is complete, the final\n * value continues to return. Timer starts when return function is first invoked.\n *\n * ```js\n * const fn = (t) => {\n *  // 't' will be values 0..1 where 1 represents end of time period.\n *  // Return some computed value based on 't'\n *  return t*Math.random();\n * }\n * const e = Modulate.time(fn, 1000);\n *\n * // Keep calling e() to get the current value\n * e();\n * ```\n * @param fn Modulate function\n * @param duration Duration\n * @returns\n */\nexport declare const time: (fn: ModFunction, duration: Interval) => () => number;\n/**\n * Creates an modulator based on clock time. Time\n * starts being counted when modulate function is created.\n *\n * `timeModulator` allows you to reset and check for completion.\n * Alternatively, use {@link time} which is a simple function that just returns a value.\n *\n * @example Time based easing\n * ```\n * import { timeModulator } from \"@ixfx/modulation.js\";\n * const fn = (t) => {\n *  // 't' will be a value 0..1 representing time elapsed. 1 being end of period.\n *  return t*Math.random();\n * }\n * const t = timeModulator(fn, 5*1000); // Will take 5 seconds to complete\n * ...\n * t.compute(); // Get current value of modulator\n * t.reset();   // Reset to 0\n * t.isDone;    // _True_ if finished\n * ```\n * @param fn Modulator\n * @param duration Duration\n * @returns ModulatorTimed\n */\nexport declare const timeModulator: (fn: ModFunction, duration: Interval) => ModulatorTimed;\n/**\n * Produce modulate values with each invocation. When the time is complete, the final\n * value continues to return. Timer starts when return function is first invoked.\n *\n * If you need to check if a modulator is done or reset it, consider {@link tickModulator}.\n *\n * ```js\n * const fn = (t) => {\n *  // 't' will be values 0..1 representing elapsed ticks toward totwal\n * }\n * const e = ticks(fn, 100);\n *\n * // Keep calling e() to get the current value\n * e();\n * ```\n * @param fn Function that produces 0..1 scale\n * @param totalTicks Total length of ticks\n * @returns\n */\nexport declare const ticks: (fn: ModFunction, totalTicks: number) => () => number;\n/**\n * Creates an modulator based on ticks.\n *\n * `tickModulator` allows you to reset and check for completion.\n * Alternatively, use {@link ticks} which is a simple function that just returns a value.\n *\n * @example Tick-based modulator\n * ```\n * import { tickModulator } from \"@ixfx/modulation.js\";\n * const fn = (t) => {\n *  // 't' will be values 0..1 based on completion\n *  return Math.random() * t;\n * }\n * const t = tickModulator(fn, 1000);   // Will take 1000 ticks to complete\n * t.compute(); // Each call to `compute` progresses the tick count\n * t.reset();   // Reset to 0\n * t.isDone;    // _True_ if finished\n * ```\n * @param fn Modulate function that returns 0..1\n * @param durationTicks Duration in ticks\n * @returns ModulatorTimed\n */\nexport declare const tickModulator: (fn: ModFunction, durationTicks: number) => ModulatorTimed;\n//# sourceMappingURL=modulator-timed.d.ts.map","import type { ModFunction } from \"./types.js\";\n/**\n * A 'no-op' function. Returns the input value without modification.\n * Useful for when some default is needed\n * @param v\n * @returns\n */\nexport declare const noop: ModFunction;\n//# sourceMappingURL=no-op.d.ts.map","/**\n * Continually loops up and down between 0 and 1 by a specified interval.\n * Looping returns start value, and is inclusive of 0 and 1.\n *\n * @example Usage\n * ```js\n * for (const v of percentPingPong(0.1)) {\n *  // v will go up and down. Make sure you have a break somewhere because it is infinite\n * }\n * ```\n *\n * @example Alternative:\n * ```js\n * const pp = pingPongPercent(0.1, 0.5); // Setup generator one time\n * const v = pp.next().value; // Call .next().value whenever a new value is needed\n * ```\n *\n * Because limits are capped to -1 to 1, using large intervals can produce uneven distribution. Eg an interval of 0.8 yields 0, 0.8, 1\n *\n * `upper` and `lower` define the percentage range. Eg to ping pong between 40-60%:\n * ```\n * const pp = pingPongPercent(0.1, 0.4, 0.6);\n * ```\n * @param interval Amount to increment by. Defaults to 10%\n * @param start Starting point within range. Defaults to 0 using a positive interval or 1 for negative intervals\n * @param rounding Rounding to apply. This avoids floating-point rounding errors.\n */\nexport declare const pingPongPercent: (interval?: number, lower?: number, upper?: number, start?: number, rounding?: number) => Generator<number, never, unknown>;\n/**\n * Ping-pongs continually back and forth a `lower` and `upper` value (both inclusive) by a given `interval`. Use `pingPongPercent` for 0-1 ping-ponging\n *\n * In a loop:\n * ```\n * for (const c of pingPong(10, 0, 100)) {\n *  // 0, 10, 20 .. 100, 90, 80, 70 ...\n * }\n * ```\n *\n * Manual:\n * ```\n * const pp = pingPong(10, 0, 100);\n * let v = pp.next().value; // Call .next().value whenever a new value is needed\n * ```\n * @param interval Amount to increment by. Use negative numbers to start counting down\n * @param lower Lower bound (inclusive)\n * @param upper Upper bound (inclusive, must be greater than start)\n * @param start Starting point within bounds (defaults to `lower`)\n * @param rounding Rounding is off by default. Use say 1000 if interval is a fractional amount to avoid rounding errors.\n */\nexport declare const pingPong: (interval: number, lower: number, upper: number, start?: number, rounding?: number) => Generator<number, never, unknown>;\n//# sourceMappingURL=ping-pong.d.ts.map","import * as Flow from '@ixfx/flow';\nimport type { ModFunction, SpringOptions } from './types.js';\n/**\n * Produces values according to rough spring physics.\n * å\n * ```js\n * import { continuously } from \"@ixfx/flow.js\"\n * import { spring } from \"@ixfx/modulation.js\"\n *\n * const s = spring();\n *\n * continuously(() => {\n *  const result = s.next();\n *  if (result.done) return false; // Exit loop\n *  const value = result.value;\n *  // Value is mostly within 0..1 range but will exceed these limits\n * }, 10).start();\n * ```\n *\n * Parameters to the spring can be provided.\n * ```js\n * import { spring } from \"@ixfx/modulation.js\"\n * const s = spring({\n *  mass: 5,\n *  damping: 10\n *  stiffness: 100\n * });\n * ```\n *\n * If you don't want to use a generator: {@link springValue}.\n *\n * Note that the generated value can exceed 0..1 range. This is by design, since\n * a spring can 'overshoot'. See Data.Normalise for functions to normalise.\n *\n * @param opts Options for spring\n * @param timerOrFreq Timer to use, or frequency\n */\nexport declare function spring(opts?: SpringOptions, timerOrFreq?: Flow.Timer | number): Generator<number, void, unknown>;\n/**\n * The same as {@link spring} but instead of a generator we get\n * a value. When the spring is done, 1 is returned instead of undefined.\n *\n * ```js\n * import { springValue } from \"@ixfx/modulation.js\"\n * const s = springValue();\n * s(); // 0..1 (roughly - exceeding 1 is possible)\n * ```\n *\n * Options can be provided:\n * ```js\n * import { spring } from \"@ixfx/modulation.js\"\n * const s = springValue({\n *  stiffness: 100,\n *  damping: 10\n * })\n * ```\n * @example Applied\n * ```js\n * import { Modulation, Data } from  \"@ixfx/bundle.js\"\n * let state = {\n *  spring: Modulation.springValue()\n * }\n *\n * function loop() {\n *  const d = Data.resolveFields(state);\n *\n *  // Apply calculated spring value to compute x value\n *  const x = window.innerWidth * d.spring;\n *\n *\n *  window.requestAnimationFrame(loop);\n * }\n * loop();\n * ```\n * Note that the generated value can exceed 0..1 range. This is by design, since\n * a spring can 'overshoot'. See Data.Normalise for functions to normalise.\n *\n * @param opts\n * @param timerOrFreq\n * @returns\n */\nexport declare function springValue(opts?: SpringOptions, timerOrFreq?: Flow.Timer | number): () => number;\n/**\n * Spring-dynamics modulator.\n * To have spring driven by time or ticks, use {@link spring} or {@link springValue}.\n * This is a lower-level function.\n * @param opts\n * @returns\n */\nexport declare const springShape: (opts?: SpringOptions) => ModFunction;\n//# sourceMappingURL=spring.d.ts.map","import type { ModSettable, ModSettableOptions } from './types.js';\nexport type TimingSources = `elapsed` | `hertz` | `bpm`;\n/**\n * A factory function for creating a timing source. It returns\n * a function which creates a designated timer.\n *\n * This is useful in times where you need to recreate timers, eg for reset\n * type of behaviours because the options for the timer to be\n * consolidated in one place.\n *\n * ```js\n * // Get a factory for an elapsed timer\n * const factory = sources(`elapsed`, 1000);\n *\n * // Create the timer\n * let t = factory();\n *\n * // Get a value from the timer\n * const value = t();\n *\n * // Recreate the timer, note we don't need any options\n * t = factory();\n * ```\n *\n * @param source Kind of timer to make\n * @param duration Duration depends on the timer used. Will be milliseconds, hertz or bpm.\n * @param options Options to pass to timer.\n * @returns\n */\nexport declare const timingSourceFactory: (source: TimingSources, duration: number, options?: Partial<ModSettableOptions>) => TimingSourceFactory;\nexport type TimingSourceFactory = () => ModSettable;\n//# sourceMappingURL=timing-source-factory.d.ts.map","import type { ModSettable, ModSettableFeedback, ModSettableOptions, ModFunction } from \"./types.js\";\n/**\n * Function that modulates a wave\n */\nexport type WaveModulator = (feedback?: Partial<WaveShaperFeedback>) => number;\nexport type Waveforms = `sine` | `sine-bipolar` | `saw` | `triangle` | `square` | `arc`;\n/**\n * Options for the wave function. Defaults to a sine wave of one cycle per-second.\n */\nexport type WaveOptions = ModSettableOptions & {\n    period: number;\n    /**\n     * Clock source. Set this or ticks, hertz, secs or millis\n     * @returns\n     */\n    source: () => number;\n    /**\n     * Waveshape. Default 'sine'\n     */\n    shape: Waveforms;\n    /**\n     * Number of ticks per cycle\n     * (Set either ticks, hertz, secs or millis)\n     */\n    ticks: number;\n    /**\n     * Number of cycles per second\n     * (Set either ticks, hertz, secs or millis)\n     */\n    hertz: number;\n    /**\n     * Number of seconds per cycle. Defaults to one second.\n     * (Set either ticks, hertz, secs or millis)\n     */\n    secs: number;\n    /**\n     * Number of milliseconds per cycle\n     * (Set either ticks, hertz, secs or millis)\n     */\n    millis: number;\n    /**\n     * If _true_, shape is inverted\n     */\n    invert: boolean;\n};\n/**\n * Returns a function that shapes a 0..1 value as a\n * triangle waveform.\n *\n * No bounds checks are performed on input value.\n * Ensure it is 0..1 (inclusive).\n * @param period\n * @returns\n */\nexport declare function triangleShape(period?: number): ModFunction;\n/**\n * Returns a function that shapes a 0..1 value as a square waveform.\n *\n * `period` sets the number of cycles in the 0..1 range.\n * No bounds checks are performed on input value.\n * Ensure it is 0..1 (inclusive).\n * @param period\n * @returns\n */\nexport declare function squareShape(period?: number): ModFunction;\n/**\n * Returns a function that shapes a 0..1 value as a sine waveform.\n * An input value of 0 will be the very beginning of the wave cycle, input of 1 will be the end,\n * 0.5 will be them middle and so on.\n * ```js\n * const s = sineShape();\n * // Calculate value of sine wave at 50%\n * // By default there is one oscillation, thus\n * // it will be the middle of the cycle.\n * s(0.5);\n * ```\n *\n * The `period` determines number of cycles for\n * an input value of 1.\n * ```js\n * // Oscillate twice in 0..1 range\n * const s = sineShape(2);\n * ```\n *\n * No bounds checks are performed on input value.\n * Ensure it is 0..1 (inclusive).\n * @param period\n * @returns\n */\nexport declare function sineShape(period?: number): ModFunction;\n/**\n * A series of arcs, sort of like a bouncing ball.\n * @param period\n * @returns\n */\nexport declare function arcShape(period?: number): ModFunction;\nexport declare function sineBipolarShape(period?: number): ModFunction;\n/**\n * Creates a wave modulator by name.\n *\n * Defaults to 5-second sine wave.\n * ```js\n * import { wave } from '@ixfx/modulation.js';\n * // Triangle wave that has a single cycle over two seconds\n * const m = wave({ secs: 2, shape: `triangle`});\n *\n * // Call m() to get current value of wave, eg in\n * // an animation loop\n * const v = m();\n * ```\n *\n * @example\n * ```js\n * import { wave } from '@ixfx/modulation.js';\n * import { resolveFields } from '@ixfx/bundle.js';\n *\n * const state = {\n *  intensity: wave({secs: 2, shape: `sine` }),\n *  someOtherState: 10\n * }\n *\n * const use = async () {\n *  const { intensity } = await resolveFields(state);\n *  // Do something with intensity value...\n * }\n * ```\n * @param options\n * @returns\n */\nexport declare function wave(options: Partial<WaveOptions>): WaveModulator;\n/**\n * Wave shaper feedback.\n * Feedback allows you to dynamically control tempo for advanced uses.\n */\nexport type WaveShaperFeedback = {\n    /**\n     * Data to feedback to clock source\n     */\n    clock: ModSettableFeedback;\n    /**\n     * If set, source function is ignored and this value (0..1) is used instead\n     */\n    override: number;\n};\n/**\n * Returns a wave-shaping modulator with a source and shaper as input.\n * ```js\n * // 1Hz sine wave source,\n * const wm = waveFromSource(Sources.hertz(1), sineShape(period));\n * ```\n * @param sourceFunction Signal source\n * @param shaperFunction Modulator\n * @returns\n */\nexport declare function waveFromSource(sourceFunction: ModSettable, shaperFunction: ModFunction, invert?: boolean): WaveModulator;\n//# sourceMappingURL=waveforms.d.ts.map","/**\n * Weighted average\n *\n * @param currentValue\n * @param targetValue\n * @param slowDownFactor\n * @returns\n */\nexport declare const weightedAverage: (currentValue: number, targetValue: number, slowDownFactor: number) => number;\n//# sourceMappingURL=weighted-average.d.ts.map","import type { RandomSource } from \"@ixfx/random\";\nimport { type EasingName } from \"./easing/index.js\";\n/**\n * Options for producing weighted distribution\n */\nexport type WeightedOptions = Readonly<{\n    /**\n     * Easing function to use (optional)\n     */\n    easing?: EasingName;\n    /**\n     * Random source (optional)\n     */\n    source?: RandomSource;\n}>;\n/***\n * Returns a random number, 0..1, weighted by a given easing function.\n * Default easing is `quadIn`, which skews towards zero.\n *\n * Use {@link weightedSource} to return a function instead.\n *\n * ```js\n * Random.weighted();          // quadIn easing by default, which skews toward low values\n * Random.weighted(`quadOut`); // quadOut favours high values\n * ```\n * @param easingNameOrOptions Options. Uses 'quadIn' by default.\n * @see {@link weightedSource} Returns a function rather than value\n * @returns Random number (0-1)\n */\nexport declare const weighted: (easingNameOrOptions?: EasingName | WeightedOptions) => number;\n/***\n * Returns a random number, 0..1, weighted by a given easing function.\n * Default easing is `quadIn`, which skews towards zero.\n * Use {@link weighted} to get a value directly.\n *\n * ```js\n * const r1 = Random.weightedSource();          // quadIn easing by default, which skews toward low values\n * r1(); // Produce a value\n *\n * const r2 = Random.weightedSource(`quadOut`); // quadOut favours high values\n * r2(); // Produce a value\n * ```\n * @param easingNameOrOptions Easing name or options `quadIn` by default.\n * @see {@link weighted} Returns value instead of function\n * @returns Function which returns a weighted random value\n */\nexport declare const weightedSource: (easingNameOrOptions?: EasingName | WeightedOptions) => RandomSource;\n//# sourceMappingURL=weighted-random.d.ts.map","export * as Sources from './source/index.js';\nexport * as Oscillators from './oscillator.js';\nexport * as Easings from './easing/index.js';\nexport * as Envelopes from './envelope/index.js';\nexport * as Forces from './forces.js';\nexport * from './cubic-bezier.js';\nexport * from './drift.js';\nexport type * from './easing/types.js';\nexport * from './gaussian.js';\nexport * from './interpolate.js';\nexport * from './jitter.js';\nexport * from './mix.js';\nexport * from './modulator-timed.js';\nexport * from './no-op.js';\nexport * from './ping-pong.js';\nexport * from './spring.js';\nexport * from './timing-source-factory.js';\nexport type * from './types.js';\nexport * from './waveforms.js';\nexport * from './weighted-average.js';\nexport * from './weighted-random.js';\nexport { interpolate } from '@ixfx/numbers';\n//# sourceMappingURL=index.d.ts.map","export type Process<TIn, TOut> = (value: TIn) => TOut;\nexport type ProcessFactory<TIn, TOut> = () => Process<TIn, TOut>;\nexport type Processors1<T1, T2> = [\n    Process<T1, T2>\n];\nexport type Processors2<T1, T2, T3> = [\n    Process<T1, T2>,\n    Process<T2, T3>\n];\nexport type Processors3<T1, T2, T3, T4> = [\n    Process<T1, T2>,\n    Process<T2, T3>,\n    Process<T3, T4>\n];\nexport type Processors4<T1, T2, T3, T4, T5> = [\n    Process<T1, T2>,\n    Process<T2, T3>,\n    Process<T3, T4>,\n    Process<T4, T5>\n];\nexport type Processors5<T1, T2, T3, T4, T5, T6> = [\n    Process<T1, T2>,\n    Process<T2, T3>,\n    Process<T3, T4>,\n    Process<T4, T5>,\n    Process<T5, T6>\n];\nexport type Processors<T1, T2, T3, T4, T5, T6> = Processors1<T1, T2> | Processors2<T1, T2, T3> | Processors3<T1, T2, T3, T4> | Processors4<T1, T2, T3, T4, T5> | Processors5<T1, T2, T3, T4, T5, T6>;\n/**\n * A rank function that compares A and B.\n * Returns the highest value, 'a' or 'b'.\n * Returns 'eq' if values are equal\n */\nexport type RankFunction<T> = (a: T, b: T) => `a` | `b` | `eq`;\nexport type RankOptions = {\n    /**\n     * If set, only values with this JS type are included\n     */\n    includeType?: `string` | `number` | `object` | `boolean`;\n    /**\n     * If _true_, also emits values when they rank equal with current highest.\n     * _false_ by default\n     */\n    emitEqualRanked?: boolean;\n    /**\n     * If _true_, emits the current highest value even if it hasn't changed.\n     * This means it will match the tempo of the incoming stream.\n     */\n    emitRepeatHighest?: boolean;\n};\n//# sourceMappingURL=types.d.ts.map","import type { Process, RankFunction, RankOptions } from \"./types.js\";\nexport type { Process } from \"./types.js\";\n/**\n * Outputs the current largest-seen value\n * @returns\n */\nexport declare const max: () => Process<number | number[], number>;\n/**\n * Outputs the current smallest-seen value\n * @returns\n */\nexport declare const min: () => Process<number | number[], number>;\n/**\n * Returns a sum of values\n * @returns\n */\nexport declare const sum: () => Process<number | number[], number>;\n/**\n * Returns the current average of input values\n * @returns\n */\nexport declare const average: () => Process<number | number[], number>;\n/**\n * Returns the tally (ie number of) values\n * @param countArrayItems\n * @returns\n */\nexport declare const tally: (countArrayItems: boolean) => Process<any, number>;\n/**\n * Returns the 'best' value seen so far as determined by a ranking function.\n * This is similar to min/max but usable for objects.\n * @param r\n * @param options\n * @returns\n */\nexport declare function rank<In>(r: RankFunction<In>, options?: Partial<RankOptions>): (value: In) => In | undefined;\n//# sourceMappingURL=basic.d.ts.map","export declare class CancelError extends Error {\n    constructor(message: any);\n}\n//# sourceMappingURL=cancel-error.d.ts.map","import type { Process } from \"./types.js\";\nexport declare function flow<T1, T2>(...processors: [Process<T1, T2>]): (value: T1) => T2;\nexport declare function flow<T1, T2, T3>(...processors: [Process<T1, T2>, Process<T2, T3>]): (value: T1) => T3;\nexport declare function flow<T1, T2, T3, T4>(...processors: [Process<T1, T2>, Process<T2, T3>, Process<T3, T4>]): (value: T1) => T4;\nexport declare function flow<T1, T2, T3, T4, T5>(...processors: [Process<T1, T2>, Process<T2, T3>, Process<T3, T4>, Process<T4, T5>]): (value: T1) => T5;\nexport declare function flow<T1, T2, T3, T4, T5, T6>(...processors: [Process<T1, T2>, Process<T2, T3>, Process<T3, T4>, Process<T4, T5>, Process<T5, T6>]): (value: T1) => T6;\n//# sourceMappingURL=flow.d.ts.map","/**\n * Calls a function if the input value is not undefined.\n * Return value from function is passed to next function in flow.\n *\n * ```js\n * const flow = Process.flow(\n *  Process.max(),\n *  Process.seenLastToUndefined(),\n *  Process.ifNotUndefined(v => {\n *    console.log(`v:`, v);\n *  })\n * );\n * flow(100); // Prints 'v:100'\n * flow(90);  // Nothing happens max value has not changed\n * flow(110); // Prints 'v:110'\n * ```\n * @param fn\n * @returns\n */\nexport declare function ifNotUndefined<TIn, TOut>(fn: (value: Exclude<TIn, undefined>) => TOut): (value: TIn) => TIn | TOut;\n/**\n * Cancels the remaining flow operations if _undefined_ is an input.\n * See also {@link ifUndefined} or {@link ifNotUndefined}.\n *\n * ```js\n * const c3 = Process.flow(\n *  Basic.max(),\n *  Process.seenLastToUndefined(),\n *  Process.cancelIfUndefined(),\n *  (v => {\n *   console.log(v);\n *  })\n * );\n * c3(100); // Prints '100'\n * c3(90);  // Doesn't print anything since max does not change\n * c3(110); // Prints '110'\n * ```\n * @returns\n */\nexport declare function cancelIfUndefined<TIn>(): (value: TIn | undefined) => TIn;\n/**\n * Returns the output of `fn` if the input value is _undefined_.\n * See also: {@link ifNotUndefined} and {@link cancelIfUndefined}.\n * @param fn\n * @returns\n */\nexport declare function ifUndefined<TIn, TOut>(fn: () => TOut): (value: TIn) => TOut | (TIn & ({} | null));\n//# sourceMappingURL=if-undefined.d.ts.map","import type { Process } from \"./types.js\";\n/**\n * If a value is same as the previous value, _undefined_ is emitted instead.\n *\n * @param eq Equality function. If not specified, === semantics are used.\n * @returns\n */\nexport declare function seenLastToUndefined<TIn>(eq?: (a: TIn, b: TIn) => boolean): Process<TIn, TIn | undefined>;\n/**\n * If a value is same as any previously-seen value, _undefined_ is emitted instead.\n *\n * It stores all previous values and compares against them for each new value.\n * This would likely be not very efficient compared to {@link seenToUndefinedByKey} which uses a one-time computed\n * key and efficient storage of only the keys (using a Set).\n *\n * @param eq Equality function. If not specified, === semantics are used.\n * @returns\n */\nexport declare function seenToUndefined<TIn>(eq?: (a: TIn, b: TIn) => boolean): Process<TIn, TIn | undefined>;\n/**\n * If a value is the same as any previously-seen value, _undefined_ is emitted instead.\n *\n * This version uses a function to create a string key of the object, by default JSON.stringify.\n * Thus we don't need to store all previously seen objects, just their keys.\n *\n * Alternatively, if a key function doesn't make sense for the value, use\n * {@link seenToUndefined}, which stores the values (less efficient).\n *\n * @param toString\n * @returns\n */\nexport declare function seenToUndefinedByKey<TIn>(toString?: (value: TIn) => string): Process<TIn, TIn | undefined>;\n//# sourceMappingURL=seen.d.ts.map","export type * from './types.js';\nexport * from './basic.js';\nexport * from './cancel-error.js';\nexport * from './flow.js';\nexport * from './if-undefined.js';\nexport * from './seen.js';\n//# sourceMappingURL=index.d.ts.map"],"mappings":"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"}