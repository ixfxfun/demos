{"version":3,"sources":["../src/numbers/LinearSpace.ts"],"sourcesContent":["import { throwNumberTest } from \"../util/GuardNumbers.js\";\nimport { round } from \"./Round.js\";\n\n/**\n * Generates a `step`-length series of values between `start` and `end` (inclusive).\n * Each value will be equally spaced.\n *\n * ```js\n * for (const v of linearSpace(1, 5, 6)) {\n *  // Yields: [ 1, 1.8, 2.6, 3.4, 4.2, 5 ]\n * }\n * ```\n *\n * Numbers can be produced from large to small as well\n * ```js\n * const values = [...linearSpace(10, 5, 3)];\n * // Yields: [10, 7.5, 5]\n * ```\n * @param start Start number (inclusive)\n * @param end  End number (inclusive)\n * @param steps How many steps to make from start -> end\n * @param precision Number of decimal points to round to\n */\nexport function* linearSpace(\n  start: number,\n  end: number,\n  steps: number,\n  precision?: number\n): IterableIterator<number> {\n  throwNumberTest(start, ``, `start`);\n  throwNumberTest(end, ``, `end`);\n\n  throwNumberTest(steps, ``, `steps`);\n  const r = precision ? round(precision) : (v: number) => v;\n  const step = (end - start) / (steps - 1);\n\n  throwNumberTest(step, ``, `step`);\n  if (!Number.isFinite(step)) {\n    throw new TypeError(`Calculated step value is infinite`);\n  }\n\n  //eslint-disable-next-line functional/no-let\n  for (let index = 0; index < steps; index++) {\n    const v = start + step * index;\n    yield r(v);\n  }\n}\n"],"mappings":";;;;;;;;AAuBO,UAAU,YACf,OACA,KACA,OACA,WAC0B;AAC1B,kBAAgB,OAAO,IAAI,OAAO;AAClC,kBAAgB,KAAK,IAAI,KAAK;AAE9B,kBAAgB,OAAO,IAAI,OAAO;AAClC,QAAM,IAAI,YAAY,MAAM,SAAS,IAAI,CAAC,MAAc;AACxD,QAAM,QAAQ,MAAM,UAAU,QAAQ;AAEtC,kBAAgB,MAAM,IAAI,MAAM;AAChC,MAAI,CAAC,OAAO,SAAS,IAAI,GAAG;AAC1B,UAAM,IAAI,UAAU,mCAAmC;AAAA,EACzD;AAGA,WAAS,QAAQ,GAAG,QAAQ,OAAO,SAAS;AAC1C,UAAM,IAAI,QAAQ,OAAO;AACzB,UAAM,EAAE,CAAC;AAAA,EACX;AACF;","names":[]}