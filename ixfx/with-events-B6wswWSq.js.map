{"version":3,"file":"with-events-B6wswWSq.js","names":["#debug","#sm","#smInitial","#isDone","#isDoneNeedsFiring","#setIsDone","#changedAt"],"sources":["../../flow/dist/src/state-machine/with-events.js"],"sourcesContent":["import { SimpleEventEmitter } from '@ixfx/events';\nimport * as StateMachine from './state-machine.js';\nimport { elapsedInfinity, elapsedSince } from '@ixfx/core/elapsed';\n/**\n * A state machine that fires events when state changes.\n *\n * ```js\n * const transitions = StateMachine.fromList(`a`, `b`, `c`);\n * const m = new StateMachineWithEvents(transitions);\n * m.addEventListener(`change`, event => {\n *  console.log(`${event.priorState} -> ${event.newState}`);\n * });\n * m.addEventListener(`stop`, event => {\n *  console.log(`State machine has reached final state`);\n * });\n * ```\n */\nexport class StateMachineWithEvents extends SimpleEventEmitter {\n    #sm;\n    #smInitial;\n    #debug;\n    #isDoneNeedsFiring = false;\n    #isDone = false;\n    #changedAt = elapsedInfinity();\n    /**\n     * Create a state machine with initial state, description and options\n     * @param m Machine description\n     * @param opts Options for machine (defaults to `{debug:false}`)\n     */\n    constructor(m, opts = {}) {\n        super();\n        this.#debug = opts.debug ?? false;\n        this.#sm = StateMachine.init(m, opts.initial);\n        this.#smInitial = StateMachine.cloneState(this.#sm);\n    }\n    #setIsDone(v) {\n        if (this.#isDone === v)\n            return;\n        this.#isDone = v;\n        if (v) {\n            this.#isDoneNeedsFiring = true;\n            setTimeout(() => {\n                if (!this.#isDoneNeedsFiring)\n                    return;\n                this.#isDoneNeedsFiring = false;\n                //console.log(`StateMachine isDone (${this.#state}), firing stop.`);\n                this.fireEvent(`stop`, { state: this.#sm.value });\n            }, 2);\n        }\n        else {\n            this.#isDoneNeedsFiring = false;\n        }\n    }\n    /**\n     * Return a list of possible states from current state.\n     *\n     * If list is empty, no states are possible. Otherwise lists\n     * possible states, including 'null' for terminal\n     */\n    get statesPossible() {\n        return StateMachine.possible(this.#sm);\n    }\n    /**\n     * Return a list of all defined states\n     */\n    get statesDefined() {\n        return Object.keys(this.#sm.machine);\n    }\n    /**\n     * Moves to the next state if possible. If multiple states are possible, it will use the first.\n     * If machine is finalised, no error is thrown and null is returned.\n     *\n     * @returns {(string|null)} Returns new state, or null if machine is finalised\n     */\n    next() {\n        const p = StateMachine.possible(this.#sm);\n        if (p.length === 0)\n            return null;\n        this.state = p[0];\n        return p[0];\n    }\n    /**\n     * Returns _true_ if state machine is in its final state\n     *\n     * @returns\n     */\n    get isDone() {\n        return StateMachine.isDone(this.#sm);\n    }\n    /**\n     * Resets machine to initial state\n     */\n    reset() {\n        this.#setIsDone(false);\n        this.#sm = StateMachine.cloneState(this.#smInitial);\n        this.#changedAt = elapsedSince();\n    }\n    /**\n     * Throws if it's not valid to transition to `newState`\n     * @param newState\n     * @returns\n     */\n    validateTransition(newState) {\n        StateMachine.validateTransition(this.#sm, newState);\n    }\n    /**\n     * Returns _true_ if `newState` is valid transition from current state.\n     * Use {@link validateTransition} if you want an explanation for the _false_ results.\n     * @param newState\n     * @returns\n     */\n    isValid(newState) {\n        return StateMachine.isValidTransition(this.#sm, newState);\n    }\n    /**\n     * Gets or sets state. Throws an error if an invalid transition is attempted.\n     * Use `isValid()` to check validity without changing.\n     *\n     * If `newState` is the same as current state, the request is ignored silently.\n     */\n    set state(newState) {\n        const priorState = this.#sm.value;\n        if (newState === this.#sm.value)\n            return;\n        // Try to change state\n        this.#sm = StateMachine.to(this.#sm, newState);\n        if (this.#debug) {\n            console.log(`StateMachine: ${priorState} -> ${newState}`);\n        }\n        this.#changedAt = elapsedSince();\n        setTimeout(() => {\n            this.fireEvent(`change`, { newState: newState, priorState: priorState });\n        }, 1);\n        if (StateMachine.isDone(this.#sm))\n            this.#setIsDone(true);\n    }\n    get state() {\n        return this.#sm.value;\n    }\n    /**\n     * Returns timestamp when state was last changed.\n     * See also `elapsed`\n     */\n    get changedAt() {\n        return this.#changedAt();\n    }\n    /**\n     * Returns milliseconds elapsed since last state change.\n     * See also `changedAt`\n     */\n    get elapsed() {\n        return this.#changedAt();\n    }\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;AAiBA,IAAa,yBAAb,cAA4C,mBAAmB;CAC3D;CACA;CACA;CACA,qBAAqB;CACrB,UAAU;CACV,aAAa,iBAAiB;;;;;;CAM9B,YAAY,GAAG,OAAO,CAAE,GAAE;EACtB,OAAO;EACP,KAAKA,SAAS,KAAK,SAAS;EAC5B,KAAKC,WAAwB,GAAG,KAAK,QAAQ;EAC7C,KAAKC,wBAAqC,KAAKD,IAAI;CACtD;CACD,WAAW,GAAG;AACV,MAAI,KAAKE,YAAY,EACjB;EACJ,KAAKA,UAAU;AACf,MAAI,GAAG;GACH,KAAKC,qBAAqB;GAC1B,WAAW,MAAM;AACb,QAAI,CAAC,KAAKA,mBACN;IACJ,KAAKA,qBAAqB;IAE1B,KAAK,UAAU,CAAC,IAAI,CAAC,EAAE,EAAE,OAAO,KAAKH,IAAI,MAAO,EAAC;GACpD,GAAE,EAAE;EACR,OAEG,KAAKG,qBAAqB;CAEjC;;;;;;;CAOD,IAAI,iBAAiB;AACjB,kBAA6B,KAAKH,IAAI;CACzC;;;;CAID,IAAI,gBAAgB;AAChB,SAAO,OAAO,KAAK,KAAKA,IAAI,QAAQ;CACvC;;;;;;;CAOD,OAAO;EACH,MAAM,aAA0B,KAAKA,IAAI;AACzC,MAAI,EAAE,WAAW,EACb,QAAO;EACX,KAAK,QAAQ,EAAE;AACf,SAAO,EAAE;CACZ;;;;;;CAMD,IAAI,SAAS;AACT,gBAA2B,KAAKA,IAAI;CACvC;;;;CAID,QAAQ;EACJ,KAAKI,WAAW,MAAM;EACtB,KAAKJ,iBAA8B,KAAKC,WAAW;EACnD,KAAKI,aAAa,cAAc;CACnC;;;;;;CAMD,mBAAmB,UAAU;qBACO,KAAKL,KAAK,SAAS;CACtD;;;;;;;CAOD,QAAQ,UAAU;AACd,2BAAsC,KAAKA,KAAK,SAAS;CAC5D;;;;;;;CAOD,IAAI,MAAM,UAAU;EAChB,MAAM,aAAa,KAAKA,IAAI;AAC5B,MAAI,aAAa,KAAKA,IAAI,MACtB;EAEJ,KAAKA,SAAsB,KAAKA,KAAK,SAAS;AAC9C,MAAI,KAAKD,QACL,QAAQ,IAAI,CAAC,cAAc,EAAE,WAAW,IAAI,EAAE,UAAU,CAAC;EAE7D,KAAKM,aAAa,cAAc;EAChC,WAAW,MAAM;GACb,KAAK,UAAU,CAAC,MAAM,CAAC,EAAE;IAAY;IAAsB;GAAY,EAAC;EAC3E,GAAE,EAAE;AACL,aAAwB,KAAKL,IAAI,EAC7B,KAAKI,WAAW,KAAK;CAC5B;CACD,IAAI,QAAQ;AACR,SAAO,KAAKJ,IAAI;CACnB;;;;;CAKD,IAAI,YAAY;AACZ,SAAO,KAAKK,YAAY;CAC3B;;;;;CAKD,IAAI,UAAU;AACV,SAAO,KAAKA,YAAY;CAC3B;AACJ"}