{"version":3,"file":"interval-type-BXX22LYH.js","names":["a: number","b?: number | boolean","roundUp?: boolean","v: number","interval: Interval | undefined","defaultNumber?: number","interval: number | Interval | undefined","millisOrFunction: number | (() => number) | Interval","interval: number | undefined"],"sources":["../../packages/core/src/util/round.ts","../../packages/core/src/interval-type.ts"],"sourcesContent":["import { integerTest, resultThrow } from \"@ixfx/guards\";\n\nexport function round(decimalPlaces: number, v: number, roundUp?: boolean): number;\nexport function round(decimalPlaces: number, roundUp?: boolean): (v: number) => number;\n\n/**\n * Rounds a number.\n *\n * If one parameter is given, it's the decimal places,\n * and a rounding function is returned:\n * ```js\n * import { round } from 'https://unpkg.com/ixfx/dist/numbers.js';\n * const r = round(2);\n * r(10.12355); // 10.12\n * ```\n *\n * If two parameters are given, the first is decimal places,\n * the second the value to round.\n * ```js\n * round(2, 10.12355); // 10.12\n * ```\n * @param decimalPlaces\n * @returns\n */\nexport function round(a: number, b?: number | boolean, roundUp?: boolean) {\n  resultThrow(integerTest(a, `positive`, `decimalPlaces`));\n\n  const up = (typeof b === `boolean`) ? b : (roundUp ?? false)\n  let rounder;\n  if (a === 0) {\n    rounder = Math.round;\n  } else {\n    const p = Math.pow(10, a);\n    if (up) {\n      rounder = (v: number) => Math.ceil(v * p) / p;\n    } else {\n      rounder = (v: number) => Math.floor(v * p) / p;\n    }\n  }\n  if (typeof b === `number`) return rounder(b);\n  return rounder;\n}\n\n","import { numberTest } from '@ixfx/guards';\nimport { round } from './util/round.js';\nimport type { Interval } from './types.js';\n\n// export function intervalToMs(interval: Interval | undefined): number | undefined;\n// export function intervalToMs(\n//   interval: Interval | undefined,\n//   defaultNumber: number\n// ): number;\n\n\n/**\n * Return the millisecond value of an Interval.\n * \n * ```js\n * intervalToMs(100); // 100\n * intervalToMs({ millis: 100 }); // 100\n * ```\n *\n * Use `defaultNumber` to return a default in the case of\n * _undefined_ or invalid input.\n *\n * ```js\n * intervalToMs(undefined);      // throws error\n * intervalToMs(undefined, 100); // 100\n * ```\n *\n * If no default is provided, an exception is thrown.\n * @param interval Interval\n * @param defaultNumber Default value if `interval` is _undefined_ or invalid\n * @returns Milliseconds\n */\nexport function intervalToMs(\n  interval: Interval | undefined,\n  defaultNumber?: number\n): number {\n  if (isInterval(interval)) {\n    // Number given, must be millis?\n    if (typeof interval === `number`) return interval;\n\n    let ms = interval.millis ?? 0;\n    ms += (interval.hours ?? 0) * 60 * 60 * 1000;\n    ms += (interval.mins ?? 0) * 60 * 1000;\n    ms += (interval.secs ?? 0) * 1000;\n    return ms;\n  } else {\n    if (typeof defaultNumber !== `undefined`) return defaultNumber;\n    throw new Error(`Not a valid interval: ${ interval }`);\n  }\n}\n\n/**\n * Returns _true_ if `interval` matches the {@link Interval} type.\n * @param interval \n * @returns _True_ if `interval` is an {@link Interval}.\n */\nexport function isInterval(interval: number | Interval | undefined): interval is Interval {\n  if (interval === undefined) return false;\n  if (interval === null) return false;\n  if (typeof interval === `number`) {\n    if (Number.isNaN(interval)) return false;\n    if (!Number.isFinite(interval)) return false;\n    return true;\n  } else if (typeof interval !== `object`) return false;\n\n  const hasMillis = `millis` in interval;\n  const hasSecs = `secs` in interval;\n  const hasMins = `mins` in interval;\n  const hasHours = `hours` in interval;\n  if (hasMillis && !numberTest(interval.millis)[ 0 ]) return false;\n  if (hasSecs && !numberTest(interval.secs)[ 0 ]) return false;\n  if (hasMins && !numberTest(interval.mins)[ 0 ]) return false;\n  if (hasHours && !numberTest(interval.hours)[ 0 ]) return false;\n  if (hasMillis || hasSecs || hasHours || hasMins) return true;\n  return false;\n}\n\n/**\n * Returns a human-readable representation\n * of some elapsed milliseconds\n * \n * @example\n * ```js\n * elapsedToHumanString(10);      // `10ms`\n * elapsedToHumanString(2000);    // `2s`\n * elapsedToHumanString(65*1000); // `1mins`\n * ```\n * @param millisOrFunction Milliseconds as a number, {@link Interval} or function that resolve to a number\n * @param rounding Rounding (default: 2)\n * @returns \n */\nexport const elapsedToHumanString = (millisOrFunction: number | (() => number) | Interval, rounding = 2): string => {\n  let interval: number | undefined = {} = 0;\n  if (typeof millisOrFunction === `function`) {\n    const intervalResult = millisOrFunction();\n    return elapsedToHumanString(intervalResult);\n  } else if (typeof millisOrFunction === `number`) {\n    interval = millisOrFunction;\n  } else if (typeof millisOrFunction === `object`) {\n    interval = intervalToMs(interval);\n  }\n\n  let ms = intervalToMs(interval);\n  if (typeof ms === `undefined`) return `(undefined)`;\n  if (ms < 1000) return `${ round(rounding, ms) }ms`;\n  ms /= 1000;\n  if (ms < 120) return `${ ms.toFixed(1) }secs`;\n  ms /= 60;\n  if (ms < 60) return `${ ms.toFixed(2) }mins`;\n  ms /= 60;\n  return `${ ms.toFixed(2) }hrs`;\n};"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAwBA,SAAgB,MAAMA,GAAWC,GAAsBC,SAAmB;AACxE,aAAY,YAAY,IAAI,YAAY,eAAe,CAAC;CAExD,MAAM,YAAa,OAAO,WAAY,IAAK,WAAW;CACtD,IAAI;AACJ,KAAI,MAAM,EACR,WAAU,KAAK;MACV;EACL,MAAM,IAAI,KAAK,IAAI,IAAI,EAAE;AACzB,MAAI,GACF,WAAU,CAACC,MAAc,KAAK,KAAK,IAAI,EAAE,GAAG;MAE5C,WAAU,CAACA,MAAc,KAAK,MAAM,IAAI,EAAE,GAAG;CAEhD;AACD,YAAW,OAAO,QAAS,QAAO,QAAQ,EAAE;AAC5C,QAAO;AACR;;;;;;;;;;;;;;;;;;;;;;;;;ACTD,SAAgB,aACdC,UACAC,eACQ;AACR,KAAI,WAAW,SAAS,EAAE;AAExB,aAAW,cAAc,QAAS,QAAO;EAEzC,IAAI,KAAK,SAAS,UAAU;AAC5B,SAAO,SAAS,SAAS,KAAK,KAAK,KAAK;AACxC,SAAO,SAAS,QAAQ,KAAK,KAAK;AAClC,SAAO,SAAS,QAAQ,KAAK;AAC7B,SAAO;CACR,OAAM;AACL,aAAW,mBAAmB,WAAY,QAAO;AACjD,QAAM,IAAI,OAAO,wBAAyB,SAAU;CACrD;AACF;;;;;;AAOD,SAAgB,WAAWC,UAA+D;AACxF,KAAI,oBAAwB,QAAO;AACnC,KAAI,aAAa,KAAM,QAAO;AAC9B,YAAW,cAAc,SAAS;AAChC,MAAI,OAAO,MAAM,SAAS,CAAE,QAAO;AACnC,OAAK,OAAO,SAAS,SAAS,CAAE,QAAO;AACvC,SAAO;CACR,kBAAiB,cAAc,QAAS,QAAO;CAEhD,MAAM,aAAa,WAAW;CAC9B,MAAM,WAAW,SAAS;CAC1B,MAAM,WAAW,SAAS;CAC1B,MAAM,YAAY,UAAU;AAC5B,KAAI,cAAc,WAAW,SAAS,OAAO,CAAE,GAAK,QAAO;AAC3D,KAAI,YAAY,WAAW,SAAS,KAAK,CAAE,GAAK,QAAO;AACvD,KAAI,YAAY,WAAW,SAAS,KAAK,CAAE,GAAK,QAAO;AACvD,KAAI,aAAa,WAAW,SAAS,MAAM,CAAE,GAAK,QAAO;AACzD,KAAI,aAAa,WAAW,YAAY,QAAS,QAAO;AACxD,QAAO;AACR;;;;;;;;;;;;;;;AAgBD,MAAa,uBAAuB,CAACC,kBAAsD,WAAW,MAAc;CAClH,IAAIC,WAA+B,EAAE,GAAG;AACxC,YAAW,sBAAsB,WAAW;EAC1C,MAAM,iBAAiB,kBAAkB;AACzC,SAAO,qBAAqB,eAAe;CAC5C,kBAAiB,sBAAsB,QACtC,YAAW;iBACK,sBAAsB,QACtC,YAAW,aAAa,SAAS;CAGnC,IAAI,KAAK,aAAa,SAAS;AAC/B,YAAW,QAAQ,WAAY,SAAQ;AACvC,KAAI,KAAK,IAAM,SAAQ,EAAG,MAAM,UAAU,GAAG,CAAE;AAC/C,OAAM;AACN,KAAI,KAAK,IAAK,SAAQ,EAAG,GAAG,QAAQ,EAAE,CAAE;AACxC,OAAM;AACN,KAAI,KAAK,GAAI,SAAQ,EAAG,GAAG,QAAQ,EAAE,CAAE;AACvC,OAAM;AACN,SAAQ,EAAG,GAAG,QAAQ,EAAE,CAAE;AAC3B"}