{"version":3,"file":"random-D9PzwhjW.js","names":["dataToShuffle: readonly V[]","rand: () => number"],"sources":["../../packages/arrays/src/random.ts"],"sourcesContent":["import { arrayTest, resultThrow } from \"@ixfx/guards\";\n\n/**\n * Returns a shuffled copy of the input array.\n * @example\n * ```js\n * const d = [1, 2, 3, 4];\n * const s = shuffle(d);\n * // d: [1, 2, 3, 4], s: [3, 1, 2, 4]\n * ```\n * @param dataToShuffle\n * @param rand Random generator. `Math.random` by default.\n * @returns Copy with items moved around randomly\n * @typeParam V - Type of array items\n */\nexport const shuffle = <V>(\n  dataToShuffle: readonly V[],\n  rand: () => number = Math.random\n): V[] => {\n  resultThrow(arrayTest(dataToShuffle, `dataToShuffle`));\n\n  const array = [ ...dataToShuffle ];\n  for (let index = array.length - 1; index > 0; index--) {\n    const index_ = Math.floor(rand() * (index + 1));\n    [ array[ index ], array[ index_ ] ] = [ array[ index_ ], array[ index ] ];\n  }\n  return array;\n};\n\n/**\n * Returns random element.\n *\n * ```js\n * const v = [`blue`, `red`, `orange`];\n * randomElement(v); // Yields `blue`, `red` or `orange`\n * ```\n *\n * Use {@link randomIndex} if you want a random index within `array`.\n *\n * @param array\n * @param rand Random generator. `Math.random` by default.\n * @returns\n */\nexport const randomElement = <V>(\n  array: ArrayLike<V>,\n  rand: () => number = Math.random\n): V => {\n  resultThrow(arrayTest(array, `array`));\n  return array[ Math.floor(rand() * array.length) ];\n};"],"mappings":";;;;;;;;;;;;;;;;;AAeA,MAAa,UAAU,CACrBA,eACAC,OAAqB,KAAK,WAClB;AACR,aAAY,UAAU,gBAAgB,eAAe,CAAC;CAEtD,MAAM,QAAQ,CAAE,GAAG,aAAe;AAClC,MAAK,IAAI,QAAQ,MAAM,SAAS,GAAG,QAAQ,GAAG,SAAS;EACrD,MAAM,SAAS,KAAK,MAAM,MAAM,IAAI,QAAQ,GAAG;AAC/C,GAAE,MAAO,QAAS,MAAO,QAAU,GAAG,CAAE,MAAO,SAAU,MAAO,MAAS;CAC1E;AACD,QAAO;AACR"}