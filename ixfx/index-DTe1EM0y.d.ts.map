{"version":3,"file":"index-DTe1EM0y.d.ts","names":["NumberGuardRange","ResultOk","TValue","ResultError","TError","ResultOrFunction","Result","Result","arrayTest","arrayIndexTest","V","ArrayLike","arrayStringsTest","Result","nullUndefTest","TValue","isDefined","T","Result","isFunction","functionTest","Function","NumberGuardRange","Result","isPowerOfTwo","ifNaN","integerParse","numberTest","numberDecimalTest","percentTest","integerTest","integerArrayTest","Iterable","isInteger","numberInclusiveRangeTest","Result","testPlainObject","testPlainObjectOrPrimitive","Result","ExpectedOpts","rangeIntegerTest","Iterable","rangeTest","Result","ResultError","ResultOk","ResultOrFunction","getErrorMessage","throwIfFailed","resultThrow","resultThrowSingle","TValue","resultFirstFail_","TError","resultIsError","resultIsOk","resultToError","Error","resultToValue","resultErrorToString","errorResult","resultsCollate","resultWithFail","Result","StringGuardRange","stringTest"],"sources":["../../guards/dist/src/types.d.ts","../../guards/dist/src/arrays.d.ts","../../guards/dist/src/empty.d.ts","../../guards/dist/src/function.d.ts","../../guards/dist/src/numbers.d.ts","../../guards/dist/src/object.d.ts","../../guards/dist/src/range.d.ts","../../guards/dist/src/result.d.ts","../../guards/dist/src/string.d.ts","../../guards/dist/src/index.d.ts"],"sourcesContent":["export type NumberGuardRange = \n/**\n * No range checking\n */\n`` | `finite`\n/**\n * Can be any number, except zero\n */\n | `nonZero` | `positive` | `negative`\n/**\n * Must be above zero\n */\n | `aboveZero` | `belowZero` | `percentage` | `bipolar`;\nexport type ResultOk<TValue> = {\n    success: true;\n    value: TValue;\n    info?: string;\n};\nexport type ResultError<TError> = {\n    success: false;\n    error: TError;\n    info?: string;\n};\nexport type ResultOrFunction = Result<any, any> | (() => undefined | Result<any, any>);\nexport type Result<TValue, TError> = ResultOk<TValue> | ResultError<TError>;\n//# sourceMappingURL=types.d.ts.map","import type { Result } from \"./types.js\";\n/**\n * Throws an error if parameter is not an array\n * @param value\n * @param parameterName\n */\nexport declare const arrayTest: (value: unknown, parameterName?: string) => Result<any[], string>;\n/**\n * Throws if `index` is an invalid array index for `array`, and if\n * `array` itself is not a valid array.\n * @param array\n * @param index\n */\nexport declare const arrayIndexTest: <V>(array: ArrayLike<V>, index: number, name?: string) => Result<ArrayLike<V>, string>;\n/**\n * Returns true if parameter is an array of strings\n * @param value\n * @returns\n */\nexport declare const arrayStringsTest: (value: unknown) => Result<string[], string>;\n//# sourceMappingURL=arrays.d.ts.map","import type { Result } from \"./types.js\";\nexport declare const nullUndefTest: <TValue>(value: TValue, parameterName?: string) => Result<TValue, string>;\nexport declare const isDefined: <T>(argument: T | undefined) => argument is T;\n//# sourceMappingURL=empty.d.ts.map","import type { Result } from \"./types.js\";\nexport declare const isFunction: (object: unknown) => object is (...args: any[]) => any;\nexport declare const functionTest: (value: unknown, parameterName?: string) => Result<Function, string>;\n//# sourceMappingURL=function.d.ts.map","import type { NumberGuardRange, Result } from \"./types.js\";\n/**\n * Returns true if `x` is a power of two\n * @param x\n * @returns True if `x` is a power of two\n */\nexport declare const isPowerOfTwo: (x: number) => boolean;\n/**\n * Returns `fallback` if `v` is NaN, otherwise returns `v`.\n *\n * Throws if `v` is not a number type, null or undefined\n * @param v\n * @param fallback\n * @returns\n */\nexport declare const ifNaN: (v: unknown, fallback: number) => number;\n/**\n * Parses `value` as an integer, returning it if it meets the `range` criteria.\n * If not, `defaultValue` is returned.\n *\n * ```js\n * const i = integerParse('10', 'positive');    // 10\n * const i = integerParse('10.5', 'positive');  // 10\n * const i = integerParse('0', 'nonZero', 100); // 100\n * ```\n *\n * NaN is returned if criteria does not match and no default is given\n * ```js\n * const i = integerParse('10', 'negative');    // NaN\n * ```\n *\n * @param value\n * @param range\n * @param defaultValue\n * @returns\n */\nexport declare const integerParse: (value: string | number | null, range?: NumberGuardRange, defaultValue?: number) => number;\n/**\n * Checks if `t` is not a number or within specified range.\n * Returns `[false, reason:string]` if invalid or `[true]` if valid.\n *\n * Alternatives: {@link integerTest} for additional integer check, {@link percentTest} for percentage-range.\n *\n * * (empty, default): must be a number type and not NaN.\n * * finite: must be a number, not NaN and not infinite\n * * positive: must be at least zero\n * * negative: must be zero or lower\n * * aboveZero: must be above zero\n * * belowZero: must be below zero\n * * percentage: must be within 0-1, inclusive\n * * nonZero: can be anything except zero\n * * bipolar: can be -1 to 1, inclusive\n * @param value Value to check\n * @param parameterName Name of parameter (for more helpful exception messages)\n * @param range Range to enforce\n * @returns\n */\nexport declare const numberTest: (value?: unknown, range?: NumberGuardRange, parameterName?: string, info?: string) => Result<number, string>;\n/**\n * Checks if `t` is not a number or within specified range.\n * Throws if invalid. Use {@link numberTest} to test without throwing.\n *\n* * (empty, default): must be a number type and not NaN.\n* * positive: must be at least zero\n* * negative: must be zero or lower\n* * aboveZero: must be above zero\n* * belowZero: must be below zero\n* * percentage: must be within 0-1, inclusive\n* * nonZero: can be anything except zero\n* * bipolar: can be -1 to 1, inclusive\n*\n * Alternatives: {@link integerTest} for additional integer check, {@link percentTest} for percentage-range.\n * @param value Value to test\n * @param range Range\n * @param parameterName Name of parameter\n */\n/**\n * Compares two numbers with a given number of decimal places\n * ```js\n * a: 10.123 b: 10.1    decimals: 1 = true\n * a: 10.123 b: 10.2    decimals: 0 = true\n * a: 10.123 b: 10.14   decimals: 1 = true\n * a: 10.123 b: 10.14   decimals: 2 = false\n * ``\n * @param a\n * @param b\n * @param decimals How many decimals to include\n * @returns\n */\nexport declare const numberDecimalTest: (a: number, b: number, decimals?: number) => Result<number, string>;\n/**\n * Returns test of `value` being in the range of 0-1.\n * Equiv to `number(value, `percentage`);`\n *\n * This is the same as calling ```number(t, `percentage`)```\n * @param value Value to check\n * @param parameterName Param name for customising exception message\n * @returns\n */\nexport declare const percentTest: (value: number, parameterName?: string, info?: string) => Result<number, string>;\n/**\n * Checks if `value` an integer and meets additional criteria.\n * See {@link numberTest} for guard details, or use that if integer checking is not required.\n *\n * Note:\n * * `bipolar` will mean -1, 0 or 1.\n * * positive: must be at least zero\n * * negative: must be zero or lower\n * * aboveZero: must be above zero\n * * belowZero: must be below zero\n * * percentage: must be within 0-1, inclusive\n * * nonZero: can be anything except zero\n * @param value Value to check\n * @param parameterName Param name for customising exception message\n * @param range Guard specifier.\n */\nexport declare const integerTest: (value: unknown, range?: NumberGuardRange, parameterName?: string) => Result<number, string>;\nexport declare const integerArrayTest: (numbers: Iterable<number>) => Result<Iterable<number>, string>;\n/**\n * Returns _true_ if `value` is an integer in number or string form\n * @param value\n * @returns\n */\nexport declare const isInteger: (value: number | string) => boolean;\nexport declare const numberInclusiveRangeTest: (value: number | undefined, min: number, max: number, parameterName?: string) => Result<number, string>;\n//# sourceMappingURL=numbers.d.ts.map","import type { Result } from \"./types.js\";\n/**\n * Tests_if `value` is a plain object\n *\n * ```js\n * isPlainObject(`text`); // false\n * isPlainObject(document); // false\n * isPlainObject({ hello: `there` }); // true\n * ```\n * @param value\n * @returns\n */\nexport declare const testPlainObject: (value: unknown) => Result<object, string>;\n/**\n * Tests if `value` is primitive value (bigint,number,string or boolean) or plain object\n * @param value\n * @returns\n */\nexport declare const testPlainObjectOrPrimitive: (value: unknown) => Result<object | bigint | number | string | boolean, string>;\n//# sourceMappingURL=object.d.ts.map","import type { Result } from \"./types.js\";\nexport type ExpectedOpts = {\n    minInclusive?: number;\n    maxInclusive?: number;\n    minExclusive?: number;\n    maxExclusive?: number;\n};\nexport declare const rangeIntegerTest: (v: Iterable<number>, expected: ExpectedOpts) => Result<Iterable<number>, string>;\n/**\n * Inclusive range 4-6 = 4, 5, 6\n * Exclusive range 4-6 = 5\n *\n * @param numbers\n * @param expected\n * @returns\n */\nexport declare const rangeTest: (numbers: Iterable<number>, expected: ExpectedOpts) => Result<Iterable<number>, string>;\n//# sourceMappingURL=range.d.ts.map","import type { Result, ResultError, ResultOk, ResultOrFunction } from \"./types.js\";\nexport declare const getErrorMessage: (ex: unknown) => string;\n/**\n * Throws an error if any result is a failure.\n * Error message will be the combined from all errors.\n * @param results\n * @returns\n */\nexport declare const throwIfFailed: (...results: Result<any, any>[]) => void;\n/**\n * If any of `results` is an error, throws it, otherwise ignored.\n * @param results\n * @returns _true_ or throws\n */\nexport declare function resultThrow(...results: ResultOrFunction[]): boolean;\nexport declare function resultThrowSingle<TValue>(result: Result<TValue, any>): result is ResultOk<TValue>;\n/**\n * Returns the first failed result, or _undefined_ if there are no fails\n * @param results\n * @returns\n */\nexport declare const resultFirstFail_: <TError>(...results: ResultOrFunction[]) => ResultError<TError> | undefined;\n/**\n * Returns _true_ if `result` is an error\n * @param result\n * @returns\n */\nexport declare function resultIsError<TValue, TError>(result: Result<TValue, TError>): result is ResultError<TError>;\n/**\n * Returns _true_ if `result` is OK and has a value\n * @param result\n * @returns\n */\nexport declare function resultIsOk<TValue, TError>(result: Result<TValue, TError>): result is ResultOk<TValue>;\n/**\n * Gets the result as an Error\n * @param result\n * @returns\n */\nexport declare function resultToError(result: ResultError<any>): Error;\n/**\n * Unwraps the result, returning its value if OK.\n * If not, an exception is thrown.\n * @param result\n * @returns\n */\nexport declare function resultToValue<TValue, TError>(result: Result<TValue, TError>): TValue;\n/**\n * Returns the error as a string.\n * @param result\n * @returns\n */\nexport declare function resultErrorToString(result: ResultError<any>): string;\n/**\n * Returns a {@link ResultError} using 'error' as the message.\n * @param error\n * @param info\n * @returns\n */\nexport declare function errorResult(error: string, info?: string): ResultError<string>;\n/**\n * Returns first failed result or final value.\n * @param results\n * @returns\n */\nexport declare const resultsCollate: <TValue, TError>(...results: ResultOrFunction[]) => Result<TValue, TError>;\n/**\n * If `result` is an error, calls `callback`, passing the error.\n * Otherwise does nothing\n * @param result\n * @param callback\n */\nexport declare const resultWithFail: <TError>(result: Result<any, TError>, callback: (r: ResultError<TError>) => void) => void;\n//# sourceMappingURL=result.d.ts.map","import type { Result } from \"./types.js\";\nexport type StringGuardRange = `` | `non-empty`;\n/**\n * Throws an error if parameter is not an string\n * @param value\n * @param parameterName\n */\nexport declare const stringTest: (value: unknown, range?: StringGuardRange, parameterName?: string) => Result<string, string>;\n//# sourceMappingURL=string.d.ts.map","export * from './arrays.js';\nexport * from './empty.js';\nexport * from './function.js';\nexport * from './numbers.js';\nexport * from './object.js';\nexport * from './range.js';\nexport * from './result.js';\nexport * from './string.js';\nexport * from './types.js';\n//# sourceMappingURL=index.d.ts.map"],"mappings":"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"}