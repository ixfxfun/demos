{"version":3,"sources":["../src/numbers/Wrap.ts","../src/numbers/Quantise.ts","../src/geometry/Angles.ts","../src/geometry/Polar.ts","../src/geometry/point/GetPointParameter.ts","../src/geometry/point/Subtract.ts","../src/geometry/point/Empty.ts","../src/geometry/point/index.ts","../src/geometry/point/Abs.ts","../src/geometry/point/Angle.ts","../src/geometry/point/Apply.ts","../src/geometry/point/FindMinimum.ts","../src/geometry/rect/Max.ts","../src/geometry/point/Bbox.ts","../src/geometry/point/Centroid.ts","../src/geometry/point/Clamp.ts","../src/geometry/point/Compare.ts","../src/geometry/point/IsEqual.ts","../src/geometry/point/ConvexHull.ts","../src/geometry/point/Distance.ts","../src/geometry/circle/Guard.ts","../src/geometry/circle/DistanceCenter.ts","../src/geometry/circle/DistanceFromExterior.ts","../src/geometry/rect/Guard.ts","../src/geometry/circle/IsEqual.ts","../src/geometry/point/Sum.ts","../src/geometry/circle/Intersections.ts","../src/geometry/Intersects.ts","../src/geometry/rect/Intersects.ts","../src/geometry/rect/Center.ts","../src/geometry/point/PointType.ts","../src/geometry/rect/Distance.ts","../src/geometry/point/DistanceToCenter.ts","../src/geometry/point/DistanceToExterior.ts","../src/geometry/point/Divider.ts","../src/geometry/point/ToArray.ts","../src/geometry/point/DotProduct.ts","../src/geometry/point/From.ts","../src/geometry/line/Guard.ts","../src/geometry/line/GetPointsParameter.ts","../src/geometry/line/Length.ts","../src/geometry/line/Interpolate.ts","../src/geometry/point/Interpolate.ts","../src/geometry/point/Invert.ts","../src/geometry/point/Multiply.ts","../src/geometry/point/Magnitude.ts","../src/geometry/point/Most.ts","../src/geometry/point/Normalise.ts","../src/geometry/point/NormaliseByRect.ts","../src/geometry/point/Pipeline.ts","../src/geometry/point/ProgressBetween.ts","../src/geometry/point/Project.ts","../src/geometry/point/Quantise.ts","../src/geometry/point/Random.ts","../src/geometry/point/Reduce.ts","../src/geometry/point/Relation.ts","../src/geometry/point/Rotate.ts","../src/geometry/point/RotatePointArray.ts","../src/geometry/point/Round.ts","../src/geometry/point/To.ts","../src/geometry/point/WithinRange.ts","../src/geometry/point/Wrap.ts","../src/geometry/bezier/index.ts","../node_modules/bezier-js/src/utils.js","../node_modules/bezier-js/src/poly-bezier.js","../node_modules/bezier-js/src/bezier.js","../src/geometry/rect/FromTopLeft.ts","../src/geometry/bezier/Guard.ts"],"sourcesContent":["/* eslint-disable unicorn/prevent-abbreviations */\nimport { throwNumberTest, throwIntegerTest } from '../util/GuardNumbers.js';\n\n/**\n * Wraps an integer number within a specified range, defaulting to degrees (0-360). Use {@link wrap} for floating-point wrapping.\n *\n * This is useful for calculations involving degree angles and hue, which wrap from 0-360.\n * Eg: to add 200 to 200, we don't want 400, but 40.\n *\n * ```js\n * const v = wrapInteger(200+200, 0, 360); // 40\n * ```\n *\n * Or if we minus 100 from 10, we don't want -90 but 270\n * ```js\n * const v = wrapInteger(10-100, 0, 360); // 270\n * ```\n *\n * `wrapInteger` uses 0-360 as a default range, so both of these\n * examples could just as well be:\n *\n * ```js\n * wrapInteger(200+200);  // 40\n * wrapInteger(10-100);  // 270\n * ```\n *\n * Non-zero starting points can be used. A range of 20-70:\n * ```js\n * const v = wrapInteger(-20, 20, 70); // 50\n * ```\n *\n * Note that the minimum value is inclusive, while the maximum is _exclusive_.\n * So with the default range of 0-360, 360 is never reached:\n *\n * ```js\n * wrapInteger(360); // 0\n * wrapInteger(361); // 1\n * ```\n *\n * If you just want to lock values to a range without wrapping, consider {@link clamp}.\n *\n * @param v Value to wrap\n * @param min Integer minimum of range (default: 0). Inclusive\n * @param max Integer maximum of range (default: 360). Exlusive\n * @returns\n */\nexport const wrapInteger = (v: number, min = 0, max = 360) => {\n  throwIntegerTest(v, undefined, `v`);\n  throwIntegerTest(min, undefined, `min`);\n  throwIntegerTest(max, undefined, `max`);\n\n  if (v === min) return min;\n  if (v === max) return min; // Wraps\n  if (v > 0 && v < min) v += min;\n\n  v -= min;\n  max -= min;\n  v = v % max;\n\n  if (v < 0) v = max - Math.abs(v) + min;\n  return v + min;\n};\n\n/**\n * Wraps floating point numbers to be within a range (default: 0..1). Use {@link wrapInteger} if you want to wrap integer values.\n *\n * This logic makes sense for some things like rotation angle.\n *\n * If you just want to lock values to a range without wrapping, consider {@link clamp}.\n *\n * ```js\n * wrap(1.2);   // 0.2\n * wrap(2);     // 1.0\n * wrap(-0.2); // 0.8\n * ```\n *\n * A range can be provided too:\n * ```js\n * wrap(30, 20, 50);  \t // 30\n * wrap(60, 20, 50);    //  30\n * ```\n * @param v\n * @param min\n * @param max\n * @returns\n */\nexport const wrap = (v: number, min = 0, max = 1) => {\n  throwNumberTest(v, ``, `min`);\n  throwNumberTest(min, ``, `min`);\n  throwNumberTest(max, ``, `max`);\n\n  if (v === min) return min;\n  if (v === max) return min; // Wraps\n\n  while (v <= min || v >= max) {\n    if (v === max) break;\n    if (v === min) break;\n    if (v > max) {\n      v = min + (v - max);\n    } else if (v < min) {\n      v = max - (min - v);\n    }\n  }\n  return v;\n};\n\n/**\n * Performs a calculation within a wrapping number range. This is a lower-level function.\n * See also: {@link wrapInteger} for simple wrapping within a range.\n *\n * `min` and `max` define the start and end of the valid range, inclusive. Eg for hue degrees it'd be 0, 360.\n * `a` and `b` is the range you want to work in.\n *\n * For example, let's say you want to get the middle point between a hue of 30 and a hue of 330 (ie warmer colours):\n * ```js\n * wrapRange(0,360, (distance) => {\n *  // for a:0 and b:330, distance would be 90 from 30 degrees to 330 (via zero)\n *  return distance * 0.5; // eg return middle point\n * }, 30, 330);\n * ```\n *\n * The return value of the callback should be in the range of 0-distance. `wrapRange` will subsequently\n * conform it to the `min` and `max` range before it's returned to the caller.\n *\n * @param a Output start (eg. 60)\n * @param b Output end (eg 300)\n * @param min Range start (eg 0)\n * @param max Range end (eg 360)\n * @param fn Returns a computed value from 0 to `distance`.\n * @returns\n */\nexport const wrapRange = (\n  min: number,\n  max: number,\n  fn: (distance: number) => number,\n  a: number,\n  b: number\n) => {\n  //eslint-disable-next-line functional/no-let\n  let r = 0;\n  const distF = Math.abs(b - a);\n  // When b is wrapped forwards\n  const distFwrap = Math.abs(max - a + b);\n  // When b is wrapped backwards (10, 300)\n  const distBWrap = Math.abs(a + (360 - b));\n\n  const distMin = Math.min(distF, distFwrap, distBWrap);\n  if (distMin === distBWrap) {\n    // (10, 300) = 70\n    r = a - fn(distMin);\n  } else if (distMin === distFwrap) {\n    // (300, 60) = 120\n    r = a + fn(distMin);\n  } else {\n    // Forwards or backwards without wrapping\n    // eslint-disable-next-line unicorn/prefer-ternary\n    if (a > b) {\n      // (240,120) -- backwards\n      r = a - fn(distMin);\n    } else {\n      // (120,240) -- forwards\n      r = a + fn(distMin);\n    }\n  }\n  return wrapInteger(r, min, max);\n};\n","import { throwIntegerTest, throwNumberTest } from \"../util/GuardNumbers.js\";\n\n/**\n * Rounds `v` by `every`. Middle values are rounded up by default.\n *\n * ```js\n * quantiseEvery(11, 10);  // 10\n * quantiseEvery(25, 10);  // 30\n * quantiseEvery(0, 10);   // 0\n * quantiseEvery(4, 10);   // 0\n * quantiseEvery(100, 10); // 100\n * ```\n * \n * Also works with decimals\n * ```js\n * quantiseEvery(1.123, 0.1); // 1.1\n * quantiseEvery(1.21, 0.1);  // 1.2\n * ```\n *\n * @param v Value to quantise\n * @param every Number to quantise to\n * @param middleRoundsUp If _true_ (default), the exact middle rounds up to next step.\n * @returns\n */\nexport const quantiseEvery = (\n  v: number,\n  every: number,\n  middleRoundsUp = true\n) => {\n\n  const everyStr = every.toString();\n  const decimal = everyStr.indexOf(`.`);\n  let multiplier = 1;\n  if (decimal >= 0) {\n    let d = everyStr.substring(decimal + 1).length;\n    multiplier = 10 * d;\n    every = Math.floor(multiplier * every);\n    v = v * multiplier;\n  }\n  throwNumberTest(v, ``, `v`);\n  throwIntegerTest(every, ``, `every`);\n\n  let div = v / every;\n  const divModule = div % 1;\n  div = Math.floor(div);\n  if ((divModule === 0.5 && middleRoundsUp) || divModule > 0.5) div++;\n  const vv = (every * div) / multiplier;\n  return vv;\n};","import type { Point } from './point/PointType.js';\n/**\n * Convert angle in degrees to angle in radians.\n * @param angleInDegrees \n * @returns \n */\nexport function degreeToRadian(angleInDegrees: number): number;\n\n/**\n * Convert angles in degrees to angles in radians\n * @param angleInDegrees \n */\nexport function degreeToRadian(angleInDegrees: ReadonlyArray<number>): ReadonlyArray<number>;\n\n//eslint-disable-next-line func-style\nexport function degreeToRadian(angleInDegrees: number | ReadonlyArray<number>): number | ReadonlyArray<number> {\n  return Array.isArray(angleInDegrees) ? angleInDegrees.map(v => v * (Math.PI / 180)) : (angleInDegrees as number) * (Math.PI / 180);\n}\n\nexport function radianInvert(angleInRadians: number) {\n  return (angleInRadians + Math.PI) % (2 * Math.PI);\n}\n\n/**\n * Convert angle in radians to angle in degrees\n * @param angleInRadians\n * @returns \n */\nexport function radianToDegree(angleInRadians: number): number;\n\n/**\n * Convert angles in radians to angles in degrees\n * @param angleInRadians \n */\nexport function radianToDegree(angleInRadians: ReadonlyArray<number>): ReadonlyArray<number>;\n\n//eslint-disable-next-line func-style\nexport function radianToDegree(angleInRadians: number | ReadonlyArray<number>): number | ReadonlyArray<number> {\n  return Array.isArray(angleInRadians) ? angleInRadians.map(v => v * 180 / Math.PI) : (angleInRadians as number) * 180 / Math.PI;\n}\n\n\n/**\n * Angle from x-axis to point (ie. `Math.atan2`)\n * @param point \n * @returns \n */\nexport const radiansFromAxisX = (point: Point): number => Math.atan2(point.x, point.y);\n","import { degreeToRadian, radianToDegree } from './Angles.js';\nimport { throwNumberTest } from \"../util/GuardNumbers.js\";\nimport type { Point } from './point/PointType.js';\nimport { subtract } from './point/Subtract.js';\nimport { Empty } from './point/Empty.js';\nimport { isPoint, guard as PointGuard } from './point/Guard.js';\n\n//eslint-disable-next-line @typescript-eslint/naming-convention\nconst EmptyCartesian = Object.freeze({ x: 0, y: 0 });\n\n/**\n * Polar coordinate, made up of a distance and angle in radians.\n * Most computations involving PolarCoord require an `origin` as well.\n */\nexport type Coord = {\n  readonly distance: number;\n  readonly angleRadian: number;\n};\n\n/**\n * Converts to Cartesian coordiantes\n */\ntype ToCartesian = {\n  (point: Coord, origin?: Point): Point;\n  (distance: number, angleRadians: number, origin?: Point): Point;\n};\n\n/**\n * Returns true if `p` seems to be a {@link Polar.Coord} (ie has both distance & angleRadian fields)\n * @param p\n * @returns True if `p` seems to be a PolarCoord\n */\nexport const isPolarCoord = (p: unknown): p is Coord => {\n  if ((p as Coord).distance === undefined) return false;\n  if ((p as Coord).angleRadian === undefined) return false;\n  return true;\n};\n\n/**\n * Converts a Cartesian coordinate to polar\n *\n * ```js\n * import { Polar } from 'https://unpkg.com/ixfx/dist/geometry.js';\n *\n * // Yields: { angleRadian, distance }\n * const polar = Polar.fromCartesian({x: 50, y: 50}, origin);\n * ```\n *\n * Any additional properties of `point` are copied to object.\n * @param point Point\n * @param origin Origin\n * @returns\n */\nexport const fromCartesian = (\n  point: Point,\n  origin: Point\n): Coord => {\n  point = subtract(point, origin);\n  //eslint-disable-next-line functional/no-let\n  //let a =  Math.atan2(point.y, point.x);\n  //if (a < 0) a = Math.abs(a);\n  //else a = Math.PI + (Math.PI - a);\n\n  const angle = Math.atan2(point.y, point.x);\n  //if (point.x < 0 && point.y > 0) angle += 180;\n  //if (point.x > 0 && point.y < 0) angle += 360;\n  //if (point.x < 0 && point.y < 0) angle += 180;\n\n  return Object.freeze({\n    ...point,\n    angleRadian: angle,\n    distance: Math.hypot(point.x, point.y),\n  });\n};\n\n/**\n * Converts to Cartesian coordinate from polar.\n *\n * ```js\n * import { Polar } from 'https://unpkg.com/ixfx/dist/geometry.js';\n *\n * const origin = { x: 50, y: 50}; // Polar origin\n * // Yields: { x, y }\n * const polar = Polar.toCartesian({ distance: 10, angleRadian: 0 }, origin);\n * ```\n *\n * Distance and angle can be provided as numbers intead:\n *\n * ```\n * // Yields: { x, y }\n * const polar = Polar.toCartesian(10, 0, origin);\n * ```\n *\n * @param a\n * @param b\n * @param c\n * @returns\n */\nexport const toCartesian: ToCartesian = (\n  a: Coord | number,\n  b?: Point | number,\n  c?: Point\n): Point => {\n  if (isPolarCoord(a)) {\n    if (b === undefined) b = Empty;\n    if (isPoint(b)) {\n      return polarToCartesian(a.distance, a.angleRadian, b);\n    }\n    throw new Error(\n      `Expecting (Coord, Point). Second parameter is not a point`\n    );\n  } else if (typeof a === `object`) {\n    throw new TypeError(\n      `First param is an object, but not a Coord: ${ JSON.stringify(a) }`\n    );\n  } else {\n    if (typeof a === `number` && typeof b === `number`) {\n      if (c === undefined) c = Empty;\n      if (!isPoint(c)) {\n        throw new Error(\n          `Expecting (number, number, Point). Point param wrong type`\n        );\n      }\n      return polarToCartesian(a, b, c);\n    } else {\n      throw new TypeError(\n        `Expecting parameters of (number, number). Got: (${ typeof a }, ${ typeof b }, ${ typeof c }). a: ${ JSON.stringify(\n          a\n        ) }`\n      );\n    }\n  }\n};\n\n/**\n * Produces an Archimedean spiral. It's a generator.\n *\n * ```js\n * const s = spiral(0.1, 1);\n * for (const coord of s) {\n *  // Use Polar coord...\n *  if (coord.step === 1000) break; // Stop after 1000 iterations\n * }\n * ```\n *\n * @param smoothness 0.1 pretty rounded, at around 5 it starts breaking down\n * @param zoom At smoothness 0.1, zoom starting at 1 is OK\n */\n//eslint-disable-next-line func-style\nexport function* spiral(\n  smoothness: number,\n  zoom: number\n): IterableIterator<Coord & { readonly step: number }> {\n  //eslint-disable-next-line functional/no-let\n  let step = 0;\n\n  while (true) {\n    //eslint-disable-next-line functional/no-let\n    const a = smoothness * step++;\n    yield {\n      distance: zoom * a,\n      angleRadian: a,\n      step: step,\n    };\n  }\n}\n\n/**\n * Returns a rotated coordinate\n * @param c Coordinate\n * @param amountRadian Amount to rotate, in radians\n * @returns\n */\nexport const rotate = (c: Coord, amountRadian: number): Coord =>\n  Object.freeze({\n    ...c,\n    angleRadian: c.angleRadian + amountRadian,\n  });\n\nexport const normalise = (c: Coord): Coord => {\n  //guard(v, `v`);\n  if (c.distance === 0) throw new Error(`Cannot normalise vector of length 0`);\n  return Object.freeze({\n    ...c,\n    distance: 1,\n  });\n};\n\n/**\n * Throws an error if Coord is invalid\n * @param p\n * @param name\n */\nexport const guard = (p: Coord, name = `Point`) => {\n  if (p === undefined) {\n    throw new Error(\n      `'${ name }' is undefined. Expected {distance, angleRadian} got ${ JSON.stringify(\n        p\n      ) }`\n    );\n  }\n  if (p === null) {\n    throw new Error(\n      `'${ name }' is null. Expected {distance, angleRadian} got ${ JSON.stringify(\n        p\n      ) }`\n    );\n  }\n  if (p.angleRadian === undefined) {\n    throw new Error(\n      `'${ name }.angleRadian' is undefined. Expected {distance, angleRadian} got ${ JSON.stringify(\n        p\n      ) }`\n    );\n  }\n  if (p.distance === undefined) {\n    throw new Error(\n      `'${ name }.distance' is undefined. Expected {distance, angleRadian} got ${ JSON.stringify(\n        p\n      ) }`\n    );\n  }\n  if (typeof p.angleRadian !== `number`) {\n    throw new TypeError(\n      // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n      `'${ name }.angleRadian' must be a number. Got ${ p.angleRadian }`\n    );\n  }\n  if (typeof p.distance !== `number`) {\n    // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n    throw new TypeError(`'${ name }.distance' must be a number. Got ${ p.distance }`);\n  }\n\n  if (p.angleRadian === null) throw new Error(`'${ name }.angleRadian' is null`);\n  if (p.distance === null) throw new Error(`'${ name }.distance' is null`);\n\n  if (Number.isNaN(p.angleRadian)) {\n    throw new TypeError(`'${ name }.angleRadian' is NaN`);\n  }\n  if (Number.isNaN(p.distance)) throw new Error(`'${ name }.distance' is NaN`);\n};\n/**\n * Calculate dot product of two PolarCoords.\n *\n * Eg, power is the dot product of force and velocity\n *\n * Dot products are also useful for comparing similarity of\n *  angle between two unit PolarCoords.\n * @param a\n * @param b\n * @returns\n */\nexport const dotProduct = (a: Coord, b: Coord): number => {\n  guard(a, `a`);\n  guard(b, `b`);\n  return a.distance * b.distance * Math.cos(b.angleRadian - a.angleRadian);\n};\n\n/**\n * Inverts the direction of coordinate. Ie if pointing north, will point south.\n * @param p\n * @returns\n */\nexport const invert = (p: Coord): Coord => {\n  guard(p, `c`);\n  return Object.freeze({\n    ...p,\n    angleRadian: p.angleRadian - Math.PI,\n  });\n};\n\n/**\n * Returns true if PolarCoords have same magnitude but opposite direction\n * @param a\n * @param b\n * @returns\n */\nexport const isOpposite = (a: Coord, b: Coord): boolean => {\n  guard(a, `a`);\n  guard(b, `b`);\n  if (a.distance !== b.distance) return false;\n  return a.angleRadian === -b.angleRadian;\n};\n\n/**\n * Returns true if Coords have the same direction, regardless of magnitude\n * @param a\n * @param b\n * @returns\n */\nexport const isParallel = (a: Coord, b: Coord): boolean => {\n  guard(a, `a`);\n  guard(b, `b`);\n  return a.angleRadian === b.angleRadian;\n};\n\n/**\n * Returns true if coords are opposite direction, regardless of magnitude\n * @param a\n * @param b\n * @returns\n */\nexport const isAntiParallel = (a: Coord, b: Coord): boolean => {\n  guard(a, `a`);\n  guard(b, `b`);\n  return a.angleRadian === -b.angleRadian;\n};\n\n/**\n * Returns a rotated coordinate\n * @param c Coordinate\n * @param amountDeg Amount to rotate, in degrees\n * @returns\n */\nexport const rotateDegrees = (c: Coord, amountDeg: number): Coord =>\n  Object.freeze({\n    ...c,\n    angleRadian: c.angleRadian + degreeToRadian(amountDeg),\n  });\n\n/**\n * Produces an Archimedian spiral with manual stepping.\n * @param step Step number. Typically 0, 1, 2 ...\n * @param smoothness 0.1 pretty rounded, at around 5 it starts breaking down\n * @param zoom At smoothness 0.1, zoom starting at 1 is OK\n * @returns\n */\nexport const spiralRaw = (\n  step: number,\n  smoothness: number,\n  zoom: number\n): Coord => {\n  const a = smoothness * step;\n  return Object.freeze({\n    distance: zoom * a,\n    angleRadian: a,\n  });\n};\n\n/**\n * Multiplies the magnitude of a coord by `amt`.\n * Direction is unchanged.\n * @param v\n * @param amt\n * @returns\n */\nexport const multiply = (v: Coord, amt: number): Coord => {\n  guard(v);\n  throwNumberTest(amt, ``, `amt`);\n  return Object.freeze({\n    ...v,\n    distance: v.distance * amt,\n  });\n};\n\n/**\n * Divides the magnitude of a coord by `amt`.\n * Direction is unchanged.\n * @param v\n * @param amt\n * @returns\n */\nexport const divide = (v: Coord, amt: number): Coord => {\n  guard(v);\n  throwNumberTest(amt, ``, `amt`);\n  return Object.freeze({\n    ...v,\n    distance: v.distance / amt,\n  });\n};\n\n/**\n * Clamps the magnitude of a vector\n * @param v\n * @param max\n * @param min\n * @returns\n */\nexport const clampMagnitude = (v: Coord, max = 1, min = 0): Coord => {\n  let mag = v.distance;\n  if (mag > max) mag = max;\n  if (mag < min) mag = min;\n  return Object.freeze({\n    ...v,\n    distance: mag,\n  });\n};\n\n/**\n * Converts a polar coordinate to Cartesian\n * @param distance Distance\n * @param angleRadians Angle in radians\n * @param origin Origin, or 0,0 by default.\n * @returns\n */\nconst polarToCartesian = (\n  distance: number,\n  angleRadians: number,\n  origin: Point = Empty\n): Point => {\n  PointGuard(origin);\n  return Object.freeze({\n    x: origin.x + distance * Math.cos(angleRadians),\n    y: origin.y + distance * Math.sin(angleRadians),\n  });\n};\n\n/**\n * Returns a human-friendly string representation `(distance, angleDeg)`.\n * If `precision` is supplied, this will be the number of significant digits.\n * @param p\n * @returns\n */\nexport const toString = (p: Coord, digits?: number): string => {\n  if (p === undefined) return `(undefined)`;\n  if (p === null) return `(null)`;\n\n  const angleDeg = radianToDegree(p.angleRadian);\n  const d = digits ? p.distance.toFixed(digits) : p.distance;\n  const a = digits ? angleDeg.toFixed(digits) : angleDeg;\n  return `(${ d },${ a })`;\n};\n\nexport const toPoint = (v: Coord, origin = EmptyCartesian): Point => {\n  guard(v, `v`);\n  return Object.freeze({\n    x: origin.x + v.distance * Math.cos(v.angleRadian),\n    y: origin.y + v.distance * Math.sin(v.angleRadian),\n  });\n};\n","import { isPoint, isPoint3d } from \"./Guard.js\";\nimport type { Point, Point3d } from \"./PointType.js\";\n\nexport function getTwoPointParameters(a: Point, b: Point): [ a: Point, b: Point ];\nexport function getTwoPointParameters(a: Point3d, b: Point3d): [ a: Point3d, b: Point3d ];\nexport function getTwoPointParameters(a: Point, x: number, y: number): [ a: Point, b: Point ];\nexport function getTwoPointParameters(a: Point3d, x: number, y: number, z: number): [ a: Point3d, b: Point3d ];\nexport function getTwoPointParameters(ax: number, ay: number, bx: number, by: number): [ a: Point, b: Point ];\nexport function getTwoPointParameters(ax: number, ay: number, az: number, bx: number, by: number, bz: number): [ a: Point3d, b: Point3d ];\nexport function getTwoPointParameters(a1: Point | Point3d | number, ab2: Point | Point3d | number, ab3?: number, ab4?: number, ab5?: number, ab6?: number) {\n  if (isPoint3d(a1) && isPoint3d(ab2)) return [ a1, ab2 ];\n  if (isPoint(a1) && isPoint(ab2)) return [ a1, ab2 ];\n  if (isPoint3d(a1)) {\n    const b = {\n      x: ab2,\n      y: ab3,\n      z: ab4\n    }\n    if (!isPoint3d(b)) throw new Error(`Expected x, y & z parameters`);\n    return [ a1, b ];\n  }\n  if (isPoint(a1)) {\n    const b = {\n      x: ab2,\n      y: ab3\n    }\n    if (!isPoint(b)) throw new Error(`Expected x & y parameters`);\n    return [ a1, b ];\n  }\n\n  if (typeof ab5 !== `undefined` && typeof ab4 !== `undefined`) {\n    const a = {\n      x: a1,\n      y: ab2,\n      z: ab3\n    };\n    const b = {\n      x: ab4,\n      y: ab5,\n      z: ab6\n    }\n    if (!isPoint3d(a)) throw new Error(`Expected x,y,z for first point`);\n    if (!isPoint3d(b)) throw new Error(`Expected x,y,z for second point`);\n    return [ a, b ];\n  }\n\n  const a = {\n    x: a1,\n    y: ab2\n  };\n  const b = {\n    x: ab3,\n    y: ab4\n  }\n  if (!isPoint(a)) throw new Error(`Expected x,y for first point`);\n  if (!isPoint(b)) throw new Error(`Expected x,y for second point`);\n  return [ a, b ];\n\n}\n\n/**\n * Returns a Point form of either a point, x,y params or x,y,z params.\n * If parameters are undefined, an empty point is returned (0, 0)\n * @ignore\n * @param a\n * @param b\n * @returns\n */\nexport function getPointParameter(\n  a?: Point3d | Point | number | Array<number> | ReadonlyArray<number>,\n  b?: number | boolean,\n  c?: number\n): Point | Point3d {\n  if (a === undefined) return { x: 0, y: 0 };\n\n  if (Array.isArray(a)) {\n    if (a.length === 0) return Object.freeze({ x: 0, y: 0 });\n    if (a.length === 1) return Object.freeze({ x: a[ 0 ], y: 0 });\n    if (a.length === 2) return Object.freeze({ x: a[ 0 ], y: a[ 1 ] });\n    if (a.length === 3) return Object.freeze({ x: a[ 0 ], y: a[ 1 ], z: a[ 2 ] });\n    throw new Error(\n      `Expected array to be 1-3 elements in length. Got ${ a.length }.`\n    );\n  }\n\n  if (isPoint(a)) {\n    return a;\n  } else if (typeof a !== `number` || typeof b !== `number`) {\n    throw new TypeError(\n      `Expected point or x,y as parameters. Got: a: ${ JSON.stringify(\n        a\n      ) } b: ${ JSON.stringify(b) }`\n    );\n  }\n\n  // x,y,z\n  if (typeof c === `number`) {\n    return Object.freeze({ x: a, y: b, z: c });\n  }\n  // x,y\n  return Object.freeze({ x: a, y: b });\n}","import { getTwoPointParameters } from \"./GetPointParameter.js\";\nimport { guard, isPoint3d } from \"./Guard.js\";\nimport type { Point, Point3d } from \"./PointType.js\";\nimport type { Writeable } from \"../../TsUtil.js\";\n\nexport function subtract(a: Point, b: Point): Point;\nexport function subtract(a: Point3d, b: Point3d): Point3d;\nexport function subtract(a: Point, x: number, y: number): Point;\nexport function subtract(a: Point3d, x: number, y: number, z: number): Point3d;\nexport function subtract(ax: number, ay: number, bx: number, by: number): Point;\nexport function subtract(ax: number, ay: number, az: number, bx: number, by: number, bz: number): Point3d;\n\n/**\n * Returns a Point with the x,y,z values of two points subtracted (a-b).\n * \n * `z` parameter is used if present. Uses a default value of 0 for 'z' when subtracting a 2D point with a 3D one.\n *\n * Examples:\n *\n * ```js\n * subtract(ptA, ptB);\n * subtract(x1, y1, x2, y2);\n * subtract(ptA, x2, y2);\n * ```\n */\nexport function subtract(\n  a1: Point | Point3d | number, ab2: Point | Point3d | number, ab3?: number, ab4?: number, ab5?: number, ab6?: number\n): Point | Point3d {\n  const [ ptA, ptB ] = getTwoPointParameters(a1 as any, ab2 as any, ab3 as any, ab4 as any, ab5 as any, ab6 as any);\n  guard(ptA, `a`);\n  guard(ptB, `b`);\n  let pt: Writeable<Point> = {\n    x: ptA.x - ptB.x,\n    y: ptA.y - ptB.y,\n  };\n  if (isPoint3d(ptA) || isPoint3d(ptB)) {\n    pt.z = (ptA.z ?? 0) - (ptB.z ?? 0);\n  };\n  return Object.freeze(pt);\n};\n","/**\n * An empty point of `{ x: 0, y: 0 }`.\n *\n * Use `isEmpty` to check if a point is empty.\n * Use `Empty3d` to get an empty point with `z`.\n */\nexport const Empty = { x: 0, y: 0 } as const;\n\n/**\n * Returns { x:1, y:1 }\n */\nexport const Unit = { x: 1, y: 1 } as const;\n\n/**\n * An empty Point of `{ x: 0, y: 0, z: 0}`\n * Use `isEmpty` to check if a point is empty.\n * Use `Empty` to get an empty point without `z`.\n */\nexport const Empty3d = { x: 0, y: 0, z: 0 } as const;\n\n/**\n * Returns { x:1,y:1,z:1 }\n */\nexport const Unit3d = { x: 1, y: 1, z: 1 } as const;","export * from './Abs.js';\nexport * from './Angle.js';\nexport * from './Apply.js';\nexport * from './Bbox.js';\nexport * from './Centroid.js';\nexport * from './Clamp.js';\nexport * from './Compare.js';\nexport * from './ConvexHull.js';\nexport * from './Distance.js';\nexport * from './DistanceToCenter.js';\nexport * from './DistanceToExterior.js';\nexport * from './Divider.js';\nexport * from './DotProduct.js';\nexport * from './Empty.js';\nexport * from './FindMinimum.js';\nexport * from './From.js';\nexport * from './GetPointParameter.js';\nexport * from './Guard.js';\nexport * from './Interpolate.js';\nexport * from './Invert.js';\nexport * from './IsEqual.js';\nexport * from './Magnitude.js';\nexport * from './Most.js';\nexport * from './Multiply.js';\nexport * from './Normalise.js';\nexport * from './NormaliseByRect.js';\nexport * from './Pipeline.js';\nexport * from './PointRelationTypes.js';\nexport * from './PointType.js';\nexport * from './ProgressBetween.js';\nexport * from './Project.js';\nexport * from './Quantise.js';\nexport * from './Random.js';\nexport * from './Reduce.js';\nexport * from './Relation.js';\nexport * from './Rotate.js';\nexport * from './RotatePointArray.js';\nexport * from './Round.js';\nexport * from './Subtract.js';\nexport * from './Sum.js';\nexport * from './To.js';\nexport * from './ToArray.js';\nexport * from './WithinRange.js';\nexport * from './Wrap.js';\nexport type { Point, Point3d } from './PointType.js';\n","import { isPoint, isPoint3d } from \"./Guard.js\";\nimport type { Point, Point3d } from \"./PointType.js\";\n\nexport function abs(pt: Point3d): Point3d;\nexport function abs(pt: Point): Point;\n\n/**\n * Returns a point with Math.abs applied to x,y and z if present.\n * ```js\n * Points.abs({ x:1,  y:1  }); // { x: 1, y: 1 }\n * Points.abs({ x:-1, y:1  }); // { x: 1, y: 1 }\n * Points.abs({ x:-1, y:-1 }); // { x: 1, y: 1 }\n * ```\n * @param pt\n * @returns\n */\nexport function abs(pt: Point): Point {\n  if (isPoint3d(pt)) {\n    return Object.freeze({\n      ...pt,\n      x: Math.abs(pt.x),\n      y: Math.abs(pt.y),\n      z: Math.abs(pt.z)\n    });\n  } else if (isPoint(pt)) {\n    return Object.freeze({\n      ...pt,\n      x: Math.abs(pt.x),\n      y: Math.abs(pt.y)\n    });\n  } else throw new TypeError(`Param 'pt' is not a point`);\n};","import { guard } from \"./Guard.js\";\nimport type { Point } from \"./PointType.js\";\n\n/**\n * Returns the angle in radians between `a` and `b`.\n *\n * Eg if `a` is the origin, and `b` is another point,\n * in degrees one would get 0 to -180 when `b` was above `a`.\n *  -180 would be `b` in line with `a`.\n * Same for under `a`.\n *\n * Providing a third point `c` gives the interior angle, where `b` is the middle point.\n * @param a\n * @param b\n * @param c\n * @returns\n */\nexport const angleRadian = (a: Point, b?: Point, c?: Point) => {\n  guard(a, `a`);\n\n  if (b === undefined) {\n    return Math.atan2(a.y, a.x);\n  }\n  guard(b, `b`);\n  if (c === undefined) {\n    return Math.atan2(b.y - a.y, b.x - a.x);\n  }\n\n  guard(c, `c`);\n  return Math.atan2(b.y - a.y, b.x - a.x) - Math.atan2(c.y - a.y, c.x - a.x);\n};","import { guard, isPoint3d } from \"./Guard.js\";\nimport type { Point, Point3d } from \"./PointType.js\";\n\n// type PointFields = `x` | `y`;\n// type Point3dFields = PointFields & 'z';\n\nexport type PointApplyFn = (v: number, field: `x` | `y`) => number;\nexport type Point3dApplyFn = (v: number, field: `x` | `y` | `z`) => number;\n\nexport function apply(pt: Point3d, fn: Point3dApplyFn): Point3d\nexport function apply(pt: Point, fn: PointApplyFn): Point;\n\n/**\n * Applies `fn` on x,y & z (if present) fields, returning all other fields as well\n * ```js\n * const p = {x:1.234, y:4.9};\n * const p2 = Points.apply(p, Math.round);\n * // Yields: {x:1, y:5}\n * ```\n *\n * The name of the field is provided as well. Here we only round the `x` field:\n *\n * ```js\n * const p = {x:1.234, y:4.9};\n * const p2 = Points.apply(p, (v, field) => {\n *  if (field === `x`) return Math.round(v);\n *  return v;\n * });\n * ```\n * @param pt\n * @param fn\n * @returns\n */\nexport function apply(\n  pt: Point,\n  fn: Point3dApplyFn | PointApplyFn\n): Point {\n  guard(pt, `pt`);\n  if (isPoint3d(pt)) {\n    return Object.freeze<Point3d>({\n      ...pt,\n      x: fn(pt.x, `x`),\n      y: fn(pt.y, `y`),\n      z: (fn as Point3dApplyFn)(pt.z, `z`)\n    });\n  }\n  return Object.freeze<Point>({\n    ...pt,\n    x: fn(pt.x, `x`),\n    y: fn(pt.y, `y`),\n  });\n}","import type { Point } from \"./PointType.js\";\n\n/**\n * Returns the 'minimum' point from an array of points, using a comparison function.\n *\n * @example Find point closest to a coordinate\n * ```js\n * const points = [...];\n * const center = {x: 100, y: 100};\n *\n * const closestToCenter = findMinimum((a, b) => {\n *  const aDist = distance(a, center);\n *  const bDist = distance(b, center);\n *  if (aDistance < bDistance) return a;\n *  return b;\n * }, points);\n * ```\n * @param comparer Compare function returns the smallest of `a` or `b`\n * @param points\n * @returns\n */\nexport const findMinimum = (\n  comparer: (a: Point, b: Point) => Point,\n  ...points: ReadonlyArray<Point>\n): Point => {\n  if (points.length === 0) throw new Error(`No points provided`);\n  let min = points[ 0 ];\n  for (const p of points) {\n    min = comparer(min, p);\n  }\n  return min;\n};","import type { Point } from \"../point/PointType.js\";\nimport type { RectPositioned } from \"./RectTypes.js\";\n\n/**\n * Returns a rectangle based on provided four corners.\n *\n * To create a rectangle that contains an arbitary set of points, use {@link Geometry.Points.bbox | Geometry.Points.bbox}.\n *\n * Does some sanity checking such as:\n *  - x will be smallest of topLeft/bottomLeft\n *  - y will be smallest of topRight/topLeft\n *  - width will be largest between top/bottom left and right\n *  - height will be largest between left and right top/bottom\n *\n */\nexport const maxFromCorners = (\n  topLeft: Point,\n  topRight: Point,\n  bottomRight: Point,\n  bottomLeft: Point\n): RectPositioned => {\n  if (topLeft.y > bottomRight.y) {\n    throw new Error(`topLeft.y greater than bottomRight.y`);\n  }\n  if (topLeft.y > bottomLeft.y) {\n    throw new Error(`topLeft.y greater than bottomLeft.y`);\n  }\n\n  const w1 = topRight.x - topLeft.x;\n  const w2 = bottomRight.x - bottomLeft.x;\n  const h1 = Math.abs(bottomLeft.y - topLeft.y);\n  const h2 = Math.abs(bottomRight.y - topRight.y);\n  return {\n    x: Math.min(topLeft.x, bottomLeft.x),\n    y: Math.min(topRight.y, topLeft.y),\n    width: Math.max(w1, w2),\n    height: Math.max(h1, h2),\n  };\n};\n","import type { RectPositioned } from \"../rect/RectTypes.js\";\nimport { findMinimum } from \"./FindMinimum.js\";\nimport type { Point } from \"./PointType.js\";\nimport { maxFromCorners as RectsMaxFromCorners } from '../rect/Max.js';\n/**\n * Returns the minimum rectangle that can enclose all provided points\n * @param points\n * @returns\n */\nexport const bbox = (...points: ReadonlyArray<Point>): RectPositioned => {\n  const leftMost = findMinimum((a, b) => {\n    return a.x < b.x ? a : b;\n  }, ...points);\n  const rightMost = findMinimum((a, b) => {\n    return a.x > b.x ? a : b;\n  }, ...points);\n  const topMost = findMinimum((a, b) => {\n    return a.y < b.y ? a : b;\n  }, ...points);\n  const bottomMost = findMinimum((a, b) => {\n    return a.y > b.y ? a : b;\n  }, ...points);\n\n  const topLeft = { x: leftMost.x, y: topMost.y };\n  const topRight = { x: rightMost.x, y: topMost.y };\n  const bottomRight = { x: rightMost.x, y: bottomMost.y };\n  const bottomLeft = { x: leftMost.x, y: bottomMost.y };\n  return RectsMaxFromCorners(topLeft, topRight, bottomRight, bottomLeft);\n};\n","import { isPoint } from \"./Guard.js\";\nimport type { Point } from \"./PointType.js\";\n\n/**\n * Calculates the [centroid](https://en.wikipedia.org/wiki/Centroid#Of_a_finite_set_of_points) of a set of points\n * Undefined values are skipped over.\n *\n * ```js\n * // Find centroid of a list of points\n * const c1 = centroid(p1, p2, p3, ...);\n *\n * // Find centroid of an array of points\n * const c2 = centroid(...pointsArray);\n * ```\n * @param points\n * @returns A single point\n */\nexport const centroid = (...points: ReadonlyArray<Point | undefined>): Point => {\n  if (!Array.isArray(points)) throw new Error(`Expected list of points`);\n  // eslint-disable-next-line unicorn/no-array-reduce\n  const sum = points.reduce<Point>(\n    (previous, p) => {\n      if (p === undefined) return previous; // Ignore undefined\n      if (Array.isArray(p)) {\n        throw new TypeError(\n          `'points' list contains an array. Did you mean: centroid(...myPoints)?`\n        );\n      }\n      if (!isPoint(p)) {\n        throw new Error(\n          `'points' contains something which is not a point: ${ JSON.stringify(\n            p\n          ) }`\n        );\n      }\n      return {\n        x: previous.x + p.x,\n        y: previous.y + p.y,\n      };\n    },\n    { x: 0, y: 0 }\n  );\n\n  return Object.freeze({\n    x: sum.x / points.length,\n    y: sum.y / points.length,\n  });\n};\n\n","import { clamp as clampNumber } from '../../numbers/Clamp.js';\nimport { throwNumberTest } from \"../../util/GuardNumbers.js\";\nimport { isPoint, isPoint3d } from \"./Guard.js\";\nimport type { Point, Point3d } from \"./PointType.js\";\n\nexport function clamp(a: Point, min?: number, max?: number): Point;\nexport function clamp(a: Point3d, min?: number, max?: number): Point3d;\n\n/**\n * Clamps a point to be between `min` and `max` (0 & 1 by default)\n * @param pt Point\n * @param min Minimum value (0 by default)\n * @param max Maximum value (1 by default)\n */\nexport function clamp(\n  a: Point,\n  min: number = 0,\n  max: number = 1\n): Point {\n\n  if (isPoint3d(a)) {\n    return Object.freeze({\n      x: clampNumber(a.x, min, max),\n      y: clampNumber(a.y, min, max),\n      z: clampNumber(a.z, min, max)\n    });\n  } else {\n    return Object.freeze({\n      x: clampNumber(a.x, min, max),\n      y: clampNumber(a.y, min, max),\n    });\n  }\n}\n","import type { Point, Point3d } from \"./PointType.js\";\n\n/**\n * Returns -2 if both x & y of a is less than b\n * Returns -1 if either x/y of a is less than b\n *\n * Returns 2 if both x & y of a is greater than b\n * Returns 1 if either x/y of a is greater than b's x/y\n *\n * Returns 0 if x/y of a and b are equal\n * @param a\n * @param b\n * @returns\n */\nexport const compare = (a: Point, b: Point): number => {\n  if (a.x < b.x && a.y < b.y) return -2;\n  if (a.x > b.x && a.y > b.y) return 2;\n  if (a.x < b.x || a.y < b.y) return -1;\n  if (a.x > b.x || a.y > b.y) return 1;\n  if (a.x === b.x && a.x === b.y) return 0;\n  return Number.NaN;\n};\n\n/**\n * Compares points based on x value. Y value is ignored.\n * \n * Return values:\n * * 0: If a.x === b.x\n * * 1: a is to the right of b (ie. a.x > b.x)\n * * -1: a is to the left of b (ie. a.x < b.x)\n *\n * @example Sorting by x\n * ```js\n * arrayOfPoints.sort(Points.compareByX);\n * ```\n * \n * @param a\n * @param b\n * @returns\n */\nexport const compareByX = (a: Point, b: Point): number => {\n  if (a.x === b.x) return 0;\n  if (a.x < b.x) return -1;\n  return 1;\n\n  // a.x - b.x || a.y - b.y;\n}\n\n/**\n * Compares points based on Y value. X value is ignored.\n * Returns values:\n * * 0: If a.y === b.y\n * * 1: A is below B (ie. a.y > b.y)\n * * -1: A is above B (ie. a.y < b.y)\n *\n * @example Sorting by Y\n * ```js\n * arrayOfPoints.sort(Points.compareByY);\n * ```\n * @param a\n * @param b\n * @returns\n */\nexport const compareByY = (a: Point, b: Point): number => {\n  if (a.y === b.y) return 0;\n  if (a.y < b.y) return -1;\n  return 1;\n}\n\n/**\n * Compares points based on Z value. XY values are ignored.\n * Returns values:\n * * 0: If a.z === b.z\n * * 1: A is below B (ie. a.z > b.z)\n * * -1: A is above B (ie. a.z < b.z)\n *\n * @example Sorting by Y\n * ```js\n * arrayOfPoints.sort(Points.compareByZ);\n * ```\n * @param a\n * @param b\n * @returns\n */\nexport const compareByZ = (a: Point3d, b: Point3d): number => {\n  if (a.z === b.z) return 0;\n  if (a.z < b.z) return -1;\n  return 1;\n}","import type { Point } from \"./PointType.js\";\n\n/**\n * Returns _true_ if the points have identical values\n *\n * ```js\n * const a = {x: 10, y: 10};\n * const b = {x: 10, y: 10;};\n * a === b        // False, because a and be are different objects\n * isEqual(a, b)   // True, because a and b are same value\n * ```\n * @param p Points\n * @returns _True_ if points are equal\n */\nexport const isEqual = (...p: ReadonlyArray<Point>): boolean => {\n  if (p === undefined) throw new Error(`parameter 'p' is undefined`);\n  if (p.length < 2) return true;\n\n  for (let index = 1; index < p.length; index++) {\n    if (p[ index ].x !== p[ 0 ].x) return false;\n    if (p[ index ].y !== p[ 0 ].y) return false;\n  }\n  return true;\n};","import { compareByX } from \"./Compare.js\";\nimport { isEqual } from \"./IsEqual.js\";\nimport type { Point } from \"./PointType.js\";\n\n/**\n * Simple convex hull impementation. Returns a set of points which\n * enclose `pts`.\n *\n * For more power, see something like [Hull.js](https://github.com/AndriiHeonia/hull)\n * @param pts\n * @returns\n */\nexport const convexHull = (...pts: ReadonlyArray<Point>): ReadonlyArray<Point> => {\n  const sorted = [ ...pts ].sort(compareByX);\n  if (sorted.length === 1) return sorted;\n\n  const x = (points: Array<Point>) => {\n    const v: Array<Point> = [];\n    for (const p of points) {\n      while (v.length >= 2) {\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        const q = v.at(-1)!;\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        const r = v.at(-2)!;\n        if ((q.x - r.x) * (p.y - r.y) >= (q.y - r.y) * (p.x - r.x)) {\n          //eslint-disable-next-line functional/immutable-data\n          v.pop();\n        } else break;\n      }\n      //eslint-disable-next-line functional/immutable-data\n      v.push(p);\n    }\n    //eslint-disable-next-line functional/immutable-data\n    v.pop();\n    return v;\n  };\n\n  const upper = x(sorted);\n  //eslint-disable-next-line functional/immutable-data\n  const lower = x(sorted.reverse());\n\n  if (upper.length === 1 && lower.length === 1 && isEqual(lower[ 0 ], upper[ 0 ])) {\n    return upper;\n  }\n  return [ ...upper, ...lower ];\n};","import { guard, isPoint3d } from \"./Guard.js\";\nimport type { Point, Point3d } from './PointType.js';\nimport { getPointParameter } from \"./GetPointParameter.js\";\n\nexport function distance(a: Point, b?: Point): number;\nexport function distance(a: Point, x: number, y: number): number;\n\n/**\n * Calculate distance between two points.\n * If both points have a `z` property, the distance is 3D distance is calculated.\n * If only one point has a `z`, it is ignored.\n *\n * ```js\n * // Distance between two points\n * const ptA = { x: 0.5, y:0.8 };\n * const ptB = { x: 1, y: 0.4 };\n * distance(ptA, ptB);\n * // Or, provide x,y as parameters\n * distance(ptA, 0.4, 0.9);\n *\n * // Distance from ptA to x: 0.5, y:0.8, z: 0.1\n * const ptC = { x: 0.5, y:0.5, z: 0.3 };\n * // With x,y,z as parameters:\n * distance(ptC, 0.5, 0.8, 0.1);\n * ```\n * @param a First point\n * @param xOrB Second point, or x coord\n * @param y y coord, if x coord is given\n * @param z Optional z coord, if x and y are given.\n * @returns\n */\n//eslint-disable-next-line func-style\nexport function distance(\n  a: Point | Point3d,\n  xOrB?: Point | Point3d | number,\n  y?: number,\n  z?: number\n): number {\n  const pt = getPointParameter(xOrB, y, z);\n  guard(pt, `b`);\n  guard(a, `a`);\n  return isPoint3d(pt) && isPoint3d(a) ? Math.hypot(pt.x - a.x, pt.y - a.y, pt.z - a.z) : Math.hypot(pt.x - a.x, pt.y - a.y);\n}\n","import { guard as guardPoint } from '../point/Guard.js';\nimport type { Point } from '../point/PointType.js';\nimport type { Circle, CirclePositioned } from './CircleType.js';\n\n/**\n * Throws if radius is out of range. If x,y is present, these will be validated too.\n * @param circle \n * @param parameterName \n */\nexport const guard = (circle: CirclePositioned | Circle, parameterName = `circle`) => {\n  if (isCirclePositioned(circle)) {\n    guardPoint(circle, `circle`);\n  }\n\n  if (Number.isNaN(circle.radius)) throw new Error(`${ parameterName }.radius is NaN`);\n  if (circle.radius <= 0) throw new Error(`${ parameterName }.radius must be greater than zero`);\n};\n\n/**\n * Throws if `circle` is not positioned or has dodgy fields\n * @param circle \n * @param parameterName \n * @returns \n */\nexport const guardPositioned = (circle: CirclePositioned, parameterName = `circle`) => {\n  if (!isCirclePositioned(circle)) throw new Error(`Expected a positioned circle with x,y`);\n  guard(circle, parameterName);\n};\n\n/***\n * Returns true if radius, x or y are NaN\n */\nexport const isNaN = (a: Circle | CirclePositioned): boolean => {\n  if (Number.isNaN(a.radius)) return true;\n  if (isCirclePositioned(a)) {\n    if (Number.isNaN(a.x)) return true;\n    if (Number.isNaN(a.y)) return true;\n  }\n  return false;\n};\n\n\n/**\n * Returns true if parameter has x,y. Does not verify if parameter is a circle or not\n * \n * ```js\n * import { Circles } from \"https://unpkg.com/ixfx/dist/geometry.js\" \n * \n * const circleA = { radius: 5 };\n * Circles.isPositioned(circle); // false\n * \n * const circleB = { radius: 5, x: 10, y: 10 }\n * Circles.isPositioned(circle); // true\n * ```\n * @param p Circle\n * @returns \n */\nexport const isPositioned = (p: Circle | Point): p is Point => (p as Point).x !== undefined && (p as Point).y !== undefined;\n//eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport const isCircle = (p: any): p is Circle => (p as Circle).radius !== undefined;\n//eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport const isCirclePositioned = (p: any): p is CirclePositioned => isCircle(p) && isPositioned(p);","import type { CirclePositioned } from \"./CircleType.js\";\nimport { distance as pointsDistance } from '../point/Distance.js';\nimport { guardPositioned, isCirclePositioned } from \"./Guard.js\";\nimport type { Point } from '../point/PointType.js';\n\n/**\n * Returns the distance between two circle centers.\n * \n * ```js\n * import { Circles } from \"https://unpkg.com/ixfx/dist/geometry.js\" \n * const circleA = { radius: 5, x: 5, y: 5 }\n * const circleB = { radius: 10, x: 20, y: 20 }\n * const distance = Circles.distanceCenter(circleA, circleB);\n * ```\n * Throws an error if either is lacking position.\n * @param a \n * @param b \n * @returns Distance\n */\nexport const distanceCenter = (a: CirclePositioned, b: CirclePositioned | Point): number => {\n  guardPositioned(a, `a`);\n  if (isCirclePositioned(b)) {\n    guardPositioned(b, `b`);\n  }\n  return pointsDistance(a, b);\n};\n","import type { CirclePositioned } from \"./CircleType.js\";\nimport { distanceCenter } from \"./DistanceCenter.js\";\nimport { isPoint as PointsIsPoint } from \"../point/Guard.js\";\nimport { distance as PointsDistance } from \"../point/Distance.js\";\nimport { guardPositioned, isCirclePositioned } from \"./Guard.js\";\nimport type { Point } from '../point/PointType.js';\n\n/**\n * Returns the distance between the exterior of two circles, or between the exterior of a circle and point.\n * If `b` overlaps or is enclosed by `a`, distance is 0.\n * \n * ```js\n * import { Circles } from \"https://unpkg.com/ixfx/dist/geometry.js\" \n * const circleA = { radius: 5, x: 5, y: 5 }\n * const circleB = { radius: 10, x: 20, y: 20 }\n * const distance = Circles.distanceCenter(circleA, circleB);\n * ```\n * @param a\n * @param b \n */\nexport const distanceFromExterior = (a: CirclePositioned, b: CirclePositioned | Point): number => {\n  guardPositioned(a, `a`);\n  if (isCirclePositioned(b)) {\n    return Math.max(0, distanceCenter(a, b) - a.radius - b.radius);\n  } else if (PointsIsPoint(b)) {\n    const distribution = PointsDistance(a, b);\n    if (distribution < a.radius) return 0;\n    return distribution;\n  } else throw new Error(`Second parameter invalid type`);\n};","import type { RectPositioned, Rect } from \"./RectTypes.js\";\nimport { guard as PointsGuard } from '../point/Guard.js';\nimport type { Point } from '../point/PointType.js';\n\n/**\n * Throws an error if the dimensions of the rectangle are undefined, NaN or negative.\n * @param d \n * @param name \n */\nexport const guardDim = (d: number, name = `Dimension`) => {\n  if (d === undefined) throw new Error(`${ name } is undefined`);\n  if (Number.isNaN(d)) throw new Error(`${ name } is NaN`);\n  if (d < 0) throw new Error(`${ name } cannot be negative`);\n};\n\n/**\n * Throws an error if rectangle is missing fields or they\n * are not valid.\n * \n * Checks:\n * * `width` and `height` must be defined on `rect`\n * * dimensions (w & h) must not be NaN\n * * dimensions (w & h) must not be negative\n * \n * If `rect` has x,y, this value is checked as well.\n * @param rect\n * @param name\n */\nexport const guard = (rect: Rect, name = `rect`) => {\n  if (rect === undefined) throw new Error(`{$name} undefined`);\n  if (isPositioned(rect)) PointsGuard(rect, name);\n  guardDim(rect.width, name + `.width`);\n  guardDim(rect.height, name + `.height`);\n};\n\n/**\n * Returns a positioned rect or if it's not possible, throws an error.\n * \n * If `rect` does not have a position, `origin` is used.\n * If `rect` is positioned and `origin` is provided, returned result uses `origin` as x,y instead.\n * ```js\n * // Returns input because it's positioned\n * getRectPositioned({ x:1, y:2, width:10, height:20 });\n * \n * // Returns { x:1, y:2, width:10, height:20 }\n * getRectPositioned({ width:10, height:20 }, { x:1, y:2 });\n *  \n * // Throws, because we have no point\n * getRectPositioned({width:10,height:20})\n * ```\n * @param rect \n * @param origin \n * @returns \n */\nexport const getRectPositioned = (rect: Rect | RectPositioned, origin?: Point): RectPositioned => {\n  guard(rect);\n  if (isPositioned(rect) && origin === undefined) {\n    return rect;\n  }\n  if (origin === undefined) throw new Error(`Unpositioned rect needs origin parameter`);\n  return Object.freeze({ ...rect, ...origin });\n\n}\n\n/**\n * Throws an error if `rect` is does not have a position, or\n * is an invalid rectangle\n * @param rect \n * @param name \n */\nexport const guardPositioned = (rect: RectPositioned, name = `rect`) => {\n  if (!isPositioned(rect)) throw new Error(`Expected ${ name } to have x,y`);\n  guard(rect, name);\n};\n\n/**\n * Returns _true_ if `rect` has width and height values of 0.\n * Use Rects.Empty or Rects.EmptyPositioned to generate an empty rectangle.\n * @param rect \n * @returns \n */\nexport const isEmpty = (rect: Rect): boolean =>\n  rect.width === 0 && rect.height === 0;\n\n/**\n * Returns _true_ if `rect` is a placeholder, with both width and height values of NaN.\n * Use Rects.Placeholder or Rects.PlaceholderPositioned to generate a placeholder.\n * @param rect \n * @returns \n */\nexport const isPlaceholder = (rect: Rect): boolean =>\n  Number.isNaN(rect.width) && Number.isNaN(rect.height);\n\n/**\n * Returns _true_ if `rect` has position (x,y) fields.\n * @param rect Point, Rect or RectPositiond\n * @returns\n */\nexport const isPositioned = (\n  rect: Point | Rect | RectPositioned\n): rect is Point =>\n  (rect as Point).x !== undefined && (rect as Point).y !== undefined;\n\n/**\n * Returns _true_ if `rect` has width and height fields.\n * @param rect\n * @returns\n */\nexport const isRect = (rect: unknown): rect is Rect => {\n  if (rect === undefined) return false;\n  if ((rect as Rect).width === undefined) return false;\n  if ((rect as Rect).height === undefined) return false;\n  return true;\n};\n\n/**\n * Returns _true_ if `rect` is a positioned rectangle\n * Having width, height, x and y properties.\n * @param rect\n * @returns\n */\nexport const isRectPositioned = (\n  rect: any\n): rect is RectPositioned => isRect(rect) && isPositioned(rect);\n","import type { Circle, CirclePositioned } from \"./CircleType.js\";\nimport { isCirclePositioned } from \"./Guard.js\";\n\n/**\n * Returns true if the two objects have the same values\n *\n * ```js\n * const circleA = { radius: 10, x: 5, y: 5 };\n * const circleB = { radius: 10, x: 5, y: 5 };\n * \n * circleA === circleB; // false, because identity of objects is different\n * Circles.isEqual(circleA, circleB); // true, because values are the same\n * ```\n * \n * Circles must both be positioned or not.\n * @param a\n * @param b\n * @returns\n */\nexport const isEqual = (a: CirclePositioned | Circle, b: CirclePositioned | Circle): boolean => {\n  if (a.radius !== b.radius) return false;\n\n  if (isCirclePositioned(a) && isCirclePositioned(b)) {\n    if (a.x !== b.x) return false;\n    if (a.y !== b.y) return false;\n    if (a.z !== b.z) return false;\n    return true;\n  } else if (!isCirclePositioned(a) && !isCirclePositioned(b)) {\n    // no-op\n  } else return false; // one is positioned one not\n\n  return false;\n};","import { getTwoPointParameters } from \"./GetPointParameter.js\";\nimport { guard, isPoint3d } from \"./Guard.js\";\nimport type { Point, Point3d } from \"./PointType.js\";\nimport type { Writeable } from \"../../TsUtil.js\";\n\nexport function sum(a: Point, b: Point): Point;\nexport function sum(a: Point3d, b: Point3d): Point3d;\nexport function sum(a: Point, x: number, y: number): Point;\nexport function sum(a: Point3d, x: number, y: number, z: number): Point3d;\nexport function sum(ax: number, ay: number, bx: number, by: number): Point;\nexport function sum(ax: number, ay: number, az: number, bx: number, by: number, bz: number): Point3d;\n\n/**\n * Returns a Point with the x,y,z values of two points added.\n * \n * `z` parameter is used, if present. Uses a default value of 0 for 'z' when adding a 2D point with a 3D one.\n *\n * Examples:\n *\n * ```js\n * sum(ptA, ptB);\n * sum(x1, y1, x2, y2);\n * sum(ptA, x2, y2);\n * ```\n */\nexport function sum(\n  a1: Point | Point3d | number, ab2: Point | Point3d | number, ab3?: number, ab4?: number, ab5?: number, ab6?: number\n): Point | Point3d {\n  const [ ptA, ptB ] = getTwoPointParameters(a1 as any, ab2 as any, ab3 as any, ab4 as any, ab5 as any, ab6 as any);\n  guard(ptA, `a`);\n  guard(ptB, `b`);\n  let pt: Writeable<Point> = {\n    x: ptA.x + ptB.x,\n    y: ptA.y + ptB.y,\n  };\n  if (isPoint3d(ptA) || isPoint3d(ptB)) {\n    pt.z = (ptA.z ?? 0) + (ptB.z ?? 0);\n  };\n  return Object.freeze(pt);\n};\n","import { isEqual } from \"./IsEqual.js\";\nimport { sum as PointsSum } from \"../point/Sum.js\";\nimport { subtract as PointsSubtract } from \"../point/Subtract.js\";\nimport type { Point } from '../point/PointType.js';\nimport type { CirclePositioned } from \"./CircleType.js\";\nimport type { Line } from \"../line/LineType.js\";\n\n/**\n * Returns the point(s) of intersection between a circle and line.\n * \n * ```js\n * import { Circles } from \"https://unpkg.com/ixfx/dist/geometry.js\" \n * const circle = { radius: 5, x: 5, y: 5 };\n * const line = { a: { x: 0, y: 0 }, b: { x: 10, y: 10 } };\n * const pts = Circles.intersectionLine(circle, line);\n * ```\n * @param circle \n * @param line \n * @returns Point(s) of intersection, or empty array\n */\nexport const intersectionLine = (circle: CirclePositioned, line: Line): ReadonlyArray<Point> => {\n  const v1 = {\n    x: line.b.x - line.a.x,\n    y: line.b.y - line.a.y\n  };\n  const v2 = {\n    x: line.a.x - circle.x,\n    y: line.a.y - circle.y\n  };\n\n  const b = (v1.x * v2.x + v1.y * v2.y) * -2;\n  const c = 2 * (v1.x * v1.x + v1.y * v1.y);\n\n  const d = Math.sqrt(b * b - 2 * c * (v2.x * v2.x + v2.y * v2.y - circle.radius * circle.radius));\n  if (Number.isNaN(d)) return []; // no intercept\n\n  const u1 = (b - d) / c;  // these represent the unit distance of point one and two on the line\n  const u2 = (b + d) / c;\n\n  const returnValue = [];\n  if (u1 <= 1 && u1 >= 0) {  // add point if on the line segment\n    //eslint-disable-next-line functional/immutable-data\n    returnValue.push({\n      x: line.a.x + v1.x * u1,\n      y: line.a.y + v1.y * u1\n    });\n  }\n  if (u2 <= 1 && u2 >= 0) {  // second add point if on the line segment\n    //eslint-disable-next-line functional/immutable-data\n    returnValue.push({\n      x: line.a.x + v1.x * u2,\n      y: line.a.y + v1.y * u2\n    });\n  }\n  return returnValue;\n};\n\n\n/**\n * \n * Returns the points of intersection betweeen `a` and `b`.\n * \n * Returns an empty array if circles are equal, one contains the other or if they don't touch at all.\n *\n * @param a Circle\n * @param b Circle\n * @returns Points of intersection, or an empty list if there are none\n */\nexport const intersections = (a: CirclePositioned, b: CirclePositioned): ReadonlyArray<Point> => {\n  const vector = PointsSubtract(b, a);\n  const centerD = Math.hypot((vector.y), (vector.x));\n\n  // Do not intersect\n  if (centerD > a.radius + b.radius) return [];\n\n  // Circle contains another\n  if (centerD < Math.abs(a.radius - b.radius)) return [];\n\n  // Circles are the same\n  if (isEqual(a, b)) return [];\n\n  const centroidD = ((a.radius * a.radius) - (b.radius * b.radius) + (centerD * centerD)) / (2 * centerD);\n  const centroid = {\n    x: a.x + (vector.x * centroidD / centerD),\n    y: a.y + (vector.y * centroidD / centerD)\n  };\n\n  const centroidIntersectionD = Math.sqrt((a.radius * a.radius) - (centroidD * centroidD));\n\n  const intersection = {\n    x: -vector.y * (centroidIntersectionD / centerD),\n    y: vector.x * (centroidIntersectionD / centerD)\n  };\n  return [\n    PointsSum(centroid, intersection),\n    PointsSubtract(centroid, intersection)\n  ];\n};\n","import { intersections as circleIntersections } from \"./circle/Intersections.js\";\nimport type { CirclePositioned } from \"./circle/CircleType.js\";\nimport type { RectPositioned } from \"./rect/index.js\";\n\nexport const circleRect = (a: CirclePositioned, b: RectPositioned) => {\n  // https://yal.cc/rectangle-circle-intersection-test/\n  const deltaX = a.x - Math.max(b.x, Math.min(a.x, b.x + b.width));\n  const deltaY = a.y - Math.max(b.y, Math.min(a.y, b.y + b.height));\n  return (deltaX * deltaX + deltaY * deltaY) < (a.radius * a.radius);\n};\n\nexport const circleCircle = (a: CirclePositioned, b: CirclePositioned) => circleIntersections(a, b).length === 2;","import { guard } from \"./Guard.js\";\nimport { isPositioned, isRectPositioned } from \"./Guard.js\";\nimport { isCirclePositioned } from '../circle/Guard.js';\nimport * as Intersects from '../Intersects.js';\nimport { isPoint } from \"../point/Guard.js\";\nimport type { Rect, RectPositioned } from \"./RectTypes.js\";\nimport type { Point } from \"../point/PointType.js\";\nimport type { CirclePositioned } from \"../circle/CircleType.js\";\n/**\n * Returns _true_ if `point` is within, or on boundary of `rect`.\n *\n * ```js\n * import { Rects } from \"https://unpkg.com/ixfx/dist/geometry.js\";\n * Rects.intersectsPoint(rect, { x: 100, y: 100});\n * ```\n * @param rect\n * @param point\n */\nexport function intersectsPoint(\n  rect: Rect | RectPositioned,\n  point: Point\n): boolean;\n\n/**\n * Returns true if x,y coordinate is within, or on boundary of `rect`.\n * ```js\n * import { Rects } from \"https://unpkg.com/ixfx/dist/geometry.js\";\n * Rects.intersectsPoint(rect, 100, 100);\n * ```\n * @param rect\n * @param x\n * @param y\n */\nexport function intersectsPoint(\n  rect: Rect | RectPositioned,\n  x: number,\n  y: number\n): boolean;\n\n/**\n * Returns true if point is within or on boundary of `rect`.\n *\n * ```js\n * import { Rects } from \"https://unpkg.com/ixfx/dist/geometry.js\";\n * Rects.intersectsPoint(rect, { x: 100, y: 100});\n * Rects.intersectsPoint(rect, 100, 100);\n * ```\n * @param rect\n * @param a\n * @param b\n * @returns\n */\n//eslint-disable-next-line func-style\nexport function intersectsPoint(\n  rect: Rect | RectPositioned,\n  a: Point | number,\n  b?: number\n): boolean {\n  guard(rect, `rect`);\n  //eslint-disable-next-line functional/no-let\n  let x = 0;\n  //eslint-disable-next-line functional/no-let\n  let y = 0;\n  if (typeof a === `number`) {\n    if (b === undefined) throw new Error(`x and y coordinate needed`);\n    x = a;\n    y = b;\n  } else {\n    x = a.x;\n    y = a.y;\n  }\n  if (isPositioned(rect)) {\n    if (x - rect.x > rect.width || x < rect.x) return false;\n    if (y - rect.y > rect.height || y < rect.y) return false;\n  } else {\n    // Assume 0,0\n    if (x > rect.width || x < 0) return false;\n    if (y > rect.height || y < 0) return false;\n  }\n  return true;\n}\n\n/**\n * Returns true if `a` or `b` overlap, are equal, or `a` contains `b`.\n * A rectangle can be checked for intersections with another RectPositioned, CirclePositioned or Point.\n *\n */\nexport const isIntersecting = (\n  a: RectPositioned,\n  // eslint-disable-next-line @typescript-eslint/no-redundant-type-constituents\n  b: CirclePositioned | Point\n): boolean => {\n  if (!isRectPositioned(a)) {\n    throw new Error(`a parameter should be RectPositioned`);\n  }\n\n  if (isCirclePositioned(b)) {\n    return Intersects.circleRect(b, a);\n  } else if (isPoint(b)) {\n    return intersectsPoint(a, b);\n  }\n  throw new Error(`Unknown shape for b: ${ JSON.stringify(b) }`);\n};","import { isPoint } from \"../point/Guard.js\";\nimport type { Point } from \"../point/PointType.js\";\nimport { getRectPositioned, guard } from \"./Guard.js\";\nimport type { Rect, RectPositioned } from \"./RectTypes.js\";\n\n/**\n * Returns the center of a rectangle as a {@link Geometry.Point}.\n *  If the rectangle lacks a position and `origin` parameter is not provided, 0,0 is used instead.\n *\n * ```js\n * import { Rects } from \"https://unpkg.com/ixfx/dist/geometry.js\";\n *\n * const p = Rects.center({x:10, y:20, width:100, height:50});\n * const p2 = Rects.center({width: 100, height: 50}); // Assumes 0,0 for rect x,y\n * ```\n * @param rect Rectangle\n * @param origin Optional origin. Overrides `rect` position if available. If no position is available 0,0 is used by default.\n * @returns\n */\nexport const center = (\n  rect: RectPositioned | Rect,\n  origin?: Point\n): Point => {\n  guard(rect);\n  if (origin === undefined && isPoint(rect)) origin = rect;\n  else if (origin === undefined) origin = { x: 0, y: 0 }; // throw new Error(`Unpositioned rect needs origin param`);\n\n  const r = getRectPositioned(rect, origin);\n  return Object.freeze({\n    x: origin.x + rect.width / 2,\n    y: origin.y + rect.height / 2,\n  });\n};","/**\n * A point, consisting of x, y and maybe z fields.\n */\nexport type Point = {\n  readonly x: number;\n  readonly y: number;\n  readonly z?: number;\n};\n\nexport type Point3d = Point & {\n  readonly z: number;\n};\n\n/**\n * Placeholder point: `{ x: NaN, y: NaN }`\n * Use `isPlaceholder` to check if a point is a placeholder.\n * Use `Placeholder3d` get a point with `z` property.\n */\n//eslint-disable-next-line @typescript-eslint/naming-convention\nexport const Placeholder = Object.freeze({ x: Number.NaN, y: Number.NaN });\n\n/**\n * Placeholder point: `{x: NaN, y:NaN, z:NaN }`\n * Use `isPlaceholder` to check if a point is a placeholder.\n * Use `Placeholder` to get a point without `z` property.\n */\nexport const Placeholder3d = Object.freeze({ x: Number.NaN, y: Number.NaN, z: Number.NaN });","import { guardPositioned } from \"./Guard.js\";\nimport { intersectsPoint } from \"./Intersects.js\";\nimport { center } from \"./Center.js\";\nimport type { RectPositioned } from \"./RectTypes.js\";\nimport { type Point } from '../point/PointType.js';\nimport { guard as PointsGuard } from '../point/Guard.js';\nimport { distance as PointsDistance } from '../point/Distance.js';\n\n/**\n * Returns the distance from the perimeter of `rect` to `pt`.\n * If the point is within the rectangle, 0 is returned.\n *\n * If `rect` does not have an x,y it's assumed to be 0,0\n *\n * ```js\n * import { Rects } from \"https://unpkg.com/ixfx/dist/geometry.js\";\n * const rect = { width: 100, height: 100, x: 0, y: 0 };\n * Rects.distanceFromExterior(rect, { x: 20, y: 20 });\n * ```\n * @param rect Rectangle\n * @param pt Point\n * @returns Distance\n */\nexport const distanceFromExterior = (\n  rect: RectPositioned,\n  pt: Point\n): number => {\n  guardPositioned(rect, `rect`);\n  PointsGuard(pt, `pt`);\n  if (intersectsPoint(rect, pt)) return 0;\n  const dx = Math.max(rect.x - pt.x, 0, pt.x - rect.x + rect.width);\n  const dy = Math.max(rect.y - pt.y, 0, pt.y - rect.y + rect.height);\n  return Math.hypot(dx, dy);\n};\n\n/**\n * Return the distance of `pt` to the center of `rect`.\n *\n * ```js\n * import { Rects } from \"https://unpkg.com/ixfx/dist/geometry.js\";\n * const rect = { width: 100, height: 100, x: 0, y: 0 };\n * Rects.distanceFromCenter(rect, { x: 20, y: 20 });\n * ```\n * @param rect\n * @param pt\n * @returns\n */\nexport const distanceFromCenter = (\n  rect: RectPositioned,\n  pt: Point\n): number => PointsDistance(center(rect), pt);\n","import { distanceFromExterior as circleDistanceFromExterior } from \"../circle/DistanceFromExterior.js\";\nimport { distance } from \"./Distance.js\";\nimport { isPoint } from \"./Guard.js\";\nimport { distanceFromExterior as rectDistanceFromExterior } from \"../rect/Distance.js\";\nimport type { Point } from \"./PointType.js\";\nimport { isCirclePositioned } from \"../circle/Guard.js\";\nimport { isRectPositioned } from \"../rect/Guard.js\";\nimport type { PointCalculableShape } from \"../shape/index.js\";\n\n/**\n * Returns the distance from point `a` to the center of `shape`.\n * @param a Point\n * @param shape Point, or a positioned Rect or Circle.\n * @returns\n */\nexport const distanceToCenter = (\n  a: Point,\n  shape: PointCalculableShape\n): number => {\n  if (isRectPositioned(shape)) {\n    return rectDistanceFromExterior(shape, a);\n  }\n  if (isCirclePositioned(shape)) {\n    return circleDistanceFromExterior(shape, a);\n  }\n  if (isPoint(shape)) return distance(a, shape);\n  throw new Error(`Unknown shape`);\n};","import { distanceFromExterior as circleDistanceFromExterior } from \"../circle/DistanceFromExterior.js\";\nimport { distance, isPoint } from \"./index.js\";\nimport type { Point, PointCalculableShape } from \"../Types.js\";\nimport { distanceFromExterior as rectDistanceFromExterior } from \"../rect/Distance.js\";\nimport { isCirclePositioned } from \"../circle/Guard.js\";\nimport { isRectPositioned } from \"../rect/Guard.js\";\n\n/**\n * Returns the distance from point `a` to the exterior of `shape`.\n *\n * @example Distance from point to rectangle\n * ```\n * const distance = distanceToExterior(\n *  {x: 50, y: 50},\n *  {x: 100, y: 100, width: 20, height: 20}\n * );\n * ```\n *\n * @example Find closest shape to point\n * ```\n * import {minIndex} from '../data/arrays.js';\n * const shapes = [ some shapes... ]; // Shapes to compare against\n * const pt = { x: 10, y: 10 };       // Comparison point\n * const distances = shapes.map(v => distanceToExterior(pt, v));\n * const closest = shapes[minIndex(...distances)];\n * ```\n * @param a Point\n * @param shape Point, or a positioned Rect or Circle.\n * @returns\n */\nexport const distanceToExterior = (\n  a: Point,\n  shape: PointCalculableShape\n): number => {\n  if (isRectPositioned(shape)) {\n    return rectDistanceFromExterior(shape, a);\n  }\n  if (isCirclePositioned(shape)) {\n    return circleDistanceFromExterior(shape, a);\n  }\n  if (isPoint(shape)) return distance(a, shape);\n  throw new Error(`Unknown shape`);\n};","import { getPointParameter, getTwoPointParameters } from \"./GetPointParameter.js\";\nimport { guard, guardNonZeroPoint, isPoint3d } from \"./Guard.js\";\nimport type { Point, Point3d } from \"./PointType.js\";\nimport type { Writeable } from \"../../TsUtil.js\";\n\nexport function divide(a: Point, b: Point): Point;\nexport function divide(a: Point3d, b: Point3d): Point3d;\nexport function divide(a: Point, x: number, y: number): Point;\nexport function divide(a: Point3d, x: number, y: number, z: number): Point3d;\nexport function divide(ax: number, ay: number, bx: number, by: number): Point;\nexport function divide(ax: number, ay: number, az: number, bx: number, by: number, bz: number): Point3d;\n\n/**\n * Returns a Point with the x,y,z values of two points divide (a/b).\n * \n * `z` parameter is used, if present. Uses a default value of 0 for 'z' when dividing a 2D point with a 3D one.\n *\n * Examples:\n *\n * ```js\n * divide(ptA, ptB);\n * divide(x1, y1, x2, y2);\n * divide(ptA, x2, y2);\n * ```\n */\nexport function divide(\n  a1: Point | Point3d | number, ab2: Point | Point3d | number, ab3?: number, ab4?: number, ab5?: number, ab6?: number\n): Point | Point3d {\n  const [ ptA, ptB ] = getTwoPointParameters(a1 as any, ab2 as any, ab3 as any, ab4 as any, ab5 as any, ab6 as any);\n  guard(ptA, `a`);\n  guard(ptB, `b`);\n  if (ptB.x === 0) throw new TypeError('Cannot divide by zero (b.x is 0)');\n  if (ptB.y === 0) throw new TypeError('Cannot divide by zero (b.y is 0)');\n\n  let pt: Writeable<Point> = {\n    x: ptA.x / ptB.x,\n    y: ptA.y / ptB.y,\n  };\n  if (isPoint3d(ptA) || isPoint3d(ptB)) {\n    if (ptB.z === 0) throw new TypeError('Cannot divide by zero (b.z is 0)');\n\n    pt.z = (ptA.z ?? 0) / (ptB.z ?? 0);\n  };\n  return Object.freeze(pt);\n};\n\n\n/**\n * Returns a function that divides a point:\n * ```js\n * const f = divider(100, 200);\n * f(50,100); // Yields: { x: 0.5, y: 0.5 }\n * ```\n *\n * Input values can be Point, separate x,y and optional z values or an array:\n * ```js\n * const f = divider({ x: 100, y: 100 });\n * const f = divider( 100, 100 );\n * const f = divider([ 100, 100 ]);\n * ```\n *\n * Likewise the returned function an take these as inputs:\n * ```js\n * f({ x: 100, y: 100});\n * f( 100, 100 );\n * f([ 100, 100 ]);\n * ```\n *\n * Function throws if divisor has 0 for any coordinate (since we can't divide by 0)\n * @param a Divisor point, array of points or x\n * @param b Divisor y value\n * @param c Divisor z value\n * @returns\n */\n//eslint-disable-next-line functional/prefer-readonly-type\nexport function divider(a: Point3d | Point | number | Array<number>, b?: number, c?: number) {\n  const divisor = getPointParameter(a, b, c);\n  guardNonZeroPoint(divisor, `divisor`);\n\n  return (\n    aa: Point3d | Point | number | Array<number>,\n    bb?: number,\n    cc?: number\n  ): Point => {\n    const dividend = getPointParameter(aa, bb, cc);\n\n    return typeof dividend.z === `undefined` ? Object.freeze({\n      x: dividend.x / divisor.x,\n      y: dividend.y / divisor.y,\n    }) : Object.freeze({\n      x: dividend.x / divisor.x,\n      y: dividend.y / divisor.y,\n      z: dividend.z / (divisor.z ?? 1),\n    });\n  };\n}\n","import type { Point } from \"./PointType.js\";\n\n/**\n * Returns point as an array in the form [x,y]. This can be useful for some libraries\n * that expect points in array form.\n *\n * ```\n * const p = {x: 10, y:5};\n * const p2 = toArray(p); // yields [10,5]\n * ```\n * @param p\n * @returns\n */\nexport const toArray = (p: Point): ReadonlyArray<number> => [ p.x, p.y ];\n","import { dotProduct as ArraysDotProduct } from '../../numbers/NumericArrays.js';\nimport type { Point } from './PointType.js';\nimport { toArray } from './ToArray.js';\n\nexport const dotProduct = (...pts: ReadonlyArray<Point>): number => {\n  const a = pts.map(p => toArray(p));\n  return ArraysDotProduct(a);\n};","import type { Point, Point3d } from \"./PointType.js\";\n\nexport function from(x: number, y: number, z: number): Point3d;\nexport function from(x: number, y: number): Point;\nexport function from(arr: [ x: number, y: number, z: number ]): Point3d;\nexport function from(arr: [ x: number, y: number ]): Point;\n\n/**\n * Returns a point from two or three coordinates or an array of [x,y] or [x,y,z].\n * @example\n * ```js\n * let p = from([10, 5]);    // yields {x:10, y:5}\n * let p = from([10, 5, 2]); // yields: {x:10, y:5, z:2}\n * let p = from(10, 5);      // yields {x:10, y:5}\n * let p = from(10, 5, 2);   // yields: {x:10, y:5, z:2}\n * ```\n * @param xOrArray\n * @param [y]\n * @returns Point\n */\nexport function from(\n  xOrArray?: number | ReadonlyArray<number>,\n  y?: number,\n  z?: number\n): Point {\n  if (Array.isArray(xOrArray)) {\n    if (xOrArray.length === 3) {\n      return Object.freeze({\n        x: xOrArray[ 0 ],\n        y: xOrArray[ 1 ],\n        z: xOrArray[ 2 ]\n      });\n    } else if (xOrArray.length === 2) {\n      return Object.freeze({\n        x: xOrArray[ 0 ],\n        y: xOrArray[ 1 ],\n      });\n    } else {\n      throw new Error(`Expected array of length two or three, got ${ xOrArray.length }`);\n    }\n  } else {\n    if (xOrArray === undefined) throw new Error(`Requires an array of [x,y] or x,y parameters at least`)\n    else if (Number.isNaN(xOrArray)) throw new Error(`x is NaN`);\n    if (y === undefined) throw new Error(`Param 'y' is missing`);\n    else if (Number.isNaN(y)) throw new Error(`y is NaN`);\n    if (z === undefined) {\n      return Object.freeze({ x: xOrArray as number, y: y });\n    } else {\n      return Object.freeze({ x: xOrArray as number, y, z })\n    }\n  }\n};\n\n\n/**\n * Returns an array of points from an array of numbers.\n *\n * Array can be a continuous series of x, y values:\n * ```\n * [1,2,3,4] would yield: [{x:1, y:2}, {x:3, y:4}]\n * ```\n *\n * Or it can be an array of arrays:\n * ```\n * [[1,2], [3,4]] would yield: [{x:1, y:2}, {x:3, y:4}]\n * ```\n * @param coords\n * @returns\n */\nexport const fromNumbers = (\n  ...coords: ReadonlyArray<ReadonlyArray<number>> | ReadonlyArray<number>\n): ReadonlyArray<Point> => {\n  const pts: Array<Point> = [];\n\n  if (Array.isArray(coords[ 0 ])) {\n    // [[x,y],[x,y]...]\n    for (const coord of (coords as Array<Array<number>>)) {\n      if (!(coord.length % 2 === 0)) {\n        throw new Error(`coords array should be even-numbered`);\n      }\n      //eslint-disable-next-line  functional/immutable-data\n      pts.push(Object.freeze({ x: coord[ 0 ], y: coord[ 1 ] }));\n    }\n  } else {\n    // [x,y,x,y,x,y]\n    if (coords.length % 2 !== 0) {\n      throw new Error(`Expected even number of elements: [x,y,x,y...]`);\n    }\n\n    for (let index = 0; index < coords.length; index += 2) {\n      //eslint-disable-next-line  functional/immutable-data\n      pts.push(\n        Object.freeze({ x: coords[ index ] as number, y: coords[ index + 1 ] as number })\n      );\n    }\n  }\n  return pts;\n};\n","import { isPoint } from \"../point/Guard.js\";\nimport type { Line, PolyLine } from \"./LineType.js\";\n\n/**\n * Returns true if `p` is a valid line, containing `a` and `b` Points.\n * ```js\n * import { Lines } from 'https://unpkg.com/ixfx/dist/geometry.js'\n * Lines.isLine(l);\n * ```\n * @param p Value to check\n * @returns True if a valid line.\n */\nexport const isLine = (p: any): p is Line => {\n  if (p === undefined) return false;\n  if ((p as Line).a === undefined) return false;\n  if ((p as Line).b === undefined) return false;\n  if (!isPoint((p as Line).a)) return false;\n  if (!isPoint((p as Line).b)) return false;\n  return true;\n};\n\n/**\n * Returns true if `p` is a {@link PolyLine}, ie. an array of {@link Line}s.\n * Validates all items in array.\n * @param p \n * @returns\n */\n//eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport const isPolyLine = (p: any): p is PolyLine => {\n  if (!Array.isArray(p)) return false;\n\n  const valid = !p.some(v => !isLine(v));\n  return valid;\n};\n\n/**\n * Throws an exception if:\n * * line is undefined\n * * a or b parameters are missing\n * \n * Does not validate points\n * @param line \n * @param name \n */\nexport const guard = (line: Line, name = `line`) => {\n  if (line === undefined) throw new Error(`${ name } undefined`);\n  if (line.a === undefined) throw new Error(`${ name }.a undefined. Expected {a:Point, b:Point}. Got: ${ JSON.stringify(line) }`);\n  if (line.b === undefined) throw new Error(`${ name }.b undefined. Expected {a:Point, b:Point} Got: ${ JSON.stringify(line) }`);\n};","import type { Point } from \"../point/PointType.js\";\nimport { isLine } from \"./Guard.js\";\nimport type { Line } from \"./LineType.js\";\nimport { guard as guardPoint } from '../point/Guard.js';\n\n/**\n * Returns [a,b] points from either a line parameter, or two points.\n * It additionally applies the guardPoint function to ensure validity.\n * This supports function overloading.\n * @ignore\n * @param aOrLine \n * @param b \n * @returns \n */\nexport const getPointParameter = (aOrLine: Point | Line, b?: Point): readonly [ Point, Point ] => {\n\n  let a;\n  if (isLine(aOrLine)) {\n    b = aOrLine.b;\n    a = aOrLine.a;\n  } else {\n    a = aOrLine;\n    if (b === undefined) throw new Error(`Since first parameter is not a line, two points are expected. Got a: ${ JSON.stringify(a) } b: ${ JSON.stringify(b) }`);\n  }\n  guardPoint(a, `a`);\n  guardPoint(a, `b`);\n\n  return [ a, b ];\n};","import type { Point } from \"../point/PointType.js\";\nimport { getPointParameter } from \"./GetPointsParameter.js\";\nimport { isPolyLine } from \"./Guard.js\";\nimport type { Line, PolyLine } from \"./LineType.js\";\n\n/**\n * Returns the length between two points\n * ```js\n * import { Lines } from 'https://unpkg.com/ixfx/dist/geometry.js'\n * Lines.length(ptA, ptB);\n * ```\n * @param a First point\n * @param b Second point\n * @returns \n */\nexport function length(a: Point, b: Point): number;\n\n/**\n * Returns length of line. If a polyline (array of lines) is provided,\n * it is the sum total that is returned.\n * \n * ```js\n * import { Lines } from 'https://unpkg.com/ixfx/dist/geometry.js'\n * Lines.length(a: {x:0, y:0}, b: {x: 100, y:100});\n * Lines.length(lines);\n * ```\n * @param line Line\n */\nexport function length(line: Line | PolyLine): number;\n\n/**\n * Returns length of line, polyline or between two points\n * \n * @param aOrLine Point A, line or polyline (array of lines)\n * @param pointB Point B, if first parameter is a point\n * @returns Length (total accumulated length for arrays)\n */\n//eslint-disable-next-line func-style\nexport function length(aOrLine: Point | Line | PolyLine, pointB?: Point): number {\n  if (isPolyLine(aOrLine)) {\n    const sum = aOrLine.reduce((accumulator, v) => length(v) + accumulator, 0);\n    return sum;\n  }\n  if (aOrLine === undefined) throw new TypeError(`Parameter 'aOrLine' is undefined`);\n  const [ a, b ] = getPointParameter(aOrLine, pointB);\n  const x = b.x - a.x;\n  const y = b.y - a.y;\n  if (a.z !== undefined && b.z !== undefined) {\n    const z = b.z - a.z;\n    return Math.hypot(x, y, z);\n  } else {\n    return Math.hypot(x, y);\n  }\n}\n","import { throwNumberTest, throwPercentTest } from \"../../util/GuardNumbers.js\";\nimport type { Point } from \"../point/PointType.js\";\nimport type { Line } from \"./LineType.js\";\nimport { getPointParameter } from \"./GetPointsParameter.js\";\nimport { length } from \"./Length.js\";\n/**\n * Calculates a point in-between `a` and `b`.\n * \n * If an interpolation amount below 0 or above 1 is given, _and_\n * `allowOverflow_ is true, a point will be returned that is extended\n * past `line`. This is useful for easing functions which might\n * briefly go past the limits.\n * \n * ```js\n * import { Lines } from 'https://unpkg.com/ixfx/dist/geometry.js'\n * \n * // Get {x,y} at 50% along line\n * Lines.interpolate(0.5, line);\n * \n * // Get {x,y} at 80% between point A and B\n * Lines.interpolate(0.8, ptA, ptB);\n * ```\n * @param amount Relative position, 0 being at a, 0.5 being halfway, 1 being at b\n * @param a Start\n * @param pointB End\n * @returns Point between a and b\n */\nexport function interpolate(amount: number, a: Point, pointB: Point, allowOverflow?: boolean): Point;\n\n/**\n * Calculates a point in-between `line`'s start and end points.\n * \n * ```js\n * import { Lines } from 'https://unpkg.com/ixfx/dist/geometry.js'\n * \n * // Get {x, y } at 50% along line\n * Lines.interpolate(0.5, line);\n * ```\n * \n * Any additional properties from `b`  are returned on the result as well.\n * @param amount 0..1 \n * @param line Line\n * @param allowOverflow If true, interpolation amount is permitted to exceed 0..1, extending the line\n */\nexport function interpolate(amount: number, line: Line, allowOverflow?: boolean): Point;\n\n/**\n * Calculates a point in-between a line's start and end points.\n * \n * @param amount Interpolation amount\n * @param aOrLine Line, or first point\n * @param pointBOrAllowOverflow Second point (if needed) or allowOverflow.\n * @param allowOverflow If true, interpolation amount is permitted to exceed 0..1, extending the line.\n * @returns \n */\n//eslint-disable-next-line func-style\nexport function interpolate(amount: number, aOrLine: Point | Line, pointBOrAllowOverflow?: Point | boolean, allowOverflow?: boolean): Point {\n\n  if (typeof pointBOrAllowOverflow === `boolean`) {\n    allowOverflow = pointBOrAllowOverflow;\n    pointBOrAllowOverflow = undefined;\n  }\n\n  // eslint-disable-next-line unicorn/no-negated-condition\n  if (!allowOverflow) throwPercentTest(amount, `amount`);\n  else throwNumberTest(amount, ``, `amount`);\n\n  const [ a, b ] = getPointParameter(aOrLine, pointBOrAllowOverflow);\n\n  const d = length(a, b);\n  const d2 = d * (1 - amount);\n\n  // Points are identical, return a copy of b\n  if (d === 0 && d2 === 0) return Object.freeze({ ...b });\n\n  const x = b.x - (d2 * (b.x - a.x) / d);\n  const y = b.y - (d2 * (b.y - a.y) / d);\n\n  return Object.freeze({\n    ...b,\n    x: x,\n    y: y\n  });\n}\n","import type { Point } from \"./PointType.js\";\nimport { interpolate as lineInterpolate } from '../line/Interpolate.js';\n\n/**\n * Returns a relative point between two points\n * ```js\n * interpolate(0.5, a, b); // Halfway point between a and b\n * ```\n *\n * Alias for Lines.interpolate(amount, a, b);\n *\n * @param amount Relative amount, 0-1\n * @param a\n * @param b\n * @param allowOverflow If true, length of line can be exceeded for `amount` of below 0 and above `1`.\n * @returns {@link Point}\n */\nexport const interpolate = (\n  amount: number,\n  a: Point,\n  b: Point,\n  allowOverflow = false\n): Point => lineInterpolate(amount, a, b, allowOverflow); //({x: (1-amt) * a.x + amt * b.x, y:(1-amt) * a.y + amt * b.y });\n","import { isPoint3d } from \"./Guard.js\";\nimport type { Point, Point3d } from \"./PointType.js\";\n\n/**\n * Inverts one or more axis of a point\n * ```js\n * invert({x:10, y:10}); // Yields: {x:-10, y:-10}\n * invert({x:10, y:10}, `x`); // Yields: {x:-10, y:10}\n * ```\n * @param pt Point to invert\n * @param what Which axis. If unspecified, both axies are inverted\n * @returns\n */\nexport const invert = (\n  pt: Point | Point3d,\n  what: `both` | `x` | `y` | `z` = `both`\n): Point => {\n  switch (what) {\n    case `both`: {\n      return isPoint3d(pt) ? Object.freeze({\n        ...pt,\n        x: pt.x * -1,\n        y: pt.y * -1,\n        z: pt.z * -1,\n      }) : Object.freeze({\n        ...pt,\n        x: pt.x * -1,\n        y: pt.y * -1,\n      });\n    }\n    case `x`: {\n      return Object.freeze({\n        ...pt,\n        x: pt.x * -1,\n      });\n    }\n    case `y`: {\n      return Object.freeze({\n        ...pt,\n        y: pt.y * -1,\n      });\n    }\n    case `z`: {\n      if (isPoint3d(pt)) {\n        return Object.freeze({\n          ...pt,\n          z: pt.z * -1,\n        });\n      } else throw new Error(`pt parameter is missing z`);\n    }\n    default: {\n      throw new Error(`Unknown what parameter. Expecting 'both', 'x' or 'y'`);\n    }\n  }\n};","import { getTwoPointParameters } from \"./GetPointParameter.js\";\nimport { guard, isPoint3d } from \"./Guard.js\";\nimport type { Point, Point3d } from \"./PointType.js\";\nimport type { Writeable } from \"../../TsUtil.js\";\n\nexport function multiply(a: Point, b: Point): Point;\nexport function multiply(a: Point3d, b: Point3d): Point3d;\nexport function multiply(a: Point, x: number, y: number): Point;\nexport function multiply(a: Point3d, x: number, y: number, z: number): Point3d;\nexport function multiply(ax: number, ay: number, bx: number, by: number): Point;\nexport function multiply(ax: number, ay: number, az: number, bx: number, by: number, bz: number): Point3d;\n\n/**\n * Returns a Point with the x,y,z values of two points multiply (a/b).\n * \n * `z` parameter is used, if present. Uses a default value of 0 for 'z' when multiplying a 2D point with a 3D one.\n *\n * Examples:\n *\n * ```js\n * multiply(ptA, ptB);\n * multiply(x1, y1, x2, y2);\n * multiply(ptA, x2, y2);\n * ```\n */\nexport function multiply(\n  a1: Point | Point3d | number, ab2: Point | Point3d | number, ab3?: number, ab4?: number, ab5?: number, ab6?: number\n): Point | Point3d {\n  const [ ptA, ptB ] = getTwoPointParameters(a1 as any, ab2 as any, ab3 as any, ab4 as any, ab5 as any, ab6 as any);\n  guard(ptA, `a`);\n  guard(ptB, `b`);\n  let pt: Writeable<Point> = {\n    x: ptA.x * ptB.x,\n    y: ptA.y * ptB.y,\n  };\n  if (isPoint3d(ptA) || isPoint3d(ptB)) {\n    pt.z = (ptA.z ?? 0) * (ptB.z ?? 0);\n  };\n  return Object.freeze(pt);\n};\n\n/**\n * Multiplies all components by `v`.\n * Existing properties of `pt` are maintained.\n *\n * ```js\n * multiplyScalar({ x:2, y:4 }, 2);\n * // Yields: { x:4, y:8 }\n * ```\n * @param pt Point\n * @param v Value to multiply by\n * @returns\n */\nexport const multiplyScalar = (\n  pt: Point | Point3d,\n  v: number\n): Point | Point3d => {\n  return isPoint3d(pt) ? Object.freeze({\n    ...pt,\n    x: pt.x * v,\n    y: pt.y * v,\n    z: pt.z * v,\n  }) : Object.freeze({\n    ...pt,\n    x: pt.x * v,\n    y: pt.y * v,\n  });\n};\n\n","import { distance } from \"./Distance.js\";\nimport { multiply } from \"./Multiply.js\";\nimport type { Point } from \"./PointType.js\";\n\n/**\n * Clamps the magnitude of a point.\n * This is useful when using a Point as a vector, to limit forces.\n * @param pt\n * @param max Maximum magnitude (1 by default)\n * @param min Minimum magnitude (0 by default)\n * @returns\n */\nexport const clampMagnitude = (pt: Point, max = 1, min = 0): Point => {\n  const length = distance(pt);\n  let ratio = 1;\n  if (length > max) {\n    ratio = max / length;\n  } else if (length < min) {\n    ratio = min / length;\n  }\n  return ratio === 1 ? pt : multiply(pt, ratio, ratio);\n};","import { findMinimum } from \"./FindMinimum.js\";\nimport type { Point } from \"./PointType.js\";\n\n/**\n * Returns the left-most of the provided points.\n *\n * Same as:\n * ```js\n * findMinimum((a, b) => {\n *  if (a.x <= b.x) return a;\n *  return b;\n *}, ...points)\n * ```\n *\n * @param points\n * @returns\n */\nexport const leftmost = (...points: ReadonlyArray<Point>): Point =>\n  findMinimum((a, b) => (a.x <= b.x ? a : b), ...points);\n\n/**\n * Returns the right-most of the provided points.\n *\n * Same as:\n * ```js\n * findMinimum((a, b) => {\n *  if (a.x >= b.x) return a;\n *  return b;\n *}, ...points)\n * ```\n *\n * @param points\n * @returns\n */\nexport const rightmost = (...points: ReadonlyArray<Point>): Point =>\n  findMinimum((a, b) => (a.x >= b.x ? a : b), ...points);\n","import { Empty } from \"./Empty.js\";\nimport { getPointParameter } from \"./GetPointParameter.js\";\nimport { isPoint } from \"./Guard.js\";\nimport type { Point } from \"./PointType.js\";\n\nconst length = (ptOrX: Point | number, y?: number): number => {\n  if (isPoint(ptOrX)) {\n    y = ptOrX.y;\n    ptOrX = ptOrX.x;\n  }\n  if (y === undefined) throw new Error(`Expected y`);\n  return Math.hypot(ptOrX, y);\n};\n\n\n\n/**\n * Normalise point as a unit vector.\n *\n * ```js\n * normalise({x:10, y:20});\n * normalise(10, 20);\n * ```\n * @param ptOrX Point, or x value\n * @param y y value if first param is x\n * @returns\n */\nexport const normalise = (ptOrX: Point | number, y?: number): Point => {\n  const pt = getPointParameter(ptOrX, y);\n  const l = length(pt);\n  if (l === 0) return Empty;\n  return Object.freeze({\n    ...pt,\n    x: pt.x / l,\n    y: pt.y / l,\n  });\n};","import { throwNumberTest } from \"../../util/GuardNumbers.js\";\nimport type { Rect } from \"../rect/RectTypes.js\";\nimport { isRect } from \"../rect/Guard.js\";\nimport { isPoint } from \"./Guard.js\";\nimport type { Point } from \"./PointType.js\";\n\n/**\n * Normalises a point by a given width and height\n * @param point Point\n * @param width Width\n * @param height Height\n */\nexport function normaliseByRect(\n  point: Point,\n  width: number,\n  height: number\n): Point;\n\n/**\n * Normalises a point by a given rect's width and height\n * @param pt \n * @param rect \n */\nexport function normaliseByRect(pt: Point, rect: Rect): Point;\n\n/**\n * Normalises x,y by width and height so it is on a 0..1 scale\n * @param x\n * @param y\n * @param width\n * @param height\n */\nexport function normaliseByRect(\n  x: number,\n  y: number,\n  width: number,\n  height: number\n): Point;\n\n/**\n * Normalises a point so it is on a 0..1 scale\n * @param a Point, or x\n * @param b y coord or width\n * @param c height or width\n * @param d height\n * @returns Point\n */\nexport function normaliseByRect(\n  a: Point | number,\n  b: number | Rect,\n  c?: number,\n  d?: number\n): Point {\n  // ✔️ Unit tested\n  if (isPoint(a)) {\n    if (typeof b === `number` && c !== undefined) {\n      throwNumberTest(b, `positive`, `width`);\n      throwNumberTest(c, `positive`, `height`);\n    } else {\n      if (!isRect(b)) {\n        throw new Error(`Expected second parameter to be a rect`);\n      }\n      c = b.height;\n      b = b.width;\n    }\n    return Object.freeze({\n      x: a.x / b,\n      y: a.y / c,\n    });\n  } else {\n    throwNumberTest(a, `positive`, `x`);\n    if (typeof b !== `number`) {\n      throw new TypeError(`Expecting second parameter to be a number (width)`);\n    }\n    if (typeof c !== `number`) {\n      throw new TypeError(`Expecting third parameter to be a number (height)`);\n    }\n\n    throwNumberTest(b, `positive`, `y`);\n    throwNumberTest(c, `positive`, `width`);\n    if (d === undefined) throw new Error(`Expected height parameter`);\n    throwNumberTest(d, `positive`, `height`);\n    return Object.freeze({\n      x: a / c,\n      y: b / d,\n    });\n  }\n}","import type { Point } from \"./PointType.js\";\n\n/**\n * Runs a sequential series of functions on `pt`. The output from one feeding into the next.\n * ```js\n * const p = Points.pipelineApply(somePoint, Points.normalise, Points.invert);\n * ```\n *\n * If you want to make a reusable pipeline of functions, consider {@link pipeline} instead.\n * @param point\n * @param pipelineFns\n * @returns\n */\nexport const pipelineApply = (\n  point: Point,\n  ...pipelineFns: ReadonlyArray<(pt: Point) => Point>\n): Point => pipeline(...pipelineFns)(point); // pipeline.reduce((prev, curr) => curr(prev), pt);\n\n/**\n * Returns a pipeline function that takes a point to be transformed through a series of functions\n * ```js\n * // Create pipeline\n * const p = Points.pipeline(Points.normalise, Points.invert);\n *\n * // Now run it on `somePoint`.\n * // First we normalised, and then invert\n * const changedPoint = p(somePoint);\n * ```\n *\n * If you don't want to create a pipeline, use {@link pipelineApply}.\n * @param pipeline Pipeline of functions\n * @returns\n */\nexport const pipeline =\n  (...pipeline: ReadonlyArray<(pt: Point) => Point>) =>\n    (pt: Point) =>\n      // eslint-disable-next-line unicorn/no-array-reduce\n      pipeline.reduce((previous, current) => current(previous), pt);\n","\nimport { isPoint3d } from \"./Guard.js\";\nimport type { Point3d, Point } from \"./PointType.js\";\nimport { subtract } from \"./Subtract.js\";\n\n/**\n * Computes the progress between two waypoints, given `position`.\n * \n * [Source](https://www.habrador.com/tutorials/math/2-passed-waypoint/?s=09)\n * @param position Current position\n * @param waypointA Start\n * @param waypointB End\n * @returns \n */\nexport const progressBetween = (\n  position: Point | Point3d,\n  waypointA: Point | Point3d,\n  waypointB: Point | Point3d\n) => {\n  // Via: https://www.habrador.com/tutorials/math/2-passed-waypoint/?s=09\n  // from -> current\n  const a = subtract(position, waypointA);\n\n  // from -> to\n  const b = subtract(waypointB, waypointA);\n\n  return isPoint3d(a) && isPoint3d(b) ? (\n    (a.x * b.x + a.y * b.y + a.z * b.z) / (b.x * b.x + b.y * b.y + b.z * b.z)\n  ) : (a.x * b.x + a.y * b.y) / (b.x * b.x + b.y * b.y);\n};","import type { Point } from \"./PointType.js\";\n\n/**\n * Project `origin` by `distance` and `angle` (radians).\n *\n * To figure out rotation, imagine a horizontal line running through `origin`.\n * * Rotation = 0 deg puts the point on the right of origin, on same y-axis\n * * Rotation = 90 deg/3:00 puts the point below origin, on the same x-axis\n * * Rotation = 180 deg/6:00 puts the point on the left of origin on the same y-axis\n * * Rotation = 270 deg/12:00 puts the point above the origin, on the same x-axis\n *\n * ```js\n * // Yields a point 100 units away from 10,20 with 10 degrees rotation (ie slightly down)\n * const a = Points.project({x:10, y:20}, 100, degreeToRadian(10));\n * ```\n * @param origin\n * @param distance\n * @param angle\n * @returns\n */\nexport const project = (origin: Point, distance: number, angle: number) => {\n  const x = Math.cos(angle) * distance + origin.x;\n  const y = Math.sin(angle) * distance + origin.y;\n  return { x, y };\n};","import { quantiseEvery as quantiseEveryNumber } from '../../numbers/Quantise.js';\nimport { guard, isPoint3d } from './Guard.js';\nimport type { Point, Point3d } from './PointType.js';\n\nexport function quantiseEvery(pt: Point3d, snap: Point3d, middleRoundsUp?: boolean): Point3d;\nexport function quantiseEvery(pt: Point, snap: Point, middleRoundsUp?: boolean): Point;\n\n/**\n * Quantises a point.\n * @param pt \n * @param snap \n * @param middleRoundsUp \n * @returns \n */\nexport function quantiseEvery(pt: Point, snap: Point, middleRoundsUp = true): Point {\n  guard(pt, `pt`);\n  guard(snap, `snap`);\n  if (isPoint3d(pt)) {\n    if (!isPoint3d(snap)) throw new TypeError(`Param 'snap' is missing 'z' field`);\n    return Object.freeze({\n      x: quantiseEveryNumber(pt.x, snap.x, middleRoundsUp),\n      y: quantiseEveryNumber(pt.y, snap.y, middleRoundsUp),\n      z: quantiseEveryNumber(pt.z, snap.z, middleRoundsUp)\n    });\n  }\n\n  return Object.freeze({\n    x: quantiseEveryNumber(pt.x, snap.x, middleRoundsUp),\n    y: quantiseEveryNumber(pt.y, snap.y, middleRoundsUp),\n  });\n}","import { type RandomSource, defaultRandom } from '../../random/Types.js';\nimport type { Point, Point3d } from './PointType.js';\n\n/**\n * Returns a random 2D point on a 0..1 scale.\n * ```js\n * import { Points } from \"https://unpkg.com/ixfx/dist/geometry.js\";\n * const pt = Points.random(); // eg {x: 0.2549012, y:0.859301}\n * ```\n *\n * A custom source of randomness can be provided:\n * ```js\n * import { Points } from \"https://unpkg.com/ixfx/dist/geometry.js\";\n * import { weightedSource } from \"https://unpkg.com/ixfx/dist/random.js\"\n * const pt = Points.random(weightedSource(`quadIn`));\n * ```\n * @param rando\n * @returns\n */\nexport const random = (rando?: RandomSource): Point => {\n  if (rando === undefined) rando = defaultRandom;\n\n  return Object.freeze({\n    x: rando(),\n    y: rando(),\n  });\n};\n\n/**\n * Returns a random 3D point on a 0..1 scale.\n * ```js\n * import { Points } from \"https://unpkg.com/ixfx/dist/geometry.js\";\n * const pt = Points.random(); // eg {x: 0.2549012, y:0.859301}\n * ```\n *\n * A custom source of randomness can be provided:\n * ```js\n * import { Points } from \"https://unpkg.com/ixfx/dist/geometry.js\";\n * import { weightedSource } from \"https://unpkg.com/ixfx/dist/random.js\"\n * const pt = Points.random(weightedSource(`quadIn`));\n * ```\n * @param rando\n * @returns\n */\nexport const random3d = (rando?: RandomSource): Point3d => {\n  if (rando === undefined) rando = defaultRandom;\n\n  return Object.freeze({\n    x: rando(),\n    y: rando(),\n    z: rando()\n  });\n};","import type { Point } from \"./PointType.js\";\n\n/**\n * Reduces over points, treating _x_ and _y_ separately.\n *\n * ```\n * // Sum x and y values\n * const total = Points.reduce(points, (p, acc) => {\n *  return {x: p.x + acc.x, y: p.y + acc.y}\n * });\n * ```\n * @param pts Points to reduce\n * @param fn Reducer\n * @param initial Initial value, uses `{ x:0, y:0 }` by default\n * @returns\n */\nexport const reduce = (\n  pts: ReadonlyArray<Point>,\n  fn: (p: Point, accumulated: Point) => Point,\n  initial?: Point\n): Point => {\n  if (initial === undefined) initial = { x: 0, y: 0 }\n  let accumulator = initial;\n  for (const p of pts) {\n    accumulator = fn(p, accumulator);\n  };\n  return accumulator;\n};","import { angleRadian } from \"./Angle.js\";\nimport { centroid } from \"./Centroid.js\";\nimport { distance } from \"./Distance.js\";\nimport { getPointParameter } from \"./GetPointParameter.js\";\nimport type { PointRelation } from \"./PointRelationTypes.js\";\nimport type { Point } from \"./PointType.js\";\n\n/**\n * Tracks the relation between two points.\n * \n * 1. Call `Points.relation` with the initial reference point\n * 2. You get back a function\n * 3. Call the function with a new point to compute relational information.\n * \n * It computes angle, average, centroid, distance and speed.\n * \n * ```js\n * import { Points } from \"https://unpkg.com/ixfx/dist/geometry.js\";\n *\n * // Reference point: 50,50\n * const t = Points.relation({x:50,y:50}); // t is a function\n *\n * // Invoke the returned function with a point\n * const relation = t({ x:0, y:0 }); // Juicy relational data\n * ```\n * \n * Or with destructuring:\n * \n * ```js\n * const { angle, distanceFromStart, distanceFromLast, average, centroid, speed } = t({ x:0,y:0 });\n * ```\n *\n * x & y coordinates can also be used as parameters:\n * ```js\n * const t = Points.relation(50, 50);\n * const result = t(0, 0);\n * // result.speed, result.angle ...\n * ```\n *\n * Note that intermediate values are not stored. It keeps the initial\n * and most-recent point. If you want to compute something over a set\n * of prior points, you may want to use {@link Trackers.points}\n * @param a Initial point, or x value\n * @param b y value, if first option is a number.\n * @returns\n */\nexport const relation = (a: Point | number, b?: number): PointRelation => {\n  const start = getPointParameter(a, b);\n  let totalX = 0;\n  let totalY = 0;\n  let count = 0;\n  let lastUpdate = performance.now();\n  let lastPoint = start;\n  const update = (aa: Point | number, bb?: number) => {\n    const p = getPointParameter(aa, bb);\n    totalX += p.x;\n    totalY += p.y;\n    count++;\n\n    const distanceFromStart = distance(p, start);\n    const distanceFromLast = distance(p, lastPoint);\n\n    // Track speed\n    const now = performance.now();\n    const speed = distanceFromLast / (now - lastUpdate);\n    lastUpdate = now;\n\n    lastPoint = p;\n\n    return Object.freeze({\n      angle: angleRadian(p, start),\n      distanceFromStart,\n      distanceFromLast,\n      speed,\n      centroid: centroid(p, start),\n      average: {\n        x: totalX / count,\n        y: totalY / count,\n      },\n    });\n  };\n\n  return update;\n};\n\n","import { throwNumberTest } from \"../../util/GuardNumbers.js\";\nimport type { Point } from \"./PointType.js\";\nimport { guard } from \"./Guard.js\";\nimport { fromCartesian as PolarFromCartesian } from \"../Polar.js\";\nimport { rotate as PolarRotate, toCartesian as PolarToCartesian } from \"../Polar.js\";\n/**\n * Rotate a single point by a given amount in radians\n * @param pt\n * @param amountRadian\n * @param origin\n */\nexport function rotate(pt: Point, amountRadian: number, origin?: Point): Point;\n\n/**\n * Rotate several points by a given amount in radians\n * @param pt Points\n * @param amountRadian Amount to rotate in radians. If 0 is given, a copy of the input array is returned\n * @param origin Origin to rotate around. Defaults to 0,0\n */\nexport function rotate(\n  pt: ReadonlyArray<Point>,\n  amountRadian: number,\n  origin?: Point\n): ReadonlyArray<Point>;\n\nexport function rotate(\n  pt: Point | ReadonlyArray<Point>,\n  amountRadian: number,\n  origin?: Point\n): Point | ReadonlyArray<Point> {\n  if (origin === undefined) origin = { x: 0, y: 0 };\n  guard(origin, `origin`);\n  throwNumberTest(amountRadian, ``, `amountRadian`);\n  const arrayInput = Array.isArray(pt);\n\n  // no-op\n  if (amountRadian === 0) return pt;\n\n  if (!arrayInput) {\n    pt = [ pt as Point ];\n  }\n\n  const ptAr = pt as ReadonlyArray<Point>;\n  for (const [ index, p ] of ptAr.entries()) guard(p, `pt[${ index }]`);\n\n  const asPolar = ptAr.map((p) => PolarFromCartesian(p, origin));\n  const rotated = asPolar.map((p) => PolarRotate(p, amountRadian));\n  const asCartesisan = rotated.map((p) => PolarToCartesian(p, origin));\n  return arrayInput ? asCartesisan : asCartesisan[ 0 ];\n}","\n//eslint-disable-next-line functional/prefer-readonly-type\nexport const rotatePointArray = (\n  v: ReadonlyArray<ReadonlyArray<number>>,\n  amountRadian: number\n): Array<Array<number>> => {\n  const mat = [\n    [ Math.cos(amountRadian), -Math.sin(amountRadian) ],\n    [ Math.sin(amountRadian), Math.cos(amountRadian) ],\n  ];\n  const result = [];\n  for (const [ index, element ] of v.entries()) {\n    //eslint-disable-next-line functional/immutable-data\n    result[ index ] = [\n      mat[ 0 ][ 0 ] * element[ 0 ] + mat[ 0 ][ 1 ] * element[ 1 ],\n      mat[ 1 ][ 0 ] * element[ 0 ] + mat[ 1 ][ 1 ] * element[ 1 ],\n    ];\n  }\n  return result;\n};","import { round as roundNumber } from '../../numbers/Round.js';\nimport { getPointParameter } from './GetPointParameter.js';\nimport type { Point } from './PointType.js';\n\n/**\n * Round the point's _x_ and _y_ to given number of digits\n * @param ptOrX \n * @param yOrDigits \n * @param digits \n * @returns \n */\nexport const round = (ptOrX: Point | number, yOrDigits?: number, digits?: number): Point => {\n  const pt = getPointParameter(ptOrX, yOrDigits);\n  digits = digits ?? yOrDigits;\n  digits = digits ?? 2;\n  return Object.freeze({\n    ...pt,\n    x: roundNumber(digits, pt.x),\n    y: roundNumber(digits, pt.y)\n  })\n}","import { guard } from \"./Guard.js\";\nimport type { Point, Point3d } from \"./PointType.js\";\n\n/**\n * Returns a point with rounded x,y coordinates. By default uses `Math.round` to round.\n * ```js\n * toIntegerValues({x:1.234, y:5.567}); // Yields: {x:1, y:6}\n * ```\n *\n * ```js\n * toIntegerValues(pt, Math.ceil); // Use Math.ceil to round x,y of `pt`.\n * ```\n * @param pt Point to round\n * @param rounder Rounding function, or Math.round by default\n * @returns\n */\nexport const toIntegerValues = (\n  pt: Point,\n  rounder: (x: number) => number = Math.round\n): Point => {\n  guard(pt, `pt`);\n  return Object.freeze({\n    x: rounder(pt.x),\n    y: rounder(pt.y),\n  });\n};\n\n/**\n * Returns a copy of `pt` with `z` field omitted.\n * If it didn't have one to begin within, a copy is still returned.\n * @param pt \n * @returns \n */\nexport const to2d = (pt: Point): Point => {\n  guard(pt, `pt`);\n  let copy = {\n    ...pt\n  };\n  delete copy.z;\n  return Object.freeze(copy);\n}\n\n/**\n * Returns a copy of `pt` with a `z` field set.\n * Defaults to a z value of 0.\n * @param pt Point\n * @param z Z-value, defaults to 0\n * @returns \n */\nexport const to3d = (pt: Point, z: number = 0): Point3d => {\n  guard(pt, `pt`);\n  return Object.freeze({\n    ...pt,\n    z\n  });\n}\n\n/**\n * Returns a human-friendly string representation `(x, y)`.\n * If `precision` is supplied, this will be the number of significant digits.\n * @param p\n * @returns\n */\nexport function toString(p: Point, digits?: number): string {\n  if (p === undefined) return `(undefined)`;\n  if (p === null) return `(null)`;\n  guard(p, `pt`);\n\n  const x = digits ? p.x.toFixed(digits) : p.x;\n  const y = digits ? p.y.toFixed(digits) : p.y;\n\n  if (p.z === undefined) {\n    return `(${ x },${ y })`;\n  } else {\n    const z = digits ? p.z.toFixed(digits) : p.z;\n    return `(${ x },${ y },${ z })`;\n  }\n}","import { throwNumberTest } from \"../../util/GuardNumbers.js\";\nimport type { Point } from \"./PointType.js\";\nimport { guard } from \"./Guard.js\";\n\n/**\n * Returns true if two points are within a specified range on both axes.\n * \n * Provide a point for the range to set different x/y range, or pass a number\n * to use the same range for both axis.\n *\n * Note this simply compares x,y values it does not calcuate distance.\n *\n * @example\n * ```js\n * withinRange({x:100,y:100}, {x:101, y:101}, 1); // True\n * withinRange({x:100,y:100}, {x:105, y:101}, {x:5, y:1}); // True\n * withinRange({x:100,y:100}, {x:105, y:105}, {x:5, y:1}); // False - y axis too far\n * ```\n * @param a\n * @param b\n * @param maxRange\n * @returns\n */\nexport const withinRange = (\n  a: Point,\n  b: Point,\n  maxRange: Point | number\n): boolean => {\n  guard(a, `a`);\n  guard(b, `b`);\n\n  if (typeof maxRange === `number`) {\n    throwNumberTest(maxRange, `positive`, `maxRange`);\n    maxRange = { x: maxRange, y: maxRange };\n  } else {\n    guard(maxRange, `maxRange`);\n  }\n  const x = Math.abs(b.x - a.x);\n  const y = Math.abs(b.y - a.y);\n  return x <= maxRange.x && y <= maxRange.y;\n};","import { wrap as wrapNumber } from '../../numbers/Wrap.js';\nimport { guard } from './Guard.js';\nimport type { Point } from \"./PointType.js\";\n\n/**\n * Wraps a point to be within `ptMin` and `ptMax`.\n * Note that max values are _exclusive_, meaning the return value will always be one less.\n *\n * Eg, if a view port is 100x100 pixels, wrapping the point 150,100 yields 50,99.\n *\n * ```js\n * // Wraps 150,100 to on 0,0 -100,100 range\n * wrap({x:150,y:100}, {x:100,y:100});\n * ```\n *\n * Wrap normalised point:\n * ```js\n * wrap({x:1.2, y:1.5}); // Yields: {x:0.2, y:0.5}\n * ```\n * @param pt Point to wrap\n * @param ptMax Maximum value, or `{ x:1, y:1 }` by default\n * @param ptMin Minimum value, or `{ x:0, y:0 }` by default\n * @returns Wrapped point\n */\nexport const wrap = (\n  pt: Point,\n  ptMax?: Point,\n  ptMin?: Point\n): Point => {\n\n  if (ptMax === undefined) ptMax = { x: 1, y: 1 };\n  if (ptMin === undefined) ptMin = { x: 0, y: 0 };\n\n  // ✔️ Unit tested\n  guard(pt, `pt`);\n  guard(ptMax, `ptMax`);\n  guard(ptMin, `ptMin`);\n\n  return Object.freeze({\n    x: wrapNumber(pt.x, ptMin.x, ptMax.x),\n    y: wrapNumber(pt.y, ptMin.y, ptMax.y),\n  });\n};\n","import { Bezier as BezierLibrary } from 'bezier-js';\nimport { interpolate as LinesInterpolate } from '../line/Interpolate.js';\nimport { fromTopLeft as RectsFromTopLeft } from '../rect/FromTopLeft.js';\nimport type { Point } from '../point/PointType.js';\nimport type { CubicBezier, CubicBezierPath, QuadraticBezier, QuadraticBezierPath } from './BezierType.js';\nimport { isCubicBezier, isQuadraticBezier } from './Guard.js';\nimport { to2d } from '../point/To.js';\nexport * from './BezierType.js';\nexport * from './Guard.js';\n/**\n * Returns a new quadratic bezier with specified bend amount\n *\n * @param {QuadraticBezier} b Curve\n * @param {number} [bend=0] Bend amount, from -1 to 1\n * @returns {QuadraticBezier}\n */\nexport const quadraticBend = (a: Point, b: Point, bend = 0): QuadraticBezier => quadraticSimple(a, b, bend);\n\n/**\n * Creates a simple quadratic bezier with a specified amount of 'bend'.\n * Bend of -1 will pull curve down, 1 will pull curve up. 0 is no curve.\n * \n * Use {@link interpolator} to calculate a point along the curve.\n * @param {Point} start Start of curve\n * @param {Point} end End of curve\n * @param {number} [bend=0] Bend amount, -1 to 1\n * @returns {QuadraticBezier}\n */\nexport const quadraticSimple = (start: Point, end: Point, bend = 0): QuadraticBezier => {\n  if (Number.isNaN(bend)) throw new Error(`bend is NaN`);\n  if (bend < -1 || bend > 1) throw new Error(`Expects bend range of -1 to 1`);\n\n  const middle = LinesInterpolate(0.5, start, end);\n  // eslint-disable-next-line functional/no-let\n  let target = middle;\n  if (end.y < start.y) {\n    // Upward slope\n    target = bend > 0 ? { x: Math.min(start.x, end.x), y: Math.min(start.y, end.y) } :\n      { x: Math.max(start.x, end.x), y: Math.max(start.y, end.y) };\n  } else {\n    // Downward slope\n    target = bend > 0 ? { x: Math.max(start.x, end.x), y: Math.min(start.y, end.y) } :\n      { x: Math.min(start.x, end.x), y: Math.max(start.y, end.y) };\n  }\n\n  const handle = LinesInterpolate(Math.abs(bend), middle, target,);\n  return quadratic(start, end, handle);\n};\n\n/**\n * Returns a relative point on a simple quadratic \n * @param start Start\n * @param end  End\n * @param bend Bend (-1 to 1)\n * @param amt Amount\n * @returns Point\n */\n// export const computeQuadraticSimple = (start: Point, end: Point, bend: number, amt: number): Point => {\n//   const q = quadraticSimple(start, end, bend);\n//   const bzr = new BezierLibrary(q.a, q.quadratic, q.b);\n//   return bzr.compute(amt);\n// };\n\n/**\n * Interpolate cubic or quadratic bezier\n * ```js\n * const i = interpolator(myBezier);\n * \n * // Get point at 50%\n * i(0.5); // { x, y }\n * ```\n * @param q \n * @returns \n */\nexport const interpolator = (q: QuadraticBezier | CubicBezier): (amount: number) => Point => {\n  //console.log(q);\n  //if (isCubicBezier(q)) console.log(`is cubic`);\n  //const bzr = isCubicBezier(q) ? new BezierLibrary(to2d(q.a), to2d(q.cubic1), to2d(q.cubic2), to2d(q.b)) : new BezierLibrary(q.a, q.quadratic, q.b);\n  const bzr = isCubicBezier(q) ?\n    new BezierLibrary(q.a.x, q.a.y, q.cubic1.x, q.cubic1.y, q.cubic2.x, q.cubic2.y, q.b.x, q.b.y) :\n    new BezierLibrary(q.a, q.quadratic, q.b);\n\n  return (amount: number) => bzr.compute(amount);\n};\n\n//https://developer.mozilla.org/en-US/docs/Web/SVG/Tutorial/Paths\nexport const quadraticToSvgString = (start: Point, end: Point, handle: Point): ReadonlyArray<string> => [ `M ${ start.x } ${ start.y } Q ${ handle.x } ${ handle.y } ${ end.x } ${ end.y }` ];\n\nexport const toPath = (cubicOrQuadratic: CubicBezier | QuadraticBezier): CubicBezierPath | QuadraticBezierPath => {\n  if (isCubicBezier(cubicOrQuadratic)) {\n    return cubicToPath(cubicOrQuadratic);\n  } else if (isQuadraticBezier(cubicOrQuadratic)) {\n    return quadratictoPath(cubicOrQuadratic);\n  } else {\n    throw new Error(`Unknown bezier type`);\n  }\n};\n\nexport const cubic = (start: Point, end: Point, cubic1: Point, cubic2: Point): CubicBezier => (\n  {\n    a: Object.freeze(start),\n    b: Object.freeze(end),\n    cubic1: Object.freeze(cubic1),\n    cubic2: Object.freeze(cubic2)\n  });\n\nconst cubicToPath = (cubic: CubicBezier): CubicBezierPath => {\n  const { a, cubic1, cubic2, b } = cubic;\n\n  const bzr = new BezierLibrary(a, cubic1, cubic2, b);\n  return Object.freeze({\n    ...cubic,\n    length: () => bzr.length(),\n    interpolate: (t: number) => bzr.compute(t),\n    nearest: (_: Point) => { throw new Error(`not implemented`); },\n    bbox: () => {\n      const { x, y } = bzr.bbox();\n      const xSize = x.size;\n      const ySize = y.size;\n      if (xSize === undefined) throw new Error(`x.size not present on calculated bbox`);\n      if (ySize === undefined) throw new Error(`x.size not present on calculated bbox`);\n\n      return RectsFromTopLeft({ x: x.min, y: y.min }, xSize, ySize);\n    },\n    relativePosition: (_point: Point, _intersectionThreshold: number) => {\n      throw new Error(`Not implemented`);\n    },\n    distanceToPoint: (_point: Point): number => {\n      throw new Error(`Not implemented`);\n    },\n    toSvgString: () => [ `brrup` ],\n    kind: `bezier/cubic`\n  });\n};\n\nexport const quadratic = (start: Point, end: Point, handle: Point): QuadraticBezier => ({\n  a: Object.freeze(start),\n  b: Object.freeze(end),\n  quadratic: Object.freeze(handle)\n});\n\n\nconst quadratictoPath = (quadraticBezier: QuadraticBezier): QuadraticBezierPath => {\n  const { a, b, quadratic } = quadraticBezier;\n  const bzr = new BezierLibrary(a, quadratic, b);\n  return Object.freeze({\n    ...quadraticBezier,\n    length: () => bzr.length(),\n    interpolate: (t: number) => bzr.compute(t),\n    nearest: (_: Point) => { throw new Error(`not implemented`); },\n    bbox: () => {\n      const { x, y } = bzr.bbox();\n      const xSize = x.size;\n      const ySize = y.size;\n      if (xSize === undefined) throw new Error(`x.size not present on calculated bbox`);\n      if (ySize === undefined) throw new Error(`x.size not present on calculated bbox`);\n      return RectsFromTopLeft({ x: x.min, y: y.min }, xSize, ySize);\n    },\n    distanceToPoint: (_point: Point): number => {\n      throw new Error(`Not implemented`);\n\n    },\n    relativePosition: (_point: Point, _intersectionThreshold: number): number => {\n      throw new Error(`Not implemented`);\n\n    },\n    toString: () => bzr.toString(),\n    toSvgString: () => quadraticToSvgString(a, b, quadratic),\n    kind: `bezier/quadratic`\n  });\n};\n\n","import { Bezier } from \"./bezier.js\";\n\n// math-inlining.\nconst { abs, cos, sin, acos, atan2, sqrt, pow } = Math;\n\n// cube root function yielding real roots\nfunction crt(v) {\n  return v < 0 ? -pow(-v, 1 / 3) : pow(v, 1 / 3);\n}\n\n// trig constants\nconst pi = Math.PI,\n  tau = 2 * pi,\n  quart = pi / 2,\n  // float precision significant decimal\n  epsilon = 0.000001,\n  // extremas used in bbox calculation and similar algorithms\n  nMax = Number.MAX_SAFE_INTEGER || 9007199254740991,\n  nMin = Number.MIN_SAFE_INTEGER || -9007199254740991,\n  // a zero coordinate, which is surprisingly useful\n  ZERO = { x: 0, y: 0, z: 0 };\n\n// Bezier utility functions\nconst utils = {\n  // Legendre-Gauss abscissae with n=24 (x_i values, defined at i=n as the roots of the nth order Legendre polynomial Pn(x))\n  Tvalues: [\n    -0.0640568928626056260850430826247450385909,\n    0.0640568928626056260850430826247450385909,\n    -0.1911188674736163091586398207570696318404,\n    0.1911188674736163091586398207570696318404,\n    -0.3150426796961633743867932913198102407864,\n    0.3150426796961633743867932913198102407864,\n    -0.4337935076260451384870842319133497124524,\n    0.4337935076260451384870842319133497124524,\n    -0.5454214713888395356583756172183723700107,\n    0.5454214713888395356583756172183723700107,\n    -0.6480936519369755692524957869107476266696,\n    0.6480936519369755692524957869107476266696,\n    -0.7401241915785543642438281030999784255232,\n    0.7401241915785543642438281030999784255232,\n    -0.8200019859739029219539498726697452080761,\n    0.8200019859739029219539498726697452080761,\n    -0.8864155270044010342131543419821967550873,\n    0.8864155270044010342131543419821967550873,\n    -0.9382745520027327585236490017087214496548,\n    0.9382745520027327585236490017087214496548,\n    -0.9747285559713094981983919930081690617411,\n    0.9747285559713094981983919930081690617411,\n    -0.9951872199970213601799974097007368118745,\n    0.9951872199970213601799974097007368118745,\n  ],\n\n  // Legendre-Gauss weights with n=24 (w_i values, defined by a function linked to in the Bezier primer article)\n  Cvalues: [\n    0.1279381953467521569740561652246953718517,\n    0.1279381953467521569740561652246953718517,\n    0.1258374563468282961213753825111836887264,\n    0.1258374563468282961213753825111836887264,\n    0.121670472927803391204463153476262425607,\n    0.121670472927803391204463153476262425607,\n    0.1155056680537256013533444839067835598622,\n    0.1155056680537256013533444839067835598622,\n    0.1074442701159656347825773424466062227946,\n    0.1074442701159656347825773424466062227946,\n    0.0976186521041138882698806644642471544279,\n    0.0976186521041138882698806644642471544279,\n    0.086190161531953275917185202983742667185,\n    0.086190161531953275917185202983742667185,\n    0.0733464814110803057340336152531165181193,\n    0.0733464814110803057340336152531165181193,\n    0.0592985849154367807463677585001085845412,\n    0.0592985849154367807463677585001085845412,\n    0.0442774388174198061686027482113382288593,\n    0.0442774388174198061686027482113382288593,\n    0.0285313886289336631813078159518782864491,\n    0.0285313886289336631813078159518782864491,\n    0.0123412297999871995468056670700372915759,\n    0.0123412297999871995468056670700372915759,\n  ],\n\n  arcfn: function (t, derivativeFn) {\n    const d = derivativeFn(t);\n    let l = d.x * d.x + d.y * d.y;\n    if (typeof d.z !== \"undefined\") {\n      l += d.z * d.z;\n    }\n    return sqrt(l);\n  },\n\n  compute: function (t, points, _3d) {\n    // shortcuts\n    if (t === 0) {\n      points[0].t = 0;\n      return points[0];\n    }\n\n    const order = points.length - 1;\n\n    if (t === 1) {\n      points[order].t = 1;\n      return points[order];\n    }\n\n    const mt = 1 - t;\n    let p = points;\n\n    // constant?\n    if (order === 0) {\n      points[0].t = t;\n      return points[0];\n    }\n\n    // linear?\n    if (order === 1) {\n      const ret = {\n        x: mt * p[0].x + t * p[1].x,\n        y: mt * p[0].y + t * p[1].y,\n        t: t,\n      };\n      if (_3d) {\n        ret.z = mt * p[0].z + t * p[1].z;\n      }\n      return ret;\n    }\n\n    // quadratic/cubic curve?\n    if (order < 4) {\n      let mt2 = mt * mt,\n        t2 = t * t,\n        a,\n        b,\n        c,\n        d = 0;\n      if (order === 2) {\n        p = [p[0], p[1], p[2], ZERO];\n        a = mt2;\n        b = mt * t * 2;\n        c = t2;\n      } else if (order === 3) {\n        a = mt2 * mt;\n        b = mt2 * t * 3;\n        c = mt * t2 * 3;\n        d = t * t2;\n      }\n      const ret = {\n        x: a * p[0].x + b * p[1].x + c * p[2].x + d * p[3].x,\n        y: a * p[0].y + b * p[1].y + c * p[2].y + d * p[3].y,\n        t: t,\n      };\n      if (_3d) {\n        ret.z = a * p[0].z + b * p[1].z + c * p[2].z + d * p[3].z;\n      }\n      return ret;\n    }\n\n    // higher order curves: use de Casteljau's computation\n    const dCpts = JSON.parse(JSON.stringify(points));\n    while (dCpts.length > 1) {\n      for (let i = 0; i < dCpts.length - 1; i++) {\n        dCpts[i] = {\n          x: dCpts[i].x + (dCpts[i + 1].x - dCpts[i].x) * t,\n          y: dCpts[i].y + (dCpts[i + 1].y - dCpts[i].y) * t,\n        };\n        if (typeof dCpts[i].z !== \"undefined\") {\n          dCpts[i].z = dCpts[i].z + (dCpts[i + 1].z - dCpts[i].z) * t;\n        }\n      }\n      dCpts.splice(dCpts.length - 1, 1);\n    }\n    dCpts[0].t = t;\n    return dCpts[0];\n  },\n\n  computeWithRatios: function (t, points, ratios, _3d) {\n    const mt = 1 - t,\n      r = ratios,\n      p = points;\n\n    let f1 = r[0],\n      f2 = r[1],\n      f3 = r[2],\n      f4 = r[3],\n      d;\n\n    // spec for linear\n    f1 *= mt;\n    f2 *= t;\n\n    if (p.length === 2) {\n      d = f1 + f2;\n      return {\n        x: (f1 * p[0].x + f2 * p[1].x) / d,\n        y: (f1 * p[0].y + f2 * p[1].y) / d,\n        z: !_3d ? false : (f1 * p[0].z + f2 * p[1].z) / d,\n        t: t,\n      };\n    }\n\n    // upgrade to quadratic\n    f1 *= mt;\n    f2 *= 2 * mt;\n    f3 *= t * t;\n\n    if (p.length === 3) {\n      d = f1 + f2 + f3;\n      return {\n        x: (f1 * p[0].x + f2 * p[1].x + f3 * p[2].x) / d,\n        y: (f1 * p[0].y + f2 * p[1].y + f3 * p[2].y) / d,\n        z: !_3d ? false : (f1 * p[0].z + f2 * p[1].z + f3 * p[2].z) / d,\n        t: t,\n      };\n    }\n\n    // upgrade to cubic\n    f1 *= mt;\n    f2 *= 1.5 * mt;\n    f3 *= 3 * mt;\n    f4 *= t * t * t;\n\n    if (p.length === 4) {\n      d = f1 + f2 + f3 + f4;\n      return {\n        x: (f1 * p[0].x + f2 * p[1].x + f3 * p[2].x + f4 * p[3].x) / d,\n        y: (f1 * p[0].y + f2 * p[1].y + f3 * p[2].y + f4 * p[3].y) / d,\n        z: !_3d\n          ? false\n          : (f1 * p[0].z + f2 * p[1].z + f3 * p[2].z + f4 * p[3].z) / d,\n        t: t,\n      };\n    }\n  },\n\n  derive: function (points, _3d) {\n    const dpoints = [];\n    for (let p = points, d = p.length, c = d - 1; d > 1; d--, c--) {\n      const list = [];\n      for (let j = 0, dpt; j < c; j++) {\n        dpt = {\n          x: c * (p[j + 1].x - p[j].x),\n          y: c * (p[j + 1].y - p[j].y),\n        };\n        if (_3d) {\n          dpt.z = c * (p[j + 1].z - p[j].z);\n        }\n        list.push(dpt);\n      }\n      dpoints.push(list);\n      p = list;\n    }\n    return dpoints;\n  },\n\n  between: function (v, m, M) {\n    return (\n      (m <= v && v <= M) ||\n      utils.approximately(v, m) ||\n      utils.approximately(v, M)\n    );\n  },\n\n  approximately: function (a, b, precision) {\n    return abs(a - b) <= (precision || epsilon);\n  },\n\n  length: function (derivativeFn) {\n    const z = 0.5,\n      len = utils.Tvalues.length;\n\n    let sum = 0;\n\n    for (let i = 0, t; i < len; i++) {\n      t = z * utils.Tvalues[i] + z;\n      sum += utils.Cvalues[i] * utils.arcfn(t, derivativeFn);\n    }\n    return z * sum;\n  },\n\n  map: function (v, ds, de, ts, te) {\n    const d1 = de - ds,\n      d2 = te - ts,\n      v2 = v - ds,\n      r = v2 / d1;\n    return ts + d2 * r;\n  },\n\n  lerp: function (r, v1, v2) {\n    const ret = {\n      x: v1.x + r * (v2.x - v1.x),\n      y: v1.y + r * (v2.y - v1.y),\n    };\n    if (v1.z !== undefined && v2.z !== undefined) {\n      ret.z = v1.z + r * (v2.z - v1.z);\n    }\n    return ret;\n  },\n\n  pointToString: function (p) {\n    let s = p.x + \"/\" + p.y;\n    if (typeof p.z !== \"undefined\") {\n      s += \"/\" + p.z;\n    }\n    return s;\n  },\n\n  pointsToString: function (points) {\n    return \"[\" + points.map(utils.pointToString).join(\", \") + \"]\";\n  },\n\n  copy: function (obj) {\n    return JSON.parse(JSON.stringify(obj));\n  },\n\n  angle: function (o, v1, v2) {\n    const dx1 = v1.x - o.x,\n      dy1 = v1.y - o.y,\n      dx2 = v2.x - o.x,\n      dy2 = v2.y - o.y,\n      cross = dx1 * dy2 - dy1 * dx2,\n      dot = dx1 * dx2 + dy1 * dy2;\n    return atan2(cross, dot);\n  },\n\n  // round as string, to avoid rounding errors\n  round: function (v, d) {\n    const s = \"\" + v;\n    const pos = s.indexOf(\".\");\n    return parseFloat(s.substring(0, pos + 1 + d));\n  },\n\n  dist: function (p1, p2) {\n    const dx = p1.x - p2.x,\n      dy = p1.y - p2.y;\n    return sqrt(dx * dx + dy * dy);\n  },\n\n  closest: function (LUT, point) {\n    let mdist = pow(2, 63),\n      mpos,\n      d;\n    LUT.forEach(function (p, idx) {\n      d = utils.dist(point, p);\n      if (d < mdist) {\n        mdist = d;\n        mpos = idx;\n      }\n    });\n    return { mdist: mdist, mpos: mpos };\n  },\n\n  abcratio: function (t, n) {\n    // see ratio(t) note on http://pomax.github.io/bezierinfo/#abc\n    if (n !== 2 && n !== 3) {\n      return false;\n    }\n    if (typeof t === \"undefined\") {\n      t = 0.5;\n    } else if (t === 0 || t === 1) {\n      return t;\n    }\n    const bottom = pow(t, n) + pow(1 - t, n),\n      top = bottom - 1;\n    return abs(top / bottom);\n  },\n\n  projectionratio: function (t, n) {\n    // see u(t) note on http://pomax.github.io/bezierinfo/#abc\n    if (n !== 2 && n !== 3) {\n      return false;\n    }\n    if (typeof t === \"undefined\") {\n      t = 0.5;\n    } else if (t === 0 || t === 1) {\n      return t;\n    }\n    const top = pow(1 - t, n),\n      bottom = pow(t, n) + top;\n    return top / bottom;\n  },\n\n  lli8: function (x1, y1, x2, y2, x3, y3, x4, y4) {\n    const nx =\n        (x1 * y2 - y1 * x2) * (x3 - x4) - (x1 - x2) * (x3 * y4 - y3 * x4),\n      ny = (x1 * y2 - y1 * x2) * (y3 - y4) - (y1 - y2) * (x3 * y4 - y3 * x4),\n      d = (x1 - x2) * (y3 - y4) - (y1 - y2) * (x3 - x4);\n    if (d == 0) {\n      return false;\n    }\n    return { x: nx / d, y: ny / d };\n  },\n\n  lli4: function (p1, p2, p3, p4) {\n    const x1 = p1.x,\n      y1 = p1.y,\n      x2 = p2.x,\n      y2 = p2.y,\n      x3 = p3.x,\n      y3 = p3.y,\n      x4 = p4.x,\n      y4 = p4.y;\n    return utils.lli8(x1, y1, x2, y2, x3, y3, x4, y4);\n  },\n\n  lli: function (v1, v2) {\n    return utils.lli4(v1, v1.c, v2, v2.c);\n  },\n\n  makeline: function (p1, p2) {\n    return new Bezier(\n      p1.x,\n      p1.y,\n      (p1.x + p2.x) / 2,\n      (p1.y + p2.y) / 2,\n      p2.x,\n      p2.y\n    );\n  },\n\n  findbbox: function (sections) {\n    let mx = nMax,\n      my = nMax,\n      MX = nMin,\n      MY = nMin;\n    sections.forEach(function (s) {\n      const bbox = s.bbox();\n      if (mx > bbox.x.min) mx = bbox.x.min;\n      if (my > bbox.y.min) my = bbox.y.min;\n      if (MX < bbox.x.max) MX = bbox.x.max;\n      if (MY < bbox.y.max) MY = bbox.y.max;\n    });\n    return {\n      x: { min: mx, mid: (mx + MX) / 2, max: MX, size: MX - mx },\n      y: { min: my, mid: (my + MY) / 2, max: MY, size: MY - my },\n    };\n  },\n\n  shapeintersections: function (\n    s1,\n    bbox1,\n    s2,\n    bbox2,\n    curveIntersectionThreshold\n  ) {\n    if (!utils.bboxoverlap(bbox1, bbox2)) return [];\n    const intersections = [];\n    const a1 = [s1.startcap, s1.forward, s1.back, s1.endcap];\n    const a2 = [s2.startcap, s2.forward, s2.back, s2.endcap];\n    a1.forEach(function (l1) {\n      if (l1.virtual) return;\n      a2.forEach(function (l2) {\n        if (l2.virtual) return;\n        const iss = l1.intersects(l2, curveIntersectionThreshold);\n        if (iss.length > 0) {\n          iss.c1 = l1;\n          iss.c2 = l2;\n          iss.s1 = s1;\n          iss.s2 = s2;\n          intersections.push(iss);\n        }\n      });\n    });\n    return intersections;\n  },\n\n  makeshape: function (forward, back, curveIntersectionThreshold) {\n    const bpl = back.points.length;\n    const fpl = forward.points.length;\n    const start = utils.makeline(back.points[bpl - 1], forward.points[0]);\n    const end = utils.makeline(forward.points[fpl - 1], back.points[0]);\n    const shape = {\n      startcap: start,\n      forward: forward,\n      back: back,\n      endcap: end,\n      bbox: utils.findbbox([start, forward, back, end]),\n    };\n    shape.intersections = function (s2) {\n      return utils.shapeintersections(\n        shape,\n        shape.bbox,\n        s2,\n        s2.bbox,\n        curveIntersectionThreshold\n      );\n    };\n    return shape;\n  },\n\n  getminmax: function (curve, d, list) {\n    if (!list) return { min: 0, max: 0 };\n    let min = nMax,\n      max = nMin,\n      t,\n      c;\n    if (list.indexOf(0) === -1) {\n      list = [0].concat(list);\n    }\n    if (list.indexOf(1) === -1) {\n      list.push(1);\n    }\n    for (let i = 0, len = list.length; i < len; i++) {\n      t = list[i];\n      c = curve.get(t);\n      if (c[d] < min) {\n        min = c[d];\n      }\n      if (c[d] > max) {\n        max = c[d];\n      }\n    }\n    return { min: min, mid: (min + max) / 2, max: max, size: max - min };\n  },\n\n  align: function (points, line) {\n    const tx = line.p1.x,\n      ty = line.p1.y,\n      a = -atan2(line.p2.y - ty, line.p2.x - tx),\n      d = function (v) {\n        return {\n          x: (v.x - tx) * cos(a) - (v.y - ty) * sin(a),\n          y: (v.x - tx) * sin(a) + (v.y - ty) * cos(a),\n        };\n      };\n    return points.map(d);\n  },\n\n  roots: function (points, line) {\n    line = line || { p1: { x: 0, y: 0 }, p2: { x: 1, y: 0 } };\n\n    const order = points.length - 1;\n    const aligned = utils.align(points, line);\n    const reduce = function (t) {\n      return 0 <= t && t <= 1;\n    };\n\n    if (order === 2) {\n      const a = aligned[0].y,\n        b = aligned[1].y,\n        c = aligned[2].y,\n        d = a - 2 * b + c;\n      if (d !== 0) {\n        const m1 = -sqrt(b * b - a * c),\n          m2 = -a + b,\n          v1 = -(m1 + m2) / d,\n          v2 = -(-m1 + m2) / d;\n        return [v1, v2].filter(reduce);\n      } else if (b !== c && d === 0) {\n        return [(2 * b - c) / (2 * b - 2 * c)].filter(reduce);\n      }\n      return [];\n    }\n\n    // see http://www.trans4mind.com/personal_development/mathematics/polynomials/cubicAlgebra.htm\n    const pa = aligned[0].y,\n      pb = aligned[1].y,\n      pc = aligned[2].y,\n      pd = aligned[3].y;\n\n    let d = -pa + 3 * pb - 3 * pc + pd,\n      a = 3 * pa - 6 * pb + 3 * pc,\n      b = -3 * pa + 3 * pb,\n      c = pa;\n\n    if (utils.approximately(d, 0)) {\n      // this is not a cubic curve.\n      if (utils.approximately(a, 0)) {\n        // in fact, this is not a quadratic curve either.\n        if (utils.approximately(b, 0)) {\n          // in fact in fact, there are no solutions.\n          return [];\n        }\n        // linear solution:\n        return [-c / b].filter(reduce);\n      }\n      // quadratic solution:\n      const q = sqrt(b * b - 4 * a * c),\n        a2 = 2 * a;\n      return [(q - b) / a2, (-b - q) / a2].filter(reduce);\n    }\n\n    // at this point, we know we need a cubic solution:\n\n    a /= d;\n    b /= d;\n    c /= d;\n\n    const p = (3 * b - a * a) / 3,\n      p3 = p / 3,\n      q = (2 * a * a * a - 9 * a * b + 27 * c) / 27,\n      q2 = q / 2,\n      discriminant = q2 * q2 + p3 * p3 * p3;\n\n    let u1, v1, x1, x2, x3;\n    if (discriminant < 0) {\n      const mp3 = -p / 3,\n        mp33 = mp3 * mp3 * mp3,\n        r = sqrt(mp33),\n        t = -q / (2 * r),\n        cosphi = t < -1 ? -1 : t > 1 ? 1 : t,\n        phi = acos(cosphi),\n        crtr = crt(r),\n        t1 = 2 * crtr;\n      x1 = t1 * cos(phi / 3) - a / 3;\n      x2 = t1 * cos((phi + tau) / 3) - a / 3;\n      x3 = t1 * cos((phi + 2 * tau) / 3) - a / 3;\n      return [x1, x2, x3].filter(reduce);\n    } else if (discriminant === 0) {\n      u1 = q2 < 0 ? crt(-q2) : -crt(q2);\n      x1 = 2 * u1 - a / 3;\n      x2 = -u1 - a / 3;\n      return [x1, x2].filter(reduce);\n    } else {\n      const sd = sqrt(discriminant);\n      u1 = crt(-q2 + sd);\n      v1 = crt(q2 + sd);\n      return [u1 - v1 - a / 3].filter(reduce);\n    }\n  },\n\n  droots: function (p) {\n    // quadratic roots are easy\n    if (p.length === 3) {\n      const a = p[0],\n        b = p[1],\n        c = p[2],\n        d = a - 2 * b + c;\n      if (d !== 0) {\n        const m1 = -sqrt(b * b - a * c),\n          m2 = -a + b,\n          v1 = -(m1 + m2) / d,\n          v2 = -(-m1 + m2) / d;\n        return [v1, v2];\n      } else if (b !== c && d === 0) {\n        return [(2 * b - c) / (2 * (b - c))];\n      }\n      return [];\n    }\n\n    // linear roots are even easier\n    if (p.length === 2) {\n      const a = p[0],\n        b = p[1];\n      if (a !== b) {\n        return [a / (a - b)];\n      }\n      return [];\n    }\n\n    return [];\n  },\n\n  curvature: function (t, d1, d2, _3d, kOnly) {\n    let num,\n      dnm,\n      adk,\n      dk,\n      k = 0,\n      r = 0;\n\n    //\n    // We're using the following formula for curvature:\n    //\n    //              x'y\" - y'x\"\n    //   k(t) = ------------------\n    //           (x'² + y'²)^(3/2)\n    //\n    // from https://en.wikipedia.org/wiki/Radius_of_curvature#Definition\n    //\n    // With it corresponding 3D counterpart:\n    //\n    //          sqrt( (y'z\" - y\"z')² + (z'x\" - z\"x')² + (x'y\" - x\"y')²)\n    //   k(t) = -------------------------------------------------------\n    //                     (x'² + y'² + z'²)^(3/2)\n    //\n\n    const d = utils.compute(t, d1);\n    const dd = utils.compute(t, d2);\n    const qdsum = d.x * d.x + d.y * d.y;\n\n    if (_3d) {\n      num = sqrt(\n        pow(d.y * dd.z - dd.y * d.z, 2) +\n          pow(d.z * dd.x - dd.z * d.x, 2) +\n          pow(d.x * dd.y - dd.x * d.y, 2)\n      );\n      dnm = pow(qdsum + d.z * d.z, 3 / 2);\n    } else {\n      num = d.x * dd.y - d.y * dd.x;\n      dnm = pow(qdsum, 3 / 2);\n    }\n\n    if (num === 0 || dnm === 0) {\n      return { k: 0, r: 0 };\n    }\n\n    k = num / dnm;\n    r = dnm / num;\n\n    // We're also computing the derivative of kappa, because\n    // there is value in knowing the rate of change for the\n    // curvature along the curve. And we're just going to\n    // ballpark it based on an epsilon.\n    if (!kOnly) {\n      // compute k'(t) based on the interval before, and after it,\n      // to at least try to not introduce forward/backward pass bias.\n      const pk = utils.curvature(t - 0.001, d1, d2, _3d, true).k;\n      const nk = utils.curvature(t + 0.001, d1, d2, _3d, true).k;\n      dk = (nk - k + (k - pk)) / 2;\n      adk = (abs(nk - k) + abs(k - pk)) / 2;\n    }\n\n    return { k: k, r: r, dk: dk, adk: adk };\n  },\n\n  inflections: function (points) {\n    if (points.length < 4) return [];\n\n    // FIXME: TODO: add in inflection abstraction for quartic+ curves?\n\n    const p = utils.align(points, { p1: points[0], p2: points.slice(-1)[0] }),\n      a = p[2].x * p[1].y,\n      b = p[3].x * p[1].y,\n      c = p[1].x * p[2].y,\n      d = p[3].x * p[2].y,\n      v1 = 18 * (-3 * a + 2 * b + 3 * c - d),\n      v2 = 18 * (3 * a - b - 3 * c),\n      v3 = 18 * (c - a);\n\n    if (utils.approximately(v1, 0)) {\n      if (!utils.approximately(v2, 0)) {\n        let t = -v3 / v2;\n        if (0 <= t && t <= 1) return [t];\n      }\n      return [];\n    }\n\n    const d2 = 2 * v1;\n\n    if (utils.approximately(d2, 0)) return [];\n\n    const trm = v2 * v2 - 4 * v1 * v3;\n\n    if (trm < 0) return [];\n\n    const sq = Math.sqrt(trm);\n\n    return [(sq - v2) / d2, -(v2 + sq) / d2].filter(function (r) {\n      return 0 <= r && r <= 1;\n    });\n  },\n\n  bboxoverlap: function (b1, b2) {\n    const dims = [\"x\", \"y\"],\n      len = dims.length;\n\n    for (let i = 0, dim, l, t, d; i < len; i++) {\n      dim = dims[i];\n      l = b1[dim].mid;\n      t = b2[dim].mid;\n      d = (b1[dim].size + b2[dim].size) / 2;\n      if (abs(l - t) >= d) return false;\n    }\n    return true;\n  },\n\n  expandbox: function (bbox, _bbox) {\n    if (_bbox.x.min < bbox.x.min) {\n      bbox.x.min = _bbox.x.min;\n    }\n    if (_bbox.y.min < bbox.y.min) {\n      bbox.y.min = _bbox.y.min;\n    }\n    if (_bbox.z && _bbox.z.min < bbox.z.min) {\n      bbox.z.min = _bbox.z.min;\n    }\n    if (_bbox.x.max > bbox.x.max) {\n      bbox.x.max = _bbox.x.max;\n    }\n    if (_bbox.y.max > bbox.y.max) {\n      bbox.y.max = _bbox.y.max;\n    }\n    if (_bbox.z && _bbox.z.max > bbox.z.max) {\n      bbox.z.max = _bbox.z.max;\n    }\n    bbox.x.mid = (bbox.x.min + bbox.x.max) / 2;\n    bbox.y.mid = (bbox.y.min + bbox.y.max) / 2;\n    if (bbox.z) {\n      bbox.z.mid = (bbox.z.min + bbox.z.max) / 2;\n    }\n    bbox.x.size = bbox.x.max - bbox.x.min;\n    bbox.y.size = bbox.y.max - bbox.y.min;\n    if (bbox.z) {\n      bbox.z.size = bbox.z.max - bbox.z.min;\n    }\n  },\n\n  pairiteration: function (c1, c2, curveIntersectionThreshold) {\n    const c1b = c1.bbox(),\n      c2b = c2.bbox(),\n      r = 100000,\n      threshold = curveIntersectionThreshold || 0.5;\n\n    if (\n      c1b.x.size + c1b.y.size < threshold &&\n      c2b.x.size + c2b.y.size < threshold\n    ) {\n      return [\n        (((r * (c1._t1 + c1._t2)) / 2) | 0) / r +\n          \"/\" +\n          (((r * (c2._t1 + c2._t2)) / 2) | 0) / r,\n      ];\n    }\n\n    let cc1 = c1.split(0.5),\n      cc2 = c2.split(0.5),\n      pairs = [\n        { left: cc1.left, right: cc2.left },\n        { left: cc1.left, right: cc2.right },\n        { left: cc1.right, right: cc2.right },\n        { left: cc1.right, right: cc2.left },\n      ];\n\n    pairs = pairs.filter(function (pair) {\n      return utils.bboxoverlap(pair.left.bbox(), pair.right.bbox());\n    });\n\n    let results = [];\n\n    if (pairs.length === 0) return results;\n\n    pairs.forEach(function (pair) {\n      results = results.concat(\n        utils.pairiteration(pair.left, pair.right, threshold)\n      );\n    });\n\n    results = results.filter(function (v, i) {\n      return results.indexOf(v) === i;\n    });\n\n    return results;\n  },\n\n  getccenter: function (p1, p2, p3) {\n    const dx1 = p2.x - p1.x,\n      dy1 = p2.y - p1.y,\n      dx2 = p3.x - p2.x,\n      dy2 = p3.y - p2.y,\n      dx1p = dx1 * cos(quart) - dy1 * sin(quart),\n      dy1p = dx1 * sin(quart) + dy1 * cos(quart),\n      dx2p = dx2 * cos(quart) - dy2 * sin(quart),\n      dy2p = dx2 * sin(quart) + dy2 * cos(quart),\n      // chord midpoints\n      mx1 = (p1.x + p2.x) / 2,\n      my1 = (p1.y + p2.y) / 2,\n      mx2 = (p2.x + p3.x) / 2,\n      my2 = (p2.y + p3.y) / 2,\n      // midpoint offsets\n      mx1n = mx1 + dx1p,\n      my1n = my1 + dy1p,\n      mx2n = mx2 + dx2p,\n      my2n = my2 + dy2p,\n      // intersection of these lines:\n      arc = utils.lli8(mx1, my1, mx1n, my1n, mx2, my2, mx2n, my2n),\n      r = utils.dist(arc, p1);\n\n    // arc start/end values, over mid point:\n    let s = atan2(p1.y - arc.y, p1.x - arc.x),\n      m = atan2(p2.y - arc.y, p2.x - arc.x),\n      e = atan2(p3.y - arc.y, p3.x - arc.x),\n      _;\n\n    // determine arc direction (cw/ccw correction)\n    if (s < e) {\n      // if s<m<e, arc(s, e)\n      // if m<s<e, arc(e, s + tau)\n      // if s<e<m, arc(e, s + tau)\n      if (s > m || m > e) {\n        s += tau;\n      }\n      if (s > e) {\n        _ = e;\n        e = s;\n        s = _;\n      }\n    } else {\n      // if e<m<s, arc(e, s)\n      // if m<e<s, arc(s, e + tau)\n      // if e<s<m, arc(s, e + tau)\n      if (e < m && m < s) {\n        _ = e;\n        e = s;\n        s = _;\n      } else {\n        e += tau;\n      }\n    }\n    // assign and done.\n    arc.s = s;\n    arc.e = e;\n    arc.r = r;\n    return arc;\n  },\n\n  numberSort: function (a, b) {\n    return a - b;\n  },\n};\n\nexport { utils };\n","import { utils } from \"./utils.js\";\n\n/**\n * Poly Bezier\n * @param {[type]} curves [description]\n */\nclass PolyBezier {\n  constructor(curves) {\n    this.curves = [];\n    this._3d = false;\n    if (!!curves) {\n      this.curves = curves;\n      this._3d = this.curves[0]._3d;\n    }\n  }\n\n  valueOf() {\n    return this.toString();\n  }\n\n  toString() {\n    return (\n      \"[\" +\n      this.curves\n        .map(function (curve) {\n          return utils.pointsToString(curve.points);\n        })\n        .join(\", \") +\n      \"]\"\n    );\n  }\n\n  addCurve(curve) {\n    this.curves.push(curve);\n    this._3d = this._3d || curve._3d;\n  }\n\n  length() {\n    return this.curves\n      .map(function (v) {\n        return v.length();\n      })\n      .reduce(function (a, b) {\n        return a + b;\n      });\n  }\n\n  curve(idx) {\n    return this.curves[idx];\n  }\n\n  bbox() {\n    const c = this.curves;\n    var bbox = c[0].bbox();\n    for (var i = 1; i < c.length; i++) {\n      utils.expandbox(bbox, c[i].bbox());\n    }\n    return bbox;\n  }\n\n  offset(d) {\n    const offset = [];\n    this.curves.forEach(function (v) {\n      offset.push(...v.offset(d));\n    });\n    return new PolyBezier(offset);\n  }\n}\n\nexport { PolyBezier };\n","/**\n  A javascript Bezier curve library by Pomax.\n\n  Based on http://pomax.github.io/bezierinfo\n\n  This code is MIT licensed.\n**/\n\nimport { utils } from \"./utils.js\";\nimport { PolyBezier } from \"./poly-bezier.js\";\n\n// math-inlining.\nconst { abs, min, max, cos, sin, acos, sqrt } = Math;\nconst pi = Math.PI;\n// a zero coordinate, which is surprisingly useful\nconst ZERO = { x: 0, y: 0, z: 0 };\n\n/**\n * Bezier curve constructor.\n *\n * ...docs pending...\n */\nclass Bezier {\n  constructor(coords) {\n    let args =\n      coords && coords.forEach ? coords : Array.from(arguments).slice();\n    let coordlen = false;\n\n    if (typeof args[0] === \"object\") {\n      coordlen = args.length;\n      const newargs = [];\n      args.forEach(function (point) {\n        [\"x\", \"y\", \"z\"].forEach(function (d) {\n          if (typeof point[d] !== \"undefined\") {\n            newargs.push(point[d]);\n          }\n        });\n      });\n      args = newargs;\n    }\n\n    let higher = false;\n    const len = args.length;\n\n    if (coordlen) {\n      if (coordlen > 4) {\n        if (arguments.length !== 1) {\n          throw new Error(\n            \"Only new Bezier(point[]) is accepted for 4th and higher order curves\"\n          );\n        }\n        higher = true;\n      }\n    } else {\n      if (len !== 6 && len !== 8 && len !== 9 && len !== 12) {\n        if (arguments.length !== 1) {\n          throw new Error(\n            \"Only new Bezier(point[]) is accepted for 4th and higher order curves\"\n          );\n        }\n      }\n    }\n\n    const _3d = (this._3d =\n      (!higher && (len === 9 || len === 12)) ||\n      (coords && coords[0] && typeof coords[0].z !== \"undefined\"));\n\n    const points = (this.points = []);\n    for (let idx = 0, step = _3d ? 3 : 2; idx < len; idx += step) {\n      var point = {\n        x: args[idx],\n        y: args[idx + 1],\n      };\n      if (_3d) {\n        point.z = args[idx + 2];\n      }\n      points.push(point);\n    }\n    const order = (this.order = points.length - 1);\n\n    const dims = (this.dims = [\"x\", \"y\"]);\n    if (_3d) dims.push(\"z\");\n    this.dimlen = dims.length;\n\n    // is this curve, practically speaking, a straight line?\n    const aligned = utils.align(points, { p1: points[0], p2: points[order] });\n    const baselength = utils.dist(points[0], points[order]);\n    this._linear = aligned.reduce((t, p) => t + abs(p.y), 0) < baselength / 50;\n\n    this._lut = [];\n    this._t1 = 0;\n    this._t2 = 1;\n    this.update();\n  }\n\n  static quadraticFromPoints(p1, p2, p3, t) {\n    if (typeof t === \"undefined\") {\n      t = 0.5;\n    }\n    // shortcuts, although they're really dumb\n    if (t === 0) {\n      return new Bezier(p2, p2, p3);\n    }\n    if (t === 1) {\n      return new Bezier(p1, p2, p2);\n    }\n    // real fitting.\n    const abc = Bezier.getABC(2, p1, p2, p3, t);\n    return new Bezier(p1, abc.A, p3);\n  }\n\n  static cubicFromPoints(S, B, E, t, d1) {\n    if (typeof t === \"undefined\") {\n      t = 0.5;\n    }\n    const abc = Bezier.getABC(3, S, B, E, t);\n    if (typeof d1 === \"undefined\") {\n      d1 = utils.dist(B, abc.C);\n    }\n    const d2 = (d1 * (1 - t)) / t;\n\n    const selen = utils.dist(S, E),\n      lx = (E.x - S.x) / selen,\n      ly = (E.y - S.y) / selen,\n      bx1 = d1 * lx,\n      by1 = d1 * ly,\n      bx2 = d2 * lx,\n      by2 = d2 * ly;\n    // derivation of new hull coordinates\n    const e1 = { x: B.x - bx1, y: B.y - by1 },\n      e2 = { x: B.x + bx2, y: B.y + by2 },\n      A = abc.A,\n      v1 = { x: A.x + (e1.x - A.x) / (1 - t), y: A.y + (e1.y - A.y) / (1 - t) },\n      v2 = { x: A.x + (e2.x - A.x) / t, y: A.y + (e2.y - A.y) / t },\n      nc1 = { x: S.x + (v1.x - S.x) / t, y: S.y + (v1.y - S.y) / t },\n      nc2 = {\n        x: E.x + (v2.x - E.x) / (1 - t),\n        y: E.y + (v2.y - E.y) / (1 - t),\n      };\n    // ...done\n    return new Bezier(S, nc1, nc2, E);\n  }\n\n  static getUtils() {\n    return utils;\n  }\n\n  getUtils() {\n    return Bezier.getUtils();\n  }\n\n  static get PolyBezier() {\n    return PolyBezier;\n  }\n\n  valueOf() {\n    return this.toString();\n  }\n\n  toString() {\n    return utils.pointsToString(this.points);\n  }\n\n  toSVG() {\n    if (this._3d) return false;\n    const p = this.points,\n      x = p[0].x,\n      y = p[0].y,\n      s = [\"M\", x, y, this.order === 2 ? \"Q\" : \"C\"];\n    for (let i = 1, last = p.length; i < last; i++) {\n      s.push(p[i].x);\n      s.push(p[i].y);\n    }\n    return s.join(\" \");\n  }\n\n  setRatios(ratios) {\n    if (ratios.length !== this.points.length) {\n      throw new Error(\"incorrect number of ratio values\");\n    }\n    this.ratios = ratios;\n    this._lut = []; //  invalidate any precomputed LUT\n  }\n\n  verify() {\n    const print = this.coordDigest();\n    if (print !== this._print) {\n      this._print = print;\n      this.update();\n    }\n  }\n\n  coordDigest() {\n    return this.points\n      .map(function (c, pos) {\n        return \"\" + pos + c.x + c.y + (c.z ? c.z : 0);\n      })\n      .join(\"\");\n  }\n\n  update() {\n    // invalidate any precomputed LUT\n    this._lut = [];\n    this.dpoints = utils.derive(this.points, this._3d);\n    this.computedirection();\n  }\n\n  computedirection() {\n    const points = this.points;\n    const angle = utils.angle(points[0], points[this.order], points[1]);\n    this.clockwise = angle > 0;\n  }\n\n  length() {\n    return utils.length(this.derivative.bind(this));\n  }\n\n  static getABC(order = 2, S, B, E, t = 0.5) {\n    const u = utils.projectionratio(t, order),\n      um = 1 - u,\n      C = {\n        x: u * S.x + um * E.x,\n        y: u * S.y + um * E.y,\n      },\n      s = utils.abcratio(t, order),\n      A = {\n        x: B.x + (B.x - C.x) / s,\n        y: B.y + (B.y - C.y) / s,\n      };\n    return { A, B, C, S, E };\n  }\n\n  getABC(t, B) {\n    B = B || this.get(t);\n    let S = this.points[0];\n    let E = this.points[this.order];\n    return Bezier.getABC(this.order, S, B, E, t);\n  }\n\n  getLUT(steps) {\n    this.verify();\n    steps = steps || 100;\n    if (this._lut.length === steps + 1) {\n      return this._lut;\n    }\n    this._lut = [];\n    // n steps means n+1 points\n    steps++;\n    this._lut = [];\n    for (let i = 0, p, t; i < steps; i++) {\n      t = i / (steps - 1);\n      p = this.compute(t);\n      p.t = t;\n      this._lut.push(p);\n    }\n    return this._lut;\n  }\n\n  on(point, error) {\n    error = error || 5;\n    const lut = this.getLUT(),\n      hits = [];\n    for (let i = 0, c, t = 0; i < lut.length; i++) {\n      c = lut[i];\n      if (utils.dist(c, point) < error) {\n        hits.push(c);\n        t += i / lut.length;\n      }\n    }\n    if (!hits.length) return false;\n    return (t /= hits.length);\n  }\n\n  project(point) {\n    // step 1: coarse check\n    const LUT = this.getLUT(),\n      l = LUT.length - 1,\n      closest = utils.closest(LUT, point),\n      mpos = closest.mpos,\n      t1 = (mpos - 1) / l,\n      t2 = (mpos + 1) / l,\n      step = 0.1 / l;\n\n    // step 2: fine check\n    let mdist = closest.mdist,\n      t = t1,\n      ft = t,\n      p;\n    mdist += 1;\n    for (let d; t < t2 + step; t += step) {\n      p = this.compute(t);\n      d = utils.dist(point, p);\n      if (d < mdist) {\n        mdist = d;\n        ft = t;\n      }\n    }\n    ft = ft < 0 ? 0 : ft > 1 ? 1 : ft;\n    p = this.compute(ft);\n    p.t = ft;\n    p.d = mdist;\n    return p;\n  }\n\n  get(t) {\n    return this.compute(t);\n  }\n\n  point(idx) {\n    return this.points[idx];\n  }\n\n  compute(t) {\n    if (this.ratios) {\n      return utils.computeWithRatios(t, this.points, this.ratios, this._3d);\n    }\n    return utils.compute(t, this.points, this._3d, this.ratios);\n  }\n\n  raise() {\n    const p = this.points,\n      np = [p[0]],\n      k = p.length;\n    for (let i = 1, pi, pim; i < k; i++) {\n      pi = p[i];\n      pim = p[i - 1];\n      np[i] = {\n        x: ((k - i) / k) * pi.x + (i / k) * pim.x,\n        y: ((k - i) / k) * pi.y + (i / k) * pim.y,\n      };\n    }\n    np[k] = p[k - 1];\n    return new Bezier(np);\n  }\n\n  derivative(t) {\n    return utils.compute(t, this.dpoints[0], this._3d);\n  }\n\n  dderivative(t) {\n    return utils.compute(t, this.dpoints[1], this._3d);\n  }\n\n  align() {\n    let p = this.points;\n    return new Bezier(utils.align(p, { p1: p[0], p2: p[p.length - 1] }));\n  }\n\n  curvature(t) {\n    return utils.curvature(t, this.dpoints[0], this.dpoints[1], this._3d);\n  }\n\n  inflections() {\n    return utils.inflections(this.points);\n  }\n\n  normal(t) {\n    return this._3d ? this.__normal3(t) : this.__normal2(t);\n  }\n\n  __normal2(t) {\n    const d = this.derivative(t);\n    const q = sqrt(d.x * d.x + d.y * d.y);\n    return { t, x: -d.y / q, y: d.x / q };\n  }\n\n  __normal3(t) {\n    // see http://stackoverflow.com/questions/25453159\n    const r1 = this.derivative(t),\n      r2 = this.derivative(t + 0.01),\n      q1 = sqrt(r1.x * r1.x + r1.y * r1.y + r1.z * r1.z),\n      q2 = sqrt(r2.x * r2.x + r2.y * r2.y + r2.z * r2.z);\n    r1.x /= q1;\n    r1.y /= q1;\n    r1.z /= q1;\n    r2.x /= q2;\n    r2.y /= q2;\n    r2.z /= q2;\n    // cross product\n    const c = {\n      x: r2.y * r1.z - r2.z * r1.y,\n      y: r2.z * r1.x - r2.x * r1.z,\n      z: r2.x * r1.y - r2.y * r1.x,\n    };\n    const m = sqrt(c.x * c.x + c.y * c.y + c.z * c.z);\n    c.x /= m;\n    c.y /= m;\n    c.z /= m;\n    // rotation matrix\n    const R = [\n      c.x * c.x,\n      c.x * c.y - c.z,\n      c.x * c.z + c.y,\n      c.x * c.y + c.z,\n      c.y * c.y,\n      c.y * c.z - c.x,\n      c.x * c.z - c.y,\n      c.y * c.z + c.x,\n      c.z * c.z,\n    ];\n    // normal vector:\n    const n = {\n      t,\n      x: R[0] * r1.x + R[1] * r1.y + R[2] * r1.z,\n      y: R[3] * r1.x + R[4] * r1.y + R[5] * r1.z,\n      z: R[6] * r1.x + R[7] * r1.y + R[8] * r1.z,\n    };\n    return n;\n  }\n\n  hull(t) {\n    let p = this.points,\n      _p = [],\n      q = [],\n      idx = 0;\n    q[idx++] = p[0];\n    q[idx++] = p[1];\n    q[idx++] = p[2];\n    if (this.order === 3) {\n      q[idx++] = p[3];\n    }\n    // we lerp between all points at each iteration, until we have 1 point left.\n    while (p.length > 1) {\n      _p = [];\n      for (let i = 0, pt, l = p.length - 1; i < l; i++) {\n        pt = utils.lerp(t, p[i], p[i + 1]);\n        q[idx++] = pt;\n        _p.push(pt);\n      }\n      p = _p;\n    }\n    return q;\n  }\n\n  split(t1, t2) {\n    // shortcuts\n    if (t1 === 0 && !!t2) {\n      return this.split(t2).left;\n    }\n    if (t2 === 1) {\n      return this.split(t1).right;\n    }\n\n    // no shortcut: use \"de Casteljau\" iteration.\n    const q = this.hull(t1);\n    const result = {\n      left:\n        this.order === 2\n          ? new Bezier([q[0], q[3], q[5]])\n          : new Bezier([q[0], q[4], q[7], q[9]]),\n      right:\n        this.order === 2\n          ? new Bezier([q[5], q[4], q[2]])\n          : new Bezier([q[9], q[8], q[6], q[3]]),\n      span: q,\n    };\n\n    // make sure we bind _t1/_t2 information!\n    result.left._t1 = utils.map(0, 0, 1, this._t1, this._t2);\n    result.left._t2 = utils.map(t1, 0, 1, this._t1, this._t2);\n    result.right._t1 = utils.map(t1, 0, 1, this._t1, this._t2);\n    result.right._t2 = utils.map(1, 0, 1, this._t1, this._t2);\n\n    // if we have no t2, we're done\n    if (!t2) {\n      return result;\n    }\n\n    // if we have a t2, split again:\n    t2 = utils.map(t2, t1, 1, 0, 1);\n    return result.right.split(t2).left;\n  }\n\n  extrema() {\n    const result = {};\n    let roots = [];\n\n    this.dims.forEach(\n      function (dim) {\n        let mfn = function (v) {\n          return v[dim];\n        };\n        let p = this.dpoints[0].map(mfn);\n        result[dim] = utils.droots(p);\n        if (this.order === 3) {\n          p = this.dpoints[1].map(mfn);\n          result[dim] = result[dim].concat(utils.droots(p));\n        }\n        result[dim] = result[dim].filter(function (t) {\n          return t >= 0 && t <= 1;\n        });\n        roots = roots.concat(result[dim].sort(utils.numberSort));\n      }.bind(this)\n    );\n\n    result.values = roots.sort(utils.numberSort).filter(function (v, idx) {\n      return roots.indexOf(v) === idx;\n    });\n\n    return result;\n  }\n\n  bbox() {\n    const extrema = this.extrema(),\n      result = {};\n    this.dims.forEach(\n      function (d) {\n        result[d] = utils.getminmax(this, d, extrema[d]);\n      }.bind(this)\n    );\n    return result;\n  }\n\n  overlaps(curve) {\n    const lbbox = this.bbox(),\n      tbbox = curve.bbox();\n    return utils.bboxoverlap(lbbox, tbbox);\n  }\n\n  offset(t, d) {\n    if (typeof d !== \"undefined\") {\n      const c = this.get(t),\n        n = this.normal(t);\n      const ret = {\n        c: c,\n        n: n,\n        x: c.x + n.x * d,\n        y: c.y + n.y * d,\n      };\n      if (this._3d) {\n        ret.z = c.z + n.z * d;\n      }\n      return ret;\n    }\n    if (this._linear) {\n      const nv = this.normal(0),\n        coords = this.points.map(function (p) {\n          const ret = {\n            x: p.x + t * nv.x,\n            y: p.y + t * nv.y,\n          };\n          if (p.z && nv.z) {\n            ret.z = p.z + t * nv.z;\n          }\n          return ret;\n        });\n      return [new Bezier(coords)];\n    }\n    return this.reduce().map(function (s) {\n      if (s._linear) {\n        return s.offset(t)[0];\n      }\n      return s.scale(t);\n    });\n  }\n\n  simple() {\n    if (this.order === 3) {\n      const a1 = utils.angle(this.points[0], this.points[3], this.points[1]);\n      const a2 = utils.angle(this.points[0], this.points[3], this.points[2]);\n      if ((a1 > 0 && a2 < 0) || (a1 < 0 && a2 > 0)) return false;\n    }\n    const n1 = this.normal(0);\n    const n2 = this.normal(1);\n    let s = n1.x * n2.x + n1.y * n2.y;\n    if (this._3d) {\n      s += n1.z * n2.z;\n    }\n    return abs(acos(s)) < pi / 3;\n  }\n\n  reduce() {\n    // TODO: examine these var types in more detail...\n    let i,\n      t1 = 0,\n      t2 = 0,\n      step = 0.01,\n      segment,\n      pass1 = [],\n      pass2 = [];\n    // first pass: split on extrema\n    let extrema = this.extrema().values;\n    if (extrema.indexOf(0) === -1) {\n      extrema = [0].concat(extrema);\n    }\n    if (extrema.indexOf(1) === -1) {\n      extrema.push(1);\n    }\n\n    for (t1 = extrema[0], i = 1; i < extrema.length; i++) {\n      t2 = extrema[i];\n      segment = this.split(t1, t2);\n      segment._t1 = t1;\n      segment._t2 = t2;\n      pass1.push(segment);\n      t1 = t2;\n    }\n\n    // second pass: further reduce these segments to simple segments\n    pass1.forEach(function (p1) {\n      t1 = 0;\n      t2 = 0;\n      while (t2 <= 1) {\n        for (t2 = t1 + step; t2 <= 1 + step; t2 += step) {\n          segment = p1.split(t1, t2);\n          if (!segment.simple()) {\n            t2 -= step;\n            if (abs(t1 - t2) < step) {\n              // we can never form a reduction\n              return [];\n            }\n            segment = p1.split(t1, t2);\n            segment._t1 = utils.map(t1, 0, 1, p1._t1, p1._t2);\n            segment._t2 = utils.map(t2, 0, 1, p1._t1, p1._t2);\n            pass2.push(segment);\n            t1 = t2;\n            break;\n          }\n        }\n      }\n      if (t1 < 1) {\n        segment = p1.split(t1, 1);\n        segment._t1 = utils.map(t1, 0, 1, p1._t1, p1._t2);\n        segment._t2 = p1._t2;\n        pass2.push(segment);\n      }\n    });\n    return pass2;\n  }\n\n  translate(v, d1, d2) {\n    d2 = typeof d2 === \"number\" ? d2 : d1;\n\n    // TODO: make this take curves with control points outside\n    //       of the start-end interval into account\n\n    const o = this.order;\n    let d = this.points.map((_, i) => (1 - i / o) * d1 + (i / o) * d2);\n    return new Bezier(\n      this.points.map((p, i) => ({\n        x: p.x + v.x * d[i],\n        y: p.y + v.y * d[i],\n      }))\n    );\n  }\n\n  scale(d) {\n    const order = this.order;\n    let distanceFn = false;\n    if (typeof d === \"function\") {\n      distanceFn = d;\n    }\n    if (distanceFn && order === 2) {\n      return this.raise().scale(distanceFn);\n    }\n\n    // TODO: add special handling for non-linear degenerate curves.\n\n    const clockwise = this.clockwise;\n    const points = this.points;\n\n    if (this._linear) {\n      return this.translate(\n        this.normal(0),\n        distanceFn ? distanceFn(0) : d,\n        distanceFn ? distanceFn(1) : d\n      );\n    }\n\n    const r1 = distanceFn ? distanceFn(0) : d;\n    const r2 = distanceFn ? distanceFn(1) : d;\n    const v = [this.offset(0, 10), this.offset(1, 10)];\n    const np = [];\n    const o = utils.lli4(v[0], v[0].c, v[1], v[1].c);\n\n    if (!o) {\n      throw new Error(\"cannot scale this curve. Try reducing it first.\");\n    }\n\n    // move all points by distance 'd' wrt the origin 'o',\n    // and move end points by fixed distance along normal.\n    [0, 1].forEach(function (t) {\n      const p = (np[t * order] = utils.copy(points[t * order]));\n      p.x += (t ? r2 : r1) * v[t].n.x;\n      p.y += (t ? r2 : r1) * v[t].n.y;\n    });\n\n    if (!distanceFn) {\n      // move control points to lie on the intersection of the offset\n      // derivative vector, and the origin-through-control vector\n      [0, 1].forEach((t) => {\n        if (order === 2 && !!t) return;\n        const p = np[t * order];\n        const d = this.derivative(t);\n        const p2 = { x: p.x + d.x, y: p.y + d.y };\n        np[t + 1] = utils.lli4(p, p2, o, points[t + 1]);\n      });\n      return new Bezier(np);\n    }\n\n    // move control points by \"however much necessary to\n    // ensure the correct tangent to endpoint\".\n    [0, 1].forEach(function (t) {\n      if (order === 2 && !!t) return;\n      var p = points[t + 1];\n      var ov = {\n        x: p.x - o.x,\n        y: p.y - o.y,\n      };\n      var rc = distanceFn ? distanceFn((t + 1) / order) : d;\n      if (distanceFn && !clockwise) rc = -rc;\n      var m = sqrt(ov.x * ov.x + ov.y * ov.y);\n      ov.x /= m;\n      ov.y /= m;\n      np[t + 1] = {\n        x: p.x + rc * ov.x,\n        y: p.y + rc * ov.y,\n      };\n    });\n    return new Bezier(np);\n  }\n\n  outline(d1, d2, d3, d4) {\n    d2 = d2 === undefined ? d1 : d2;\n\n    if (this._linear) {\n      // TODO: find the actual extrema, because they might\n      //       be before the start, or past the end.\n\n      const n = this.normal(0);\n      const start = this.points[0];\n      const end = this.points[this.points.length - 1];\n      let s, mid, e;\n\n      if (d3 === undefined) {\n        d3 = d1;\n        d4 = d2;\n      }\n\n      s = { x: start.x + n.x * d1, y: start.y + n.y * d1 };\n      e = { x: end.x + n.x * d3, y: end.y + n.y * d3 };\n      mid = { x: (s.x + e.x) / 2, y: (s.y + e.y) / 2 };\n      const fline = [s, mid, e];\n\n      s = { x: start.x - n.x * d2, y: start.y - n.y * d2 };\n      e = { x: end.x - n.x * d4, y: end.y - n.y * d4 };\n      mid = { x: (s.x + e.x) / 2, y: (s.y + e.y) / 2 };\n      const bline = [e, mid, s];\n\n      const ls = utils.makeline(bline[2], fline[0]);\n      const le = utils.makeline(fline[2], bline[0]);\n      const segments = [ls, new Bezier(fline), le, new Bezier(bline)];\n      return new PolyBezier(segments);\n    }\n\n    const reduced = this.reduce(),\n      len = reduced.length,\n      fcurves = [];\n\n    let bcurves = [],\n      p,\n      alen = 0,\n      tlen = this.length();\n\n    const graduated = typeof d3 !== \"undefined\" && typeof d4 !== \"undefined\";\n\n    function linearDistanceFunction(s, e, tlen, alen, slen) {\n      return function (v) {\n        const f1 = alen / tlen,\n          f2 = (alen + slen) / tlen,\n          d = e - s;\n        return utils.map(v, 0, 1, s + f1 * d, s + f2 * d);\n      };\n    }\n\n    // form curve oulines\n    reduced.forEach(function (segment) {\n      const slen = segment.length();\n      if (graduated) {\n        fcurves.push(\n          segment.scale(linearDistanceFunction(d1, d3, tlen, alen, slen))\n        );\n        bcurves.push(\n          segment.scale(linearDistanceFunction(-d2, -d4, tlen, alen, slen))\n        );\n      } else {\n        fcurves.push(segment.scale(d1));\n        bcurves.push(segment.scale(-d2));\n      }\n      alen += slen;\n    });\n\n    // reverse the \"return\" outline\n    bcurves = bcurves\n      .map(function (s) {\n        p = s.points;\n        if (p[3]) {\n          s.points = [p[3], p[2], p[1], p[0]];\n        } else {\n          s.points = [p[2], p[1], p[0]];\n        }\n        return s;\n      })\n      .reverse();\n\n    // form the endcaps as lines\n    const fs = fcurves[0].points[0],\n      fe = fcurves[len - 1].points[fcurves[len - 1].points.length - 1],\n      bs = bcurves[len - 1].points[bcurves[len - 1].points.length - 1],\n      be = bcurves[0].points[0],\n      ls = utils.makeline(bs, fs),\n      le = utils.makeline(fe, be),\n      segments = [ls].concat(fcurves).concat([le]).concat(bcurves);\n\n    return new PolyBezier(segments);\n  }\n\n  outlineshapes(d1, d2, curveIntersectionThreshold) {\n    d2 = d2 || d1;\n    const outline = this.outline(d1, d2).curves;\n    const shapes = [];\n    for (let i = 1, len = outline.length; i < len / 2; i++) {\n      const shape = utils.makeshape(\n        outline[i],\n        outline[len - i],\n        curveIntersectionThreshold\n      );\n      shape.startcap.virtual = i > 1;\n      shape.endcap.virtual = i < len / 2 - 1;\n      shapes.push(shape);\n    }\n    return shapes;\n  }\n\n  intersects(curve, curveIntersectionThreshold) {\n    if (!curve) return this.selfintersects(curveIntersectionThreshold);\n    if (curve.p1 && curve.p2) {\n      return this.lineIntersects(curve);\n    }\n    if (curve instanceof Bezier) {\n      curve = curve.reduce();\n    }\n    return this.curveintersects(\n      this.reduce(),\n      curve,\n      curveIntersectionThreshold\n    );\n  }\n\n  lineIntersects(line) {\n    const mx = min(line.p1.x, line.p2.x),\n      my = min(line.p1.y, line.p2.y),\n      MX = max(line.p1.x, line.p2.x),\n      MY = max(line.p1.y, line.p2.y);\n    return utils.roots(this.points, line).filter((t) => {\n      var p = this.get(t);\n      return utils.between(p.x, mx, MX) && utils.between(p.y, my, MY);\n    });\n  }\n\n  selfintersects(curveIntersectionThreshold) {\n    // \"simple\" curves cannot intersect with their direct\n    // neighbour, so for each segment X we check whether\n    // it intersects [0:x-2][x+2:last].\n\n    const reduced = this.reduce(),\n      len = reduced.length - 2,\n      results = [];\n\n    for (let i = 0, result, left, right; i < len; i++) {\n      left = reduced.slice(i, i + 1);\n      right = reduced.slice(i + 2);\n      result = this.curveintersects(left, right, curveIntersectionThreshold);\n      results.push(...result);\n    }\n    return results;\n  }\n\n  curveintersects(c1, c2, curveIntersectionThreshold) {\n    const pairs = [];\n    // step 1: pair off any overlapping segments\n    c1.forEach(function (l) {\n      c2.forEach(function (r) {\n        if (l.overlaps(r)) {\n          pairs.push({ left: l, right: r });\n        }\n      });\n    });\n    // step 2: for each pairing, run through the convergence algorithm.\n    let intersections = [];\n    pairs.forEach(function (pair) {\n      const result = utils.pairiteration(\n        pair.left,\n        pair.right,\n        curveIntersectionThreshold\n      );\n      if (result.length > 0) {\n        intersections = intersections.concat(result);\n      }\n    });\n    return intersections;\n  }\n\n  arcs(errorThreshold) {\n    errorThreshold = errorThreshold || 0.5;\n    return this._iterate(errorThreshold, []);\n  }\n\n  _error(pc, np1, s, e) {\n    const q = (e - s) / 4,\n      c1 = this.get(s + q),\n      c2 = this.get(e - q),\n      ref = utils.dist(pc, np1),\n      d1 = utils.dist(pc, c1),\n      d2 = utils.dist(pc, c2);\n    return abs(d1 - ref) + abs(d2 - ref);\n  }\n\n  _iterate(errorThreshold, circles) {\n    let t_s = 0,\n      t_e = 1,\n      safety;\n    // we do a binary search to find the \"good `t` closest to no-longer-good\"\n    do {\n      safety = 0;\n\n      // step 1: start with the maximum possible arc\n      t_e = 1;\n\n      // points:\n      let np1 = this.get(t_s),\n        np2,\n        np3,\n        arc,\n        prev_arc;\n\n      // booleans:\n      let curr_good = false,\n        prev_good = false,\n        done;\n\n      // numbers:\n      let t_m = t_e,\n        prev_e = 1,\n        step = 0;\n\n      // step 2: find the best possible arc\n      do {\n        prev_good = curr_good;\n        prev_arc = arc;\n        t_m = (t_s + t_e) / 2;\n        step++;\n\n        np2 = this.get(t_m);\n        np3 = this.get(t_e);\n\n        arc = utils.getccenter(np1, np2, np3);\n\n        //also save the t values\n        arc.interval = {\n          start: t_s,\n          end: t_e,\n        };\n\n        let error = this._error(arc, np1, t_s, t_e);\n        curr_good = error <= errorThreshold;\n\n        done = prev_good && !curr_good;\n        if (!done) prev_e = t_e;\n\n        // this arc is fine: we can move 'e' up to see if we can find a wider arc\n        if (curr_good) {\n          // if e is already at max, then we're done for this arc.\n          if (t_e >= 1) {\n            // make sure we cap at t=1\n            arc.interval.end = prev_e = 1;\n            prev_arc = arc;\n            // if we capped the arc segment to t=1 we also need to make sure that\n            // the arc's end angle is correct with respect to the bezier end point.\n            if (t_e > 1) {\n              let d = {\n                x: arc.x + arc.r * cos(arc.e),\n                y: arc.y + arc.r * sin(arc.e),\n              };\n              arc.e += utils.angle({ x: arc.x, y: arc.y }, d, this.get(1));\n            }\n            break;\n          }\n          // if not, move it up by half the iteration distance\n          t_e = t_e + (t_e - t_s) / 2;\n        } else {\n          // this is a bad arc: we need to move 'e' down to find a good arc\n          t_e = t_m;\n        }\n      } while (!done && safety++ < 100);\n\n      if (safety >= 100) {\n        break;\n      }\n\n      // console.log(\"L835: [F] arc found\", t_s, prev_e, prev_arc.x, prev_arc.y, prev_arc.s, prev_arc.e);\n\n      prev_arc = prev_arc ? prev_arc : arc;\n      circles.push(prev_arc);\n      t_s = prev_e;\n    } while (t_e < 1);\n    return circles;\n  }\n}\n\nexport { Bezier };\n","import type { Point } from \"../point/PointType.js\";\nimport { guardDim } from \"./Guard.js\";\nimport type { RectPositioned } from \"./RectTypes.js\";\nimport { guard as PointsGuard } from '../point/Guard.js';\n\n/**\n * Creates a rectangle from its top-left coordinate, a width and height.\n *\n * ```js\n * import { Rects } from \"https://unpkg.com/ixfx/dist/geometry.js\";\n *\n * // Rectangle at 50,50 with width of 100, height of 200.\n * const rect = Rects.fromTopLeft({ x: 50, y:50 }, 100, 200);\n * ```\n * @param origin\n * @param width\n * @param height\n * @returns\n */\nexport const fromTopLeft = (\n  origin: Point,\n  width: number,\n  height: number\n): RectPositioned => {\n  guardDim(width, `width`);\n  guardDim(height, `height`);\n  PointsGuard(origin, `origin`);\n\n  return { x: origin.x, y: origin.y, width: width, height: height };\n};\n","import type { Path } from \"../path/PathType.js\";\nimport type { QuadraticBezier, CubicBezier } from \"./BezierType.js\";\n\nexport const isQuadraticBezier = (path: Path | QuadraticBezier | CubicBezier): path is QuadraticBezier => (path as QuadraticBezier).quadratic !== undefined;\n\nexport const isCubicBezier = (path: Path | CubicBezier | QuadraticBezier): path is CubicBezier => (path as CubicBezier).cubic1 !== undefined && (path as CubicBezier).cubic2 !== undefined;\n"],"mappings":"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","names":["min","max","dotProduct","guard","b","a","guard","dotProduct","max","min","distance","clamp","clampMagnitude","divide","dotProduct","interpolate","invert","multiply","normalise","quantiseEvery","rotate","round","toString","wrap","min","sum","clamp","min","max","guard","isNaN","guard","isPositioned","guardPositioned","isEmpty","isPlaceholder","isEqual","isEqual","centroid","guard","isPositioned","guard","distanceFromExterior","guardPositioned","distanceFromExterior","distanceFromExterior","divide","dotProduct","guard","getPointParameter","sum","getPointParameter","getPointParameter","interpolate","invert","multiply","clampMagnitude","max","min","length","multiply","length","normalise","pipeline","distance","quantiseEvery","rotate","round","toString","wrap","abs","t","t2","sum","bbox","intersections","min","max","reduce","a","b","c","d","v1","q","bbox","abs","cos","sin","acos","sqrt","pi","point","t","abs","pi","sqrt","acos","d","ls","le","segments","tlen","alen","intersections","cos","sin","cubic","cubic2","t","quadratic"]}