{"version":3,"sources":["../src/numbers/Round.ts"],"sourcesContent":["import { throwIntegerTest, throwNumberTest } from \"../util/GuardNumbers.js\";\n\nexport function round(decimalPlaces: number, v: number, roundUp?: boolean): number;\nexport function round(decimalPlaces: number, roundUp?: boolean): (v: number) => number;\n\n/**\n * Rounds a number.\n *\n * If one parameter is given, it's the decimal places,\n * and a rounding function is returned:\n * ```js\n * import { round } from 'https://unpkg.com/ixfx/dist/numbers.js';\n * const r = round(2);\n * r(10.12355); // 10.12\n * ```\n *\n * If two parameters are given, the first is decimal places,\n * the second the value to round.\n * ```js\n * round(2, 10.12355); // 10.12\n * ```\n * @param decimalPlaces\n * @returns\n */\nexport function round(a: number, b?: number | boolean, roundUp?: boolean) {\n  throwIntegerTest(a, `positive`, `decimalPlaces`);\n\n  let up = (typeof b === `boolean`) ? b : (roundUp ?? false)\n  let rounder;\n  if (a === 0) {\n    rounder = Math.round;\n  } else {\n    const p = Math.pow(10, a);\n    if (up) {\n      rounder = (v: number) => Math.ceil(v * p) / p;\n    } else {\n      rounder = (v: number) => Math.floor(v * p) / p;\n    }\n  }\n  if (typeof b === `number`) return rounder(b);\n  return rounder;\n}\n\n\n/**\n * Rounds `v` up to the nearest multiple of `multiple`\n * ```\n * roundMultiple(19, 20); // 20\n * roundMultiple(21, 20); // 40\n * ```\n * @param v\n * @param multiple\n * @returns\n */\n// export const roundUpToMultiple = (v: number, multiple: number): number => {\n//   throwNumberTest(v, `nonZero`, `v`);\n//   throwNumberTest(multiple, `nonZero`, `multiple`);\n//   return Math.ceil(v / multiple) * multiple;\n// };\n"],"mappings":";;;;;AAwBO,SAAS,MAAM,GAAW,GAAsB,SAAmB;AACxE,mBAAiB,GAAG,YAAY,eAAe;AAE/C,MAAI,KAAM,OAAO,MAAM,YAAa,IAAK,WAAW;AACpD,MAAI;AACJ,MAAI,MAAM,GAAG;AACX,cAAU,KAAK;AAAA,EACjB,OAAO;AACL,UAAM,IAAI,KAAK,IAAI,IAAI,CAAC;AACxB,QAAI,IAAI;AACN,gBAAU,CAAC,MAAc,KAAK,KAAK,IAAI,CAAC,IAAI;AAAA,IAC9C,OAAO;AACL,gBAAU,CAAC,MAAc,KAAK,MAAM,IAAI,CAAC,IAAI;AAAA,IAC/C;AAAA,EACF;AACA,MAAI,OAAO,MAAM,SAAU,QAAO,QAAQ,CAAC;AAC3C,SAAO;AACT;","names":[]}