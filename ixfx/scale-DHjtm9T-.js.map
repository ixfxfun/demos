{"version":3,"file":"scale-DHjtm9T-.js","names":[],"sources":["../../numbers/dist/src/scale.js"],"sourcesContent":["import { clamp, clamper } from './clamp.js';\nimport { numberTest, resultThrow } from '@ixfx/guards';\n/**\n * Scales `v` from an input range to an output range (aka `map`)\n *\n * For example, if a sensor's useful range is 100-500, scale it to a percentage:\n *\n * ```js\n *\n * scale(sensorReading, 100, 500, 0, 1);\n * ```\n *\n * `scale` defaults to a percentage-range output, so you can get away with:\n * ```js\n * scale(sensorReading, 100, 500);\n * ```\n *\n * If `v` is outside of the input range, it will likewise be outside of the output range.\n * Use {@link scaleClamped} to clip value to range.\n *\n * If inMin and inMax are equal, outMax will be returned.\n *\n * An easing function can be provided for non-linear scaling. In this case\n * the input value is 'pre scaled' using the function before it is applied to the\n * output range.\n *\n * ```js\n * scale(sensorReading, 100, 500, 0, 1, Easings.gaussian());\n * ```\n * @param v Value to scale\n * @param inMin Input minimum\n * @param inMax Input maximum\n * @param outMin Output minimum. If not specified, 0\n * @param outMax Output maximum. If not specified, 1\n * @param easing Easing function\n * @returns Scaled value\n */\nexport const scale = (v, inMin, inMax, outMin, outMax, easing) => scaler(inMin, inMax, outMin, outMax, easing)(v);\n/**\n * Returns a scaling function\n * @param inMin Input minimum\n * @param inMax Input maximum\n * @param outMin Output minimum. If not specified, 0\n * @param outMax Output maximum. If not specified, 1\n * @param easing Easing function\n * @param clamped If true, value is clamped. Default: false\n * @returns\n */\nexport const scaler = (inMin, inMax, outMin, outMax, easing, clamped) => {\n    resultThrow(numberTest(inMin, `finite`, `inMin`), numberTest(inMax, `finite`, `inMax`));\n    const oMax = outMax ?? 1;\n    const oMin = outMin ?? 0;\n    const clampFunction = clamped ? clamper(outMin, outMax) : undefined;\n    return (v) => {\n        if (inMin === inMax)\n            return oMax;\n        let a = (v - inMin) / (inMax - inMin);\n        if (easing !== undefined)\n            a = easing(a);\n        const x = a * (oMax - oMin) + oMin;\n        if (clampFunction)\n            return clampFunction(x);\n        return x;\n    };\n};\n/**\n * Returns a 'null' scaler that does nothing - the input value is returned as output.\n * @returns\n */\nexport const scalerNull = () => (v) => v;\n/**\n * As {@link scale}, but result is clamped to be\n * within `outMin` and `outMax`.\n *\n * @param v\n * @param inMin\n * @param inMax\n * @param outMin 1 by default\n * @param outMax 0 by default d\n * @param easing\n * @returns\n */\nexport const scaleClamped = (v, inMin, inMax, outMin, outMax, easing) => {\n    if (typeof outMax === `undefined`)\n        outMax = 1;\n    if (typeof outMin === `undefined`)\n        outMin = 0;\n    if (inMin === inMax)\n        return outMax;\n    const x = scale(v, inMin, inMax, outMin, outMax, easing);\n    return clamp(x, outMin, outMax);\n};\n/**\n * Scales an input percentage to a new percentage range.\n *\n * If you have an input percentage (0-1), `scalePercentageOutput` maps it to an\n * _output_ percentage of `outMin`-`outMax`.\n *\n * ```js\n * // Scales 50% to a range of 0-10%\n * scalePercentages(0.5, 0, 0.10); // 0.05 - 5%\n * ```\n *\n * An error is thrown if any parameter is outside of percentage range. This added\n * safety is useful for catching bugs. Otherwise, you could just as well call\n * `scale(percentage, 0, 1, outMin, outMax)`.\n *\n * If you want to scale some input range to percentage output range, just use `scale`:\n * ```js\n * // Yields 0.5\n * scale(2.5, 0, 5);\n * ```\n * @param percentage Input value, within percentage range\n * @param outMin Output minimum, between 0-1\n * @param outMax Output maximum, between 0-1\n * @returns Scaled value between outMin-outMax.\n */\nexport const scalePercentages = (percentage, outMin, outMax = 1) => {\n    resultThrow(numberTest(percentage, `percentage`, `v`), numberTest(outMin, `percentage`, `outMin`), numberTest(outMax, `percentage`, `outMax`));\n    return scale(percentage, 0, 1, outMin, outMax);\n};\n/**\n * Scales an input percentage value to an output range\n * If you have an input percentage (0-1), `scalePercent` maps it to an output range of `outMin`-`outMax`.\n * ```js\n * scalePercent(0.5, 10, 20); // 15\n * ```\n *\n * @see {@link scalerPercent} Returns a function\n * @param v Value to scale\n * @param outMin Minimum for output\n * @param outMax Maximum for output\n * @returns\n */\nexport const scalePercent = (v, outMin, outMax) => scalerPercent(outMin, outMax)(v);\n/**\n * Returns a function that scales an input percentage value to an output range\n * @see {@link scalePercent} Calculates value\n * @param outMin\n * @param outMax\n * @returns Function that takes a single argument\n */\nexport const scalerPercent = (outMin, outMax) => {\n    return (v) => {\n        resultThrow(numberTest(v, `percentage`, `v`));\n        return scale(v, 0, 1, outMin, outMax);\n    };\n};\n/**\n * Returns a two-way scaler\n * ```js\n * // Input range 0..100, output range 0..1\n * const s = scalerTwoWay(0,100,0,1);\n *\n * // Scale from input to output\n * s.out(50); // 0.5\n *\n * // Scale from output range to input\n * s.in(1); // 100\n * ```\n * @param inMin\n * @param inMax\n * @param outMin\n * @param outMax\n * @returns\n */\nexport const scalerTwoWay = (inMin, inMax, outMin = 0, outMax = 1, clamped = false, easing) => {\n    const toOut = scaler(inMin, inMax, outMin, outMax, easing, clamped);\n    const toIn = scaler(outMin, outMax, inMin, inMax, easing, clamped);\n    return { out: toOut, in: toIn };\n};\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqCA,MAAa,QAAQ,CAAC,GAAG,OAAO,OAAO,QAAQ,QAAQ,WAAW,OAAO,OAAO,OAAO,QAAQ,QAAQ,OAAO,CAAC,EAAE;;;;;;;;;;;AAWjH,MAAa,SAAS,CAAC,OAAO,OAAO,QAAQ,QAAQ,QAAQ,YAAY;CACrE,YAAY,WAAW,OAAO,CAAC,MAAM,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,EAAE,WAAW,OAAO,CAAC,MAAM,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC;CACvF,MAAM,OAAO,UAAU;CACvB,MAAM,OAAO,UAAU;CACvB,MAAM,gBAAgB,UAAU,QAAQ,QAAQ,OAAO,GAAG;AAC1D,QAAO,CAAC,MAAM;AACV,MAAI,UAAU,MACV,QAAO;EACX,IAAI,KAAK,IAAI,UAAU,QAAQ;AAC/B,MAAI,WAAW,QACX,IAAI,OAAO,EAAE;EACjB,MAAM,IAAI,KAAK,OAAO,QAAQ;AAC9B,MAAI,cACA,QAAO,cAAc,EAAE;AAC3B,SAAO;CACV;AACJ;;;;;;;;;;;;;;;;;;;AAsGD,MAAa,eAAe,CAAC,OAAO,OAAO,SAAS,GAAG,SAAS,GAAG,UAAU,OAAO,WAAW;CAC3F,MAAM,QAAQ,OAAO,OAAO,OAAO,QAAQ,QAAQ,QAAQ,QAAQ;CACnE,MAAM,OAAO,OAAO,QAAQ,QAAQ,OAAO,OAAO,QAAQ,QAAQ;AAClE,QAAO;EAAE,KAAK;EAAO,IAAI;CAAM;AAClC"}