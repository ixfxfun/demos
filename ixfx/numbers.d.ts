import { BasicInterpolateOptions, BipolarWrapper, DifferenceKind, HelloTest$1 as HelloTest, NumberScaler, NumberScalerTwoWay, NumbersComputeOptions, NumbersComputeResult, applyToValues$1 as applyToValues, array$1 as array, average$4 as average, averageWeighted$1 as averageWeighted, bipolar_d_exports, clamp$1 as clamp, clampIndex$1 as clampIndex, clamper$1 as clamper, count$1 as count, differenceFromFixed$1 as differenceFromFixed, differenceFromLast$1 as differenceFromLast, dotProduct$1 as dotProduct, filterIterable$1 as filterIterable, flip$1 as flip, interpolate$3 as interpolate, interpolateAngle$2 as interpolateAngle, interpolatorStepped$2 as interpolatorStepped, isApprox$1 as isApprox, isCloseToAny$1 as isCloseToAny, isValid$1 as isValid, linearSpace$1 as linearSpace, max$5 as max, maxFast$1 as maxFast, maxIndex$1 as maxIndex, min$5 as min, minFast$1 as minFast, minIndex$1 as minIndex, movingAverage$1 as movingAverage, movingAverageLight$1 as movingAverageLight, noiseFilter$1 as noiseFilter, numberArrayCompute$1 as numberArrayCompute, numericPercent$1 as numericPercent, numericRange$1 as numericRange, numericRangeRaw$1 as numericRangeRaw, proportion$1 as proportion, quantiseEvery$1 as quantiseEvery, rangeInclusive$1 as rangeInclusive, round$1 as round, scale$1 as scale, scaleClamped$1 as scaleClamped, scalePercent$1 as scalePercent, scalePercentages$1 as scalePercentages, scaler$3 as scaler, scalerNull$1 as scalerNull, scalerPercent$1 as scalerPercent, scalerTwoWay$1 as scalerTwoWay, softmax$1 as softmax, stream$1 as stream, thresholdAtLeast$1 as thresholdAtLeast, total$1 as total, totalFast$1 as totalFast, validNumbers$1 as validNumbers, weight$1 as weight, wrap$2 as wrap, wrapInteger$1 as wrapInteger, wrapRange$1 as wrapRange } from "./numbers-U2z3oaRl.js";
export { BasicInterpolateOptions, bipolar_d_exports as Bipolar, BipolarWrapper, DifferenceKind, HelloTest, NumberScaler, NumberScalerTwoWay, NumbersComputeOptions, NumbersComputeResult, applyToValues, array, average, averageWeighted, clamp, clampIndex, clamper, count, differenceFromFixed, differenceFromLast, dotProduct, filterIterable, flip, interpolate, interpolateAngle, interpolatorStepped, isApprox, isCloseToAny, isValid, linearSpace, max, maxFast, maxIndex, min, minFast, minIndex, movingAverage, movingAverageLight, noiseFilter, numberArrayCompute, numericPercent, numericRange, numericRangeRaw, proportion, quantiseEvery, rangeInclusive, round, scale, scaleClamped, scalePercent, scalePercentages, scaler, scalerNull, scalerPercent, scalerTwoWay, softmax, stream, thresholdAtLeast, total, totalFast, validNumbers, weight, wrap, wrapInteger, wrapRange };