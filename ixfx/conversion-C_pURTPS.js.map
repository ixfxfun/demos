{"version":3,"file":"conversion-C_pURTPS.js","names":["withOpacity","value: T","fn: (opacityScalar: number, value: T) => number","value: string","toCss","rgb: Rgb","toLibrary","abs","fromLibrary","rgb: C.RGB","toScalar","guard","v: any","value: T","fn: (opacityScalar: number, value: T) => number","value: string","options: ParsingOptions<HslAbsolute>","hsl: Hsl","abs","hsl: C.HSL","parsingOptions: ParsingOptions<HslAbsolute>","guard","hexString: string","colour: any","colour: string","fromCss","colour: Colour","colourish: any","c: Colour | undefined"],"sources":["../../node_modules/.pnpm/colorizr@3.0.7/node_modules/colorizr/dist/index.mjs","../../packages/visual/src/colour/srgb.ts","../../packages/visual/src/colour/types.ts","../../packages/visual/src/colour/hsl.ts","../../packages/visual/src/colour/css-colours.ts","../../packages/visual/src/colour/conversion.ts"],"sourcesContent":["var __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __export = (target, all) => {\n  for (var name2 in all)\n    __defProp(target, name2, { get: all[name2], enumerable: true });\n};\nvar __publicField = (obj, key, value) => __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n\n// src/modules/invariant.ts\nfunction invariant(condition, message) {\n  if (condition) {\n    return;\n  }\n  if (process.env.NODE_ENV !== \"production\") {\n    if (message === void 0) {\n      throw new Error(\"invariant requires an error message argument\");\n    }\n  }\n  const error = !message ? new Error(\n    \"Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.\"\n  ) : new Error(message);\n  error.name = \"colorizr\";\n  throw error;\n}\n\n// src/modules/constants.ts\nvar COLOR_KEYS = {\n  hsl: [\"h\", \"s\", \"l\"],\n  oklab: [\"l\", \"a\", \"b\"],\n  oklch: [\"l\", \"c\", \"h\"],\n  rgb: [\"r\", \"g\", \"b\"]\n};\nvar COLOR_MODELS = [\"hsl\", \"oklab\", \"oklch\", \"rgb\"];\nvar DEG2RAD = Math.PI / 180;\nvar LAB_TO_LMS = {\n  l: [0.3963377773761749, 0.2158037573099136],\n  m: [-0.1055613458156586, -0.0638541728258133],\n  s: [-0.0894841775298119, -1.2914855480194092]\n};\nvar LRGB_TO_LMS = {\n  l: [0.4122214708, 0.5363325363, 0.0514459929],\n  m: [0.2119034982, 0.6806995451, 0.1073969566],\n  s: [0.0883024619, 0.2817188376, 0.6299787005]\n};\nvar LSM_TO_LAB = {\n  l: [0.2104542553, 0.793617785, 0.0040720468],\n  a: [1.9779984951, 2.428592205, 0.4505937099],\n  b: [0.0259040371, 0.7827717662, 0.808675766]\n};\nvar LSM_TO_RGB = {\n  r: [4.076741636075958, -3.307711539258063, 0.2309699031821043],\n  g: [-1.2684379732850315, 2.609757349287688, -0.341319376002657],\n  b: [-0.0041960761386756, -0.7034186179359362, 1.7076146940746117]\n};\nvar SRGB_TO_P3 = [\n  [0.8224270476, 0.1775729524, 0],\n  [0.0331008087, 0.9668991913, 0],\n  [0.0170720188, 0.0723477973, 0.9105801839]\n];\nvar PRECISION = 5;\nvar RAD2DEG = 180 / Math.PI;\nvar MESSAGES = {\n  alpha: \"amount must be a number between 0 and 1\",\n  hueRange: \"hue must be a number between 0 and 360\",\n  input: \"input is required\",\n  inputHex: \"input is required and must be a hex\",\n  inputNumber: \"input is required and must be a number\",\n  inputString: \"input is required and must be a string\",\n  invalid: \"invalid input\",\n  invalidCSS: \"invalid CSS string\",\n  left: \"left is required and must be a string\",\n  lightnessRange: \"lightness must be a number between 0 and 1\",\n  options: \"invalid options\",\n  right: \"right is required and must be a string\",\n  threshold: \"threshold must be a number between 0 and 255\"\n};\n\n// src/modules/css-colors.ts\nvar cssColors = {\n  aliceblue: \"#f0f8ff\",\n  antiquewhite: \"#faebd7\",\n  aqua: \"#00ffff\",\n  aquamarine: \"#7fffd4\",\n  azure: \"#f0ffff\",\n  beige: \"#f5f5dc\",\n  bisque: \"#ffe4c4\",\n  black: \"#000000\",\n  blanchedalmond: \"#ffebcd\",\n  blue: \"#0000ff\",\n  blueviolet: \"#8a2be2\",\n  brown: \"#a52a2a\",\n  burlywood: \"#deb887\",\n  cadetblue: \"#5f9ea0\",\n  chartreuse: \"#7fff00\",\n  chocolate: \"#d2691e\",\n  coral: \"#ff7f50\",\n  cornflowerblue: \"#6495ed\",\n  cornsilk: \"#fff8dc\",\n  crimson: \"#dc143c\",\n  cyan: \"#00ffff\",\n  darkblue: \"#00008b\",\n  darkcyan: \"#008b8b\",\n  darkgoldenrod: \"#b8860b\",\n  darkgray: \"#a9a9a9\",\n  darkgreen: \"#006400\",\n  darkkhaki: \"#bdb76b\",\n  darkmagenta: \"#8b008b\",\n  darkolivegreen: \"#556b2f\",\n  darkorange: \"#ff8c00\",\n  darkorchid: \"#9932cc\",\n  darkred: \"#8b0000\",\n  darksalmon: \"#e9967a\",\n  darkseagreen: \"#8fbc8f\",\n  darkslateblue: \"#483d8b\",\n  darkslategray: \"#2f4f4f\",\n  darkslategrey: \"#2f4f4f\",\n  darkturquoise: \"#00ced1\",\n  darkviolet: \"#9400d3\",\n  deeppink: \"#ff1493\",\n  deepskyblue: \"#00bfff\",\n  dimgray: \"#696969\",\n  dimgrey: \"#696969\",\n  dodgerblue: \"#1e90ff\",\n  firebrick: \"#b22222\",\n  floralwhite: \"#fffaf0\",\n  forestgreen: \"#228b22\",\n  fuchsia: \"#ff00ff\",\n  gainsboro: \"#dcdcdc\",\n  ghostwhite: \"#f8f8ff\",\n  gold: \"#ffd700\",\n  goldenrod: \"#daa520\",\n  gray: \"#808080\",\n  grey: \"#808080\",\n  green: \"#008000\",\n  greenyellow: \"#adff2f\",\n  honeydew: \"#f0fff0\",\n  hotpink: \"#ff69b4\",\n  indianred: \"#cd5c5c\",\n  indigo: \"#4b0082\",\n  ivory: \"#fffff0\",\n  khaki: \"#f0e68c\",\n  lavender: \"#e6e6fa\",\n  lavenderblush: \"#fff0f5\",\n  lawngreen: \"#7cfc00\",\n  lemonchiffon: \"#fffacd\",\n  lightblue: \"#add8e6\",\n  lightcoral: \"#f08080\",\n  lightcyan: \"#e0ffff\",\n  lightgoldenrodyellow: \"#fafad2\",\n  lightgray: \"#d3d3d3\",\n  lightgreen: \"#90ee90\",\n  lightgrey: \"#d3d3d3\",\n  lightpink: \"#ffb6c1\",\n  lightsalmon: \"#ffa07a\",\n  lightseagreen: \"#20b2aa\",\n  lightskyblue: \"#87cefa\",\n  lightslategray: \"#778899\",\n  lightslategrey: \"#778899\",\n  lightsteelblue: \"#b0c4de\",\n  lightyellow: \"#ffffe0\",\n  lime: \"#00ff00\",\n  limegreen: \"#32cd32\",\n  linen: \"#faf0e6\",\n  magenta: \"#ff00ff\",\n  maroon: \"#800000\",\n  mediumaquamarine: \"#66cdaa\",\n  mediumblue: \"#0000cd\",\n  mediumorchid: \"#ba55d3\",\n  mediumpurple: \"#9370db\",\n  mediumseagreen: \"#3cb371\",\n  mediumslateblue: \"#7b68ee\",\n  mediumspringgreen: \"#00fa9a\",\n  mediumturquoise: \"#48d1cc\",\n  mediumvioletred: \"#c71585\",\n  midnightblue: \"#191970\",\n  mintcream: \"#f5fffa\",\n  mistyrose: \"#ffe4e1\",\n  moccasin: \"#ffe4b5\",\n  navajowhite: \"#ffdead\",\n  navy: \"#000080\",\n  oldlace: \"#fdf5e6\",\n  olive: \"#808000\",\n  olivedrab: \"#6b8e23\",\n  orange: \"#ffa500\",\n  orangered: \"#ff4500\",\n  orchid: \"#da70d6\",\n  palegoldenrod: \"#eee8aa\",\n  palegreen: \"#98fb98\",\n  paleturquoise: \"#afeeee\",\n  palevioletred: \"#db7093\",\n  papayawhip: \"#ffefd5\",\n  peachpuff: \"#ffdab9\",\n  peru: \"#cd853f\",\n  pink: \"#ffc0cb\",\n  plum: \"#dda0dd\",\n  powderblue: \"#b0e0e6\",\n  purple: \"#800080\",\n  rebeccapurple: \"#663399\",\n  red: \"#ff0000\",\n  rosybrown: \"#bc8f8f\",\n  royalblue: \"#4169e1\",\n  saddlebrown: \"#8b4513\",\n  salmon: \"#fa8072\",\n  sandybrown: \"#f4a460\",\n  seagreen: \"#2e8b57\",\n  seashell: \"#fff5ee\",\n  sienna: \"#a0522d\",\n  silver: \"#c0c0c0\",\n  skyblue: \"#87ceeb\",\n  slateblue: \"#6a5acd\",\n  slategray: \"#708090\",\n  slategrey: \"#708090\",\n  snow: \"#fffafa\",\n  springgreen: \"#00ff7f\",\n  steelblue: \"#4682b4\",\n  tan: \"#d2b48c\",\n  teal: \"#008080\",\n  thistle: \"#d8bfd8\",\n  tomato: \"#ff6347\",\n  turquoise: \"#40e0d0\",\n  violet: \"#ee82ee\",\n  wheat: \"#f5deb3\",\n  white: \"#ffffff\",\n  whitesmoke: \"#f5f5f5\",\n  yellow: \"#ffff00\",\n  yellowgreen: \"#9acd32\"\n};\n\n// src/modules/validators.ts\nfunction hasValidMatches(input) {\n  return Array.isArray(input) && input.length === 6;\n}\nfunction isNamedColor(input) {\n  return isString(input) && Object.keys(cssColors).includes(input.toLowerCase());\n}\nfunction isNumber(input) {\n  return typeof input === \"number\" && !Number.isNaN(input);\n}\nfunction isPlainObject(input) {\n  if (!input) {\n    return false;\n  }\n  const { toString } = Object.prototype;\n  const prototype = Object.getPrototypeOf(input);\n  return toString.call(input) === \"[object Object]\" && (prototype === null || prototype === Object.getPrototypeOf({}));\n}\nfunction isString(input, validate = true) {\n  const isValid = typeof input === \"string\";\n  if (validate) {\n    return isValid && !!input.trim().length;\n  }\n  return isValid;\n}\nfunction isValidColorModel(input) {\n  return isHSL(input) || isRGB(input) || isLAB(input) || isLCH(input);\n}\nfunction isHex(input) {\n  if (!isString(input)) {\n    return false;\n  }\n  return /^#([\\da-f]{3,4}|[\\da-f]{6,8})$/i.test(input);\n}\nfunction isHSL(input) {\n  if (!isPlainObject(input)) {\n    return false;\n  }\n  const entries = Object.entries(input);\n  return !!entries.length && entries.every(([key, value]) => {\n    if (key === \"h\") {\n      return value >= 0 && value <= 360;\n    }\n    if (key === \"alpha\") {\n      return value >= 0 && value <= 1;\n    }\n    return COLOR_KEYS.hsl.includes(key) && value >= 0 && value <= 100;\n  });\n}\nfunction isLAB(input) {\n  if (!isPlainObject(input)) {\n    return false;\n  }\n  const entries = Object.entries(input);\n  return !!entries.length && entries.every(([key, value]) => {\n    if (key === \"l\") {\n      return value >= 0 && value <= 100;\n    }\n    if (key === \"alpha\") {\n      return value >= 0 && value <= 1;\n    }\n    return COLOR_KEYS.oklab.includes(key) && value >= -1 && value <= 1;\n  });\n}\nfunction isLCH(input) {\n  if (!isPlainObject(input)) {\n    return false;\n  }\n  const entries = Object.entries(input);\n  return !!entries.length && entries.every(([key, value]) => {\n    if (key === \"l\") {\n      return value >= 0 && value <= 100;\n    }\n    if (key === \"alpha\") {\n      return value >= 0 && value <= 1;\n    }\n    return COLOR_KEYS.oklch.includes(key) && value >= 0 && value <= (key === \"h\" ? 360 : 1);\n  });\n}\nfunction isRGB(input) {\n  if (!isPlainObject(input)) {\n    return false;\n  }\n  const entries = Object.entries(input);\n  return !!entries.length && entries.every(([key, value]) => {\n    if (key === \"alpha\") {\n      return value >= 0 && value <= 1;\n    }\n    return COLOR_KEYS.rgb.includes(key) && value >= 0 && value <= 255;\n  });\n}\n\n// src/modules/utils.ts\nfunction addAlpha(input, alpha) {\n  invariant(isValidColorModel(input), MESSAGES.invalid);\n  let value = alpha;\n  if (!value) {\n    return input;\n  }\n  if (value > 1) {\n    value /= 100;\n  }\n  if (value === 1) {\n    return input;\n  }\n  return { ...input, alpha: value };\n}\nfunction clamp(value, min = 0, max = 100) {\n  return Math.min(Math.max(value, min), max);\n}\nfunction constrainDegrees(input, amount) {\n  invariant(isNumber(input), MESSAGES.inputNumber);\n  let value = input + amount;\n  if (value > 360) {\n    value %= 360;\n  }\n  if (value < 0) {\n    value += 360;\n  }\n  return Math.abs(value);\n}\nfunction limit(input, model, key) {\n  invariant(isNumber(input), \"Input is not a number\");\n  invariant(COLOR_MODELS.includes(model), `Invalid model${model ? `: ${model}` : \"\"}`);\n  invariant(COLOR_KEYS[model].includes(key), `Invalid key${key ? `: ${key}` : \"\"}`);\n  switch (model) {\n    case \"hsl\": {\n      invariant(COLOR_KEYS.hsl.includes(key), \"Invalid key\");\n      if ([\"s\", \"l\"].includes(key)) {\n        return clamp(input);\n      }\n      return clamp(input, 0, 360);\n    }\n    case \"rgb\": {\n      invariant(COLOR_KEYS.rgb.includes(key), \"Invalid key\");\n      return clamp(input, 0, 255);\n    }\n    /* c8 ignore next 3 */\n    default: {\n      throw new Error(\"Invalid inputs\");\n    }\n  }\n}\nfunction parseInput(input, model) {\n  const keys = COLOR_KEYS[model];\n  const validator = {\n    hsl: isHSL,\n    oklab: isLAB,\n    oklch: isLCH,\n    rgb: isRGB\n  };\n  invariant(isPlainObject(input) || Array.isArray(input), MESSAGES.invalid);\n  const value = Array.isArray(input) ? { [keys[0]]: input[0], [keys[1]]: input[1], [keys[2]]: input[2] } : input;\n  invariant(validator[model](value), `invalid ${model} color`);\n  return value;\n}\nfunction restrictValues(input, precision = PRECISION, forcePrecision = true) {\n  const output = new Map(Object.entries(input));\n  for (const [key, value] of output.entries()) {\n    output.set(key, round(value, precision, forcePrecision));\n  }\n  return Object.fromEntries(output);\n}\nfunction round(input, precision = 2, forcePrecision = true) {\n  if (!isNumber(input) || input === 0) {\n    return 0;\n  }\n  if (forcePrecision) {\n    const factor2 = 10 ** precision;\n    return Math.round(input * factor2) / factor2;\n  }\n  const absInput = Math.abs(input);\n  let digits = Math.abs(Math.ceil(Math.log(absInput) / Math.LN10));\n  if (digits === 0) {\n    digits = 2;\n  } else if (digits > precision) {\n    digits = precision;\n  }\n  let exponent = precision - (digits < 0 ? 0 : digits);\n  if (exponent <= 1 && precision > 1) {\n    exponent = 2;\n  } else if (exponent > precision || exponent === 0) {\n    exponent = precision;\n  }\n  const factor = 10 ** exponent;\n  return Math.round(input * factor) / factor;\n}\n\n// src/modules/hex-utils.ts\nfunction addAlphaToHex(input, alpha) {\n  invariant(isHex(input), MESSAGES.inputHex);\n  invariant(isNumber(alpha), MESSAGES.inputNumber);\n  if (alpha >= 1) {\n    return removeAlphaFromHex(input);\n  }\n  return `${removeAlphaFromHex(input)}${convertAlphaToHex(alpha)}`;\n}\nfunction convertAlphaToHex(input) {\n  invariant(isNumber(input), MESSAGES.inputNumber);\n  let alpha = input;\n  if (input > 1) {\n    alpha /= 100;\n  }\n  return Math.round(alpha * 255).toString(16).padStart(2, \"0\");\n}\nfunction extractAlphaFromHex(input) {\n  invariant(isHex(input), MESSAGES.inputString);\n  const alpha = input.substring(7, 9);\n  if (!alpha) {\n    return 1;\n  }\n  return round(parseInt(alpha, 16) / 255);\n}\nfunction hexadecimalToNumber(input) {\n  return round(parseInt(input, 16));\n}\nfunction removeAlphaFromHex(input) {\n  invariant(isHex(input), MESSAGES.inputHex);\n  if (input.length === 5) {\n    return input.substring(0, 4);\n  }\n  return input.substring(0, 7);\n}\n\n// src/converters/index.ts\nvar converters_exports = {};\n__export(converters_exports, {\n  hex2hsl: () => hex2hsl,\n  hex2oklab: () => hex2oklab,\n  hex2oklch: () => hex2oklch,\n  hex2rgb: () => hex2rgb,\n  hsl2hex: () => hsl2hex,\n  hsl2oklab: () => hsl2oklab,\n  hsl2oklch: () => hsl2oklch,\n  hsl2rgb: () => hsl2rgb,\n  oklab2hex: () => oklab2hex,\n  oklab2hsl: () => oklab2hsl,\n  oklab2oklch: () => oklab2oklch,\n  oklab2rgb: () => oklab2rgb,\n  oklch2hex: () => oklch2hex,\n  oklch2hsl: () => oklch2hsl,\n  oklch2oklab: () => oklch2oklab,\n  oklch2rgb: () => oklch2rgb,\n  rgb2hex: () => rgb2hex,\n  rgb2hsl: () => rgb2hsl,\n  rgb2oklab: () => rgb2oklab,\n  rgb2oklch: () => rgb2oklch\n});\n\n// src/format-hex.ts\nfunction formatHex(input) {\n  invariant(isHex(input), MESSAGES.inputHex);\n  let color = input.replace(\"#\", \"\");\n  if (color.length === 3 || color.length === 4) {\n    const values = [...color];\n    color = \"\";\n    values.forEach((d) => {\n      color += `${d}${d}`;\n    });\n  }\n  const hex = `#${color}`;\n  invariant(isHex(hex), \"invalid hex\");\n  return hex;\n}\n\n// src/converters/hex2rgb.ts\nfunction hex2rgb(input) {\n  invariant(isHex(input), MESSAGES.inputHex);\n  const hex = formatHex(input).slice(1);\n  return {\n    r: parseInt(hex.charAt(0) + hex.charAt(1), 16),\n    g: parseInt(hex.charAt(2) + hex.charAt(3), 16),\n    b: parseInt(hex.charAt(4) + hex.charAt(5), 16)\n  };\n}\n\n// src/converters/rgb2hsl.ts\nfunction rgb2hsl(input) {\n  const value = parseInput(input, \"rgb\");\n  const rLimit = limit(value.r, \"rgb\", \"r\") / 255;\n  const gLimit = limit(value.g, \"rgb\", \"g\") / 255;\n  const bLimit = limit(value.b, \"rgb\", \"b\") / 255;\n  const min = Math.min(rLimit, gLimit, bLimit);\n  const max = Math.max(rLimit, gLimit, bLimit);\n  const delta = max - min;\n  let h = 0;\n  let s;\n  const l = (max + min) / 2;\n  let rate;\n  switch (max) {\n    case rLimit:\n      rate = !delta ? 0 : (gLimit - bLimit) / delta;\n      h = 60 * rate;\n      break;\n    case gLimit:\n      rate = (bLimit - rLimit) / delta;\n      h = 60 * rate + 120;\n      break;\n    case bLimit:\n      rate = (rLimit - gLimit) / delta;\n      h = 60 * rate + 240;\n      break;\n    /* c8 ignore next 2 */\n    default:\n      break;\n  }\n  if (h < 0) {\n    h = 360 + h;\n  }\n  if (min === max) {\n    s = 0;\n  } else {\n    s = l < 0.5 ? delta / (2 * l) : delta / (2 - 2 * l);\n  }\n  return {\n    h: Math.abs(+(h % 360).toFixed(2)),\n    s: +(s * 100).toFixed(2),\n    l: +(l * 100).toFixed(2)\n  };\n}\n\n// src/converters/hex2hsl.ts\nfunction hex2hsl(input) {\n  invariant(isHex(input), MESSAGES.inputHex);\n  return rgb2hsl(hex2rgb(input));\n}\n\n// src/converters/rgb2oklab.ts\nvar { cbrt, sign } = Math;\nfunction rgb2lrgb(input) {\n  const abs2 = Math.abs(input);\n  if (abs2 < 0.04045) {\n    return input / 12.92;\n  }\n  return (sign(input) || 1) * ((abs2 + 0.055) / 1.055) ** 2.4;\n}\nfunction rgb2oklab(input, precision = PRECISION) {\n  const value = parseInput(input, \"rgb\");\n  const [lr, lg, lb] = [rgb2lrgb(value.r / 255), rgb2lrgb(value.g / 255), rgb2lrgb(value.b / 255)];\n  const l = cbrt(LRGB_TO_LMS.l[0] * lr + LRGB_TO_LMS.l[1] * lg + LRGB_TO_LMS.l[2] * lb);\n  const m = cbrt(LRGB_TO_LMS.m[0] * lr + LRGB_TO_LMS.m[1] * lg + LRGB_TO_LMS.m[2] * lb);\n  const s = cbrt(LRGB_TO_LMS.s[0] * lr + LRGB_TO_LMS.s[1] * lg + LRGB_TO_LMS.s[2] * lb);\n  const lab = {\n    l: LSM_TO_LAB.l[0] * l + LSM_TO_LAB.l[1] * m - LSM_TO_LAB.l[2] * s,\n    a: LSM_TO_LAB.a[0] * l - LSM_TO_LAB.a[1] * m + LSM_TO_LAB.a[2] * s,\n    b: LSM_TO_LAB.b[0] * l + LSM_TO_LAB.b[1] * m - LSM_TO_LAB.b[2] * s\n  };\n  return restrictValues(lab, precision);\n}\n\n// src/converters/hex2oklab.ts\nfunction hex2oklab(input, precision) {\n  invariant(isHex(input), MESSAGES.inputHex);\n  return rgb2oklab(hex2rgb(input), precision);\n}\n\n// src/converters/oklab2oklch.ts\nvar { atan2, sqrt } = Math;\nfunction oklab2oklch(input, precision) {\n  const { l, a, b } = restrictValues(parseInput(input, \"oklab\"));\n  const c = sqrt(a ** 2 + b ** 2);\n  let h = (atan2(b, a) * RAD2DEG + 360) % 360;\n  if (round(c * 1e4) === 0) {\n    h = 0;\n  }\n  return restrictValues({ l, c, h }, precision);\n}\n\n// src/converters/rgb2oklch.ts\nfunction rgb2oklch(input, precision) {\n  const value = parseInput(input, \"rgb\");\n  return oklab2oklch(rgb2oklab(value, precision), precision);\n}\n\n// src/converters/hex2oklch.ts\nfunction hex2oklch(input, precision) {\n  invariant(isHex(input), MESSAGES.inputHex);\n  return rgb2oklch(hex2rgb(input), precision);\n}\n\n// src/modules/hue2rgb.ts\nfunction hue2rgb(point, chroma2, h) {\n  invariant(isNumber(point) && isNumber(chroma2) && isNumber(h), \"point, chroma and h are required\");\n  let hue = h;\n  if (hue < 0) {\n    hue += 1;\n  }\n  if (hue > 1) {\n    hue -= 1;\n  }\n  if (hue < 1 / 6) {\n    return round(point + (chroma2 - point) * 6 * hue, 4);\n  }\n  if (hue < 1 / 2) {\n    return round(chroma2, 4);\n  }\n  if (hue < 2 / 3) {\n    return round(point + (chroma2 - point) * (2 / 3 - hue) * 6, 4);\n  }\n  return round(point, 4);\n}\n\n// src/converters/hsl2rgb.ts\nfunction hsl2rgb(input) {\n  const value = parseInput(input, \"hsl\");\n  const h = round(value.h) / 360;\n  const s = round(value.s) / 100;\n  const l = round(value.l) / 100;\n  let r;\n  let g;\n  let b;\n  let point;\n  let chroma2;\n  if (s === 0) {\n    r = l;\n    g = l;\n    b = l;\n  } else {\n    chroma2 = l < 0.5 ? l * (1 + s) : l + s - l * s;\n    point = 2 * l - chroma2;\n    r = hue2rgb(point, chroma2, h + 1 / 3);\n    g = hue2rgb(point, chroma2, h);\n    b = hue2rgb(point, chroma2, h - 1 / 3);\n  }\n  return {\n    r: Math.round(r * 255),\n    g: Math.round(g * 255),\n    b: Math.round(b * 255)\n  };\n}\n\n// src/converters/rgb2hex.ts\nfunction rgb2hex(input) {\n  const rgb = parseInput(input, \"rgb\");\n  return `#${Object.values(rgb).map((d) => `0${Math.floor(d).toString(16)}`.slice(-2)).join(\"\")}`;\n}\n\n// src/converters/hsl2hex.ts\nfunction hsl2hex(input) {\n  const value = parseInput(input, \"hsl\");\n  return rgb2hex(hsl2rgb(value));\n}\n\n// src/converters/hsl2oklab.ts\nfunction hsl2oklab(input, precision) {\n  const value = parseInput(input, \"hsl\");\n  return rgb2oklab(hsl2rgb(value), precision);\n}\n\n// src/converters/hsl2oklch.ts\nfunction hsl2oklch(input, precision) {\n  const value = parseInput(input, \"hsl\");\n  return rgb2oklch(hsl2rgb(value), precision);\n}\n\n// src/converters/oklab2rgb.ts\nvar { abs } = Math;\nfunction lrgb2rgb(input) {\n  const absoluteNumber = abs(input);\n  const sign2 = input < 0 ? -1 : 1;\n  if (absoluteNumber > 31308e-7) {\n    return sign2 * (absoluteNumber ** (1 / 2.4) * 1.055 - 0.055);\n  }\n  return input * 12.92;\n}\nfunction oklab2rgb(input, precision = 0) {\n  const { l: L, a: A, b: B } = parseInput(input, \"oklab\");\n  const l = (L + LAB_TO_LMS.l[0] * A + LAB_TO_LMS.l[1] * B) ** 3;\n  const m = (L + LAB_TO_LMS.m[0] * A + LAB_TO_LMS.m[1] * B) ** 3;\n  const s = (L + LAB_TO_LMS.s[0] * A + LAB_TO_LMS.s[1] * B) ** 3;\n  const r = 255 * lrgb2rgb(LSM_TO_RGB.r[0] * l + LSM_TO_RGB.r[1] * m + LSM_TO_RGB.r[2] * s);\n  const g = 255 * lrgb2rgb(LSM_TO_RGB.g[0] * l + LSM_TO_RGB.g[1] * m + LSM_TO_RGB.g[2] * s);\n  const b = 255 * lrgb2rgb(LSM_TO_RGB.b[0] * l + LSM_TO_RGB.b[1] * m + LSM_TO_RGB.b[2] * s);\n  return {\n    r: clamp(round(r, precision), 0, 255),\n    g: clamp(round(g, precision), 0, 255),\n    b: clamp(round(b, precision), 0, 255)\n  };\n}\n\n// src/converters/oklab2hex.ts\nfunction oklab2hex(input) {\n  const value = parseInput(input, \"oklab\");\n  return rgb2hex(oklab2rgb(value));\n}\n\n// src/converters/oklab2hsl.ts\nfunction oklab2hsl(input) {\n  const value = parseInput(input, \"oklab\");\n  return rgb2hsl(oklab2rgb(value));\n}\n\n// src/converters/oklch2oklab.ts\nvar { sin, cos } = Math;\nfunction oklch2oklab(input, precision) {\n  let { l, c, h } = parseInput(input, \"oklch\");\n  if (Number.isNaN(h) || h < 0) {\n    h = 0;\n  }\n  return restrictValues({ l, a: c * cos(h * DEG2RAD), b: c * sin(h * DEG2RAD) }, precision);\n}\n\n// src/converters/oklch2rgb.ts\nfunction oklch2rgb(input, precision = 0) {\n  const value = parseInput(input, \"oklch\");\n  return oklab2rgb(oklch2oklab(value), precision);\n}\n\n// src/converters/oklch2hex.ts\nfunction oklch2hex(input) {\n  const value = parseInput(input, \"oklch\");\n  return rgb2hex(oklch2rgb(value));\n}\n\n// src/converters/oklch2hsl.ts\nfunction oklch2hsl(input) {\n  const value = parseInput(input, \"oklch\");\n  return rgb2hsl(oklch2rgb(value));\n}\n\n// src/extract-color-parts.ts\nfunction extractColorParts(input) {\n  invariant(isString(input), MESSAGES.inputString);\n  if (isHex(input)) {\n    const keys2 = COLOR_KEYS.rgb;\n    const { r, g, b } = hex2rgb(input);\n    const alpha2 = extractAlphaFromHex(input);\n    return {\n      model: \"rgb\",\n      [keys2[0]]: r,\n      [keys2[1]]: g,\n      [keys2[2]]: b,\n      alpha: alpha2 < 1 ? alpha2 : void 0\n    };\n  }\n  const colorRegex = /(?:(rgb|hsl|oklab|oklch)a?\\s*\\(\\s*([\\d%.-]+)\\s*[ ,/]\\s*([\\d%.-]+)\\s*[ ,/]\\s*([\\d%.-]+)(?:\\s*[ ,/]\\s*([\\d%.-]+))?\\s*\\))/i;\n  const matches = colorRegex.exec(input);\n  invariant(hasValidMatches(matches), MESSAGES.invalidCSS);\n  const model = matches[1];\n  const keys = COLOR_KEYS[model];\n  let alpha = matches[5] ? parseFloat(matches[5]) : 1;\n  if (alpha > 1) {\n    alpha /= 100;\n  }\n  return {\n    model,\n    [keys[0]]: parseFloat(matches[2]),\n    [keys[1]]: parseFloat(matches[3]),\n    [keys[2]]: parseFloat(matches[4]),\n    alpha: alpha < 1 ? alpha : void 0\n  };\n}\n\n// src/parse-css.ts\nfunction parseCSS(input, format) {\n  invariant(isString(input), MESSAGES.inputString);\n  let result;\n  const value = isNamedColor(input) ? cssColors[input.toLowerCase()] : input;\n  const output = format ?? (isHex(value) ? \"hex\" : extractColorParts(value).model);\n  const colorParams = (params) => Object.values(params);\n  if (isHex(value)) {\n    const alpha = extractAlphaFromHex(value);\n    switch (output) {\n      case \"hsl\": {\n        result = addAlpha(hex2hsl(value), alpha);\n        break;\n      }\n      case \"oklab\": {\n        result = addAlpha(hex2oklab(value), alpha);\n        break;\n      }\n      case \"oklch\": {\n        result = addAlpha(hex2oklch(value), alpha);\n        break;\n      }\n      case \"rgb\": {\n        result = addAlpha(hex2rgb(value), alpha);\n        break;\n      }\n      default: {\n        result = `${removeAlphaFromHex(value)}${alpha !== 1 ? convertAlphaToHex(alpha) : \"\"}`;\n        break;\n      }\n    }\n    return result;\n  }\n  switch (output) {\n    case \"hsl\": {\n      const { alpha, model, ...color } = extractColorParts(value);\n      if ([\"oklab\", \"oklch\"].includes(model) && color.l > 1) {\n        color.l = round(color.l / 100, PRECISION);\n      }\n      result = addAlpha(\n        model === \"hsl\" ? color : converters_exports[`${model}2hsl`](colorParams(color)),\n        alpha\n      );\n      break;\n    }\n    case \"oklab\": {\n      const { alpha, model, ...color } = extractColorParts(value);\n      if ([\"oklab\", \"oklch\"].includes(model) && color.l > 1) {\n        color.l = round(color.l / 100, PRECISION);\n      }\n      result = addAlpha(\n        model === \"oklab\" ? color : converters_exports[`${model}2oklab`](colorParams(color)),\n        alpha\n      );\n      break;\n    }\n    case \"oklch\": {\n      const { alpha, model, ...color } = extractColorParts(value);\n      if ([\"oklab\", \"oklch\"].includes(model) && color.l > 1) {\n        color.l = round(color.l / 100, PRECISION);\n      }\n      result = addAlpha(\n        model === \"oklch\" ? color : converters_exports[`${model}2oklch`](colorParams(color)),\n        alpha\n      );\n      break;\n    }\n    case \"rgb\": {\n      const { alpha, model, ...color } = extractColorParts(value);\n      if ([\"oklab\", \"oklch\"].includes(model) && color.l > 1) {\n        color.l /= 100;\n      }\n      result = addAlpha(\n        model === \"rgb\" ? color : converters_exports[`${model}2rgb`](colorParams(color)),\n        alpha\n      );\n      break;\n    }\n    case \"hex\":\n    default: {\n      const { alpha, model, ...color } = extractColorParts(value);\n      let alphaPrefix = \"\";\n      if ([\"oklab\", \"oklch\"].includes(model) && color.l > 1) {\n        color.l = round(color.l / 100, PRECISION);\n      }\n      if (alpha) {\n        alphaPrefix = convertAlphaToHex(alpha);\n      }\n      result = `${converters_exports[`${model}2hex`](colorParams(color))}${alphaPrefix}`;\n      break;\n    }\n  }\n  return result;\n}\n\n// src/modules/parse-color.ts\nfunction parseColor(color) {\n  invariant(!!color, MESSAGES.input);\n  const output = {};\n  if (isString(color)) {\n    const { alpha = 1 } = extractColorParts(color);\n    const type = isHex(color) ? \"hex\" : extractColorParts(color).model;\n    output.hex = addAlphaToHex(parseCSS(color, \"hex\"), alpha);\n    output.hsl = addAlpha(parseCSS(color, \"hsl\"), alpha);\n    output.oklab = addAlpha(parseCSS(color, \"oklab\"), alpha);\n    output.oklch = addAlpha(parseCSS(color, \"oklch\"), alpha);\n    output.rgb = addAlpha(parseCSS(color, \"rgb\"), alpha);\n    output.alpha = alpha;\n    output.type = type;\n  } else if (isPlainObject(color)) {\n    const { alpha = 1 } = color;\n    if (isHSL(color)) {\n      output.hsl = {\n        h: limit(color.h, \"hsl\", \"h\"),\n        s: limit(color.s, \"hsl\", \"s\"),\n        l: limit(color.l, \"hsl\", \"l\")\n      };\n      output.rgb = hsl2rgb(output.hsl);\n      output.oklab = hsl2oklab(output.hsl);\n      output.oklch = hsl2oklch(output.hsl);\n      output.type = \"hsl\";\n    } else if (isLAB(color)) {\n      output.hsl = oklab2hsl(color);\n      output.oklab = color;\n      output.oklch = oklab2oklch(color);\n      output.rgb = oklab2rgb(color);\n      output.type = \"oklab\";\n    } else if (isLCH(color)) {\n      output.hsl = oklch2hsl(color);\n      output.oklab = oklch2oklab(color);\n      output.oklch = color;\n      output.rgb = oklch2rgb(color);\n      output.type = \"oklch\";\n    } else if (isRGB(color)) {\n      output.rgb = {\n        r: limit(color.r, \"rgb\", \"r\"),\n        g: limit(color.g, \"rgb\", \"g\"),\n        b: limit(color.b, \"rgb\", \"b\")\n      };\n      output.hsl = rgb2hsl(output.rgb);\n      output.oklab = rgb2oklab(output.rgb);\n      output.oklch = rgb2oklch(output.rgb);\n      output.type = \"rgb\";\n    } else {\n      throw new Error(\"invalid color\");\n    }\n    output.hex = addAlphaToHex(hsl2hex(output.hsl), alpha);\n    output.hsl = addAlpha(output.hsl, alpha);\n    output.oklab = addAlpha(output.oklab, alpha);\n    output.oklch = addAlpha(output.oklch, alpha);\n    output.rgb = addAlpha(output.rgb, alpha);\n    output.alpha = alpha;\n  } else {\n    throw new Error(MESSAGES.input);\n  }\n  return output;\n}\n\n// src/brightness-difference.ts\nfunction brightnessDifference(left, right, precision = PRECISION) {\n  invariant(isString(left), MESSAGES.left);\n  invariant(isString(right), MESSAGES.right);\n  const RGBLeft = parseCSS(left, \"rgb\");\n  const RGBRight = parseCSS(right, \"rgb\");\n  const brightnessLeft = (RGBLeft.r * 299 + RGBLeft.g * 587 + RGBLeft.b * 114) / 1e3;\n  const brightnessRight = (RGBRight.r * 299 + RGBRight.g * 587 + RGBRight.b * 114) / 1e3;\n  return round(Math.abs(brightnessRight - brightnessLeft), precision);\n}\n\n// src/chroma.ts\nfunction chroma(input) {\n  invariant(isString(input), MESSAGES.inputString);\n  const { r, g, b } = parseCSS(input, \"rgb\");\n  const max = Math.max(r, g, b);\n  const min = Math.min(r, g, b);\n  return round((max - min) / 255, 4);\n}\n\n// src/color-difference.ts\nfunction colorDifference(left, right) {\n  invariant(isString(left), MESSAGES.left);\n  invariant(isString(right), MESSAGES.right);\n  const RGBLeft = parseCSS(left, \"rgb\");\n  const RGBRight = parseCSS(right, \"rgb\");\n  return Math.max(RGBLeft.r, RGBRight.r) - Math.min(RGBLeft.r, RGBRight.r) + (Math.max(RGBLeft.g, RGBRight.g) - Math.min(RGBLeft.g, RGBRight.g)) + (Math.max(RGBLeft.b, RGBRight.b) - Math.min(RGBLeft.b, RGBRight.b));\n}\n\n// src/luminance.ts\nfunction luminance(input) {\n  invariant(isString(input), MESSAGES.inputString);\n  const { r, g, b } = parseCSS(input, \"rgb\");\n  const rgb = [r / 255, g / 255, b / 255];\n  for (let index = 0; index < rgb.length; index++) {\n    if (rgb[index] <= 0.03928) {\n      rgb[index] /= 12.92;\n    } else {\n      rgb[index] = ((rgb[index] + 0.055) / 1.055) ** 2.4;\n    }\n  }\n  return round(0.2126 * rgb[0] + 0.7152 * rgb[1] + 0.0722 * rgb[2], 4);\n}\n\n// src/contrast.ts\nfunction contrast(left, right) {\n  invariant(isString(left), MESSAGES.left);\n  invariant(isString(right), MESSAGES.right);\n  const LuminanceLeft = luminance(left);\n  const LuminanceRight = luminance(right);\n  return round(\n    LuminanceLeft >= LuminanceRight ? (LuminanceLeft + 0.05) / (LuminanceRight + 0.05) : (LuminanceRight + 0.05) / (LuminanceLeft + 0.05)\n  );\n}\n\n// src/compare.ts\nfunction compare(left, right) {\n  invariant(isString(left), MESSAGES.left);\n  invariant(isString(right), MESSAGES.right);\n  const colorThreshold = 500;\n  const brightnessThreshold = 125;\n  const colorDifference2 = colorDifference(left, right);\n  const contrast2 = contrast(left, right);\n  const brightnessDifference2 = brightnessDifference(left, right);\n  const isBright = brightnessDifference2 >= brightnessThreshold;\n  const hasEnoughDifference = colorDifference2 >= colorThreshold;\n  let compliant = 0;\n  if (isBright && hasEnoughDifference) {\n    compliant = 2;\n  } else if (isBright || hasEnoughDifference) {\n    compliant = 1;\n  }\n  return {\n    brightnessDifference: brightnessDifference2,\n    colorDifference: colorDifference2,\n    compliant,\n    contrast: contrast2,\n    largeAA: contrast2 >= 3,\n    largeAAA: contrast2 >= 4.5,\n    normalAA: contrast2 >= 4.5,\n    normalAAA: contrast2 >= 7\n  };\n}\n\n// src/format-css.ts\nfunction getColorModel(input) {\n  if (isHex(input) || isNamedColor(input)) {\n    return \"hex\";\n  }\n  if (isString(input)) {\n    return extractColorParts(input).model;\n  } else if (isHSL(input)) {\n    return \"hsl\";\n  } else if (isLAB(input)) {\n    return \"oklab\";\n  } else if (isLCH(input)) {\n    return \"oklch\";\n  } else if (isRGB(input)) {\n    return \"rgb\";\n  }\n  throw new Error(MESSAGES.invalid);\n}\nfunction getColorValue(input, output) {\n  const value = isNamedColor(input) ? cssColors[input.toLowerCase()] : input;\n  const from = getColorModel(value);\n  if (from === output) {\n    return value;\n  }\n  const converterKey = `${from}2${output}`;\n  const converter = converters_exports[converterKey];\n  if (!converter) {\n    throw new Error(`Converter not found for ${from} to ${output}`);\n  }\n  switch (from) {\n    case \"hex\": {\n      if (output === \"hex\") {\n        return value;\n      }\n      return converter(value);\n    }\n    case \"hsl\": {\n      if (output === \"hsl\") {\n        return value;\n      }\n      return converter(value);\n    }\n    case \"oklab\": {\n      if (output === \"oklab\") {\n        return value;\n      }\n      return converter(value);\n    }\n    case \"oklch\": {\n      if (output === \"oklch\") {\n        return value;\n      }\n      return converter(value);\n    }\n    default: {\n      if (output === \"rgb\") {\n        return value;\n      }\n      return converter(value);\n    }\n  }\n}\nfunction formatCSS(input, options = {}) {\n  invariant(isHex(input) || isValidColorModel(input), MESSAGES.invalid);\n  const { alpha, format = \"hex\", precision = PRECISION, separator: baseSeparator = \" \" } = options;\n  const opacity2 = alpha && alpha !== 1 ? `${round(alpha * 100)}%` : null;\n  let params = [];\n  let separator = baseSeparator;\n  switch (format) {\n    case \"hsl\": {\n      const { h, s, l } = getColorValue(input, \"hsl\");\n      params = [h, `${s}%`, `${l}%`];\n      break;\n    }\n    case \"oklab\": {\n      separator = \" \";\n      const { l, a, b } = restrictValues(getColorValue(input, \"oklab\"), precision);\n      params = [`${round(l * 100, precision)}%`, a, b];\n      break;\n    }\n    case \"oklch\": {\n      separator = \" \";\n      const { l, c, h } = restrictValues(getColorValue(input, \"oklch\"), precision);\n      params = [`${round(l * 100, precision)}%`, c, h];\n      break;\n    }\n    case \"rgb\": {\n      const { r, g, b } = getColorValue(input, \"rgb\");\n      params = [r, g, b];\n      break;\n    }\n    default: {\n      const hex = removeAlphaFromHex(getColorValue(input, \"hex\"));\n      if (alpha && alpha !== 1) {\n        return `${hex}${convertAlphaToHex(alpha)}`;\n      }\n      return hex;\n    }\n  }\n  return `${format}(${params.join(separator)}${opacity2 ? ` / ${opacity2}` : \"\"})`;\n}\n\n// src/modules/updater.ts\nfunction updater(key, operator, format) {\n  return (input, amount) => {\n    invariant(isString(input), MESSAGES.inputString);\n    invariant(isNumber(amount), MESSAGES.alpha);\n    const color = parseCSS(input, \"hsl\");\n    const output = isHex(input) || isNamedColor(input) ? \"hex\" : extractColorParts(input).model;\n    return formatCSS(\n      {\n        ...color,\n        [key]: clamp(color[key] + (operator === \"+\" ? amount : -amount), 0, 100)\n      },\n      { format: format ?? output }\n    );\n  };\n}\n\n// src/darken.ts\nfunction darken(input, amount, format) {\n  return updater(\"l\", \"-\", format)(input, amount);\n}\n\n// src/desaturate.ts\nfunction desaturate(input, amount, format) {\n  return updater(\"s\", \"-\", format)(input, amount);\n}\n\n// src/rotate.ts\nfunction rotate(input, degrees, format) {\n  invariant(isString(input), MESSAGES.inputString);\n  invariant(isNumber(degrees), \"degrees must be a number\");\n  const color = parseCSS(input, \"hsl\");\n  const output = isHex(input) || isNamedColor(input) ? \"hex\" : extractColorParts(input).model;\n  return formatCSS(\n    {\n      ...color,\n      h: constrainDegrees(color.h, degrees)\n    },\n    { format: format ?? output }\n  );\n}\n\n// src/invert.ts\nfunction invert(input) {\n  invariant(isString(input), MESSAGES.inputString);\n  const format = isHex(input) || isNamedColor(input) ? \"hex\" : extractColorParts(input).model;\n  const hex = parseCSS(input, \"hex\");\n  return formatCSS(rotate(hex, 180), { format });\n}\n\n// src/lighten.ts\nfunction lighten(input, amount, format) {\n  return updater(\"l\", \"+\", format)(input, amount);\n}\n\n// src/opacify.ts\nfunction opacify(input, alpha, format) {\n  invariant(isString(input), MESSAGES.inputString);\n  invariant(isNumber(alpha), MESSAGES.alpha);\n  const type = isHex(input) || isNamedColor(input) ? \"hex\" : extractColorParts(input).model;\n  const rgb = parseCSS(input, \"rgb\");\n  return formatCSS(rgb, { format: format ?? type, alpha });\n}\n\n// src/opacity.ts\nfunction opacity(input) {\n  invariant(isString(input), MESSAGES.inputString);\n  if (isHex(input)) {\n    return extractAlphaFromHex(input);\n  } else if (Object.keys(cssColors).includes(input)) {\n    return 1;\n  }\n  const { alpha } = extractColorParts(input);\n  if (!alpha) {\n    return 1;\n  }\n  return alpha;\n}\n\n// src/saturate.ts\nfunction saturate(input, amount, format) {\n  return updater(\"s\", \"+\", format)(input, amount);\n}\n\n// src/text-color.ts\nfunction textColor(input, options = {}) {\n  const { darkColor = \"#000000\", lightColor = \"#ffffff\", threshold = 128 } = options;\n  invariant(isString(input), MESSAGES.inputString);\n  invariant(threshold >= 0 && threshold <= 255, MESSAGES.threshold);\n  try {\n    const { r, g, b } = hex2rgb(parseCSS(input, \"hex\"));\n    const yiq = (r * 299 + g * 587 + b * 114) / 1e3;\n    return yiq >= threshold ? darkColor : lightColor;\n  } catch (error) {\n    console.warn(`Invalid color input: ${input}`);\n    console.warn(error);\n    return darkColor;\n  }\n}\n\n// src/transparentize.ts\nfunction transparentize(input, alpha, format) {\n  invariant(isString(input), MESSAGES.inputString);\n  invariant(isNumber(alpha), MESSAGES.alpha);\n  invariant(alpha >= -1 && alpha <= 1, MESSAGES.alpha);\n  const oklch = parseCSS(input, \"oklab\");\n  const value = round(clamp(opacity(input) - alpha, 0, 1));\n  return formatCSS(oklch, { format, alpha: value });\n}\n\n// src/colorizr.ts\nvar Colorizr = class {\n  constructor(color, options = {}) {\n    __publicField(this, \"alpha\");\n    __publicField(this, \"hex\");\n    __publicField(this, \"hsl\");\n    __publicField(this, \"oklab\");\n    __publicField(this, \"oklch\");\n    __publicField(this, \"rgb\");\n    __publicField(this, \"type\");\n    invariant(!!color, \"color is required\");\n    const { alpha, hex, hsl, oklab, oklch, rgb, type } = parseColor(color);\n    this.hex = hex;\n    this.hsl = hsl;\n    this.oklab = oklab;\n    this.oklch = oklch;\n    this.rgb = rgb;\n    this.alpha = alpha;\n    this.type = options.format ?? type;\n  }\n  /**\n   * Get css string\n   */\n  get css() {\n    return this.selectedColor;\n  }\n  /**\n   * Get the red value\n   */\n  get red() {\n    return Number(this.rgb.r);\n  }\n  /**\n   * Get the green value\n   */\n  get green() {\n    return Number(this.rgb.g);\n  }\n  /**\n   * Get the blue value\n   */\n  get blue() {\n    return Number(this.rgb.b);\n  }\n  /**\n   * Get the hue value\n   */\n  get hue() {\n    return Number(this.hsl.h);\n  }\n  /**\n   * Get the saturation value\n   */\n  get saturation() {\n    return Number(this.hsl.s);\n  }\n  /**\n   * Get the lightness value\n   */\n  get lightness() {\n    return Number(this.hsl.l);\n  }\n  /**\n   * Get the luminance value\n   */\n  get luminance() {\n    return luminance(this.selectedColor);\n  }\n  /**\n   * Get the chroma value\n   */\n  get chroma() {\n    return chroma(this.selectedColor);\n  }\n  get opacity() {\n    return opacity(this.selectedColor);\n  }\n  /**\n   * Get the contrasted color\n   */\n  get textColor() {\n    return textColor(this.selectedColor);\n  }\n  get selectedColor() {\n    return formatCSS(this[this.type], { format: this.type, alpha: this.alpha });\n  }\n  brightnessDifference(input) {\n    return brightnessDifference(this.selectedColor, input);\n  }\n  colorDifference(input) {\n    return colorDifference(this.selectedColor, input);\n  }\n  /**\n   * Test 2 colors for compliance\n   */\n  compare(input) {\n    return compare(this.selectedColor, input);\n  }\n  contrast(input) {\n    return contrast(this.selectedColor, input);\n  }\n  format(type, precision) {\n    return formatCSS(this.rgb, {\n      alpha: this.alpha,\n      format: type,\n      precision\n    });\n  }\n  /**\n   * Increase lightness\n   */\n  lighten(amount) {\n    return lighten(this.selectedColor, amount);\n  }\n  /**\n   * Decrease lightness\n   */\n  darken(amount) {\n    return darken(this.selectedColor, amount);\n  }\n  /**\n   * Increase saturation\n   */\n  saturate(amount) {\n    return saturate(this.selectedColor, amount);\n  }\n  /**\n   * Decrease saturation\n   */\n  desaturate(amount) {\n    return desaturate(this.selectedColor, amount);\n  }\n  /**\n   * Invert color\n   */\n  invert() {\n    return invert(this.selectedColor);\n  }\n  /**\n   * Add opacity to the color.\n   */\n  opacify(alpha = 0.9) {\n    return opacify(this.selectedColor, alpha, this.type);\n  }\n  /**\n   * Rotate color\n   */\n  rotate(degrees) {\n    return rotate(this.selectedColor, degrees);\n  }\n  /**\n   * Make the color more transparent\n   */\n  transparentize(alpha = 0.1) {\n    return transparentize(this.selectedColor, alpha, this.type);\n  }\n};\n\n// src/convert.ts\nfunction convert(input, format) {\n  const value = parseCSS(input, format);\n  return formatCSS(value, { format });\n}\n\n// src/is-valid-color.ts\nfunction isValidColor(input) {\n  try {\n    parseCSS(input);\n    return true;\n  } catch {\n    return false;\n  }\n}\n\n// src/name.ts\nfunction name(input) {\n  invariant(isString(input), MESSAGES.inputString);\n  const hex = parseCSS(input, \"hex\");\n  const [color] = Object.entries(cssColors).find(([, value]) => value === hex) || [];\n  return color ?? hex;\n}\n\n// src/palette.ts\nfunction palette(input, options = {}) {\n  invariant(isString(input), MESSAGES.inputString);\n  invariant(isPlainObject(options), MESSAGES.options);\n  const { format, lightness, saturation, size = 6, type } = options;\n  const hsl = parseCSS(input, \"hsl\");\n  const colorFormat = isHex(input) || isNamedColor(input) ? \"hex\" : extractColorParts(input).model;\n  const output = [];\n  if (type === \"monochromatic\") {\n    const step = 80 / size;\n    for (let index = size; index > 0; index--) {\n      output.push(hsl2hex({ ...hsl, l: step * index }));\n    }\n  } else {\n    const step = 360 / size;\n    output.push(hsl2hex({ ...hsl, l: lightness ?? hsl.l, s: saturation ?? hsl.s }));\n    for (let index = 1; index < size; index++) {\n      const color = rotate(input, hsl.h + step * index, \"hex\");\n      output.push(hsl2hex({ ...hex2hsl(color), l: lightness ?? hsl.l, s: saturation ?? hsl.s }));\n    }\n  }\n  return output.map((color) => convert(color, format ?? colorFormat));\n}\n\n// src/p3.ts\nfunction multiplyMatrix(matrix, vector) {\n  return [\n    matrix[0][0] * vector[0] + matrix[0][1] * vector[1] + matrix[0][2] * vector[2],\n    matrix[1][0] * vector[0] + matrix[1][1] * vector[1] + matrix[1][2] * vector[2],\n    matrix[2][0] * vector[0] + matrix[2][1] * vector[1] + matrix[2][2] * vector[2]\n  ];\n}\nfunction isInP3Gamut(color) {\n  const epsilon = 1e-6;\n  return color.every((component) => component >= 0 - epsilon && component <= 1 + epsilon);\n}\nfunction oklabToLinearSRGB(L, a, b) {\n  const l = (L + LAB_TO_LMS.l[0] * a + LAB_TO_LMS.l[1] * b) ** 3;\n  const m = (L + LAB_TO_LMS.m[0] * a + LAB_TO_LMS.m[1] * b) ** 3;\n  const s = (L + LAB_TO_LMS.s[0] * a + LAB_TO_LMS.s[1] * b) ** 3;\n  return [\n    LSM_TO_RGB.r[0] * l + LSM_TO_RGB.r[1] * m + LSM_TO_RGB.r[2] * s,\n    LSM_TO_RGB.g[0] * l + LSM_TO_RGB.g[1] * m + LSM_TO_RGB.g[2] * s,\n    LSM_TO_RGB.b[0] * l + LSM_TO_RGB.b[1] * m + LSM_TO_RGB.b[2] * s\n  ];\n}\nfunction oklabToLinearP3(L, a, b) {\n  const srgb = oklabToLinearSRGB(L, a, b);\n  return multiplyMatrix(SRGB_TO_P3, srgb);\n}\nfunction getOkLCHMaxChroma(input, precision = PRECISION) {\n  const { l, h } = isString(input) ? parseCSS(input, \"oklch\") : input;\n  invariant(isNumber(l) && l >= 0 && l <= 1, MESSAGES.lightnessRange);\n  invariant(isNumber(h) && h >= 0 && h <= 360, MESSAGES.hueRange);\n  const epsilon = 1e-6;\n  let low = 0;\n  let high = 0.5;\n  while (high - low > epsilon) {\n    const mid = (low + high) / 2;\n    const { l: L, a, b } = oklch2oklab({ l, c: mid, h }, 16);\n    const p3Color = oklabToLinearP3(L, a, b);\n    if (isInP3Gamut(p3Color)) {\n      low = mid;\n    } else {\n      high = mid;\n    }\n  }\n  return round(low, precision);\n}\nfunction getP3Color(input) {\n  const lch = isString(input) ? parseCSS(input, \"oklch\") : input;\n  return `oklch(${lch.l} ${getOkLCHMaxChroma(lch)} ${lch.h})`;\n}\n\n// src/random.ts\nfunction random(type = \"hex\") {\n  const hsl = {\n    h: Math.floor(Math.random() * 360) + 1,\n    s: Math.floor(Math.random() * 90) + 10,\n    l: Math.floor(Math.random() * 80) + 10\n  };\n  return formatCSS(hsl, { format: type });\n}\n\n// src/scheme.ts\nfunction scheme(input, typeOrOptions) {\n  invariant(isString(input), MESSAGES.inputString);\n  const { format, type = \"complementary\" } = isString(typeOrOptions) ? { type: typeOrOptions } : typeOrOptions ?? {};\n  const output = isHex(input) || isNamedColor(input) ? \"hex\" : extractColorParts(input).model;\n  const colors = [];\n  switch (type) {\n    case \"analogous\": {\n      colors.push(rotate(input, -30), input, rotate(input, 30));\n      break;\n    }\n    case \"complementary\": {\n      colors.push(input, rotate(input, 180));\n      break;\n    }\n    case \"split\":\n    case \"split-complementary\": {\n      colors.push(input, rotate(input, 150), rotate(input, 210));\n      break;\n    }\n    case \"triadic\": {\n      colors.push(input, rotate(input, 120), rotate(input, 240));\n      break;\n    }\n    case \"tetradic\":\n    case \"rectangle\": {\n      colors.push(input, rotate(input, 60), rotate(input, 180), rotate(input, 240));\n      break;\n    }\n    case \"square\": {\n      colors.push(input, rotate(input, 90), rotate(input, 180), rotate(input, 270));\n      break;\n    }\n    default: {\n      throw new TypeError(\"invalid type\");\n    }\n  }\n  return colors.map((color) => convert(color, format ?? output));\n}\n\n// src/swatch.ts\nfunction shadeColor(input, lightness) {\n  const { c, h } = input;\n  const chromaScale = c === 0 ? 1 : 4 * lightness * (1 - lightness);\n  const chroma2 = c * chromaScale;\n  const adjustedChroma = clamp(chroma2, 0, 0.4);\n  return { l: lightness, c: adjustedChroma, h };\n}\nfunction swatch(input, options = {}) {\n  invariant(isString(input), MESSAGES.inputString);\n  const {\n    format,\n    lightnessFactor = 1.5,\n    maxLightness = 0.97,\n    minLightness = 0.2,\n    scale = \"dynamic\",\n    variant = \"base\"\n  } = options;\n  invariant(\n    maxLightness > minLightness && maxLightness <= 1 && minLightness >= 0,\n    \"maxLightness must be greater than minLightness and within the range [0, 1].\"\n  );\n  const lch = parseCSS(input, \"oklch\");\n  const chromaScale = {\n    base: 1,\n    deep: 0.8,\n    neutral: 0.5,\n    pastel: 0.3,\n    subtle: 0.2,\n    vibrant: 1.25\n  }[variant];\n  lch.l = 0.7;\n  lch.c *= chromaScale;\n  if (variant === \"deep\") {\n    lch.l *= 0.7;\n  }\n  const colorFormat = isHex(input) || isNamedColor(input) ? \"hex\" : extractColorParts(input).model;\n  const steps = 11;\n  let palette2 = {};\n  if (scale === \"dynamic\") {\n    for (let index = 0; index < steps; index++) {\n      const lightness = maxLightness - (maxLightness - minLightness) * (index / (steps - 1)) ** lightnessFactor;\n      let tone = index * 100;\n      if (index === 0) {\n        tone = 50;\n      } else if (index === 10) {\n        tone = 950;\n      }\n      palette2[tone] = lightness;\n    }\n  } else {\n    palette2 = {\n      50: 0.97,\n      100: 0.92,\n      200: 0.85,\n      300: 0.78,\n      400: 0.69,\n      500: 0.57,\n      600: 0.46,\n      700: 0.35,\n      800: 0.24,\n      900: 0.18,\n      950: 0.1\n    };\n  }\n  const output = Object.entries(palette2).reduce(\n    (acc, [key, value]) => {\n      acc[Number(key)] = shadeColor(lch, value);\n      return acc;\n    },\n    {}\n  );\n  return Object.entries(output).reduce((acc, [key, value]) => {\n    return {\n      ...acc,\n      [key]: formatCSS(value, { format: format ?? colorFormat })\n    };\n  }, {});\n}\n\n// src/index.ts\nvar index_default = Colorizr;\nexport {\n  addAlphaToHex,\n  brightnessDifference,\n  chroma,\n  colorDifference,\n  compare,\n  contrast,\n  convert,\n  convertAlphaToHex,\n  darken,\n  index_default as default,\n  desaturate,\n  extractAlphaFromHex,\n  extractColorParts,\n  formatCSS,\n  formatHex,\n  getOkLCHMaxChroma,\n  getP3Color,\n  hex2hsl,\n  hex2oklab,\n  hex2oklch,\n  hex2rgb,\n  hexadecimalToNumber,\n  hsl2hex,\n  hsl2oklab,\n  hsl2oklch,\n  hsl2rgb,\n  isHSL,\n  isHex,\n  isLAB,\n  isLCH,\n  isRGB,\n  isValidColor,\n  lighten,\n  luminance,\n  name,\n  oklab2hex,\n  oklab2hsl,\n  oklab2oklch,\n  oklab2rgb,\n  oklch2hex,\n  oklch2hsl,\n  oklch2oklab,\n  oklch2rgb,\n  opacify,\n  opacity,\n  palette,\n  parseCSS,\n  random,\n  removeAlphaFromHex,\n  rgb2hex,\n  rgb2hsl,\n  rgb2oklab,\n  rgb2oklch,\n  rotate,\n  saturate,\n  scheme,\n  swatch,\n  textColor,\n  transparentize\n};\n//# sourceMappingURL=index.mjs.map","import * as C from \"colorizr\";\nimport type { Rgb, Rgb8Bit, RgbScalar } from \"./types.js\";\nimport { numberInclusiveRangeTest, numberTest } from \"@ixfx/guards\";\nimport { resultThrow } from \"@ixfx/guards\";\n\nconst withOpacity = <T extends Rgb>(value: T, fn: (opacityScalar: number, value: T) => number): T => {\n  switch (value.unit) {\n    case `8bit`:\n      return {\n        ...value,\n        opacity: fn((value.opacity ?? 255) / 255, value) * 255\n      }\n    case `scalar`:\n      return {\n        ...value,\n        opacity: fn((value.opacity ?? 1), value)\n      }\n  }\n}\n\nconst fromCss = (value: string): Rgb8Bit => {\n  if (value.startsWith(`rgb`)) throw new Error(`Expecting CSS string in the form of 'rgb(...)'. Got: '${ value }'`);\n  const c = C.extractColorParts(value);\n  if (c.model !== `rgb`) throw new Error(`Expecting RGB colour space. Got: ${ c.model }`);\n  return fromLibrary(c as any as C.RGB);\n}\n\nconst toCss = (rgb: Rgb): string => {\n  guard(rgb);\n  switch (rgb.unit) {\n    case `8bit`:\n      return `rgb(${ rgb.r } ${ rgb.b } ${ rgb.g } / ${ (rgb.opacity ?? 255) / 255 })`;\n    case `scalar`:\n      return `rgb(${ rgb.r * 100 }% ${ rgb.b * 100 }% ${ rgb.g * 100 }% / ${ (rgb.opacity ?? 1) * 100 }%)`;\n    default:\n\n      throw new Error(`Unknown unit: ${ (rgb as any).unit }`);\n  }\n}\n\nconst toLibrary = (rgb: Rgb): C.RGB => {\n  const abs = to8bit(rgb);\n  return {\n    r: abs.r,\n    g: abs.g,\n    b: abs.b,\n    alpha: abs.opacity,\n  }\n}\n\nconst fromLibrary = (rgb: C.RGB): Rgb8Bit => {\n  return {\n    r: rgb.r,\n    g: rgb.g,\n    b: rgb.b,\n    opacity: rgb.alpha ?? 255,\n    unit: `8bit`,\n    space: `srgb`\n  }\n}\n\nconst to8bit = (rgb: Rgb): Rgb8Bit => {\n  guard(rgb);\n  if (rgb.unit === `8bit`) return rgb;\n  return {\n    r: rgb.r * 255,\n    g: rgb.g * 255,\n    b: rgb.b * 255,\n    opacity: rgb.opacity ?? 255,\n    unit: `8bit`,\n    space: `srgb`\n  }\n}\n\nconst toScalar = (rgb: Rgb): RgbScalar => {\n  guard(rgb);\n  if (rgb.unit === `scalar`) return rgb;\n  return {\n    r: rgb.r / 255,\n    g: rgb.g / 255,\n    b: rgb.b / 255,\n    opacity: (rgb.opacity ?? 1) / 255,\n    unit: `scalar`,\n    space: `srgb`\n  }\n}\n\nconst guard = (rgb: Rgb) => {\n  const { r, g, b, opacity, space, unit } = rgb;\n  if (space !== `srgb`) throw new Error(`Space is expected to be 'srgb'. Got: ${ space }`);\n  if (unit === `8bit`) {\n    resultThrow(\n      numberInclusiveRangeTest(r, 0, 255, `r`),\n      numberInclusiveRangeTest(g, 0, 255, `g`),\n      numberInclusiveRangeTest(b, 0, 255, `b`),\n      () => {\n        if (typeof opacity === `number`) {\n          return numberInclusiveRangeTest(opacity, 0, 255, `opacity`);\n        }\n      }\n    );\n  } else if (unit === `scalar`) {\n    resultThrow(\n      numberTest(r, `percentage`, `r`),\n      numberTest(g, `percentage`, `g`),\n      numberTest(b, `percentage`, `b`),\n      () => {\n        if (typeof opacity === `number`) {\n          return numberTest(opacity, `percentage`, `opacity`);\n        }\n      });\n  } else {\n    throw new Error(`Unit is expected to be '8bit' or 'scalar'. Got: ${ unit }`);\n  }\n}\n\nexport const SrgbSpace = { withOpacity, toCss, fromCss, toLibrary, fromLibrary, guard, toScalar, to8bit };\n","import type { CssAngle } from \"@ixfx/dom\";\n\nexport type HslBase = {\n  /**\n   * Hue\n   */\n  h: number;\n  /**\n   * Saturation\n   */\n  s: number;\n  /**\n   * Lightness\n   */\n  l: number;\n  /**\n   * Opacity\n   */\n  opacity?: number,\n  space?: `hsl`\n}\n\nexport const isHsl = (v: any): v is Hsl => {\n  if (typeof v === `object`) {\n    if (!(`h` in v && `s` in v && `l` in v)) return false;\n    if (!(`unit` in v)) return false;\n    if (`space` in v) {\n      if (v.space !== `hsl`) return false;\n    }\n  }\n  return false;\n}\n\n/**\n * Scalar values use 0..1 for each field\n */\nexport type HslScalar = HslBase & { unit: `scalar` };\n\n/**\n * Absolute values use hue:0..360, all other fields 0..100\n */\nexport type HslAbsolute = HslBase & { unit: `absolute` };\n\n/**\n * HSL value.\n * By default assumes scalar coordinates (0..1) for each field.\n * Use 'absolute' unit for hue:0...360, all other fields on 0..100 scale.\n */\nexport type Hsl = HslScalar | HslAbsolute;\n\n/**\n * Rgb.\n * Units determine how to interperet rgb values.\n * * 'relative': 0..1 range for RGB & opacity\n * * '8bit': 0..255 range for RGB & opacity\n */\n//export type Rgb = { r: number; g: number; b: number; opacity?: number, unit: `scalar` | `8bit`, space?: `srgb` };\n\nexport type RgbBase = { r: number; g: number; b: number; opacity?: number, space?: `srgb` };\nexport type RgbScalar = RgbBase & { unit: `scalar` };\n\nexport const isRgb = (v: any): v is Rgb => {\n  if (typeof v === `object`) {\n    if (!(`r` in v && `g` in v && `b` in v)) return false;\n    if (!(`unit` in v)) return false;\n    if (`space` in v) {\n      if (v.space !== `srgb`) return false;\n    }\n  }\n  return false;\n}\n/**\n * RGB in 0...255 range, including opacity.\n */\nexport type Rgb8Bit = RgbBase & { unit: `8bit` };\nexport type Rgb = RgbScalar | Rgb8Bit;\n\n// export type Spaces = `hsl` | `hsluv` | `rgb` | `srgb` | `lch` | `oklch` | `oklab` | `okhsl` | `p3` | `lab` | `hcl` | `cubehelix`;\n\nexport type LchBase = {\n  /**\n   * Lightness/perceived brightnes\n   */\n  l: number,\n  /**\n   * Chroma ('amount of colour')\n   */\n  c: number,\n  /**\n   * Hue\n   */\n  h: number,\n  /**\n   * Opacity on 0..1 scale\n   */\n  opacity?: number,\n  space: `lch` | `oklch`\n}\n\nexport const isLch = (v: any): v is OkLch => {\n  if (typeof v === `object`) {\n    if (!(`l` in v && `c` in v && `h` in v)) return false;\n    if (!(`unit` in v)) return false;\n    if (`space` in v) {\n      if (v.space !== `lch` && v.space !== `oklch`) return false;\n    }\n  }\n  return false;\n}\n\nexport type OkLchBase = LchBase & { space: `oklch` }\n/**\n * Oklch colour expressed in 0..1 scalar values for LCH & opacity\n */\nexport type OkLchScalar = OkLchBase & { unit: `scalar` }\n/**\n * Oklch colour expressed with:\n * l: 0..100\n * c: 0..100\n * h: 0..360 degrees \n * opacity: 0..1\n */\nexport type OkLchAbsolute = OkLchBase & { unit: `absolute` }\nexport type OkLch = OkLchAbsolute | OkLchScalar;\n\nexport type Colour = { opacity?: number } & (Hsl | OkLch | Rgb);\n\n/**\n * A representation of colour. Eg: `blue`, `rgb(255,0,0)`, `hsl(20,100%,50%)`\n */\nexport type Colourish = Colour | string;\n\nexport const isColourish = (v: any): v is Colourish => {\n  if (typeof v === `string`) return true;\n  if (typeof v !== `object`) return false;\n  if (isHsl(v)) return true;\n  if (isLch(v)) return true;\n  if (isRgb(v)) return true;\n  return false;\n}\n\n// export type ColourRgb = {\n//   space:`rgb`\n//   coords: Rgba\n// }\n// export type ColourHsl = {\n//   space:`hsl`;\n//   coords: Hsla;\n// }\n\n// export type Colour = ColourHsl|ColourRgb;\n\n/**\n * Options for interpolation\n */\n// export type ColourInterpolationOpts = {\n//   space: Spaces,\n//   hue: `longer` | `shorter` | `increasing` | `decreasing` | `raw`\n// };\n\nexport type ParsingOptions<T> = Partial<{\n  ensureSafe: boolean\n  /**\n   * Value to use if input is invalid\n   */\n  fallbackString: string\n  /**\n   * Fallback colour to use if value cannot be parsed\n   */\n  fallbackColour: T\n}>","import * as C from \"colorizr\";\nimport type { Hsl, HslAbsolute, HslScalar, ParsingOptions } from \"./types.js\";\nimport { numberInclusiveRangeTest, numberTest } from \"@ixfx/guards\";\nimport { resultThrow } from \"@ixfx/guards\";\n\nconst withOpacity = <T extends Hsl>(value: T, fn: (opacityScalar: number, value: T) => number): T => {\n  switch (value.unit) {\n    case `absolute`:\n      return {\n        ...value,\n        opacity: fn((value.opacity ?? 100) / 100, value) * 100\n      }\n    case `scalar`:\n      return {\n        ...value,\n        opacity: fn((value.opacity ?? 1), value)\n      }\n  }\n}\n\nconst fromCssAbsolute = (value: string, options: ParsingOptions<HslAbsolute> = {}): HslAbsolute => {\n  if (value.startsWith(`hsl`)) {\n    if (options.fallbackString) value = options.fallbackString;\n    else throw new Error(`Expecting CSS string in the form of 'hsl(...) or hsla(...)'. Got: '${ value }'`);\n  }\n  const c = C.extractColorParts(value);\n  if (c.model !== `hsl`) {\n    if (options.fallbackColour) return options.fallbackColour;\n    throw new Error(`Expecting HSL colour space. Got: ${ c.model }`);\n  }\n  return fromLibrary(c as any as C.HSL, options);\n}\n\nconst fromCssScalar = (value: string, options: ParsingOptions<HslAbsolute> = {}): HslScalar => toScalar(fromCssAbsolute(value, options));\n\n\nconst toCss = (hsl: Hsl): string => {\n  const abs = toAbsolute(hsl);\n  let css = `hsl(${ abs.h }deg ${ abs.s }% ${ abs.l }%`;\n  if (`opacity` in abs && abs.opacity !== undefined) {\n    css += ` / ${ abs.opacity / 100 }`;\n  }\n  css += ')';\n  return css;\n}\n\nconst toLibrary = (hsl: Hsl): C.HSL => {\n  const abs = toAbsolute(hsl);\n  return {\n    h: abs.h,\n    s: abs.s,\n    l: abs.l,\n    alpha: abs.opacity,\n  }\n}\n\nconst fromLibrary = (hsl: C.HSL, parsingOptions: ParsingOptions<HslAbsolute> = {}): HslAbsolute => {\n  if (typeof hsl === `undefined` || hsl === null) {\n    if (parsingOptions.fallbackColour) return parsingOptions.fallbackColour;\n  }\n  resultThrow(\n    numberInclusiveRangeTest(hsl.h, 0, 255, `h`),\n    numberInclusiveRangeTest(hsl.s, 0, 255, `s`),\n    numberInclusiveRangeTest(hsl.l, 0, 255, `l`),\n    numberInclusiveRangeTest(hsl.alpha, 0, 100, `alpha`),\n  );\n  return {\n    h: hsl.h,\n    s: hsl.s,\n    l: hsl.l,\n    opacity: hsl.alpha ?? 100,\n    unit: `absolute`,\n    space: `hsl`\n  }\n}\n\nconst toAbsolute = (hsl: Hsl): HslAbsolute => {\n  guard(hsl);\n  if (hsl.unit === `absolute`) return hsl;\n  return {\n    h: hsl.h * 360,\n    s: hsl.s * 100,\n    l: hsl.l * 100,\n    opacity: hsl.opacity ?? 100,\n    unit: `absolute`,\n    space: `hsl`\n  }\n}\n\nconst toScalar = (hsl: Hsl): HslScalar => {\n  guard(hsl);\n  if (hsl.unit === `scalar`) return hsl;\n  return {\n    h: hsl.h / 360,\n    s: hsl.s / 100,\n    l: hsl.l / 100,\n    opacity: (hsl.opacity ?? 1) / 100,\n    unit: `scalar`,\n    space: `hsl`\n  }\n}\n\nconst guard = (hsl: Hsl) => {\n  const { h, s, l, opacity, space, unit } = hsl;\n  if (space !== `hsl`) throw new Error(`Space is expected to be 'hsl'. Got: ${ space }`);\n  if (unit === `absolute`) {\n    resultThrow(\n      numberTest(h, `finite`, `h`),\n      numberInclusiveRangeTest(s, 0, 100, `s`),\n      numberInclusiveRangeTest(l, 0, 100, `l`),\n      () => {\n        if (typeof opacity === `number`) {\n          return numberInclusiveRangeTest(opacity, 0, 100, `s`);\n        }\n      });\n  } else if (unit === `scalar`) {\n    resultThrow(\n      numberTest(h, `percentage`, `h`),\n      numberTest(s, `percentage`, `s`),\n      numberTest(l, `percentage`, `l`),\n      () => {\n        if (typeof opacity === `number`) {\n          return numberTest(opacity, `percentage`, `opacity`);\n        }\n      });\n  } else {\n    throw new Error(`Unit is expected to be 'absolute' or 'scalar'. Got: ${ unit }`);\n  }\n}\n\nexport const HslSpace = { withOpacity, fromCssAbsolute, fromCssScalar, toCss, toLibrary, fromLibrary, guard, toScalar, toAbsolute };\n","export const cssDefinedHexColours = {\n  \"aliceblue\": \"#f0f8ff\",\n  \"antiquewhite\": \"#faebd7\",\n  \"aqua\": \"#00ffff\",\n  \"aquamarine\": \"#7fffd4\",\n  \"azure\": \"#f0ffff\",\n  \"beige\": \"#f5f5dc\",\n  \"bisque\": \"#ffe4c4\",\n  \"black\": \"#000000\",\n  \"blanchedalmond\": \"#ffebcd\",\n  \"blue\": \"#0000ff\",\n  \"blueviolet\": \"#8a2be2\",\n  \"brown\": \"#a52a2a\",\n  \"burlywood\": \"#deb887\",\n  \"cadetblue\": \"#5f9ea0\",\n  \"chartreuse\": \"#7fff00\",\n  \"chocolate\": \"#d2691e\",\n  \"coral\": \"#ff7f50\",\n  \"cornflowerblue\": \"#6495ed\",\n  \"cornsilk\": \"#fff8dc\",\n  \"crimson\": \"#dc143c\",\n  \"cyan\": \"#00ffff\",\n  \"darkblue\": \"#00008b\",\n  \"darkcyan\": \"#008b8b\",\n  \"darkgoldenrod\": \"#b8860b\",\n  \"darkgray\": \"#a9a9a9\",\n  \"darkgreen\": \"#006400\",\n  \"darkkhaki\": \"#bdb76b\",\n  \"darkmagenta\": \"#8b008b\",\n  \"darkolivegreen\": \"#556b2f\",\n  \"darkorange\": \"#ff8c00\",\n  \"darkorchid\": \"#9932cc\",\n  \"darkred\": \"#8b0000\",\n  \"darksalmon\": \"#e9967a\",\n  \"darkseagreen\": \"#8fbc8f\",\n  \"darkslateblue\": \"#483d8b\",\n  \"darkslategray\": \"#2f4f4f\",\n  \"darkturquoise\": \"#00ced1\",\n  \"darkviolet\": \"#9400d3\",\n  \"deeppink\": \"#ff1493\",\n  \"deepskyblue\": \"#00bfff\",\n  \"dimgray\": \"#696969\",\n  \"dodgerblue\": \"#1e90ff\",\n  \"firebrick\": \"#b22222\",\n  \"floralwhite\": \"#fffaf0\",\n  \"forestgreen\": \"#228b22\",\n  \"fuchsia\": \"#ff00ff\",\n  \"gainsboro\": \"#dcdcdc\",\n  \"ghostwhite\": \"#f8f8ff\",\n  \"gold\": \"#ffd700\",\n  \"goldenrod\": \"#daa520\",\n  \"gray\": \"#808080\",\n  \"green\": \"#008000\",\n  \"greenyellow\": \"#adff2f\",\n  \"honeydew\": \"#f0fff0\",\n  \"hotpink\": \"#ff69b4\",\n  \"indianred\": \"#cd5c5c\",\n  \"indigo\": \"#4b0082\",\n  \"ivory\": \"#fffff0\",\n  \"khaki\": \"#f0e68c\",\n  \"lavender\": \"#e6e6fa\",\n  \"lavenderblush\": \"#fff0f5\",\n  \"lawngreen\": \"#7cfc00\",\n  \"lemonchiffon\": \"#fffacd\",\n  \"lightblue\": \"#add8e6\",\n  \"lightcoral\": \"#f08080\",\n  \"lightcyan\": \"#e0ffff\",\n  \"lightgoldenrodyellow\": \"#fafad2\",\n  \"lightgray\": \"#d3d3d3\",\n  \"lightgreen\": \"#90ee90\",\n  \"lightpink\": \"#ffb6c1\",\n  \"lightsalmon\": \"#ffa07a\",\n  \"lightseagreen\": \"#20b2aa\",\n  \"lightskyblue\": \"#87cefa\",\n  \"lightslategray\": \"#778899\",\n  \"lightsteelblue\": \"#b0c4de\",\n  \"lightyellow\": \"#ffffe0\",\n  \"lime\": \"#00ff00\",\n  \"limegreen\": \"#32cd32\",\n  \"linen\": \"#faf0e6\",\n  \"magenta\": \"#ff00ff\",\n  \"maroon\": \"#800000\",\n  \"mediumaquamarine\": \"#66cdaa\",\n  \"mediumblue\": \"#0000cd\",\n  \"mediumorchid\": \"#ba55d3\",\n  \"mediumpurple\": \"#9370db\",\n  \"mediumseagreen\": \"#3cb371\",\n  \"mediumslateblue\": \"#7b68ee\",\n  \"mediumspringgreen\": \"#00fa9a\",\n  \"mediumturquoise\": \"#48d1cc\",\n  \"mediumvioletred\": \"#c71585\",\n  \"midnightblue\": \"#191970\",\n  \"mintcream\": \"#f5fffa\",\n  \"mistyrose\": \"#ffe4e1\",\n  \"moccasin\": \"#ffe4b5\",\n  \"navajowhite\": \"#ffdead\",\n  \"navy\": \"#000080\",\n  \"oldlace\": \"#fdf5e6\",\n  \"olive\": \"#808000\",\n  \"olivedrab\": \"#6b8e23\",\n  \"orange\": \"#ffa500\",\n  \"orangered\": \"#ff4500\",\n  \"orchid\": \"#da70d6\",\n  \"palegoldenrod\": \"#eee8aa\",\n  \"palegreen\": \"#98fb98\",\n  \"paleturquoise\": \"#afeeee\",\n  \"palevioletred\": \"#db7093\",\n  \"papayawhip\": \"#ffefd5\",\n  \"peachpuff\": \"#ffdab9\",\n  \"peru\": \"#cd853f\",\n  \"pink\": \"#ffc0cb\",\n  \"plum\": \"#dda0dd\",\n  \"powderblue\": \"#b0e0e6\",\n  \"purple\": \"#800080\",\n  \"rebeccapurple\": \"#663399\",\n  \"red\": \"#ff0000\",\n  \"rosybrown\": \"#bc8f8f\",\n  \"royalblue\": \"#4169e1\",\n  \"saddlebrown\": \"#8b4513\",\n  \"salmon\": \"#fa8072\",\n  \"sandybrown\": \"#f4a460\",\n  \"seagreen\": \"#2e8b57\",\n  \"seashell\": \"#fff5ee\",\n  \"sienna\": \"#a0522d\",\n  \"silver\": \"#c0c0c0\",\n  \"skyblue\": \"#87ceeb\",\n  \"slateblue\": \"#6a5acd\",\n  \"slategray\": \"#708090\",\n  \"snow\": \"#fffafa\",\n  \"springgreen\": \"#00ff7f\",\n  \"steelblue\": \"#4682b4\",\n  \"tan\": \"#d2b48c\",\n  \"teal\": \"#008080\",\n  \"thistle\": \"#d8bfd8\",\n  \"tomato\": \"#ff6347\",\n  \"turquoise\": \"#40e0d0\",\n  \"violet\": \"#ee82ee\",\n  \"wheat\": \"#f5deb3\",\n  \"white\": \"#ffffff\",\n  \"whitesmoke\": \"#f5f5f5\",\n  \"yellow\": \"#ffff00\",\n  \"yellowgreen\": \"#9acd32\"\n}\n","import * as C from \"colorizr\";\nimport { isColourish, isHsl, isRgb, type Colour, type Colourish } from \"./types.js\";\nimport { SrgbSpace } from \"./srgb.js\";\nimport { HslSpace } from './hsl.js';\nimport { cssDefinedHexColours } from \"./css-colours.js\";\n\nconst hexStringToColour = (hexString: string): Colour => {\n  const rgb = C.hex2rgb(hexString);\n  return SrgbSpace.fromLibrary(rgb);\n}\n\nexport const toCssColour = (colour: any): string => {\n  if (typeof colour === `string`) return colour;\n\n  if (isHsl(colour)) {\n    return HslSpace.toCss(colour);\n  }\n  if (isRgb(colour)) {\n    return SrgbSpace.toCss(colour);\n  }\n\n  throw new Error(`Unknown colour format: '${ JSON.stringify(colour) }'`);\n\n}\n\nexport const fromCssColour = (colour: string): Colour => {\n  if (colour.startsWith(`#`)) {\n    return hexStringToColour(colour);\n  }\n\n  if (typeof cssDefinedHexColours[ colour ] !== `undefined`) {\n    return hexStringToColour(cssDefinedHexColours[ colour ] as string);\n  }\n\n  if (colour.startsWith(`--`)) {\n    const fromCss = getComputedStyle(document.body).getPropertyValue(colour).trim();\n    if (fromCss.length === 0) throw new Error(`Variable missing: ${ colour }`);\n    if (fromCss.startsWith(`#`)) hexStringToColour(fromCss);\n    if (fromCss.startsWith(`rgb`)) return SrgbSpace.fromCss(fromCss);\n    if (fromCss.startsWith(`hsl`)) return HslSpace.fromCssScalar(fromCss);\n    throw new Error(`CSS variable value not a hex, rgb or hsl colour function: '${ fromCss }'`);\n  }\n  throw new Error(`String colour is not a hex colour nor well-defined colour name`);\n}\n\nexport const guard = (colour: Colour) => {\n  switch (colour.space) {\n    case `hsl`:\n      HslSpace.guard(colour);\n      break;\n    case `srgb`:\n      SrgbSpace.guard(colour);\n      break;\n    default:\n      throw new Error(`Unknown colour space: '${ colour.space }'`);\n  }\n}\n\nexport const toColour = (colourish: any): Colour => {\n  if (!isColourish(colourish)) throw new Error(`Could not parse input. Expected CSS colour string or structured colour {r,g,b}, {h,s,l} etc.`);\n  let c: Colour | undefined;\n  if (typeof colourish === `string`) c = fromCssColour(colourish);\n  else c = colourish;\n  if (c === undefined) throw new Error(`Could not parse input. Expected CSS colour string or structured colour {r,g,b}, {h,s,l} etc.`);\n\n  guard(c);\n  return c;\n}\n\n/**\n * Returns a CSS-ready string\n * representation.\n * ```js\n * element.style.backgroundColor = resolveToString(`red`);\n * ```\n * \n * Tries each parameter in turn, returning the value\n * for the first that resolves. This can be useful for\n * having fallback values.\n * \n * ```js\n * // Try a CSS variable, a object property or finally fallback to red.\n * element.style.backgroundColor = toStringFirst('--some-var', opts.background, `red`);\n * ```\n * @param colours Array of colours to resolve\n * @returns \n */\nexport const toStringFirst = (...colours: (Colourish | undefined)[]): string => {\n  for (const colour of colours) {\n    if (colour === undefined) continue;\n    if (colour === null) continue;\n    try {\n      const c = toColour(colour);\n      return toCssColour(c);\n    } catch { /* empty */ }\n  }\n  return `rebeccapurple`;\n}"],"x_google_ignoreList":[0],"mappings":"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"}