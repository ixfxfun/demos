{"version":3,"file":"object-tracker-BAnQZllY.js","names":["v: number","every: number","opts: TrackedValueOpts","reason: TrimReason","limit: number","p: Array<V> | Array<TimestampedObject<V>>"],"sources":["../../packages/numbers/src/quantise.ts","../../packages/core/src/trackers/object-tracker.ts"],"sourcesContent":["import { integerTest, numberTest, resultThrow } from \"@ixfx/guards\";\n\n/**\n * Rounds `v` by `every`. Middle values are rounded up by default.\n *\n * ```js\n * quantiseEvery(11, 10);  // 10\n * quantiseEvery(25, 10);  // 30\n * quantiseEvery(0, 10);   // 0\n * quantiseEvery(4, 10);   // 0\n * quantiseEvery(100, 10); // 100\n * ```\n * \n * Also works with decimals\n * ```js\n * quantiseEvery(1.123, 0.1); // 1.1\n * quantiseEvery(1.21, 0.1);  // 1.2\n * ```\n *\n * @param v Value to quantise\n * @param every Number to quantise to\n * @param middleRoundsUp If _true_ (default), the exact middle rounds up to next step.\n * @returns\n */\nexport const quantiseEvery = (\n  v: number,\n  every: number,\n  middleRoundsUp = true\n) => {\n\n  const everyString = every.toString();\n  const decimal = everyString.indexOf(`.`);\n  let multiplier = 1;\n  if (decimal >= 0) {\n    const d = everyString.substring(decimal + 1).length;\n    multiplier = 10 * d;\n    every = Math.floor(multiplier * every);\n    v = v * multiplier;\n  }\n\n  resultThrow(\n    numberTest(v, ``, `v`),\n    integerTest(every, ``, `every`)\n  );\n\n  let div = v / every;\n  const divModule = div % 1;\n  div = Math.floor(div);\n  if ((divModule === 0.5 && middleRoundsUp) || divModule > 0.5) div++;\n  const vv = (every * div) / multiplier;\n  return vv;\n};","import type { TimestampedObject, TrackedValueOpts } from './tracked-value.js';\nimport { TrackerBase, type TrimReason } from './tracker-base.js';\n\n/**\n * A tracked value of type `V`.\n */\nexport abstract class ObjectTracker<V extends object, SeenResultType> extends TrackerBase<V, SeenResultType> {\n  values: Array<TimestampedObject<V>>;\n\n  constructor(opts: TrackedValueOpts = {}) {\n    super(opts);\n    this.values = [];\n  }\n\n  onTrimmed(reason: TrimReason) {\n    // no-op\n  }\n\n  /**\n   * Reduces size of value store to `limit`. \n   * Returns number of remaining items\n   * @param limit\n   */\n  trimStore(limit: number): number {\n    if (limit >= this.values.length) return this.values.length;\n    // Index 0 will be the oldest\n    this.values = this.values.slice(-limit);\n    return this.values.length;\n  }\n\n  /**\n   * Allows sub-classes to be notified when a reset happens\n   * @ignore\n   */\n  onReset() {\n    this.values = [];\n  }\n\n  /**\n   * Tracks a value\n   * @ignore\n   */\n  filterData(p: Array<V> | Array<TimestampedObject<V>>): Array<TimestampedObject<V>> {\n    // Make sure values have a timestamp\n    const ts = p.map((v) =>\n      `at` in v\n        ? v\n        : {\n          ...v,\n          at: Date.now(),\n        }\n    );\n\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    const last = ts.at(-1)!;\n\n    if (this.storeIntermediate) this.values.push(...ts);\n    else switch (this.values.length) {\n      case 0: {\n        // Add as initial value\n        this.values.push(last);\n        break;\n      }\n      case 1: {\n        // Add last value\n        this.values.push(last);\n        break;\n      }\n      case 2: {\n        // Replace last value\n        this.values[ 1 ] = last;\n        break;\n      }\n    }\n    return ts;\n  }\n\n  /**\n   * Last seen value. If no values have been added, it will return the initial value\n   */\n  get last() {\n    if (this.values.length === 1) return this.values[ 0 ];\n    //eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    return this.values.at(-1)!;\n  }\n\n  /**\n   * Returns the oldest value in the buffer\n   */\n  get initial() {\n    return this.values.at(0);\n  }\n\n  /**\n   * Returns number of recorded values (includes the initial value in the count)\n   */\n  get size() {\n    return this.values.length;\n  }\n\n  /**\n   * Returns the elapsed time, in milliseconds since the initial value\n   */\n  get elapsed(): number {\n    return Date.now() - this.values[ 0 ].at;\n  }\n\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAwBA,MAAa,gBAAgB,CAC3BA,GACAC,OACA,iBAAiB,SACd;CAEH,MAAM,cAAc,MAAM,UAAU;CACpC,MAAM,UAAU,YAAY,SAAS,GAAG;CACxC,IAAI,aAAa;AACjB,KAAI,WAAW,GAAG;EAChB,MAAM,IAAI,YAAY,UAAU,UAAU,EAAE,CAAC;AAC7C,eAAa,KAAK;AAClB,UAAQ,KAAK,MAAM,aAAa,MAAM;AACtC,MAAI,IAAI;CACT;AAED,aACE,WAAW,IAAI,IAAI,GAAG,EACtB,YAAY,QAAQ,IAAI,OAAO,CAChC;CAED,IAAI,MAAM,IAAI;CACd,MAAM,YAAY,MAAM;AACxB,OAAM,KAAK,MAAM,IAAI;AACrB,KAAK,cAAc,MAAO,kBAAmB,YAAY,GAAK;CAC9D,MAAM,KAAM,QAAQ,MAAO;AAC3B,QAAO;AACR;;;;;;;AC7CD,IAAsB,gBAAtB,cAA8E,YAA+B;CAC3G;CAEA,YAAYC,OAAyB,CAAE,GAAE;AACvC,QAAM,KAAK;AACX,OAAK,SAAS,CAAE;CACjB;CAED,UAAUC,QAAoB,CAE7B;;;;;;CAOD,UAAUC,OAAuB;AAC/B,MAAI,SAAS,KAAK,OAAO,OAAQ,QAAO,KAAK,OAAO;AAEpD,OAAK,SAAS,KAAK,OAAO,OAAO,MAAM;AACvC,SAAO,KAAK,OAAO;CACpB;;;;;CAMD,UAAU;AACR,OAAK,SAAS,CAAE;CACjB;;;;;CAMD,WAAWC,GAAwE;EAEjF,MAAM,KAAK,EAAE,IAAI,CAAC,OACf,OAAO,IACJ,IACA;GACA,GAAG;GACH,IAAI,KAAK,KAAK;EACf,EACJ;EAGD,MAAM,OAAO,GAAG,GAAG,GAAG;AAEtB,MAAI,KAAK,kBAAmB,MAAK,OAAO,KAAK,GAAG,GAAG;MAC9C,SAAQ,KAAK,OAAO,QAApB;GACH,KAAK,GAAG;AAEN,SAAK,OAAO,KAAK,KAAK;AACtB;GACD;GACD,KAAK,GAAG;AAEN,SAAK,OAAO,KAAK,KAAK;AACtB;GACD;GACD,KAAK,GAAG;AAEN,SAAK,OAAQ,KAAM;AACnB;GACD;EACF;AACD,SAAO;CACR;;;;CAKD,IAAI,OAAO;AACT,MAAI,KAAK,OAAO,WAAW,EAAG,QAAO,KAAK,OAAQ;AAElD,SAAO,KAAK,OAAO,GAAG,GAAG;CAC1B;;;;CAKD,IAAI,UAAU;AACZ,SAAO,KAAK,OAAO,GAAG,EAAE;CACzB;;;;CAKD,IAAI,OAAO;AACT,SAAO,KAAK,OAAO;CACpB;;;;CAKD,IAAI,UAAkB;AACpB,SAAO,KAAK,KAAK,GAAG,KAAK,OAAQ,GAAI;CACtC;AAEF"}