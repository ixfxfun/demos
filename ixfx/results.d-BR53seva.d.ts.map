{"version":3,"file":"results.d-BR53seva.d.ts","names":[],"sources":["../../packages/geometry/src/point/point-type.d.ts","../../packages/geometry/src/rect/rect-types.d.ts","../../packages/core/src/results.d.ts"],"sourcesContent":["/**\n * A point, consisting of x, y and maybe z fields.\n */\nexport type Point = {\n    readonly x: number;\n    readonly y: number;\n    readonly z?: number;\n};\nexport type Point3d = Point & {\n    readonly z: number;\n};\n/**\n * Placeholder point: `{ x: NaN, y: NaN }`\n * Use `isPlaceholder` to check if a point is a placeholder.\n * Use `Placeholder3d` get a point with `z` property.\n */\nexport declare const Placeholder: Readonly<{\n    x: number;\n    y: number;\n}>;\n/**\n * Placeholder point: `{x: NaN, y:NaN, z:NaN }`\n * Use `isPlaceholder` to check if a point is a placeholder.\n * Use `Placeholder` to get a point without `z` property.\n */\nexport declare const Placeholder3d: Readonly<{\n    x: number;\n    y: number;\n    z: number;\n}>;\n//# sourceMappingURL=point-type.d.ts.map","import type { Point, Point3d } from \"../point/point-type.js\";\n/**\n * Rectangle as array: `[width, height]`\n */\nexport type RectArray = readonly [width: number, height: number];\n/**\n * Positioned rectangle as array: `[x, y, width, height]`\n */\nexport type RectPositionedArray = readonly [\n    x: number,\n    y: number,\n    width: number,\n    height: number\n];\nexport type Rect = {\n    readonly width: number;\n    readonly height: number;\n};\nexport type Rect3d = Rect & {\n    readonly depth: number;\n};\nexport type RectPositioned = Point & Rect;\nexport type Rect3dPositioned = Point3d & Rect3d;\n//# sourceMappingURL=rect-types.d.ts.map","export type ResultOk<T> = {\n    success: true;\n    value: T;\n};\nexport type ResultError = {\n    success: false;\n    error: Error | string;\n};\nexport type Result<T> = ResultOk<T> | ResultError;\n/**\n * If `result` is an error, throws it, otherwise ignored.\n * @param result\n * @returns\n */\nexport declare function throwResult<T>(result: Result<T>): result is ResultOk<T>;\nexport declare function resultToError(result: ResultError): Error;\nexport declare function resultToValue<T>(result: Result<T>): T;\nexport declare function resultErrorToString(result: ResultError): string;\n//# sourceMappingURL=results.d.ts.map"],"mappings":";;;;AAGA,IAAW,QAAQ,CAAC,GAAA;;;;ACMpB,IAAW,OAAE,CAAA,GAAA;AAEb,IAAW,iBAAM;CAAA;CAAA,MAAA;CAAA,MAAA;AAAA;;;;ACXjB,IAAW,WAAW,CAAC,KAAG,MAAA,CAAA;AAC1B,IAAW,cAAM,CAAA,KAAA,MAAA,KAAA;AACjB,IAAW,SAAC;CAAA;CAAA,MAAA;CAAA,MAAA;CAAA,MAAA;AAAA"}