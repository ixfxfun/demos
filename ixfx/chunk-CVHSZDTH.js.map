{"version":3,"sources":["../src/data/arrays/index.ts","../src/data/arrays/ArrayCycle.ts","../src/data/arrays/AtWrap.ts","../src/data/arrays/Chunks.ts","../src/data/arrays/Contains.ts","../src/data/arrays/EnsureLength.ts","../src/data/arrays/Equality.ts","../src/data/arrays/Flatten.ts","../src/data/arrays/GroupBy.ts","../src/data/arrays/InsertAt.ts","../src/data/arrays/Interleave.ts","../src/data/arrays/Intersection.ts","../src/data/arrays/MergeByKey.ts","../src/data/arrays/Pairwise.ts","../src/data/arrays/Remove.ts","../src/data/arrays/Sample.ts","../src/data/arrays/Sort.ts","../src/data/arrays/Until.ts","../src/data/arrays/Zip.ts","../src/data/arrays/SortedArray.ts"],"sourcesContent":["export * from './ArrayCycle.js';\nexport * from './AtWrap.js';\nexport * from './Chunks.js';\nexport * from './Contains.js';\nexport * from './ContainsDuplicateInstances.js';\nexport * from './EnsureLength.js';\nexport * from './Equality.js';\nexport * from './Filter.js';\nexport * from './Flatten.js';\nexport * from './GroupBy.js';\nexport * from './GuardArray.js';\nexport * from './GuardIndex.js';\nexport * from './InsertAt.js';\nexport * from './Interleave.js';\nexport * from './Intersection.js';\nexport * from './MergeByKey.js';\nexport * from '../../numbers/MinMaxAvg.js';\nexport * from './Pairwise.js';\nexport * from './Random.js';\nexport * from './Remove.js';\nexport * from './Sample.js';\nexport * from './Sort.js';\nexport type * from './Types.js';\nexport * from './Unique.js';\nexport * from './Until.js';\nexport * from './Zip.js';\nexport * as Sorted from './SortedArray.js';\n// export { compareValues, compareValuesEqual } from '../Iterables.js';\n","\n/**\n * Cycle through the contents of an array. By default starts at index 0.\n * ```js\n * const c = arrayCycle([`apples`, `oranges`, `pears`]);\n * c.current; // `apples`\n * c.next();  // `oranges`\n * c.next();  // `pears`\n * c.next();  // `apples`\n * c.prev();  // `pears`\n * ```\n * \n * You can select an item by index or value:\n * ```\n * c.select(1); // `oranges`\n * c.select(`pears`); // `pears`\n * ```\n * \n * Other features:\n * ```js\n * c.current;   // Current value\n * c.toArray(); // Copy of array being cycled over\n * ```\n * \n * Additional info:\n * * Selecting by value uses === semantics.\n * * Works with a copy of input array\n * @param options Array to cycle over \n * @returns \n */\nexport const cycle = <T>(options: ReadonlyArray<T> | Array<T>) => {\n  const opts = [ ...options ];\n  let index = 0;\n  const next = () => {\n    index++;\n    if (index === opts.length) index = 0;\n    return value();\n  }\n\n  // eslint-disable-next-line unicorn/prevent-abbreviations\n  const prev = () => {\n    index--;\n    if (index === -1) index = opts.length - 1;\n    return value();\n  }\n\n  const value = (): typeof opts[ number ] => {\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    return opts.at(index)!;\n  }\n\n  const select = (indexOrValue: number | typeof opts[ number ]) => {\n    if (typeof indexOrValue === `number`) {\n      index = indexOrValue;\n    } else {\n      const found = opts.indexOf(indexOrValue);\n      if (found === -1) throw new Error(`Could not find value`);\n      index = found;\n    }\n  }\n\n  const toArray = () => [ ...opts ];\n  return { toArray, next, prev, get current() { return value() }, select }\n}","import { throwNumberTest } from \"../../util/GuardNumbers.js\"\n\nexport const atWrap = <V>(array: Array<V>, index: number) => {\n  throwNumberTest(index, ``, `index`);\n  if (!Array.isArray(array)) throw new Error(`Param 'array' is not an array`);\n\n  index = index % array.length;\n  return array.at(index) as V;\n}","\n/**\n * Return `arr` broken up into chunks of `size`\n *\n * ```js\n * chunks([1,2,3,4,5,6,7,8,9,10], 3);\n * // Yields: [[1, 2, 3], [4, 5, 6], [7, 8, 9], [10]]\n * ```\n * @param array\n * @param size\n * @returns\n */\n//eslint-disable-next-line func-style\nexport function chunks<V>(\n  array: ReadonlyArray<V>,\n  size: number\n) {\n  // https://surma.github.io/underdash/\n  const output = [];\n  //eslint-disable-next-line  functional/no-let\n  for (let index = 0; index < array.length; index += size) {\n    //eslint-disable-next-line functional/immutable-data\n    output.push(array.slice(index, index + size));\n  }\n  return output;\n}","import { toStringDefault } from \"../../util/ToString.js\";\nimport { isEqualDefault } from \"../../util/IsEqual.js\";\nimport { fromIterable as mapFromIterable } from '../../data/maps/MapFns.js';\n\n/**\n * Returns _true_ if contents of `needles` is contained by `haystack`.\n * ```js\n * const a = ['apples','oranges','pears','mandarins'];\n * const b = ['pears', 'apples'];\n * contains(a, b); // True\n *\n * const c = ['pears', 'bananas'];\n * contains(a, b); // False ('bananas' does not exist in a)\n * ```\n * @param haystack\n * @param needles\n * @param eq\n */\nexport const contains = <V>(\n  haystack: ArrayLike<V>,\n  needles: ArrayLike<V>,\n  eq = isEqualDefault<V>\n) => {\n  if (!Array.isArray(haystack)) {\n    throw new TypeError(`Expects haystack parameter to be an array`);\n  }\n  if (!Array.isArray(needles)) {\n    throw new TypeError(`Expects needles parameter to be an array`);\n  }\n\n  for (const needle of needles) {\n    //eslint-disable-next-line functional/no-let\n    let found = false;\n    for (const element of haystack) {\n      if (eq(needle, element)) {\n        found = true;\n        break;\n      }\n    }\n    if (!found) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * Returns _true_ if array contains duplicate values.\n *\n * ```js\n * containsDuplicateValues(['a','b','a']); // True\n * containsDuplicateValues([\n *  { name: 'Apple' },\n *  { name: 'Apple' }\n * ]); // True\n * ```\n * \n * Uses JSON.toString() by default to compare values.\n * \n * See also:\n * * {@link containsDuplicateInstances}: Compare based on reference, rather than value\n * * {@link unique} Get unique set of values in an array\n * @param array Array to examine\n * @param keyFunction Function to generate key string for object, uses JSON.stringify by default.\n * @returns\n */\nexport const containsDuplicateValues = <V>(\n  array: Array<V> | ReadonlyArray<V>,\n  keyFunction = toStringDefault<V>\n): boolean => {\n  if (!Array.isArray(array)) throw new Error(`Parameter needs to be an array`);\n  try {\n    const _ = mapFromIterable(array, keyFunction);\n  } catch {\n    return true;\n  }\n  return false;\n};\n","/**\n * Returns a copy of `data` with specified length.\n * If the input array is too long, it is truncated.\n *\n * If the input array is too short, it will be expanded based on the `expand` strategy:\n *  - 'undefined': fill with `undefined`\n *  - 'repeat': repeat array elements, starting from position 0\n *  - 'first': repeat with first element from `data`\n *  - 'last': repeat with last element from `data`\n *\n * ```js\n * import { Arrays } from 'https://unpkg.com/ixfx/dist/data.js';\n *\n * Arrays.ensureLength([1,2,3], 2); // [1,2]\n * Arrays.ensureLength([1,2,3], 5, `undefined`); // [1,2,3,undefined,undefined]\n * Arrays.ensureLength([1,2,3], 5, `repeat`);    // [1,2,3,1,2]\n * Arrays.ensureLength([1,2,3], 5, `first`);     // [1,2,3,1,1]\n * Arrays.ensureLength([1,2,3], 5, `last`);      // [1,2,3,3,3]\n * ```\n * @param data Input array to expand\n * @param length Desired length\n * @param expand Expand strategy\n * @typeParam V Type of array\n */\nexport const ensureLength = <V>(\n  data: ReadonlyArray<V> | Array<V>,\n  length: number,\n  expand: `undefined` | `repeat` | `first` | `last` = `undefined`\n): Array<V> => {\n  // Unit tested\n  if (data === undefined) throw new Error(`Data undefined`);\n  if (!Array.isArray(data)) throw new Error(`data is not an array`);\n  if (data.length === length) return [ ...data ];\n  if (data.length > length) {\n    return data.slice(0, length);\n  }\n  const d = [ ...data ];\n  const add = length - d.length;\n\n  //eslint-disable-next-line functional/no-let\n  for (let index = 0; index < add; index++) {\n    //eslint-disable-next-line functional/immutable-data\n    switch (expand) {\n      case `undefined`: {\n        // @ts-expect-error\n        d.push(undefined);\n        break;\n      }\n      case `repeat`: {\n        d.push(data[ index % data.length ]);\n        break;\n      }\n      case `first`: {\n        d.push(data[ 0 ]);\n        break;\n      }\n      case `last`: {\n        // @ts-expect-error\n        d.push(data.at(-1));\n        break;\n      }\n      // No default\n    }\n  }\n  return d;\n};\n","import { isEqualDefault, isEqualValueDefault, type IsEqual } from \"../../util/IsEqual.js\";\nimport { guardArray } from \"./GuardArray.js\";\n\n\n/**\n * Returns _true_ if the two arrays have the same items at same indexes. Use {@link isEqualDefault} to\n * compare values regardless of position.\n * \n * Returns _false_ if arrays are of different length.\n * By default uses === semantics for equality checking.\n * \n * ```js\n * isEqual([ 1, 2, 3], [ 1, 2, 3 ]); // true\n * isEqual([ 1, 2, 3], [ 3, 2, 1 ]); // false\n * ```\n * \n * Compare by value\n * ```js\n * isEqual(a, b, isEqualValueDefault);\n * ```\n * \n * Custom compare, eg based on `name` field:\n * ```js\n * isEqual(a, b, (compareA, compareB) => compareA.name === compareB.name);\n * ```\n * @param arrayA \n * @param arrayB \n * @param eq \n */\nexport const isEqual = <V>(arrayA: Array<V>, arrayB: Array<V>, eq = isEqualDefault<V>): boolean => {\n  guardArray(arrayA, `arrayA`);\n  guardArray(arrayB, `arrayB`);\n\n  if (arrayA.length !== arrayB.length) return false;\n  // eslint-disable-next-line unicorn/no-for-loop\n  for (let indexA = 0; indexA < arrayA.length; indexA++) {\n    if (!(eq(arrayA[ indexA ], arrayB[ indexA ]))) return false;\n  }\n  return true;\n}\n\n/**\n * Returns _true_ if all values in the array are the same\n * \n * Uses value-based equality checking by default.\n * \n * @example Uses default equality function:\n * ```js\n * import { Arrays } from 'https://unpkg.com/ixfx/dist/data.js';\n *\n * const a1 = [ 10, 10, 10 ];\n * Arrays.isContentsTheSame(a1); // True\n *\n * const a2 = [ { name:`Jane` }, { name:`John` } ];\n * Arrays.isContentsTheSame(a2); // True, even though object references are different\n * ```\n *\n * If we want to compare by value for objects that aren't readily\n * converted to JSON, you need to provide a function:\n *\n * ```js\n * Arrays.isContentsTheSame(someArray, (a, b) => {\n *  return (a.eventType === b.eventType);\n * });\n * ```\n *\n * Returns _true_ if `array` is empty.\n * @param array Array\n * @param equality Equality checker. Uses string-conversion checking by default\n * @returns\n */\nexport const isContentsTheSame = <V>(\n  array: ReadonlyArray<V> | Array<V>,\n  equality?: IsEqual<V>\n): boolean => {\n  // Unit tested\n\n  if (!Array.isArray(array)) throw new Error(`Param 'array' is not an array.`);\n  if (array.length === 0) return true;\n  const eq = equality ?? isEqualValueDefault;\n  const a = array[ 0 ];\n  const r = array.some((v) => !eq(a, v));\n  if (r) return false;\n  return true;\n};","/**\n * Returns a 'flattened' copy of array, un-nesting arrays one level\n * ```js\n * flatten([1, [2, 3], [[4]] ]);\n * // Yields: [ 1, 2, 3, [4]];\n * ```\n * @param array\n * @returns\n */\nexport const flatten = (array: ReadonlyArray<any> | Array<any>): Array<any> =>\n  [ ...array ].flat();","\n/**\n * Groups data by a function `grouper`, returning data as a map with string\n * keys and array values. Multiple values can be assigned to the same group.\n *\n * `grouper` must yield a string designated group for a given item.\n *\n * @example\n * ```js\n * import { Arrays } from 'https://unpkg.com/ixfx/dist/data.js';\n *\n * const data = [\n *  { age: 39, city: `London` },\n *  { age: 14, city: `Copenhagen` },\n *  { age: 23, city: `Stockholm` },\n *  { age: 56, city: `London` }\n * ];\n *\n * // Whatever the function returns will be the designated group\n * // for an item\n * const map = Arrays.groupBy(data, item => item.city);\n * ```\n *\n * This yields a Map with keys London, Stockholm and Copenhagen, and the corresponding values.\n *\n * ```\n * London: [{ age: 39, city: `London` }, { age: 56, city: `London` }]\n * Stockhom: [{ age: 23, city: `Stockholm` }]\n * Copenhagen: [{ age: 14, city: `Copenhagen` }]\n * ```\n * @param array Array to group\n * @param grouper Function that returns a key for a given item\n * @typeParam K Type of key to group by. Typically string.\n * @typeParam V Type of values\n * @returns Map\n */\nexport const groupBy = <K, V>(\n  //eslint-disable-next-line functional/prefer-readonly-type\n  array: Iterable<V>,\n  grouper: (item: V) => K\n) => {\n  const map = new Map<K, Array<V>>();\n\n  for (const a of array) {\n    const key = grouper(a);\n    //eslint-disable-next-line functional/no-let\n    let existing = map.get(key);\n    if (!existing) {\n      existing = [];\n      map.set(key, existing);\n    }\n    //eslint-disable-next-line functional/immutable-data\n    existing.push(a);\n  }\n  return map;\n};","/**\n * Inserts `values` at position `index`, shuffling remaining\n * items further down.\n * @param data \n * @param index \n * @param values \n * @returns \n */\nexport const insertAt = <V>(\n  //eslint-disable-next-line functional/prefer-readonly-type\n  data: ReadonlyArray<V> | Array<V>,\n  index: number,\n  ...values: Array<V>\n): Array<V> => {\n  if (!Array.isArray(data)) {\n    throw new TypeError(`Param 'data' is not an arry`);\n  }\n  return [ ...data.slice(0, index), ...values, ...data.slice(index + 1) ];\n};","import { isContentsTheSame } from \"./Equality.js\";\n\n/**\n * Returns an interleaving of two or more arrays. All arrays must be the same length.\n *\n * ```js\n * import { Arrays } from 'https://unpkg.com/ixfx/dist/data.js';\n *\n * const a = [`a`, `b`, `c`];\n * const b = [`1`, `2`, `3`];\n * const c = Arrays.interleave(a, b);\n * // Yields:\n * // [`a`, `1`, `b`, `2`, `c`, `3`]\n * ```\n * @param arrays\n * @returns\n */\nexport const interleave = <V>(\n  ...arrays: ReadonlyArray<ReadonlyArray<V>> | Array<Array<V>>\n): Array<V> => {\n  if (arrays.some((a) => !Array.isArray(a))) {\n    throw new Error(`All parameters must be an array`);\n  }\n  const lengths = arrays.map((a) => a.length);\n  if (!isContentsTheSame(lengths)) {\n    throw new Error(`Arrays must be of same length`);\n  }\n\n  const returnValue = [];\n  const length = lengths[ 0 ];\n  for (let index = 0; index < length; index++) {\n    for (const array of arrays) {\n      returnValue.push(array[ index ]);\n    }\n  }\n  return returnValue;\n};\n","import { isEqualDefault, type IsEqual } from \"../../util/IsEqual.js\";\n\n/**\n * Returns the _intersection_ of two arrays: the elements that are in common.\n * \n * ```js\n * intersection([1, 2, 3], [2, 4, 6]);\n// returns [2]\n * ```\n * See also: \n * * {@link unique}: Unique set of items amongst one or more arrays\n * @param arrayA \n * @param arrayB \n * @param equality \n * @returns \n */\nexport const intersection = <V>(\n  arrayA: ReadonlyArray<V> | Array<V>,\n  arrayB: ReadonlyArray<V> | Array<V>,\n  equality: IsEqual<V> = isEqualDefault\n) => arrayA.filter((valueFromA) => arrayB.some((valueFromB) => equality(valueFromA, valueFromB)));\n","import type { MergeReconcile } from \"./Types.js\";\n\n/**\n * Merges arrays left to right, using the provided\n * `reconcile` function to choose a winner when keys overlap.\n *\n * There's also {@link Data.Maps.mergeByKey} if the input data is in Map form.\n *\n * For example, if we have the array A:\n * [`A-1`, `A-2`, `A-3`]\n *\n * And array B:\n * [`B-1`, `B-2`, `B-4`]\n *\n * And with the key function:\n * ```js\n * // Make a key for value based on last char\n * const keyFn = (v) => v.substr(-1, 1);\n * ```\n *\n * If they are merged with the reconile function:\n * ```js\n * const reconcile = (a, b) => b.replace(`-`, `!`);\n * const output = mergeByKey(keyFn, reconcile, arrayA, arrayB);\n * ```\n *\n * The final result will be:\n *\n * [`B!1`, `B!2`, `A-3`, `B-4`]\n *\n * In this toy example, it's obvious how the reconciler transforms\n * data where the keys overlap. For the keys that do not overlap -\n * 3 and 4 in this example - they are copied unaltered.\n *\n * A practical use for `mergeByKey` has been in smoothing keypoints\n * from a TensorFlow pose. In this case, we want to smooth new keypoints\n * with older keypoints. But if a keypoint is not present, for it to be\n * passed through.\n *\n * @param keyFunction Function to generate a unique key for data\n * @param reconcile Returns value to decide 'winner' when keys conflict.\n * @param arrays Arrays of data to merge\n */\nexport const mergeByKey = <V>(\n  keyFunction: (value: V) => string,\n  reconcile: MergeReconcile<V>,\n  ...arrays: ReadonlyArray<ReadonlyArray<V>>\n): Array<V> => {\n  const result = new Map<string, V>();\n  for (const m of arrays) {\n    for (const mv of m) {\n      if (mv === undefined) continue;\n      const mk = keyFunction(mv);\n      //eslint-disable-next-line functional/no-let\n      let v = result.get(mk);\n      v = v ? reconcile(v, mv) : mv;\n      result.set(mk, v);\n    }\n  }\n  return [ ...result.values() ];\n};\n","import { guardArray } from \"./GuardArray.js\";\n\n/**\n * Combines values in pairwise fashion.\n * Throws an error if there are less than two entries.\n * \n * ```js\n * pairwise([1, 2, 3, 4, 5]);\n * Yields:\n * [[1,2],[2,3],[3,4],[4,5] ]\n * \n * pairwise([ 1, 2, 3, 4 ]);\n * Yields:\n * [1,2],[2,3],[3,4]\n * ```\n * @param values \n */\nexport function* pairwise<T>(values: Array<T>) {\n  guardArray(values, `values`);\n\n  if (values.length < 2) throw new Error(`Array needs to have at least two entries. Length: ${ values.length }`);\n\n  for (let index = 1; index < values.length; index++) {\n    yield [ values[ index - 1 ], values[ index ] ];\n  }\n}\n\n/**\n * Reduces in a pairwise fashion.\n *\n * Eg, if we have input array of [1, 2, 3, 4, 5], the\n * `reducer` fn will run with 1,2 as parameters, then 2,3, then 3,4 etc.\n * ```js\n * const values = [1, 2, 3, 4, 5]\n * reducePairwise(values, (acc, a, b) => {\n *  return acc + (b - a);\n * }, 0);\n * ```\n *\n * If input array has less than two elements, the initial value is returned.\n *\n * ```js\n * const reducer = (acc:string, a:string, b:string) => acc + `[${a}-${b}]`;\n * const result = reducePairwise(`a b c d e f g`.split(` `), reducer, `!`);\n * Yields: `![a-b][b-c][c-d][d-e][e-f][f-g]`\n * ```\n * @param array\n * @param reducer\n * @param initial\n * @returns\n */\nexport const pairwiseReduce = <V, X>(\n  array: ReadonlyArray<V>,\n  reducer: (accumulator: X, a: V, b: V) => X,\n  initial: X\n) => {\n  guardArray(array, `arr`);\n  if (array.length < 2) return initial;\n  //eslint-disable-next-line functional/no-let\n  for (let index = 0; index < array.length - 1; index++) {\n    initial = reducer(initial, array[ index ], array[ index + 1 ]);\n  }\n  return initial;\n};\n","import { guardIndex } from \"./GuardIndex.js\";\n\n/**\n * Removes an element at `index` index from `data`, returning the resulting array without modifying the original.\n *\n * ```js\n * import { Arrays } from 'https://unpkg.com/ixfx/dist/data.js';\n *\n * const v = [ 100, 20, 50 ];\n * const vv = Arrays.remove(2);\n *\n * Yields:\n *  v: [ 100, 20, 50 ]\n * vv: [ 100, 20 ]\n * ```\n *\n * Consider {@link without} if you want to remove an item by value.\n *\n * Throws an exception if `index` is outside the range of `data` array.\n * @param data Input array\n * @param index Index to remove\n * @typeParam V Type of array\n * @returns\n */\nexport const remove = <V>(\n  //eslint-disable-next-line functional/prefer-readonly-type\n  data: ReadonlyArray<V> | Array<V>,\n  index: number\n): Array<V> => {\n  // ✔️ Unit tested\n  if (!Array.isArray(data)) {\n    throw new TypeError(`'data' parameter should be an array`);\n  }\n  guardIndex(data, index, `index`);\n  return [ ...data.slice(0, index), ...data.slice(index + 1) ];\n};","import { throwIntegerTest } from '../../util/GuardNumbers.js';\n/**\n * Samples array\n *\n * @example By percentage - get half of the items\n * ```\n * import { Arrays } from 'https://unpkg.com/ixfx/dist/data.js';\n *\n * const list = [1,2,3,4,5,6,7,8,9,10];\n * const sub = Arrays.sample(list, 0.5);\n * // Yields: [2, 4, 6, 8, 10]\n * ```\n *\n * @example By steps - every third\n * ```\n * import { Arrays } from 'https://unpkg.com/ixfx/dist/data.js';\n *\n * const list = [1,2,3,4,5,6,7,8,9,10];\n * const sub = Arrays.sample(list, 3);\n * // Yields:\n * // [3, 6, 9]\n * ```\n * @param array Array to sample\n * @param amount Amount, given as a percentage (0..1) or the number of interval (ie 3 for every third item)\n * @returns\n */\nexport const sample = <V>(array: ArrayLike<V>, amount: number): Array<V> => {\n  //eslint-disable-next-line functional/no-let\n  let subsampleSteps = 1;\n  if (amount <= 1) {\n    // Subsample based on a percentage\n    const numberOfItems = array.length * amount;\n    subsampleSteps = Math.round(array.length / numberOfItems);\n  } else {\n    subsampleSteps = amount;\n  }\n\n  throwIntegerTest(subsampleSteps, `positive`, `amount`);\n  if (subsampleSteps > array.length - 1) {\n    throw new Error(`Subsample steps exceeds array length`);\n  }\n  const r: Array<V> = [];\n\n  //eslint-disable-next-line functional/no-let\n  for (let index = subsampleSteps - 1; index < array.length; index += subsampleSteps) {\n    //eslint-disable-next-line functional/immutable-data\n    r.push(array[ index ]);\n  }\n  return r;\n};","import { guardArray } from './GuardArray.js';\n/**\n * Sorts an array of objects in ascending order\n * by the given property name, assuming it is a number.\n *\n * ```js\n * const data = [\n *  { size: 10, colour: `red` },\n *  { size: 20, colour: `blue` },\n *  { size: 5, colour: `pink` }\n * ];\n * const sorted = Arrays.sortByNumericProperty(data, `size`);\n *\n * Yields items ascending order:\n * [ { size: 5, colour: `pink` }, { size: 10, colour: `red` }, { size: 20, colour: `blue` } ]\n * ```\n * @param data\n * @param propertyName\n */\nexport const sortByNumericProperty = <V, K extends keyof V>(\n  data: ReadonlyArray<V> | Array<V>,\n  propertyName: K\n) => [ ...data ].sort((a, b) => {\n  guardArray(data, `data`);\n  const av = a[ propertyName ];\n  const bv = b[ propertyName ];\n  if (av < bv) return -1;\n  if (av > bv) return 1;\n  return 0;\n});\n\nexport const sortByProperty = <V, K extends keyof V>(\n  data: ReadonlyArray<V> | Array<V>,\n  propertyName: K\n) => [ ...data ].sort((a, b) => {\n  guardArray(data, `data`);\n  const av = a[ propertyName ];\n  const bv = b[ propertyName ];\n  if (av < bv) return -1;\n  if (av > bv) return 1;\n  return 0;\n});","/**\n * Yields all items in `data` for as long as `predicate` returns true.\n *\n * `predicate` yields arrays of `[stop:boolean, acc:A]`. The first value\n * is _true_ when the iteration should stop, and the `acc` is the accumulated value.\n * This allows `until` to be used to carry over some state from item to item.\n *\n * @example Stop when we hit an item with value of 3\n * ```js\n * const v = [...until([1,2,3,4,5], v => [v === 3, 0])];\n * // [ 1, 2 ]\n * ```\n *\n * @example Stop when we reach a total\n * ```js\n * // Stop when accumulated value reaches 6\n * const v = Arrays.until[1,2,3,4,5], (v, acc) => [acc >= 7, v+acc], 0);\n * // [1, 2, 3]\n * ```\n * @param data\n * @param predicate\n * @returns\n */\nexport function* until<V, A>(\n  //eslint-disable-next-line functional/prefer-readonly-type\n  data: ReadonlyArray<V> | Array<V>,\n  predicate: (v: V, accumulator: A) => readonly [ stop: boolean, acc: A ],\n  initial: A\n): Generator<V> {\n  //const returnValue = [];\n  //eslint-disable-next-line functional/no-let\n  let total = initial;\n  //eslint-disable-next-line functional/no-let\n  for (const datum of data) {\n    const [ stop, accumulator ] = predicate(datum, total);\n    if (stop) break;\n\n    total = accumulator;\n\n    //eslint-disable-next-line functional/immutable-data\n    //returnValue.push(datum);\n    yield datum;\n\n  }\n  //return returnValue;\n};","import { isContentsTheSame } from \"./Equality.js\";\n\n/**\n * Zip combines the elements of two or more arrays based on their index.\n *\n * ```js\n * import { Arrays } from 'https://unpkg.com/ixfx/dist/data.js';\n *\n * const a = [1,2,3];\n * const b = [`red`, `blue`, `green`];\n *\n * const c = Arrays.zip(a, b);\n * // Yields:\n * // [\n * //   [1, `red`],\n * //   [2, `blue`],\n * //   [3, `green`]\n * // ]\n * ```\n *\n * Typically the arrays you zip together are all about the same logical item. Eg, in the above example\n * perhaps `a` is size and `b` is colour. So thing #1 (at array index 0) is a red thing of size 1. Before\n * zipping we'd access it by `a[0]` and `b[0]`. After zipping, we'd have c[0], which is array of [1, `red`].\n * @param arrays\n * @returns Zipped together array\n */\n//eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport const zip = (\n  ...arrays: Array<Array<any>> | ReadonlyArray<Array<any>> | ReadonlyArray<ReadonlyArray<any>>\n): Array<any> => {\n  // Unit tested\n  if (arrays.some((a) => !Array.isArray(a))) {\n    throw new Error(`All parameters must be an array`);\n  }\n  const lengths = arrays.map((a) => a.length);\n  if (!isContentsTheSame(lengths)) {\n    throw new Error(`Arrays must be of same length`);\n  }\n\n  const returnValue = [];\n  const length = lengths[ 0 ];\n\n  for (let index = 0; index < length; index++) {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n    returnValue.push(arrays.map((a) => a[ index ]));\n  }\n  return returnValue;\n};","import { defaultComparer, type Comparer } from \"../../util/Comparers.js\";\n\n/**\n * Returns an immutable wrapper around an array, initially unsorted.\n * Sorts data and passes to {@link wrapSorted}.\n * @param unsortedData \n * @param comparer \n * @returns \n */\nexport const wrapUnsorted = <T>(unsortedData: Array<T>, comparer: Comparer<T> = defaultComparer) => wrapSorted(unsortedData.toSorted(comparer));\n\n/**\n * Returns an immutable wrapper around a sorted array.\n * Use {@link wrapUnsorted} if not yet sorted.\n * \n * Functions that change contents return a new wrapped instance.\n * \n * ```js\n * let w = wrapSorted([ 1, 2, 10 ]);\n * w.indexOf(1);    // 0\n * w = w.insert(9); // Inserts 9, returning a new wrapper\n * w = w.remove(9); // Removes 9, returning a new wrapper\n * ```\n * \n * You can access the underyling sorted array with the `data` property.\n * It's important this is not modified since the wrapper assumes its immutable\n * and stays sorted. Use `toArray()` to get a copy of the array which can be\n * changed.\n * \n * ```js\n * // A few basic array-like features supported\n * w.length;    // Get length of array\n * w.at(0);     // Get item at index 0\n * w.data;      // Get underlying array\n * w.toArray(); // Get a copy of the underyling array\n * ```\n * @param sortedData \n * @param comparer \n * @returns \n */\nexport const wrapSorted = <T>(sortedData: Array<T>, comparer: Comparer<T> = defaultComparer) => {\n  const store = [ ...sortedData ];\n  return {\n    /**\n     * Returns index of an item, or -1 if not found\n     * @param sought Item to find\n     * @param start \n     * @param end \n     * @returns \n     */\n    indexOf: (sought: T, start = 0, end = store.length) => {\n      return indexOf(store, sought, start, end, comparer);\n    },\n    insertionIndex: (toInsert: T) => {\n      return insertionIndex(store, toInsert, 0, store.length, comparer);\n    },\n    /**\n     * Inserts an item, returning a new wrapper\n     * @param toInsert \n     * @returns \n     */\n    insert: (toInsert: T) => {\n      return wrapSorted(insert(store, toInsert, comparer), comparer);\n    },\n    /**\n     * Removes an item, returning a new wrapper\n     * @param toRemove \n     * @returns \n     */\n    remove: (toRemove: T) => {\n      return wrapSorted(remove(store, toRemove, comparer));\n    },\n    /**\n     * Gets item at a specified offset\n     * @param offset \n     * @returns \n     */\n    at: (offset: number) => {\n      return store.at(offset);\n    },\n    /**\n     * Gets length\n     */\n    get length() {\n      return store.length;\n    },\n    /**\n     * Gets underlying data.\n     * Be careful not to mutate. Use `toArray` to get a copy\n     * that can be modified.\n     */\n    get data() {\n      return store;\n    },\n    /**\n     * Returns a copy of data which is safe to modify.\n     * @returns \n     */\n    toArray: () => {\n      return [ ...store ]\n    }\n  }\n}\n\n/**\n * Returns index of data in an ascended sorted array using a binary search.\n * Returns -1 if data was not found.\n * ```js\n * indexOf([1,2,3], 3); // 2\n * indexOf([1,2,3], 0); // -1, not found\n * ```\n * \n * By default uses Javascript comparision semantics. \n * Passing in `comparer` is needed when working with an array of objects.\n * @param data Array of data\n * @param sought Item to search for\n * @param start Start point\n * @param end End index\n * @param comparer Comparer (by default uses JS semantics)\n * @returns Index of sought item or -1 if not found.\n */\nexport const indexOf = <T>(data: Array<T>, sought: T, start = 0, end = data.length, comparer: Comparer<T> = defaultComparer): number => {\n  if (end <= start) return -1;\n  const mid = Math.floor((start + end) / 2);\n  const result = comparer(data[ mid ], sought);\n\n  // Result is at the middle\n  if (result === 0) return mid;\n\n  if (result > 0) {\n    // data[mid] is greater than sought, must be in left side\n    return indexOf(data, sought, start, mid - 1, comparer);\n  }\n\n  // data[mid] is less than sought, must be in right side\n  return indexOf(data, sought, mid + 1, end, comparer);\n}\n\n/**\n * Returns index to insert data into a sorted array using a binary search.\n * Adds to the right of existing entries in the case of equal values.\n * \n * By default uses Javascript comparision semantics. \n * Passing in `comparer` is needed when working with an array of objects.\n * @param data \n * @param toInsert \n * @param start \n * @param end \n * @param comparer \n */\nexport const insertionIndex = <T>(data: Array<T>, toInsert: T, start = 0, end = data.length, comparer: Comparer<T> = defaultComparer): number => {\n  const mid = Math.floor((start + end) / 2);\n\n  const result = comparer(data[ mid ], toInsert);\n  //console.log(`mid index: ${ mid } mid data: ${ data[ mid ] } result: ${ result } value: ${ toInsert } start: ${ start } end: ${ end }`);\n\n  // Result is at the middle\n  if (result === 0) return mid + 1;\n\n  if (result > 0) {\n    if (start === end) return start;\n    if (start + 1 === end) return start;\n    // data[mid] is greater than sought, must be in left side\n    return insertionIndex(data, toInsert, start, mid - 1, comparer);\n  }\n\n  // data[mid] is less than sought, must be in right side\n  return insertionIndex(data, toInsert, mid + 1, end, comparer);\n}\n\n/**\n * Inserts an item into a sorted array, returning a new array.\n * ```js\n * let data = [ 1, 2, 3, 4 ];\n * data = insert(data, 2.5);\n * // [ 1, 2, 2.5, 3, 4 ]\n * ```\n * \n * By default uses Javascript comparision semantics. \n * Passing in `comparer` is needed when working with an array of objects.\n * @param sortedArray Sorted array\n * @param toInsert Data to insert\n * @param comparer Comparer, uses JS default semantics if not specified.\n * @returns \n */\nexport const insert = <T>(sortedArray: Array<T>, toInsert: T, comparer: Comparer<T> = defaultComparer) => {\n  const index = insertionIndex(sortedArray, toInsert, 0, sortedArray.length, comparer);\n  const pre = sortedArray.slice(0, index);\n  const post = sortedArray.slice(index);\n  return [ ...pre, toInsert, ...post ];\n}\n\n/**\n * Removes item from a sorted array if it exists, returning the modified array.\n * ```js\n * let data = [ 1, 2, 3, 4 ];\n * data = remove(data, 3);\n * // [ 1, 2, 4 ]\n * ```\n * \n * By default uses Javascript comparision semantics. \n * Passing in `comparer` is needed when working with an array of objects.\n * @param data \n * @param toRemove \n * @param comparer \n * @returns \n */\nexport const remove = <T>(data: Array<T>, toRemove: T, comparer: Comparer<T> = defaultComparer) => {\n  const index = indexOf(data, toRemove, 0, data.length, comparer);\n  if (index === -1) return data;\n  const pre = data.slice(0, index);\n  const post = data.slice(index + 1);\n  return [ ...pre, ...post ];\n}\n\n/**\n * Merges two sorted arrays, returning result.\n * \n * ```js\n * const a = [ 4, 7, 10 ]\n * const b = [ 1, 2, 9, 11 ]\n * const c = merge(a, b);\n * // [ 1, 2, 4, 7, 9, 10, 11 ]\n * ```\n * \n * Undefined behaviour if either input array is not sorted.\n * \n * By default uses Javascript comparision semantics. \n * Passing in `comparer` is needed when working with an array of objects.\n * @param a Sorted array\n * @param b Sorted array\n * @param comparer Comparator\n */\nexport const merge = <T>(a: Array<T>, b: Array<T>, comparer: Comparer<T> = defaultComparer): Array<T> => {\n  // Adapted from https://github.com/larrybotha/building-algorithms-using-typescript/blob/master/src/09-merge-sort-algorithm.ts\n  const t: Array<T> = [];\n  let aIndex = 0;\n  let bIndex = 0;\n\n  while (aIndex + bIndex < a.length + b.length) {\n    const aItem = a[ aIndex ];\n    const bItem = b[ bIndex ];\n    const comp = comparer(aItem, bItem);\n    if (aItem === undefined) {\n      t.push(bItem);\n      bIndex++;\n    } else if (bItem === undefined) {\n      t.push(aItem);\n      aIndex++;\n    } else if (comp < 0) {\n\n      t.push(aItem);\n      aIndex++;\n    } else {\n\n      t.push(bItem);\n\n      bIndex++;\n    }\n  }\n  return t;\n}\n\nconst sortMerge = <T>(data: Array<T> | ReadonlyArray<T>, comparer: Comparer<T> = defaultComparer): Array<T> => {\n  // Adapted from https://github.com/larrybotha/building-algorithms-using-typescript/blob/master/src/09-merge-sort-algorithm.ts\n  if (data.length <= 1) return [ ...data ];\n  const mIndex = Math.floor(data.length / 2);\n  const a = data.slice(0, mIndex);\n  const b = data.slice(mIndex);\n  return merge(sortMerge(a, comparer), sortMerge(b, comparer), comparer);\n}\n\nexport type SortAlgorithm = `default` | `merge`;\n\n/**\n * Returns a sorted version of `data` using a specified algorithm. Original array is left as-is\n * ```js\n * const data = [ 10, 2, 9, 5 ]\n * sort(data, `merge`); // [ 2, 5, 9, 20 ]\n * ```\n * \n * By default uses in-built semantics for comparison. But a function can be provided.\n * Return 0 if `a` and `b` are equal, above 0 if `a` is considered higher than `b` or below zero if `b` is considered higher than `a`.\n * \n * In the below example, the default sorting semantics are reversed:\n * ```js \n * const reverse = (a, b) => {\n *   if (a === b) return 0;\n *   if (a > b) return -1; \n *   if (a < b) return 1;\n *   return 0; // equal\n * }\n * sort(data, reverse); // [ 20, 9, 5, 2 ]\n * ```\n * @param data \n * @param algo \n * @param comparer \n * @returns Sorted array\n */\nexport const sort = <T>(data: Array<T> | ReadonlyArray<T>, algo: SortAlgorithm = `default`, comparer: Comparer<T> = defaultComparer): Array<T> => {\n  switch (algo) {\n    case `merge`:\n      return sortMerge(data, comparer);\n    case \"default\":\n      return data.toSorted(comparer);\n  }\n}"],"mappings":"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","names":["remove","remove"]}