{"version":3,"file":"random.js","names":["weightings: Array<number>","rand: RandomSource","precompute: Array<number>","array: ArrayLike<V>","rand: RandomSource","array: readonly V[] | V[]","options: Partial<{ mutate: boolean, source: RandomSource }>","weightings: number[]","randomSource: RandomSource","dataToShuffle: readonly V[]","p: number | (() => number)","a: T | (() => T)","b: T | (() => T)","randomSource?: RandomSource","x: V | (() => V)","maxOrOptions?: number | RandomNumberOptions","maxOrOptions: (number | RandomNumberOptions)","source: RandomSource","options: Readonly<{ source?: RandomSource }>","amount: number","maxOrOptions: number | RandomNumberOptions","maxOrOptions: number | GenerateRandomOptions","seed?: number | undefined","mti","float","integer","maxExclusive: number","minInclusive: number","lengthOrOptions: number | StringOptions","maxMinutesOrOptions: number | RandomNumberOptions","maxSecondsOrOptions: number | RandomNumberOptions","v:number","min:number","max:number","options: WeightedOptions","options: WeightedOptions"],"sources":["../../random/src/weighted-index.ts","../../random/src/arrays.ts","../../random/src/chance.ts","../../random/src/float-source.ts","../../random/src/non-zero.ts","../../random/src/gaussian.ts","../../random/src/guid.ts","../../random/src/util/count.ts","../../random/src/integer.ts","../../random/src/seeded.ts","../../random/src/string.ts","../../random/src/time.ts","../../random/src/util/clamp.ts","../../random/src/weighted-integer.ts","../../random/src/weighted.ts"],"sourcesContent":["import { type RandomSource } from \"./types.js\";\n\n/**\n* Returns a random number from 0..weightings.length, distributed by the weighting values.\n* \n* eg: produces 0 20% of the time, 1 50% of the time, 2 30% of the time\n* ```js\n* weightedIndex([0.2, 0.5, 0.3]);\n* ```\n* @param weightings \n* @param rand \n* @returns \n*/\nexport const weightedIndex = (weightings: Array<number>, rand: RandomSource = Math.random): () => number => {\n  const precompute: Array<number> = [];\n  let total = 0;\n  // eslint-disable-next-line unicorn/no-for-loop\n  for (let index = 0; index < weightings.length; index++) {\n    total += weightings[ index ];\n    precompute[ index ] = total;\n  }\n  if (total !== 1) throw new Error(`Weightings should add up to 1. Got: ${ total }`);\n\n  return (): number => {\n    const v = rand();\n    // eslint-disable-next-line unicorn/no-for-loop\n    for (let index = 0; index < precompute.length; index++) {\n      if (v <= precompute[ index ]) return index;\n    }\n    throw new Error(`Bug: weightedIndex could not select index`);\n  }\n}","import { arrayTest, resultThrow } from \"@ixfx/guards\";\nimport { weightedIndex } from \"./weighted-index.js\";\nimport type { RandomSource } from \"./types.js\";\n\n/**\n * Returns a random array index.\n *\n * ```js\n * const v = [`blue`, `red`, `orange`];\n * randomIndex(v); // Yields 0, 1 or 2\n * ```\n *\n * Use {@link randomElement} if you want a value from `array`, not index.\n *\n * @param array Array\n * @param rand Random generator. `Math.random` by default.\n * @returns\n */\nexport const randomIndex = <V>(\n  array: ArrayLike<V>,\n  rand: RandomSource = Math.random\n): number => Math.floor(rand() * array.length);\n\n\n/**\n * Returns a random value from `array`,\n * and removes it from the array.\n * \n * ```js\n * const data = [100,20,50];\n * const v = randomPluck(data, { mutate: true });\n * // eg: v: 20, data is now [100,50]\n * ```\n * @param array \n * @param options \n */\nexport function randomPluck<V>(\n  array: readonly V[] | V[],\n  options: { mutate: true, source?: RandomSource }\n): V | undefined;\n\n/**\n * Returns a random element from an array\n * along with the remaining elements. Does not\n * modify the original array.\n * ```js\n * const data = [100,20,50];\n * const {value,remainder} = randomPluck(data);\n * // eg: value: 20, remainder: [100,50], data remains [100,20,50]\n * ```\n * @param array \n * @param options \n */\nexport function randomPluck<V>(\n  array: readonly V[] | V[],\n  options?: { mutate: false, source?: RandomSource }\n): { value: V, remainder: V[] };\n\n/**\n * Plucks a random value from an array, optionally mutating\n * the original array.\n * \n * @example Get a random element without modifying array\n * ```js\n * const { value, remainder } = randomPluck(inputArray);\n * ```\n * \n * @example Get a random element, removing it from original array\n * ```js\n * const value = randomPluck(inputArray, { mutate: true });\n * ```\n * \n * If the input array is empty, _undefined_ is returned as the value.\n * @typeParam V - Type of items in array\n * @param array Array to pluck item from\n * @param options Options. By default { mutate: false, source: Math.random }\n * @param rand Random generator. `Math.random` by default.\n *\n */\nexport function randomPluck<V>(\n  array: readonly V[] | V[],\n  options: Partial<{ mutate: boolean, source: RandomSource }> = {}\n): undefined | V | { readonly value: V | undefined; readonly remainder: V[] } {\n  if (typeof array === `undefined`) throw new Error(`Param 'array' is undefined`);\n  if (!Array.isArray(array)) throw new Error(`Param 'array' is not an array`);\n\n  const mutate = options.mutate ?? false;\n  const rand = options.source ?? Math.random;\n\n  if (array.length === 0) {\n    if (mutate) return undefined;\n    return { value: undefined, remainder: [] };\n  }\n\n  const index = randomIndex(array, rand);\n  if (mutate) {\n    // Return bare value\n    const v = array[ index ];\n    array.splice(index, 1)\n    return v;\n  } else {\n    // Copy array, remove item from that\n    const inputCopy = [ ...array ];\n    inputCopy.splice(index, 1);\n    return {\n      value: array[ index ],\n      remainder: inputCopy,\n    };\n  }\n};\n\n\n/**\n * Returns random element.\n *\n * ```js\n * const v = [`blue`, `red`, `orange`];\n * randomElement(v); // Yields `blue`, `red` or `orange`\n * ```\n *\n * Use {@link randomIndex} if you want a random index within `array`.\n *\n * @param array\n * @param rand Random generator. `Math.random` by default.\n * @returns\n */\nexport const randomElement = <V>(\n  array: ArrayLike<V>,\n  rand: RandomSource = Math.random\n): V => {\n  resultThrow(arrayTest(array, `array`));\n  return array[ Math.floor(rand() * array.length) ];\n};\n\n\n/**\n * Selects a random array index, biased by the provided `weightings`.\n * \n * In the below example, `a` will be picked 20% of the time, `b` 50% and so on.\n * ```js\n * const data =    [  `a`,  `b`,  `c`,  `d` ]\n * const weights = [ 0.2,  0.5,  0.1,  0.2 ] \n * ```\n * @param array \n * @param weightings \n * @param randomSource \n */\nexport const randomElementWeightedSource = <V>(array: ArrayLike<V>, weightings: number[], randomSource: RandomSource = Math.random) => {\n  if (array.length !== weightings.length) throw new Error(`Lengths of 'array' and 'weightings' should be the same.`);\n  const r = weightedIndex(weightings, randomSource);\n  return (): V => {\n    const index = r();\n    return array[ index ];\n  }\n}\n\n/**\n * Returns a shuffled copy of the input array.\n * @example\n * ```js\n * const d = [1, 2, 3, 4];\n * const s = shuffle(d);\n * // d: [1, 2, 3, 4], s: [3, 1, 2, 4]\n * ```\n * @param dataToShuffle\n * @param rand Random generator. `Math.random` by default.\n * @returns Copy with items moved around randomly\n * @typeParam V - Type of array items\n */\nexport const shuffle = <V>(\n  dataToShuffle: readonly V[],\n  rand: RandomSource = Math.random\n): V[] => {\n  const array = [ ...dataToShuffle ];\n  for (let index = array.length - 1; index > 0; index--) {\n    const index_ = Math.floor(rand() * (index + 1));\n    [ array[ index ], array[ index_ ] ] = [ array[ index_ ], array[ index ] ];\n  }\n  return array;\n};","import { numberTest, resultThrow } from \"@ixfx/guards\";\nimport type { RandomSource } from \"./types.js\";\n\n/**\n * Chance of returning `a` or `b`, based on threshold `p`.\n * \n * `p` sets the threshold for picking `b`. The higher the value (up to 1),\n * the more likely `b` will be picked.\n * \n * ```js\n * // 50% of the time it will return 100, 50% 110\n * chance(0.5, 100, 110);\n * // 90% of the time it will yield 110, 10% it will yield 100\n * chance(0.9, 100, 110);\n * ```\n * \n * @param p Threshold to choose option B (value or function)\n * @param a Value or function for option A\n * @param b Value or function for option B\n * @param randomSource Source of random numbers\n * @returns \n */\nexport const chance = <T>(p: number | (() => number), a: T | (() => T), b: T | (() => T), randomSource?: RandomSource): T => {\n  const source = randomSource ?? Math.random;\n  const resolve = <V>(x: V | (() => V)): V => {\n    if (typeof x === `function`) return (x as () => V)();\n    return x;\n  }\n\n  const pp = resolve(p);\n\n  resultThrow(numberTest(pp, `percentage`, `p`));\n\n  if (source() <= pp) {\n    return resolve(b);\n  } else {\n    return resolve(a);\n  }\n}","import { numberTest, resultThrow } from '@ixfx/guards';\nimport { type RandomNumberOptions, type RandomSource } from \"./types.js\";\n\n/**\n * Source for random bipolar values\n * ```js\n * const r = bipolarSource();\n * r(); // Produce random value on -1...1 scale\n * ```\n * \n * Options can be provided, for example\n * ```js\n * // -0.5 to 0.5 range\n * bipolarSource({ max: 0.5 });\n * ```\n * \n * \n * @param maxOrOptions Maximum value (number) or options for random generation\n * @returns \n */\nexport const bipolarSource = (maxOrOptions?: number | RandomNumberOptions): RandomSource => {\n  const source = floatSource(maxOrOptions);\n  return () => (source() * 2) - 1;\n}\n\n/**\n * Returns a random bipolar value\n * ```js\n * const r = bipolar(); // -1...1 random\n * ```\n * \n * Options can be provided, eg.\n * ```js\n * bipolar({ max: 0.5 }); // -0.5..0.5 random\n * ```\n * \n * Use {@link bipolarSource} if you want to generate random\n * values with same settings repeatedly.\n * @param maxOrOptions \n * @returns \n */\nexport const bipolar = (maxOrOptions?: number | RandomNumberOptions): number => {\n  const source = bipolarSource(maxOrOptions);\n  return source();\n}\n\n/**\n * Returns a function that produces random float values.\n * Use {@link float} to produce a valued directly.\n *\n * Random float between `max` (exclusive) and 0 (inclusive). Max is 1 if unspecified.\n *\n *\n * ```js\n * // Random number between 0..1 (but not including 1)\n * // (this would be identical to Math.random())\n * const r = floatSource();\n * r(); // Execute to produce random value\n *\n * // Random float between 0..100 (but not including 100)\n * const v = floatSource(100)();\n * ```\n *\n * Options can be used:\n * ```js\n * // Random float between 20..40 (possibly including 20, but always lower than 40)\n * const r = floatSource({ min: 20, max: 40 });\n * ```\n * @param maxOrOptions Maximum value (exclusive) or options\n * @returns Random number\n */\nexport const floatSource = (maxOrOptions: (number | RandomNumberOptions) = 1): RandomSource => {\n  const options = typeof maxOrOptions === `number` ? { max: maxOrOptions } : maxOrOptions;\n  let max = options.max ?? 1;\n  let min = options.min ?? 0;\n  const source = options.source ?? Math.random;\n\n  resultThrow(\n    numberTest(min, ``, `min`),\n    numberTest(max, ``, `max`)\n  );\n\n  if (!options.min && max < 0) {\n    min = max;\n    max = 0;\n  }\n  if (min > max) {\n    throw new Error(`Min is greater than max. Min: ${ min.toString() } max: ${ max.toString() }`);\n  }\n\n  return () => source() * (max - min) + min;\n};\n\n/**\n * Returns a random float between `max` (exclusive) and 0 (inclusive). \n * \n * Max is 1 if unspecified.\n * Use {@link floatSource} to get a function that produces values. This is used internally.\n *\n * ```js\n * // Random number between 0..1 (but not including 1)\n * // (this would be identical to Math.random())\n * const v = float();\n * // Random float between 0..100 (but not including 100)\n * const v = float(100);\n * ```\n *\n * Options can be used:\n * ```js\n * // Random float between 20..40 (possibly including 20, but always lower than 40)\n * const v = float({ min: 20, max: 40 });\n * ```\n * @param maxOrOptions Maximum value (exclusive) or options\n * @returns Random number\n */\nexport const float = (maxOrOptions: (number | RandomNumberOptions) = 1): number =>\n  floatSource(maxOrOptions)();","import type { RandomSource } from \"./types.js\";\n\n/**\n * Keeps generating a random number until\n * it's not 0\n * @param source Random number generator \n * @returns Non-zero number\n */\nexport const calculateNonZero = (source: RandomSource = Math.random) => {\n  let v = 0;\n  while (v === 0) {\n    v = source();\n  }\n  return v;\n}","import { calculateNonZero } from \"./non-zero.js\";\nimport type { RandomSource } from \"./types.js\";\n\n/**\n * Returns a random number with gaussian (ie. bell-curved) distribution\n * \n * @example Random number between 0..1 with gaussian distribution\n * ```js\n * gaussian();\n * ```\n * \n * @example Distribution can be skewed\n * ```js\n * gaussian(10);\n * ```\n * \n * Use {@link gaussianSource} if you want a function with skew value baked-in.\n * @param skew Skew factor. Defaults to 1, no skewing. Above 1 will skew to left, below 1 will skew to right\n * @returns \n */\nexport const gaussian = (skew = 1) => gaussianSource(skew)();\n\n/**\n * Returns a function that generates a gaussian-distributed random number\n * @example\n * Random number between 0..1 with gaussian distribution\n * ```js\n * // Create function\n * const r = gaussianSource();\n *\n * // Generate random value\n * r();\n * ```\n *\n * @example\n * Pass the random number generator elsewhere\n * ```js\n * const r = gaussianSource(10);\n *\n * // Randomise array with gaussian distribution\n * Arrays.shuffle(r);\n * ```\n * \n * If you want to fit a value to a gaussian curve, see Modulation.gaussian instead.\n * @param skew\n * @returns\n */\nexport const gaussianSource = (skew = 1): RandomSource => {\n  const min = 0;\n  const max = 1;\n  // Source: https://stackoverflow.com/questions/25582882/javascript-math-random-normal-distribution-gaussian-bell-curve\n\n  const compute = (): number => {\n    const u = calculateNonZero();\n    const v = calculateNonZero();\n    let result = Math.sqrt(-2 * Math.log(u)) * Math.cos(2 * Math.PI * v);\n\n    result = result / 10 + 0.5; // Translate to 0 -> 1\n    if (result > 1 || result < 0) {\n      result = compute(); //;gaussian(skew); // resample between 0 and 1 if out of range\n    } else {\n      result = Math.pow(result, skew); // Skew\n      result *= max - min; // Stretch to fill range\n      result += min; // offset to min\n    }\n    return result;\n  };\n  return compute;\n};","import type { RandomSource } from \"./types.js\";\n\n/**\n * Generates a six-digit roughly unique id\n * ```js\n * const id = shortGuid();\n * ```\n * @param options Options.\n * @returns\n */\nexport const shortGuid = (options: Readonly<{ source?: RandomSource }> = {}) => {\n  const source = options.source ?? Math.random;\n  // Via Stackoverflow...\n  const firstPart = Math.trunc(source() * 46_656);\n  const secondPart = Math.trunc(source() * 46_656);\n  const firstPartString = `000${ firstPart.toString(36) }`.slice(-3);\n  const secondPartString = `000${ secondPart.toString(36) }`.slice(-3);\n  return firstPartString + secondPartString;\n};","import { integerTest, resultThrow } from \"@ixfx/guards\";\n\n/**\n * Yields `amount` integers, counting by one from zero. If a negative amount is used,\n * count decreases. If `offset` is provided, this is added to the return result.\n * @example\n * ```js\n * const a = [...count(5)]; // Yields five numbers: [0,1,2,3,4]\n * const b = [...count(-5)]; // Yields five numbers: [0,-1,-2,-3,-4]\n * for (const v of count(5, 5)) {\n *  // Yields: 5, 6, 7, 8, 9\n * }\n * const c = [...count(5,1)]; // Yields [1,2,3,4,5]\n * ```\n *\n * @example Used with forEach\n * ```js\n * // Prints `Hi` 5x\n * forEach(count(5), () => // do something);\n * ```\n *\n * If you want to accumulate return values, consider using Flow.repeat.\n *\n * @example Run some code every 100ms, 10 times:\n * ```js\n * import { interval } from '@ixfx/flow.js'\n * import { count } from '@ixfx/numbers.js'\n * const counter = count(10);\n * for await (const v of interval(counter, { fixedIntervalMs: 100 })) {\n *  // Do something\n * }\n * ```\n * @param amount Number of integers to yield\n * @param offset Added to result\n */\nexport function* count(amount: number, offset = 0): Generator<number, void, void> {\n  resultThrow(\n    integerTest(amount, ``, `amount`),\n    integerTest(offset, ``, `offset`)\n  );\n  if (amount === 0) return;\n\n  let index = 0;\n  do {\n    yield (amount < 0 ? -index + offset : index + offset);\n  } while (index++ < Math.abs(amount) - 1);\n};","import { numberTest, integerTest, resultThrow } from \"@ixfx/guards\";\nimport type { GenerateRandomOptions, RandomNumberOptions, RandomSource } from \"./types.js\";\nimport { count } from \"./util/count.js\";\nimport { shuffle } from \"./arrays.js\";\n\n/**\n * Returns a function that produces a random integer between `max` (exclusive) and 0 (inclusive)\n * Use {@link integer} if you want a random number directly.\n *\n * Invoke directly:\n * ```js\n * integerSource(10)();  // Random number 0-9\n * ```\n *\n * Or keep a reference to re-compute:\n * ```js\n * const r = integerSource(10);\n * r(); // Produce a random integer\n * ```\n *\n * If a negative value is given, this is assumed to be the\n * minimum (inclusive), with 0 as the max (inclusive)\n * ```js\n * integerSource(-5)();  // Random number from -5 to 0\n * ```\n *\n * Specify options for a custom minimum or source of random:\n * ```js\n * integerSource({ max: 5,  min: 10 })();  // Random number 4-10\n * integerSource({ max: -5, min: -10 })(); // Random number from -10 to -6\n * integerSource({ max: 10, source: Math.random })(); // Random number between 0-9, with custom source of random\n * ```\n *\n * Throws an error if max & min are equal\n * @param maxOrOptions Max value (exclusive), or set of options\n * @returns Random integer\n */\nexport const integerSource = (maxOrOptions: number | RandomNumberOptions): RandomSource => {\n  if (typeof maxOrOptions === `undefined`) {\n    throw new TypeError(`maxOrOptions is undefined`);\n  }\n  const options = typeof maxOrOptions === `number` ? { max: maxOrOptions } : maxOrOptions;\n  let max = Math.floor(options.max ?? 100);\n  let min = Math.floor(options.min ?? 0);\n\n  // If we just get -5 as the max, invert so\n  // max:1 and min: -5 instead for -5...0 range\n  if (!options.min && max < 0) {\n    max = 1;\n    min = options.max ?? 0;\n  }\n  const randomSource = options.source ?? Math.random;\n  if (min > max) {\n    throw new Error(`Min value is greater than max (min: ${ min.toString() } max: ${ max.toString() })`);\n  }\n\n  resultThrow(\n    numberTest(min, ``, `min`),\n    numberTest(max, ``, `max`)\n  );\n\n  if (max === min) {\n    throw new Error(`Max and min values cannot be the same (${ max.toString() })`);\n  }\n\n  // Distance\n  const amt = Math.abs(max - min);\n  return () => Math.floor(randomSource() * amt) + min;\n};\n\n/**\n * Returns a random integer between `max` (exclusive) and 0 (inclusive)\n * Use {@link integerSource} to return a function instead.\n *\n * ```js\n * integer(10);  // Random number 0,1..9\n * ```\n *\n * If a negative value is given, this is assumed to be the\n * minimum (inclusive), with 0 as the max (inclusive)\n * ```js\n * integer(-5);  // Random number -5,-4,...0\n * ```\n *\n * Specify options for a custom minimum or source of random:\n * ```js\n * integer({ max: 5,  min: 10 });  // Random number 4-10\n * integer({ max: -5, min: -10 }); // Random number from -10 to -6\n * integer({ max: 10, source: Math.random }); // Random number between 0-9, with custom source of random\n * ```\n *\n * Throws an error if max & min are equal\n * @param maxOrOptions Max value (exclusive), or set of options\n * @returns Random integer\n */\nexport const integer = (maxOrOptions: number | RandomNumberOptions): number =>\n  integerSource(maxOrOptions)();\n\n/**\n * Returns a generator over random unique integers, up to\n * but not including the given max value.\n *\n * @example 0..9 range\n * ```js\n * const rand = [ ...integerUniqueGen(10) ];\n * // eg: [2, 9, 6, 0, 8, 7, 3, 4, 5, 1]\n * ```\n *\n * @example Options can be provided:\n * ```js\n * // 5..9 range\n * const rand = [ ...integerUniqueGen({ min: 5, max: 10 })];\n * ```\n *\n * Range can be looped. Once the initial random walk through the number\n * range completes, it starts again in a new random way.\n *\n * ```js\n * for (const r of integerUniqueGen({ max: 10, loop: true })) {\n *  // Warning: loops forever\n * }\n * ```\n *\n * Behind the scenes, an array of numbers is created that captures the range, this is then\n * shuffled on the first run, and again whenever the iterator loops, if that's allowed.\n *\n * As a consequence, large ranges will consume larger amounts of memory.\n * @param maxOrOptions\n * @returns\n */\nexport function* integerUniqueGen(\n  maxOrOptions: number | GenerateRandomOptions\n): IterableIterator<number> {\n  const options = typeof maxOrOptions === `number` ? { max: maxOrOptions } : maxOrOptions;\n  const min = options.min ?? 0;\n  const max = options.max ?? 100;\n  const source = options.source ?? Math.random;\n  const loop = options.loop ?? false;\n\n  resultThrow(\n    integerTest(min, ``, `min`),\n    integerTest(max, ``, `max`)\n  )\n\n  if (min > max) {\n    throw new Error(`Min value is greater than max. Min: ${ min.toString() } Max: ${ max.toString() }`);\n  }\n\n  const origRange = [ ...count(max - min, min) ];\n  let numberRange = shuffle(origRange);\n  let index = 0;\n\n  while (true) {\n    if (index === numberRange.length) {\n      if (loop) numberRange = shuffle(origRange, source);\n      else return;\n    }\n    yield numberRange[ index++ ];\n  }\n}\n","/**\n * Reproducible random values using the Merseene Twister algorithm.\n * With the same seed value, it produces the same series of random values.\n * \n * ```js\n * // Seed with a value of 100\n * const r = mersenneTwister(100);\n * r.float();         // 0..1\n * ```\n * \n * Integer values can also be produced. First parameter\n * is the maximum value (exclusive), the optional second\n * parameter is the minimum value (inclusive).\n * ```js\n * r.integer(10);     // 0..9\n * r.integer(10, 5);  // 5..9\n * \n * // Eg random array index:\n * r.integer(someArray.length);\n * ```\n * \n * Adapted from George MacKerron's implementation. MIT License.\n * https://github.com/jawj/mtwist/\n * @param seed Seed value 0..4294967295. Default: random seed.\n */\nexport function mersenneTwister(seed?: number | undefined) {\n  if (!seed) seed = Math.random() * 4294967295;\n\n  // Initialisation\n  let mt = new Array(624);\n  mt[ 0 ] = seed >>> 0;\n  const n1 = 1812433253;\n  for (let mti = 1; mti < 624; mti++) {\n    const n2 = mt[ mti - 1 ] ^ (mt[ mti - 1 ] >>> 30);\n    // uint32 multiplication, low 16 bits and high 16 bits multiplied separately and reassembled:\n    mt[ mti ] = ((((n1 & 0xffff0000) * n2) >>> 0) + (((n1 & 0x0000ffff) * n2) >>> 0) + mti) >>> 0;\n  }\n  let mti = 624;\n\n  const randomUint32 = () => {\n    let y;\n    if (mti >= 624) {\n      for (let i = 0; i < 227; i++) {\n        y = ((mt[ i ] & 0x80000000) | (mt[ i + 1 ] & 0x7fffffff)) >>> 0;\n        mt[ i ] = (mt[ i + 397 ] ^ (y >>> 1) ^ (y & 1 ? 0x9908b0df : 0)) >>> 0;\n      }\n      for (let i = 227; i < 623; i++) {\n        y = ((mt[ i ] & 0x80000000) | (mt[ i + 1 ] & 0x7fffffff)) >>> 0;\n        mt[ i ] = (mt[ i - 227 ] ^ (y >>> 1) ^ (y & 1 ? 0x9908b0df : 0)) >>> 0;\n      }\n      y = ((mt[ 623 ] & 0x80000000) | (mt[ 0 ] & 0x7fffffff)) >>> 0;\n      mt[ 623 ] = (mt[ 396 ] ^ (y >>> 1) ^ (y & 1 ? 0x9908b0df : 0)) >>> 0;\n      mti = 0;\n    }\n    y = mt[ mti++ ];\n    y = (y ^ (y >>> 11)) >>> 0;\n    y = (y ^ ((y << 7) & 0x9d2c5680)) >>> 0;\n    y = (y ^ ((y << 15) & 0xefc60000)) >>> 0;\n    y = (y ^ (y >>> 18)) >>> 0;\n    return y;\n  }\n\n  const float = () => randomUint32() / 4294967296;// 2^32\n\n  // Max is exclusive\n  const integer = (maxExclusive: number, minInclusive: number = 0) => {\n    if (maxExclusive < 1) throw new Error(\"Upper bound must be greater than or equal to 1\");\n    if (maxExclusive > 4294967296) throw new Error(\"Upper bound must not be greater than 4294967296\");\n    if (maxExclusive === 1) return 0;\n    let range = maxExclusive - minInclusive;\n    const\n      bitsNeeded = Math.ceil(Math.log2(range)),\n      bitMask = (1 << bitsNeeded) - 1;\n    while (true) {\n      const int = randomUint32() & bitMask;\n      if (int < range) return minInclusive + int;\n    }\n  }\n\n  return { integer, float };\n}","import { type StringOptions } from \"./types.js\";\n\n/**\n * Returns a string of random letters and numbers of a given `length`.\n *\n * ```js\n * string();  // Random string of length 5\n * string(4); // eg. `4afd`\n * ```\n * @param lengthOrOptions Length of random string, or options.\n * @returns Random string\n */\nexport const string = (lengthOrOptions: number | StringOptions = 5) => {\n  const options =\n    typeof lengthOrOptions === `number` ? { length: lengthOrOptions } : lengthOrOptions;\n  const calculate = options.source ?? Math.random;\n  const length = options.length ?? 5\n  let returnValue = ``;\n  while (returnValue.length < length) {\n    returnValue += calculate()\n      .toString(36)\n      .slice(2);\n  }\n  return returnValue.substring(0, length);\n};\n","import { integer, integerSource } from \"./integer.js\";\nimport type { RandomNumberOptions, RandomSource } from \"./types.js\";\n\n/**\n * Returns a random number of minutes, with a unit of milliseconds.\n * \n * Max value is exclusive, defaulting to 5.\n * Use {@link minutesMs} to get a value directly, or {@link minutesMsSource} to return a function.\n *\n * @example Random value from 0 to one milli less than 5 * 60 * 1000\n * ```js\n * // Create function that returns value\n * const f = minutesMsSource(5);\n *\n * f(); // Generate value\n * ```\n *\n * @example Specified options:\n * ```js\n * // Random time between one minute and 5 minutes\n * const f = minutesMsSource({ max: 5, min: 1 });\n * f();\n * ```\n *\n * @remarks\n * It's a very minor function, but can make\n * code a little more literate:\n * ```js\n * // Random timeout of up to 5 mins\n * setTimeout(() => { ... }, minutesMsSource(5));\n * ```\n * @param maxMinutesOrOptions\n * @see {@link minutesMs}\n * @returns Function that produces a random value\n */\nexport const minutesMsSource = (\n  maxMinutesOrOptions: number | RandomNumberOptions\n): RandomSource => {\n  const options =\n    typeof maxMinutesOrOptions === `number`\n      ? { max: maxMinutesOrOptions }\n      : maxMinutesOrOptions;\n  const min = (options.min ?? 0) * 60 * 1000;\n  const max = (options.max ?? 5) * 60 * 1000;\n  return integerSource({ ...options, max, min });\n};\n\n\n/**\n * Return a random time value in milliseconds, using minute values to set range.\n * \n * @example Random value from 0 to one milli less than 5 * 60 * 1000\n * ```js\n * // Random value from 0 to one milli less than 5*60*1000\n * minuteMs(5);\n * ```\n *\n * @example Specified options:\n * ```js\n * // Random time between one minute and 5 minutes\n * minuteMs({ max: 5, min: 1 });\n * ```\n * @inheritDoc minutesMsSource\n *\n * @param maxMinutesOrOptions\n * @see {@link minutesMsSource}\n * @returns Milliseconds\n */\nexport const minutesMs = (maxMinutesOrOptions: number | RandomNumberOptions): number =>\n  minutesMsSource(maxMinutesOrOptions)();\n\n\n/**\n * Returns function which produces a random number of seconds, with a unit of milliseconds.\n * \n * Maximum value is exclusive, defaulting to 5\n * Use {@link secondsMs} to return a random value directly, or {@link secondsMsSource} to return a function.\n *\n * @example Random milliseconds between 0..4999\n * ```js\n * // Create function\n * const f = secondsMsSource(5000);\n * // Produce a value\n * const value = f();\n * ```\n *\n * @example Options can be provided\n * ```js\n * // Random milliseconds between 1000-4999\n * const value = secondsMsSource({ max:5, min:1 })();\n * // Note the extra () at the end to execute the function\n * ```\n *\n * @remarks\n * It's a very minor function, but can make\n * code a little more literate:\n * ```js\n * // Random timeout of up to 5 seconds\n * setTimeout(() => { ...}, secondsMsSource(5));\n * ```\n * @param maxSecondsOrOptions Maximum seconds, or options.\n * @returns Milliseconds\n */\nexport const secondsMsSource = (\n  maxSecondsOrOptions: number | RandomNumberOptions\n): RandomSource => {\n  const options =\n    typeof maxSecondsOrOptions === `number`\n      ? { max: maxSecondsOrOptions }\n      : maxSecondsOrOptions;\n  const min = (options.min ?? 0) * 1000;\n  const max = (options.max ?? 5) * 1000;\n  return () => integer({ ...options, max, min });\n};\n\n/**\n * Generate random time in milliseconds, using seconds to set the bounds\n * \n * @example Random milliseconds between 0..4999\n * ```js\n * secondsMs(5000);\n * ```\n *\n * @example Options can be provided\n * ```js\n * // Random milliseconds between 1000-4999\n * secondsMs({ max:5, min:1 });\n * ```\n * @inheritDoc secondsMsSource\n * @param maxSecondsOrOptions\n * @returns\n */\nexport const secondsMs = (maxSecondsOrOptions: number | RandomNumberOptions): number =>\n  secondsMsSource(maxSecondsOrOptions)();","export function clamp(v:number, min:number = 0, max:number = 1) {\n  if (v < min) return min;\n  if (v > max) return max;\n  return v;\n}","import { type RandomSource, type WeightedOptions } from \"./types.js\";\nimport { clamp } from \"./util/clamp.js\";\n/**\n * Random integer, weighted according to an easing function.\n * Number will be inclusive of `min` and below `max`.\n *\n * @example 0..99\n * ```js\n * const r = Random.weightedIntegerFn(100);\n * r(); // Produce value\n * ```\n *\n * @example 20..29\n * ```js\n * const r = Random.weightedIntegerFn({ min: 20, max: 30 });\n * r(); // Produce value\n * ```\n *\n * @example  0..99 with 'quadIn' easing\n * ```js\n * const r = Random.weightedInteger({ max: 100, easing: `quadIn` });\n * ```\n *\n * Note: result from easing function will be clamped to\n * the min/max (by default 0-1);\n *\n * @param options Options. By default { max:1, min: 0 }\n * @returns Function that produces a random weighted integer\n */\nexport const weightedIntegerSource = (\n  options: WeightedOptions\n): RandomSource => {\n\n  const source = options.source ?? Math.random;\n  if (typeof options.easingFunction === `undefined`) throw new Error(`Param 'easingFunction' is undefined`);\n\n  const max = options.max ?? 1;\n  const min = options.min ?? 0;\n\n  if (max === min) throw new Error(`Param 'max' is the same as  'min'`);\n  if (max < min) throw new Error(`Param 'max' should be greater than  'min'`);\n\n  const compute = (): number => {\n    const r = clamp(options.easingFunction(source()));\n    return Math.floor(r * (max - min)) + min;\n  };\n  return compute;\n};\n\n/**\n * Generate a weighted-random integer.\n * \n * @example 0..99\n * ```js\n * Random.weightedInteger(100);\n * ```\n *\n * @example 20..29\n * ```js\n * Random.weightedInteger({ min: 20, max: 30 });\n * ```\n *\n * @example  0..99 with 'quadIn' easing\n * ```js\n * Random.weightedInteger({ max: 100, easing: `quadIn` })\n * ```\n * @inheritDoc {@link weightedIntegerSource}\n * @param options Options. Default: { max: 1, min: 0 }\n * @returns Random weighted integer\n */\nexport const weightedInteger = (options: WeightedOptions): number =>\n  weightedIntegerSource(options)();","import { type RandomSource, type WeightedOptions } from './types.js';\n\n\n/***\n * Returns a random number, 0..1, weighted by a given easing function.\n * See @ixfx/modulation.weighted to use a named easing function.\n * Use {@link weightedSource} to return a function instead.\n *\n * @see {@link weightedSource} Returns a function rather than value\n * @returns Random number (0-1)\n */\nexport const weighted = (\n  options: WeightedOptions\n): number => weightedSource(options)();\n\n/***\n * Returns a random number, 0..1, weighted by a given easing function.\n * See @ixfx/modulation.weighted to use a named easing function.\n * Use {@link weighted} to get a value directly.\n *\n * @see {@link weighted} Returns value instead of function\n * @returns Function which returns a weighted random value\n */\nexport const weightedSource = (\n  options: WeightedOptions\n): RandomSource => {\n  const source = options.source ?? Math.random;\n  if (typeof options.easing !== `undefined`) throw new Error(`Param 'easingName' unavailable. Use @ixfx/modulation.weighted instead.`);\n  if (typeof options.easingFunction === `undefined`) throw new Error(`Param 'easingFunction' is undefined`);\n  return (): number => options.easingFunction(source());\n};"],"mappings":"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"}