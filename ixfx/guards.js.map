{"version":3,"file":"guards.js","names":["ex: unknown","result: Result<TValue, any>","result: Result<TValue, TError>","result: ResultError<any>","rr: Result<TValue, TError> | undefined","result: Result<any, TError>","callback: (r: ResultError<TError>) => void","x: number","v: unknown","fallback: number","value: string | number | null","range: NumberGuardRange","defaultValue: number","value?: unknown","info?: string","a: number","b: number","value: number","value: unknown","numbers: Iterable<number>","value: number | string","value: number | undefined","min: number","max: number","value: unknown","array: ArrayLike<V>","index: number","value: TValue","argument: T | undefined","object: unknown","value: unknown","value: unknown","v: Iterable<number>","expected: ExpectedOpts","numbers: Iterable<number>","value: unknown","range: StringGuardRange"],"sources":["../packages/guards/src/result.ts","../packages/guards/src/numbers.ts","../packages/guards/src/arrays.ts","../packages/guards/src/empty.ts","../packages/guards/src/function.ts","../packages/guards/src/object.ts","../packages/guards/src/range.ts","../packages/guards/src/string.ts"],"sourcesContent":["import type { Result, ResultError, ResultOk, ResultOrFunction } from \"./types.js\";\n\nexport const getErrorMessage = (ex: unknown): string => {\n  if (typeof ex === `string`) return ex;\n  if (ex instanceof Error) {\n    return ex.message;\n  }\n  return ex as string;\n};\n\n/**\n * Throws an error if any result is a failure.\n * Error message will be the combined from all errors.\n * @param results \n * @returns \n */\nexport const throwIfFailed = (...results: Result<any, any>[]) => {\n  const failed = results.filter(r => resultIsError(r));// as ResultError<any>[];\n  if (failed.length === 0) return;\n\n  const messages = failed.map(f => resultErrorToString(f));\n  throw new Error(messages.join(`, `));\n}\n\n\n/**\n * If any of `results` is an error, throws it, otherwise ignored.\n * @param results \n * @returns _true_ or throws\n */\nexport function resultThrow(...results: ResultOrFunction[]) {\n  for (const r of results) {\n    const rr = typeof r === `object` ? r : r();\n    if (rr === undefined) continue;\n    if (rr.success) continue;\n    throw resultToError(rr);\n  }\n  return true;\n}\n\nexport function resultThrowSingle<TValue>(result: Result<TValue, any>): result is ResultOk<TValue> {\n  if (result.success) return true;\n  throw resultToError(result);\n}\n\n/**\n * Returns the first failed result, or _undefined_ if there are no fails\n * @param results \n * @returns \n */\nexport const resultFirstFail_ = <TError>(...results: ResultOrFunction[]): ResultError<TError> | undefined => {\n  for (const r of results) {\n    const rr = typeof r === `object` ? r : r();\n    if (rr === undefined) continue;\n    if (!rr.success) return rr;\n  }\n}\n\n/**\n * Returns _true_ if `result` is an error\n * @param result \n * @returns \n */\nexport function resultIsError<TValue, TError>(result: Result<TValue, TError>): result is ResultError<TError> {\n  if (typeof result !== `object`) return false;\n  return !result.success;\n}\n\n/**\n * Returns _true_ if `result` is OK and has a value\n * @param result \n * @returns \n */\nexport function resultIsOk<TValue, TError>(result: Result<TValue, TError>): result is ResultOk<TValue> {\n  if (typeof result !== `object`) return false;\n  return result.success;\n}\n\n/**\n * Gets the result as an Error\n * @param result \n * @returns \n */\nexport function resultToError(result: ResultError<any>): Error {\n  if (typeof result.error === `string`) {\n    throw new Error(result.error, { cause: result.info });\n  }\n  if (result.error instanceof Error) throw result.error;\n  return new Error(JSON.stringify(result.error), { cause: result.info });\n\n}\n\n/**\n * Unwraps the result, returning its value if OK.\n * If not, an exception is thrown.\n * @param result \n * @returns \n */\nexport function resultToValue<TValue, TError>(result: Result<TValue, TError>): TValue {\n  if (resultIsOk(result)) {\n    return result.value;\n  }\n  throw resultToError(result);\n}\n\n/**\n * Returns the error as a string.\n * @param result \n * @returns \n */\nexport function resultErrorToString(result: ResultError<any>): string {\n  if (result.error instanceof Error) return getErrorMessage(result.error);\n  if (typeof result.error === `string`) return result.error;\n  return JSON.stringify(result.error);\n}\n\n\n\n\n\n/**\n * Returns first failed result or final value.\n * @param results \n * @returns \n */\nexport const resultsCollate = <TValue, TError>(...results: ResultOrFunction[]): Result<TValue, TError> => {\n  let rr: Result<TValue, TError> | undefined;\n  for (const r of results) {\n    rr = typeof r === `object` ? r : r();\n    if (rr === undefined) continue;\n    if (!rr.success) return rr;\n  }\n  if (!rr) throw new Error(`No results`);\n  return rr;\n}\n\n\n/**\n * If `result` is an error, calls `callback`, passing the error.\n * Otherwise does nothing\n * @param result \n * @param callback \n */\nexport const resultWithFail = <TError>(result: Result<any, TError>, callback: (r: ResultError<TError>) => void) => {\n  if (resultIsError(result)) {\n    callback(result);\n  }\n};","import { resultsCollate } from \"./result.js\";\nimport type { NumberGuardRange, Result } from \"./types.js\";\n\n/**\n * Returns true if `x` is a power of two\n * @param x\n * @returns True if `x` is a power of two\n */\nexport const isPowerOfTwo = (x: number) => Math.log2(x) % 1 === 0;\n\n\n/**\n * Returns `fallback` if `v` is NaN, otherwise returns `v`.\n * \n * Throws if `v` is not a number type, null or undefined\n * @param v\n * @param fallback\n * @returns\n */\nexport const ifNaN = (v: unknown, fallback: number): number => {\n  if (typeof v !== `number`) {\n    throw new TypeError(`v is not a number. Got: ${ typeof v }`);\n  }\n  if (Number.isNaN(v)) return fallback;\n  return v;\n};\n\n/**\n * Parses `value` as an integer, returning it if it meets the `range` criteria.\n * If not, `defaultValue` is returned.\n *\n * ```js\n * const i = integerParse('10', 'positive');    // 10\n * const i = integerParse('10.5', 'positive');  // 10\n * const i = integerParse('0', 'nonZero', 100); // 100\n * ```\n *\n * NaN is returned if criteria does not match and no default is given\n * ```js\n * const i = integerParse('10', 'negative');    // NaN\n * ```\n *\n * @param value\n * @param range\n * @param defaultValue\n * @returns\n */\nexport const integerParse = (\n  value: string | number | null,\n  range: NumberGuardRange = ``,\n  defaultValue: number = Number.NaN\n): number => {\n  if (typeof value === `undefined`) return defaultValue;\n  if (value === null) return defaultValue;\n  try {\n    const parsed = Number.parseInt(typeof value === `number` ? value.toString() : value);\n    const r = integerTest(parsed, range, `parsed`);\n    return r.success ? parsed : defaultValue;\n  } catch {\n    return defaultValue;\n  }\n};\n\n\n/**\n * Checks if `t` is not a number or within specified range.\n * Returns `[false, reason:string]` if invalid or `[true]` if valid.\n * \n * Alternatives: {@link integerTest} for additional integer check, {@link percentTest} for percentage-range.\n *\n * * (empty, default): must be a number type and not NaN.\n * * finite: must be a number, not NaN and not infinite\n * * positive: must be at least zero\n * * negative: must be zero or lower\n * * aboveZero: must be above zero\n * * belowZero: must be below zero\n * * percentage: must be within 0-1, inclusive\n * * nonZero: can be anything except zero\n * * bipolar: can be -1 to 1, inclusive\n * @param value Value to check\n * @param parameterName Name of parameter (for more helpful exception messages)\n * @param range Range to enforce\n * @returns\n */\nexport const numberTest = (\n  value?: unknown,\n  range: NumberGuardRange = ``,\n  parameterName = `?`,\n  info?: string\n): Result<number, string> => {\n  if (value === null) return { success: false, error: `Parameter '${ parameterName }' is null`, info };\n  if (typeof value === `undefined`) {\n    return { success: false, error: `Parameter '${ parameterName }' is undefined`, info };\n  }\n  if (Number.isNaN(value)) {\n    return { success: false, error: `Parameter '${ parameterName }' is NaN`, info };\n  }\n  if (typeof value !== `number`) {\n    return { success: false, error: `Parameter '${ parameterName }' is not a number (${ JSON.stringify(value) })`, info };\n  }\n  switch (range) {\n    case `finite`: {\n      if (!Number.isFinite(value)) {\n        return { success: false, error: `Parameter '${ parameterName } must be finite (Got: ${ value })`, info };\n      }\n      break;\n    }\n    case `positive`: {\n      if (value < 0) {\n        return { success: false, error: `Parameter '${ parameterName }' must be at least zero (${ value })`, info };\n      }\n      break;\n    } case `negative`: {\n      if (value > 0) {\n        return { success: false, error: `Parameter '${ parameterName }' must be zero or lower (${ value })`, info };\n      }\n      break;\n    }\n    case `aboveZero`: {\n      if (value <= 0) {\n        return {\n          success: false, error: `Parameter '${ parameterName }' must be above zero (${ value })`, info\n        };\n\n      }\n      break;\n    }\n    case `belowZero`: {\n      if (value >= 0) {\n        return { success: false, error: `Parameter '${ parameterName }' must be below zero (${ value })`, info };\n      }\n      break;\n    }\n    case `percentage`: {\n      if (value > 1 || value < 0) {\n        return {\n          success: false, error: `Parameter '${ parameterName }' must be in percentage range (0 to 1). (${ value })`, info\n        };\n      }\n      break;\n    }\n    case `nonZero`: {\n      if (value === 0) {\n        return { success: false, error: `Parameter '${ parameterName }' must non-zero. (${ value })`, info };\n      }\n      break;\n    }\n    case `bipolar`: {\n      if (value > 1 || value < -1) {\n        return { success: false, error: `Parameter '${ parameterName }' must be in bipolar percentage range (-1 to 1). (${ value })`, info };\n      }\n      break;\n    }\n  }\n  return { success: true, value, info };\n};\n\n/**\n * Checks if `t` is not a number or within specified range.\n * Throws if invalid. Use {@link numberTest} to test without throwing.\n *\n* * (empty, default): must be a number type and not NaN.\n* * positive: must be at least zero\n* * negative: must be zero or lower\n* * aboveZero: must be above zero\n* * belowZero: must be below zero\n* * percentage: must be within 0-1, inclusive\n* * nonZero: can be anything except zero\n* * bipolar: can be -1 to 1, inclusive\n* \n * Alternatives: {@link integerTest} for additional integer check, {@link percentTest} for percentage-range.\n * @param value Value to test\n * @param range Range\n * @param parameterName Name of parameter \n */\n// export const throwNumberTest = (value?: unknown,\n//   range: NumberGuardRange = ``,\n//   parameterName = `?`) => {\n//   throwFromResult(numberTest(value, range, parameterName));\n// }\n\n/**\n * Compares two numbers with a given number of decimal places\n * ```js\n * a: 10.123 b: 10.1    decimals: 1 = true\n * a: 10.123 b: 10.2    decimals: 0 = true\n * a: 10.123 b: 10.14   decimals: 1 = true\n * a: 10.123 b: 10.14   decimals: 2 = false\n * ``\n * @param a \n * @param b \n * @param decimals How many decimals to include\n * @returns \n */\nexport const numberDecimalTest = (a: number, b: number, decimals = 3): Result<number, string> => {\n  if (decimals === 0) {\n    a = Math.floor(a);\n    b = Math.floor(b);\n    if (a === b) return { success: true, value: a };\n    return { success: false, error: `A is not identical to B` };\n  }\n\n  const mult = Math.pow(10, decimals);\n  const aa = Math.floor(a * mult);\n  const bb = Math.floor(b * mult);\n  if (aa !== bb) return { success: false, error: `A is not close enough to B. A: ${ a } B: ${ b } Decimals: ${ decimals }` };\n  return { success: true, value: a }\n}\n\n/**\n * Returns test of `value` being in the range of 0-1.\n * Equiv to `number(value, `percentage`);`\n *\n * This is the same as calling ```number(t, `percentage`)```\n * @param value Value to check\n * @param parameterName Param name for customising exception message\n * @returns\n */\nexport const percentTest = (value: number, parameterName = `?`, info?: string): Result<number, string> =>\n  numberTest(value, `percentage`, parameterName, info);\n\n// export const throwPercentTest = (value: number, parameterName = `?`) => {\n//   throwFromResult(percentTest(value, parameterName));\n//}\n/**\n * Checks if `value` an integer and meets additional criteria.\n * See {@link numberTest} for guard details, or use that if integer checking is not required.\n *\n * Note:\n * * `bipolar` will mean -1, 0 or 1.\n * * positive: must be at least zero\n * * negative: must be zero or lower\n * * aboveZero: must be above zero\n * * belowZero: must be below zero\n * * percentage: must be within 0-1, inclusive\n * * nonZero: can be anything except zero\n * @param value Value to check\n * @param parameterName Param name for customising exception message\n * @param range Guard specifier.\n */\nexport const integerTest = (\n  value: unknown,\n  range: NumberGuardRange = ``,\n  parameterName = `?`\n): Result<number, string> => {\n  return resultsCollate(\n    numberTest(value, range, parameterName),\n    () => {\n      if (!Number.isInteger(value)) {\n        return { success: false, error: `Param '${ parameterName }' is not an integer` };\n      }\n      return { success: true, value: value }\n    }\n  )\n};\n\nexport const integerArrayTest = (numbers: Iterable<number>): Result<Iterable<number>, string> => {\n  for (const v of numbers) {\n    if (Math.abs(v) % 1 !== 0) return { success: false, error: `Value is not an integer: ${ v }` };\n  }\n  return { success: true, value: numbers };\n};\n\n/**\n * Returns _true_ if `value` is an integer in number or string form\n * @param value \n * @returns \n */\nexport const isInteger = (value: number | string): boolean => {\n  if (typeof value === `string`) value = Number.parseFloat(value);\n  const r = integerTest(value);\n  return r.success;\n}\n\n// export const throwIntegerTest = (value: number | undefined,\n//   range: NumberGuardRange = ``,\n//   parameterName = `?`) => {\n//   throwFromResult(integerTest(value, range, parameterName));\n// }\n\nexport const numberInclusiveRangeTest = (value: number | undefined, min: number, max: number, parameterName = `?`): Result<number, string> => {\n  if (typeof value !== `number`) {\n    return { success: false, error: `Param '${ parameterName }' is not a number type. Got type: '${ typeof value }' value: '${ JSON.stringify(value) }'` };\n  }\n  if (Number.isNaN(value)) {\n    return { success: false, error: `Param '${ parameterName }' is not within range ${ min }-${ max }. Got: NaN` };\n  }\n  if (Number.isFinite(value)) {\n    if (value < min) {\n      return { success: false, error: `Param '${ parameterName }' is below range ${ min }-${ max }. Got: ${ value }` };\n    } else if (value > max) {\n      return { success: false, error: `Param '${ parameterName }' is above range ${ min }-${ max }. Got: ${ value }` };\n    }\n    return { success: true, value };\n  } else {\n    return { success: false, error: `Param '${ parameterName }' is not within range ${ min }-${ max }. Got: infinite` };\n  }\n}\n\n// export const throwNumberInclusiveRangeTest = (value: number | undefined, min: number, max: number, parameterName = `?`) => {\n//   const r = numberInclusiveRangeTest(value, min, max, parameterName);\n//   if (r[ 0 ]) return;\n//   throw new Error(r[ 1 ]);\n// }","import type { Result } from \"./types.js\";\nimport { integerTest, numberInclusiveRangeTest } from \"./numbers.js\";\nimport { resultsCollate, resultThrow } from \"./result.js\";\n\n/**\n * Throws an error if parameter is not an array\n * @param value\n * @param parameterName\n */\nexport const arrayTest = (value: unknown, parameterName = `?`): Result<any[], string> => {\n  if (!Array.isArray(value)) {\n    return { success: false, error: `Parameter '${ parameterName }' is expected to be an array'` };\n  }\n  return { success: true, value }\n};\n\n// export const throwArrayTest = (value: unknown, parameterName = `?`) => {\n//   resultThrow(arrayTest(value, parameterName));\n// }\n\n/**\n * Throws if `index` is an invalid array index for `array`, and if\n * `array` itself is not a valid array.\n * @param array\n * @param index\n */\nexport const arrayIndexTest = <V>(\n  array: ArrayLike<V>,\n  index: number,\n  name = `index`\n): Result<ArrayLike<V>, string> => {\n  return resultsCollate(\n    arrayTest(array),\n    integerTest(index, `positive`, name),\n    numberInclusiveRangeTest(index, 0, array.length - 1, name)\n  )\n};\n\n/**\n * Returns true if parameter is an array of strings\n * @param value\n * @returns\n */\nexport const arrayStringsTest = (value: unknown): Result<string[], string> => {\n  if (!Array.isArray(value)) return { success: false, error: `Value is not an array` };\n  if (value.some((v) => typeof v !== `string`)) {\n    return { success: false, error: `Contains something not a string` };\n  }\n  return { success: true, value };\n};\n\n\n// export const guardArray = <V>(array: ArrayLike<V>, name = `?`) => {\n//   if (array === undefined) {\n//     throw new TypeError(`Param '${ name }' is undefined. Expected array.`);\n//   }\n//   if (array === null) {\n//     throw new TypeError(`Param '${ name }' is null. Expected array.`);\n//   }\n//   if (!Array.isArray(array)) {\n//     throw new TypeError(`Param '${ name }' not an array as expected`);\n//   }\n// };\n\n","import type { Result } from \"./types.js\";\n\nexport const nullUndefTest = <TValue>(value: TValue, parameterName = `?`): Result<TValue, string> => {\n  if (typeof value === `undefined`) {\n    return { success: false, error: `${ parameterName } param is undefined` };\n  }\n  if (value === null) return { success: false, error: `${ parameterName } param is null` };\n  return { success: true, value };\n};\n\n// export const throwNullUndef = (value: any, parameterName = `?`) => {\n//   const r = nullUndef(value, parameterName);\n//   if (r[ 0 ]) return;\n//   throw new Error(r[ 1 ]);\n// }\n\nexport const isDefined = <T>(argument: T | undefined): argument is T =>\n  argument !== undefined;\n","import type { Result } from \"./types.js\";\n\nexport const isFunction = (object: unknown): object is (...args: any[]) => any => object instanceof Function;\n\n// eslint-disable-next-line @typescript-eslint/no-unsafe-function-type\nexport const functionTest = (value: unknown, parameterName = `?`): Result<Function, string> => {\n  if (value === undefined) return { success: false, error: `Param '${ parameterName }' is undefined. Expected: function.` };\n  if (value === null) return { success: false, error: `Param '${ parameterName }' is null. Expected: function.` };\n  if (typeof value !== `function`) return { success: false, error: `Param '${ parameterName }' is type '${ typeof value }'. Expected: function` };\n  return { success: true, value };\n}\n\n// export const throwFunctionTest = (value: unknown, parameterName = `?`) => {\n//   const [ ok, message ] = functionTest(value, parameterName);\n//   if (ok) return;\n//   throw new TypeError(message);\n// }","import type { Result } from \"./types.js\";\n\n/**\n * Tests_if `value` is a plain object\n * \n * ```js\n * isPlainObject(`text`); // false\n * isPlainObject(document); // false\n * isPlainObject({ hello: `there` }); // true\n * ```\n * @param value \n * @returns \n */\nexport const testPlainObject = (value: unknown): Result<object, string> => {\n  if (typeof value !== `object` || value === null) return { success: false, error: `Value is null or not object type` };\n  const prototype = Object.getPrototypeOf(value);\n  const t = (prototype === null || prototype === Object.prototype || Object.getPrototypeOf(prototype) === null) && !(Symbol.toStringTag in value) && !(Symbol.iterator in value);\n  if (t) return { success: true, value };\n  return { success: false, error: `Fancy object` };\n}\n\n/**\n * Tests if `value` is primitive value (bigint,number,string or boolean) or plain object\n * @param value \n * @returns \n */\nexport const testPlainObjectOrPrimitive = (value: unknown): Result<object | bigint | number | string | boolean, string> => {\n  const t = typeof value;\n  if (t === `symbol`) return { success: false, error: `Symbol type` };\n  if (t === `function`) return { success: false, error: `Function type` };\n  if (t === `bigint`) return { success: true, value: value as bigint };\n  if (t === `number`) return { success: true, value: value as number };\n  if (t === `string`) return { success: true, value: value as string };\n  if (t === `boolean`) return { success: true, value: value as boolean };\n  return testPlainObject(value);\n}","import { integerArrayTest } from \"./numbers.js\";\nimport { resultsCollate } from \"./result.js\";\nimport type { Result } from \"./types.js\";\n\nexport type ExpectedOpts = {\n  minInclusive?: number\n  maxInclusive?: number\n  minExclusive?: number\n  maxExclusive?: number\n};\n\nexport const rangeIntegerTest = (\n  v: Iterable<number>,\n  expected: ExpectedOpts\n): Result<Iterable<number>, string> => {\n  return resultsCollate(\n    rangeTest(v, expected),\n    integerArrayTest(v)\n  );\n};\n\n/**\n * Inclusive range 4-6 = 4, 5, 6\n * Exclusive range 4-6 = 5\n * \n * @param numbers \n * @param expected \n * @returns \n */\nexport const rangeTest = (\n  numbers: Iterable<number>,\n  expected: ExpectedOpts\n): Result<Iterable<number>, string> => {\n  for (const v of numbers) {\n    if (expected.minExclusive !== undefined) {\n      if (v <= expected.minExclusive) {\n        return { success: false, error: `Value '${ v }' must be higher than minExclusive: '${ expected.minExclusive }'` };\n      }\n    }\n    if (expected.minInclusive !== undefined) {\n      if (v < expected.minInclusive) {\n        return { success: false, error: `Value '${ v }' must be equal or higher than minInclusive: '${ expected.minInclusive }'` };\n      }\n    }\n    if (expected.maxExclusive !== undefined) {\n      if (v >= expected.maxExclusive) {\n        return { success: false, error: `Value '${ v }' must be less than maxExclusive: '${ expected.maxExclusive }'` };\n      }\n    }\n    if (expected.maxInclusive !== undefined) {\n      if (v > expected.maxInclusive) {\n        return { success: false, error: `Value '${ v }' must be equal or less than maxInclusive: '${ expected.maxInclusive }'` };\n      }\n    }\n  }\n  return { success: true, value: numbers };\n};","import type { Result } from \"./types.js\";\n\nexport type StringGuardRange = `` | `non-empty`\n\n/**\n * Throws an error if parameter is not an string\n * @param value\n * @param parameterName\n */\nexport const stringTest = (value: unknown, range: StringGuardRange = ``, parameterName = `?`): Result<string, string> => {\n  if (typeof value !== `string`) return { success: false, error: `Param '${ parameterName } is not type string. Got: ${ typeof value }` };\n  switch (range) {\n    case `non-empty`:\n      if (value.length === 0) return { success: false, error: `Param '${ parameterName } is empty` };\n      break;\n  }\n  return { success: true, value };\n};\n\n// export const throwStringTest = (value: unknown, range: StringGuardRange = ``, parameterName = `?`) => {\n//   throwFromResult(stringTest(value, range, parameterName));\n// }\n\n"],"mappings":"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"}