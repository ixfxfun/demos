{"version":3,"file":"index-DM6SFyeA.d.ts","names":["NumberFormattingOptions","Readonly","FormattingOptions","DataTableOpts","DataFormatter","DataTable","V","fromList","HTMLElement","Map","fromObject","Partial","Point","RectPositioned","DragState","Readonly","DragStart","DragProgress","DragListener","DragOptions","HTMLElement","draggable","SVGElement","Partial","textAreaKeyboard","HTMLTextAreaElement","checkbox","HTMLInputElement","numeric","SelectOpts","button","HTMLButtonElement","buttonCreate","SelectHandler","select","HTMLSelectElement","CssVariable","CssVariableByIdOption","CssVariableByQueryOption","CssVariableByObjectOption","CssVariableOption","parseCssVariablesAsAttributes","setFromCssVariables","HTMLElement","getCssVariablesWithFallback","Record","T","Element","getCssVariable","setCssVariables","CSSStyleDeclaration","getCssVariablesFromStyles","Result","resolveEl","Element","V","resolveElementTry","QueryOrElements","HTMLElement","resolveEls","RectPositioned","QueryOrElements","ComputedPixelsMap","CSSStyleDeclaration","T","Record","getBoundingClientRectWithBorder","SVGElement","HTMLElement","getComputedPixels","setCssClass","setCssToggle","setCssDisplay","FormattingOptions","DataDisplayOptions","DataDisplay","Partial","QueryOrElements","WrappedElement","HTMLElement","el","elRequery","Rects","Rect","Interval","ElementResizeLogic","ElementSizerOptions","HTMLElement","SVGElement","T","ElementSizer","HTMLCanvasElement","RectPositioned","defaultErrorHandler","Error","Event","LogOpts","Log","HTMLElement","log","LogOpts","InlineConsoleOptions","HTMLElement","Partial","inlineConsole","ElementQueryOptions","query","HTMLElement","AsyncGenerator","Partial","QueryOrElements","setText","setHtml","setProperty","addShadowCss","HTMLElement","Readonly","ShadowRoot","Panel","HTMLElement","TNotifyArgs","tabSet","Point","GridCardinalDirection","Points","PointSpaces","pointScaler","Readonly","ElPositionOpts","positionFn","HTMLElement","cardinalPosition","positionRelative","viewportToSpace","positionFromMiddle","cycleCssClass","getTranslation","Point3d","createAfter","createIn","clear","copyToClipboard","Promise","insertSorted","CreateUpdateElement","V","reconcileChildren","Map","byId","T","DataTable","DragDrop","Forms","ColorType","ColorModel","HSL","LAB","LCH","RGB","ColorModelKey","ColorModelKeys","TModel","Omit","ColorKeysTuple","ColorTuple","ColorTokens","ColorReturn","T","HEX","Colors","Alpha","ConverterParameters","Amount","Degrees","Analysis","PlainObject","Record","ColorizrOptions","Colorizr","brightnessDifference","chroma","colorDifference","compare","contrast","convert","darken","desaturate","ExtractColorPartsReturn","extractColorParts","FormatCSSOptions","formatCSS","formatHex","isValidColor","lighten","luminance","name","PaletteOptions","palette","opacify","opacity","getOkLCHMaxChroma","getP3Color","parseCSS","random","rotate","saturate","Scheme","SchemeOptions","scheme","Swatch","SwatchVariant","SwatchOptions","swatch","TextColorOptions","textColor","transparentize","hex2hsl","hex2oklab","hex2oklch","hex2rgb","hsl2hex","hsl2oklab","hsl2oklch","hsl2rgb","oklab2hex","oklab2hsl","oklab2oklch","oklab2rgb","oklch2hex","oklch2hsl","oklch2oklab","oklch2rgb","rgb2hex","rgb2hsl","rgb2oklab","rgb2oklch","addAlphaToHex","convertAlphaToHex","extractAlphaFromHex","hexadecimalToNumber","removeAlphaFromHex","isHex","isHSL","isLAB","isLCH","isRGB","default"],"sources":["../../dom/dist/src/data-table.d.ts","../../dom/dist/src/drag-drop.d.ts","../../dom/dist/src/forms.d.ts","../../dom/dist/src/css-variables.d.ts","../../dom/dist/src/resolve-el.d.ts","../../dom/dist/src/css.d.ts","../../dom/dist/src/data-display.d.ts","../../dom/dist/src/el.d.ts","../../dom/dist/src/element-sizing.d.ts","../../dom/dist/src/error-handler.d.ts","../../dom/dist/src/log.d.ts","../../dom/dist/src/inline-console.d.ts","../../dom/dist/src/query.d.ts","../../dom/dist/src/set-property.d.ts","../../dom/dist/src/shadow-dom.d.ts","../../dom/dist/src/tabbed-panel.d.ts","../../dom/dist/src/utility.d.ts","../../dom/dist/src/index.d.ts","../../../node_modules/.pnpm/colorizr@3.0.7/node_modules/colorizr/dist/index.d.mts"],"sourcesContent":["export type NumberFormattingOptions = Readonly<{\n    precision?: number;\n    roundNumbers?: number;\n    leftPadding?: number;\n}>;\nexport type FormattingOptions = Readonly<{\n    numbers: NumberFormattingOptions;\n}>;\nexport type DataTableOpts = FormattingOptions & {\n    readonly formatter?: DataFormatter;\n    readonly objectsAsTables?: boolean;\n    readonly idPrefix?: string;\n};\nexport type DataTable<V> = {\n    update(data: V): void;\n    remove(): boolean;\n};\n/**\n * Creates a table of data points for each object in the map\n * ```\n * const t = DataTable.fromList(parentEl, map);\n * t.update(newMap);\n * ```\n */\nexport declare const fromList: (parentOrQuery: HTMLElement | string, data: Map<string, object>) => DataTable<Map<string, object>>;\n/**\n * Format data. Return _undefined_ to signal that\n * data was not handled.\n */\nexport type DataFormatter = (data: object, path: string) => string | undefined;\n/**\n * Creates a HTML table where each row is a key-value pair from `data`.\n * First column is the key, second column data.\n *\n * ```js\n * const dt = fromObject(`#hostDiv`);\n * ```\n *\n * `dt` is a function to call when you want to update data:\n *\n * ```js\n * dt({\n *  name: `Blerg`,\n *  height: 120\n * });\n * ```\n */\nexport declare const fromObject: (parentOrQuery: HTMLElement | string, data?: object, opts?: Partial<DataTableOpts>) => DataTable<object>;\n//# sourceMappingURL=data-table.d.ts.map","import type { Point } from '@ixfx/geometry/point';\nimport type { RectPositioned } from '@ixfx/geometry/rect';\n/**\n * State of drag\n */\nexport type DragState = Readonly<{\n    /**\n     * Optional data, if this was given during drag start\n     */\n    token?: object;\n    /**\n     * Initial pointer position in viewport coordinates\n     */\n    initial: Point;\n    /**\n     * Delta of movement from initial position\n     */\n    delta: Point;\n    /**\n     * Viewport-relative current position\n     */\n    viewport: Point;\n}>;\n/**\n * Return data for `start` function\n */\nexport type DragStart = Readonly<{\n    /**\n     * If _true_, drag start is allowed\n     */\n    allow: boolean;\n    /**\n     * Optional data to associate with drag\n     */\n    token?: object;\n}>;\n/**\n * Return data for `progress` function\n */\nexport type DragProgress = Readonly<{\n    /**\n     * If true, aborts drag operation\n     */\n    abort?: boolean;\n    /**\n     * If returned, this will be viewport coordinates\n     * to snap the drag to\n     */\n    viewport?: Point;\n}>;\nexport type DragListener = Readonly<{\n    start?: () => DragStart;\n    progress?: (state: DragState) => DragProgress;\n    abort?: (reason: string, state: DragState) => void;\n    success?: (state: DragState) => void;\n}>;\nexport type DragOptions = {\n    autoTranslate: boolean;\n    /**\n     * If true, it's not necessary to select item first\n     */\n    quickDrag: boolean;\n    fence: HTMLElement | string;\n    fenceViewport: RectPositioned;\n};\nexport declare const draggable: (elemOrQuery: SVGElement | HTMLElement | string, listener: DragListener, options?: Partial<DragOptions>) => () => void;\n//# sourceMappingURL=drag-drop.d.ts.map","/**\n * Adds tab and shift+tab to TEXTAREA\n * @param el\n */\nexport declare const textAreaKeyboard: (el: HTMLTextAreaElement) => void;\n/**\n * Quick access to <input type=\"checkbox\"> value.\n * Provide a checkbox by string id or object reference. If a callback is\n * supplied, it will be called when the checkbox changes value.\n *\n * ```\n * const opt = checkbox(`#chkMate`);\n * opt.checked; // Gets/sets\n *\n * const opt = checkbox(document.getElementById(`#chkMate`), newVal => {\n *  if (newVal) ...\n * });\n * ```\n * @param {(string | HTMLInputElement)} domIdOrEl\n * @param {(currentVal:boolean) => void} [onChanged]\n * @returns\n */\nexport declare const checkbox: (domIdOrEl: string | HTMLInputElement, onChanged?: (currentValue: boolean) => void) => {\n    checked: boolean;\n};\n/**\n * Numeric INPUT\n *\n * ```\n * const el = numeric(`#num`, (currentValue) => {\n *  // Called when input changes\n * })\n * ```\n *\n * Get/set value\n * ```\n * el.value = 10;\n * ```\n * @param domIdOrEl\n * @param onChanged\n * @param live If true, event handler fires based on `input` event, rather than `change`\n * @returns\n */\nexport declare const numeric: (domIdOrEl: string | HTMLInputElement, onChanged?: (currentValue: number) => void, live?: boolean) => {\n    value: number;\n};\n/**\n * SELECT options\n */\nexport type SelectOpts = {\n    /**\n     * Placeholder item\n     */\n    readonly placeholderOpt?: string;\n    /**\n     * If true, a placeholder option 'Choose' is added to the list\n     */\n    readonly shouldAddChoosePlaceholder?: boolean;\n    /**\n     * Item to choose after a selection is made\n     */\n    readonly autoSelectAfterChoice?: number;\n};\n/**\n * Button\n *\n * ```\n * const b = button(`#myButton`, () => {\n *  console.log(`Button clicked`);\n * });\n * ```\n *\n * ```\n * b.click(); // Call the click handler\n * b.disabled = true / false;\n * ```\n * @param domQueryOrEl Query string or element instance\n * @param onClickHandler Callback when button is clicked\n * @returns\n */\nexport declare const button: (domQueryOrEl: string | HTMLButtonElement, onClickHandler?: () => void) => {\n    /**\n     * Gets text content of button\n     */\n    get title(): string | null;\n    /**\n     * Sets text content of button\n     */\n    set title(value: string);\n    /**\n     * Disposes the button.\n     * Removes event handler and optionally removes from document\n     * @param deleteElement\n     */\n    dispose(deleteElement?: boolean): void;\n    /**\n     * Sets the click handler, overwriting existing.\n     * @param handler\n     */\n    onClick(handler?: () => void): void;\n    /**\n     * Trigger onClick handler\n     */\n    click(): void;\n    /**\n     * Sets disabled state of button\n     */\n    disabled: boolean;\n    /**\n     * Gets the button element\n     */\n    readonly el: HTMLButtonElement;\n};\n/**\n * Creates a BUTTON element, wrapping it via {@link button} and returning it.\n * ```js\n * const b = buttonCreate(`Stop`, () => console.log(`Stop`));\n * someParent.addNode(b.el);\n * ```\n * @param title\n * @param onClick\n * @returns\n */\nexport declare const buttonCreate: (title: string, onClick?: () => void) => {\n    /**\n     * Gets text content of button\n     */\n    get title(): string | null;\n    /**\n     * Sets text content of button\n     */\n    set title(value: string);\n    /**\n     * Disposes the button.\n     * Removes event handler and optionally removes from document\n     * @param deleteElement\n     */\n    dispose(deleteElement?: boolean): void;\n    /**\n     * Sets the click handler, overwriting existing.\n     * @param handler\n     */\n    onClick(handler?: () => void): void;\n    /**\n     * Trigger onClick handler\n     */\n    click(): void;\n    /**\n     * Sets disabled state of button\n     */\n    disabled: boolean;\n    /**\n     * Gets the button element\n     */\n    readonly el: HTMLButtonElement;\n};\n/**\n * SELECT handler\n */\nexport type SelectHandler = {\n    /**\n     * Gets/Sets disabled\n     */\n    set disabled(value: boolean);\n    get disabled(): boolean;\n    /**\n     * Gets value\n     */\n    get value(): string;\n    /**\n     * Sets selected index\n     */\n    get index(): number;\n    /**\n     * _True_ if currently selected item is the placeholder\n     */\n    get isSelectedPlaceholder(): boolean;\n    /**\n     * Set options\n     * @param options Options\n     * @param preSelect Item to preselect\n     */\n    setOpts(options: readonly string[], preSelect?: string): void;\n    /**\n     * Select item by index\n     * @param index Index\n     * @param trigger If true, triggers change event\n     */\n    select(index?: number, trigger?: boolean): void;\n};\n/**\n * SELECT element.\n *\n * Handle changes in value:\n * ```\n * const mySelect = select(`#mySelect`, (newValue) => {\n *  console.log(`Value is now ${newValue}`);\n * });\n * ```\n *\n * Enable/disable:\n * ```\n * mySelect.disabled = true / false;\n * ```\n *\n * Get currently selected index or value:\n * ```\n * mySelect.value / mySelect.index\n * ```\n *\n * Is the currently selected value a placeholder?\n * ```\n * mySelect.isSelectedPlaceholder\n * ```\n *\n * Set list of options\n * ```\n * // Adds options, preselecting `opt2`.\n * mySelect.setOpts([`opt1`, `opt2 ...], `opt2`);\n * ```\n *\n * Select an element\n * ```\n * mySelect.select(1); // Select second item\n * mySelect.select(1, true); // If true is added, change handler fires as well\n * ```\n * @param domQueryOrEl Query (eg `#id`) or element\n * @param onChanged Callback when a selection is made\n * @param options Options\n * @return\n */\nexport declare const select: (domQueryOrEl: string | HTMLSelectElement, onChanged?: (currentValue: string) => void, options?: SelectOpts) => SelectHandler;\n//# sourceMappingURL=forms.d.ts.map","/**\n * CSS Variable\n */\nexport type CssVariable = {\n    /**\n     * CSS variable to read for the value. `--` prefix is not needed\n     */\n    variable: string;\n    /**\n     * Attribute name, eg 'width' for a Canvas element.\n     */\n    attribute?: string;\n    field?: string;\n    /**\n     * Optional default value\n     */\n    defaultValue: string | undefined;\n};\n/**\n * CSS Variable by id\n */\nexport type CssVariableByIdOption = CssVariable & {\n    id: string;\n};\n/**\n * CSS variable by query\n */\nexport type CssVariableByQueryOption = CssVariable & {\n    query: string;\n};\n/**\n * CSS variable by element reference\n */\nexport type CssVariableByObjectOption = CssVariable & {\n    object: object | object[];\n};\n/**\n * CSS variable option\n */\nexport type CssVariableOption = CssVariable & (CssVariableByObjectOption | CssVariableByIdOption | CssVariableByQueryOption);\n/**\n * Parses input in the form of: `['elementid-attribute', 'default-value']`.\n * Eg, `['indicator-fill', 'gray']` will yield:\n * ```\n * { variable: `indicator-fill`, attribute: `fill`, id: `indicator`, defaultValue: `gray` }\n * ```\n *\n * Once parsed, use {@link setFromCssVariables} to apply data.\n *\n * ```js\n * // Array of arrays is treated as a set of key-value pairs\n * const options = [ [`indicator-fill`, `gray`], [`backdrop-fill`, `whitesmoke`] ]\n * const attrs = parseCssVariablesAsAttributes(options);\n * Yields:\n * [\n *  { variable: `indicator-fill`, attribute: `fill`, id: `indicator`, defaultValue: `gray` }\n *  { variable: `backdrop-fill`, attribute: `fill`, id: `backdrop`, defaultValue: `whitesmoke` }\n * ]\n *\n * // Assign\n * setFromCssVariables(document.body, attrs);\n * ```\n * @param options\n * @returns\n */\nexport declare const parseCssVariablesAsAttributes: (options: (string | string[])[]) => (CssVariable & CssVariableByIdOption)[];\n/**\n * Reads the value of a CSS variable and assign it to HTML attributes or object field.\n *\n * ```js\n * const options = [\n *  // Set the 'width' attribute to the value of --some-css-variable to all elements with class 'blah'\n *  { query: `.blah`, variable: `some-css-variable`, attribute: `width` }\n *\n *  // Set #blah's 'size' attribute to the value of css variable '--size'\n *  { id: 'blah', variable: 'size', attribute: 'size' }\n *\n *  // Sets someEL.blah = css variable '--hue'\n *  { element: someEl, variable: `hue`, field: `blah` }\n * ]\n *\n * setFromCssVariables(document.body, ...options);\n * ```\n *\n * The first parameter is the context for which CSS variable values are fetched\n * as well as for resolving query selectors. This can usually be `document.body`.\n * @param context Context element which is needed for relative querying. Otherwise use document.body\n * @param options Details of what to do\n */\nexport declare const setFromCssVariables: (context: HTMLElement | string, ...options: CssVariableOption[]) => void;\n/**\n * Computes the styles for `elt` (or defaults to document.body) using `fallback`\n * as a set of default values.\n *\n * ```js\n * // Fetch styles\n * const styles = getCssVariablesWithFallback({\n *  my_var: `red` // reads CSS variable '--my-var'\n * }, element);\n *\n * // Access --my-var, or if it doesn't exist returns 'red'\n * styles.my_var;\n * ```\n *\n * Hyphen case (eg 'my-var') is a common way of delimiting words in CSS variables, but\n * can't be (elegantly) used in object properties. Instead, use '_' in the\n * object key, which is replaced with '-'.\n *\n * The leading '--' is not needed either.\n * @param fallback\n * @param elt\n * @returns\n */\nexport declare function getCssVariablesWithFallback<T extends Record<string, string | number>>(fallback: T, elt?: Element): T;\n/**\n * Returns the value of a CSS variable. If it is no defined, returns `fallbackValue`;\n * ```js\n * // Returns the value of --fg, or 'white' otherwise\n * getCssVariable(`--fg`, `white`);\n * ```\n *\n * `--` prefix can be omitted:\n * ```js\n * getCssVariable(`fg`, `white`);\n * ```\n * @param cssVariable\n * @param fallbackValue\n * @returns\n */\nexport declare function getCssVariable(cssVariable: string, fallbackValue: string): string;\n/**\n * Sets CSS variables using an object.\n *\n * ```js\n * const vars = {\n *  my_var: `red`,\n *  my_size: 10\n * }\n *\n * // Set to document.body\n * setCssVariables(vars);\n *\n * // Set to an element\n * setCssVariables(vars, elem);\n *\n * // Or to a CSSStyleDeclaration\n * setCssVariables(vars, styles);\n * ```\n *\n * @param variables\n * @param stylesOrEl\n */\nexport declare function setCssVariables<T extends Record<string, string | number>>(variables: T, stylesOrEl?: CSSStyleDeclaration | HTMLElement): void;\n/**\n * Returns a CSS variable from a CSS style declaration, or returning `fallback`.\n * ```js\n * // These will all access --my-var\n * getCssVariablesFromStyles(getComputedStyle(element), `--my-var`, `red`);\n * getCssVariablesFromStyles(getComputedStyle(element), `my-var`, `red`);\n * getCssVariablesFromStyles(getComputedStyle(element), `my_var`, `red`);\n * ```\n * @param styles\n * @param name\n * @param fallback\n * @returns\n */\nexport declare function getCssVariablesFromStyles<T extends string | number>(styles: CSSStyleDeclaration, name: string, fallback: T): T;\n//# sourceMappingURL=css-variables.d.ts.map","import { type Result } from \"@ixfx/guards\";\n/**\n * Resolves either a string or HTML element to an element.\n * Useful when an argument is either an HTML element or query.\n *\n * ```js\n * resolveEl(`#someId`);\n * resolveEl(someElement);\n * ```\n * @param domQueryOrEl\n * @returns\n */\nexport declare const resolveEl: <V extends Element>(domQueryOrEl: string | V | null | undefined) => V;\n/**\n * Tries to resolve a query, returning a `Result`.\n *\n * ```js\n * const { success, value, error } = resolveElementTry(`#some-element`);\n * if (success) {\n *  // Do something with value\n * } else {\n *  console.error(error);\n * }\n * ```\n * @param domQueryOrEl\n * @returns\n */\nexport declare const resolveElementTry: <V extends Element>(domQueryOrEl: string | V | null | undefined) => Result<V, string>;\nexport type QueryOrElements = string | Element[] | HTMLElement[] | HTMLElement | Element;\n/**\n * Returns a set of elements.\n *\n * Returns an empty list if `selectors` is undefined or null.\n *\n * @param selectors\n * @returns\n */\nexport declare const resolveEls: (selectors: QueryOrElements) => HTMLElement[];\n//# sourceMappingURL=resolve-el.d.ts.map","import type { RectPositioned } from \"@ixfx/geometry/rect\";\nimport { type QueryOrElements } from \"./resolve-el.js\";\nexport type ComputedPixelsMap<T extends readonly (keyof CSSStyleDeclaration)[]> = Record<T[number], number>;\n/**\n * Returns the value of `getBoundingClientRect` plus the width of all the borders\n * @param elOrQuery\n * @returns\n */\nexport declare const getBoundingClientRectWithBorder: (elOrQuery: SVGElement | HTMLElement | string) => RectPositioned;\n/**\n * Returns the computed measurements of CSS properties via [getComputedStyle](https://developer.mozilla.org/en-US/docs/Web/API/Window/getComputedStyle).\n *\n * ```js\n * const v = getComputedPixels(`#some-el`, `borderTopWidth`, `borderLeftWidth`);\n * v.borderTopWidth;  // number\n * b.borderLeftWidth; // number\n * ```\n *\n * Throws an error if value from `getComputedStyle` is not a string or does not end in 'px'.\n * @param elOrQuery\n * @param properties\n * @returns\n */\nexport declare const getComputedPixels: <T extends readonly (keyof CSSStyleDeclaration)[]>(elOrQuery: HTMLElement | string, ...properties: T) => ComputedPixelsMap<T>;\n/**\n * If `value` is _true_, the provided CSS class is added to element(s), otherwise it is removed.\n *\n * ```js\n * setClass(`#someId`, true, `activated`); // Add 'activated'\n * setClass(`#someId`, false, `activated`); // Removes 'activated'\n * ```\n *\n * @param selectors\n * @param value\n * @param cssClass\n * @returns\n */\nexport declare const setCssClass: (selectors: QueryOrElements, value: boolean, cssClass: string) => void;\n/**\n * Toggles a CSS class on all elements that match selector.\n *\n * ```js\n * setCssToggle(`span`, `activated`); // Toggles the 'activated' class on all SPAN elements\n * ```\n *\n * Uses `HTMLElement.classList.toggle`\n * @param selectors\n * @param cssClass\n * @returns\n */\nexport declare const setCssToggle: (selectors: QueryOrElements, cssClass: string) => void;\n/**\n * Sets the CSS 'display' property\n *\n * ```js\n * setCssDisplay(`span`, `block`); // Sets display:block for all spans\n * ```\n *\n * @param selectors\n * @param value\n * @returns\n */\nexport declare const setCssDisplay: (selectors: QueryOrElements, value: string) => void;\n//# sourceMappingURL=css.d.ts.map","import { type FormattingOptions } from \"./data-table.js\";\nexport type DataDisplayOptions = FormattingOptions & {\n    theme?: `dark` | `light`;\n};\n/**\n * Creates a simple display for data. Designed to show ixfx state data\n *\n * ```js\n * // Create once\n * const display = new DataDisplay();\n *\n * // Call .update to show state\n * display.update(state);\n * ```\n */\nexport declare class DataDisplay {\n    dataTable: any;\n    /**\n     * Constructor\n     * @param options Options\n     */\n    constructor(options?: Partial<DataDisplayOptions>);\n    update(data: object): void;\n}\n//# sourceMappingURL=data-display.d.ts.map","import { type QueryOrElements } from \"./resolve-el.js\";\n/**\n * Wraps an element (or set of elements) with handy functions\n * for manipulation.\n */\nexport type WrappedElement = {\n    /**\n     * Sets inner text\n     * @param value\n     * @returns\n     */\n    text: (value: string | number) => string;\n    /**\n     * Sets inner HTML\n     * @param value\n     * @returns\n     */\n    html: (value: string | number) => string;\n    /**\n     * Sets the CSS 'display' property to `value`\n     * @param value\n     * @returns\n     */\n    cssDisplay: (value: string) => void;\n    /**\n     * Adds/removes a CSS class depending on `value`\n     * @param value\n     * @param cssClass\n     * @returns\n     */\n    cssClass: (value: boolean, cssClass: string) => void;\n    /**\n     * Toggles a CSS class\n     * @param cssClass\n     * @returns\n     */\n    cssToggle: (cssClass: string) => void;\n    /**\n     * Gets the HTML element corresponding to original selector.\n     * If the selector returns multiple items, the first is yielded\n     * @returns\n     */\n    el: () => HTMLElement;\n    /**\n     * Returns a set of HTML elements that match selector\n     * @returns\n     */\n    els: () => HTMLElement[];\n};\n/**\n * Returns an object with handy functions for working on/against the provided selector.\n *\n * ```js\n * const e = el(`#my-element`);\n * e.text(`hello`);           // Set the inner text of the elemenet\n * e.cssDisplay(`block`);    // Sets display:block\n * e.cssToggle(`activated`);  // Toggles the 'activated' CSS class\n * e.cssClass(true, `activated`); // Turns on the 'activated' CSS class\n * e.el();                    // Returns the HTML Element\n * ```\n *\n * The selector is only queried when created. Use {@link elRequery} to continually\n * re-query the selector before each operation.\n *\n * @param selectors\n * @returns\n */\nexport declare const el: (selectors: QueryOrElements) => WrappedElement;\nexport declare const elRequery: (selectors: string) => WrappedElement;\n//# sourceMappingURL=el.d.ts.map","import { Rects } from \"@ixfx/geometry\";\nimport type { Rect } from \"@ixfx/geometry/rect\";\nimport { type Interval } from \"@ixfx/core\";\n/**\n * * width: use width of parent, set height based on original aspect ratio of element. Assumes parent has a determined width.\n * * height: use height of parent, set width based on original aspect ratio of element. Assumes parent has a determined height.\n * * both: use height & width of parent, so the element adopts the ratio of the parent. Be sure that parent has a width and height set.\n * * min: use the smallest dimension of parent\n * * max: use the largest dimension of parent\n */\nexport type ElementResizeLogic = `width` | `height` | `both` | `none` | `min` | `max`;\n/**\n * Options\n */\nexport type ElementSizerOptions<T extends HTMLElement | SVGElement> = {\n    /**\n     * @defaultValue 'none'\n     */\n    stretch?: ElementResizeLogic;\n    naturalSize?: Rects.Rect;\n    /**\n     * If not specified, the element's parent is used\n     */\n    containerEl?: HTMLElement | string;\n    onSizeChanging: (size: Rects.Rect, el: T) => void;\n    onSizeDone?: (size: Rects.Rect, el: T) => void;\n    debounceTimeout?: Interval;\n};\n/**\n * Consider using static methods:\n *\n * ```js\n * // Resize an <SVG> element to match viewport\n * Dom.ElementSizer.svgViewport(svg);\n *\n * // Resize canvas to match its parent\n * Dom.ElementSizer.canvasParent(canvas);\n *\n * // Resize canvas to match viewport\n * Dom.ElementSizer.canvasViewport(canvas);\n * ```\n */\nexport declare class ElementSizer<T extends HTMLElement | SVGElement> {\n    #private;\n    constructor(elOrQuery: T | string, options: ElementSizerOptions<T>);\n    dispose(reason?: string): void;\n    static canvasParent(canvasElementOrQuery: HTMLCanvasElement | string, options: ElementSizerOptions<HTMLCanvasElement>): ElementSizer<HTMLCanvasElement>;\n    static canvasViewport(canvasElementOrQuery: HTMLCanvasElement | string, options: {\n        zIndex?: number;\n    } & ElementSizerOptions<HTMLCanvasElement>): ElementSizer<HTMLCanvasElement>;\n    /**\n     * Size an SVG element to match viewport\n     * @param svg\n     * @returns\n     */\n    static svgViewport(svg: SVGElement, onSizeSet?: (size: Rects.Rect) => void): ElementSizer<SVGElement>;\n    /**\n     * Sets the 'natural' size of an element.\n     * This can also be specified when creating ElementSizer.\n     * @param size\n     */\n    setNaturalSize(size: Rect): void;\n    get naturalSize(): Rects.Rect;\n    get viewport(): Rects.RectPositioned;\n    set size(size: Rects.Rect);\n    get size(): Rects.Rect;\n}\n//# sourceMappingURL=element-sizing.d.ts.map","/**\n * Creates an error handler to show errors on-screen.\n * This is useful when testing on mobile devices that lack access to the console.\n *\n * ```js\n * const e = defaultErrorHandler();\n * ```\n *\n * Manual control:\n * ```js\n * const e = defaultErrorHandler();\n * e.show(someError);\n * e.hide();\n * ```\n * @returns\n */\nexport declare const defaultErrorHandler: () => {\n    show: (ex: Error | string | Event) => void;\n    hide: () => void;\n};\n//# sourceMappingURL=error-handler.d.ts.map","export type LogOpts = {\n    readonly reverse?: boolean;\n    readonly capacity?: number;\n    readonly timestamp?: boolean;\n    readonly collapseDuplicates?: boolean;\n    readonly monospaced?: boolean;\n    readonly minIntervalMs?: number;\n    readonly css?: string;\n};\nexport type Log = {\n    clear(): void;\n    error(messageOrError: unknown): void;\n    log(message?: string | object | number): HTMLElement | undefined;\n    warn(message?: string | object | number): HTMLElement | undefined;\n    append(el: HTMLElement): void;\n    dispose(): void;\n    readonly isEmpty: boolean;\n};\n/**\n * Allows writing to a DOM element in console.log style. Element grows in size, so use\n * something like `overflow-y: scroll` on its parent\n *\n * ```\n * const l = log(`#dataStream`); // Assumes HTML element with id `dataStream` exists\n * l.log(`Hi`);\n * l.log(); // Displays a horizontal rule\n *\n * const l = log(document.getElementById(`dataStream`), {\n *  timestamp: true,\n *  truncateEntries: 20\n * });\n * l.log(`Hi`);\n * l.error(`Some error`); // Adds class `error` to line\n * ```\n *\n * For logging high-throughput streams:\n * ```\n * // Silently drop log if it was less than 5ms since the last\n * const l = log(`#dataStream`, { minIntervalMs: 5 });\n *\n * // Only the last 100 entries are kept\n * const l = log(`#dataStream`, { capacity: 100 });\n * ```\n *\n * @param domQueryOrElement Element or id of element\n * @param opts\n */\nexport declare const log: (domQueryOrElement: HTMLElement | string, opts?: LogOpts) => Log;\n//# sourceMappingURL=log.d.ts.map","import { type LogOpts } from './log.js';\nexport type InlineConsoleOptions = LogOpts & Partial<{\n    /**\n     * If true, styling is not applied\n     */\n    witholdCss: boolean;\n    /**\n     * If provided, entries are added to this element.\n     * By default a new element, #ixfx-log is created and added\n     * to the document.\n     */\n    insertIntoEl: string | HTMLElement;\n}>;\n/**\n * Adds an inline console to the page. A DIV is added to display log messages.\n *\n * Captures all console.log, console.warn and console.error calls, as well as unhandled exceptions.\n *\n * ```js\n * // Adds the DIV and intercepts console logs\n * inlineConsole();\n *\n * console.log(`Hello`); // message is displayed in the inline console\n * ```\n * @param options\n */\nexport declare const inlineConsole: (options?: InlineConsoleOptions) => void;\n//# sourceMappingURL=inline-console.d.ts.map","export type ElementQueryOptions = {\n    /**\n     * If true, elements are only returned once, even if that match several queries\n     */\n    ensureUnique: boolean;\n};\n/**\n * Async iterator over DOM query strings\n * ```js\n * query(`div`); // all DIVs\n * query([`.class`, `.and-other-class`]); // All things with these two classes\n * ```\n * @param queryOrElement\n * @returns\n */\nexport declare function query(queryOrElement: string | HTMLElement | (string | HTMLElement)[] | AsyncGenerator<string | HTMLElement>, options?: Partial<ElementQueryOptions>): AsyncGenerator<HTMLElement>;\n//# sourceMappingURL=query.d.ts.map","import { type QueryOrElements } from \"./resolve-el.js\";\nexport declare function setText(selectors: QueryOrElements): (value: any) => string;\nexport declare function setText(selectors: QueryOrElements, value?: any): string;\nexport declare function setHtml(selectors: QueryOrElements): (value: any) => string;\nexport declare function setHtml(selectors: QueryOrElements, value?: any): string;\nexport declare function setProperty(property: string, selectors: QueryOrElements): (value: any) => string;\nexport declare function setProperty(property: string, selectors: QueryOrElements, value: any): string;\n//# sourceMappingURL=set-property.d.ts.map","export declare const addShadowCss: (parentEl: Readonly<HTMLElement>, styles: string) => ShadowRoot;\n//# sourceMappingURL=shadow-dom.d.ts.map","export type Panel<TNotifyArgs> = {\n    mount: (parentEl: HTMLElement) => void;\n    dismount: () => void;\n    id: string;\n    label: string;\n    /**\n     * Panel gets a notification\n     * @param name\n     * @param args\n     * @returns\n     */\n    notify?: (name: string, args: TNotifyArgs) => void;\n};\nexport declare const tabSet: <TNotifyArgs>(options: {\n    panels: Panel<TNotifyArgs>[];\n    parent: HTMLElement | string;\n    preselectId?: string;\n    onPanelChanging?: (priorPanel: Panel<TNotifyArgs> | undefined, newPanel: Panel<TNotifyArgs> | undefined) => boolean | void;\n    onPanelChange?: (priorPanel: Panel<TNotifyArgs> | undefined, newPanel: Panel<TNotifyArgs> | undefined) => void;\n}) => {\n    select: (id: string) => void;\n    panels: Panel<TNotifyArgs>[];\n    hostEl: HTMLElement;\n    tabSetEl: HTMLElement;\n    notify: (name: string, args: TNotifyArgs) => void;\n};\n//# sourceMappingURL=tabbed-panel.d.ts.map","import { type Point } from '@ixfx/geometry/point';\nimport type { GridCardinalDirection } from '@ixfx/geometry/grid';\nimport { Points } from '@ixfx/geometry';\nexport type PointSpaces = `viewport` | `screen` | `document`;\n/**\n * Convert an absolute point to relative, in different coordinate spaces.\n *\n * When calling the returned function, the input value must be in the same\n * scale as the intended output scale.\n *\n * Viewport-relative is used by default.\n *\n * @example Get relative position of click in screen coordinates\n * ```js\n * const f = pointScaler({ to: 'screen' });\n * document.addEventListener('click', evt => {\n *  const screenRelative = f(evt.screenX, evt.screenY);\n *  // Yields {x,y} on 0..1 scale\n * });\n * ```\n *\n * @example Get relative position of click in viewport coordinates\n * ```js\n * const f = pointScaler({ to: 'viewport' });\n * document.addEventListener('click', evt => {\n *  const viewportRelative = f(evt.clientX, evt.clientY);\n *  // Yields {x,y} on 0..1 scale\n * });\n * ```\n *\n * @example Get relative position of click in document coordinates\n * ```js\n * const f = pointScaler({ to: 'document' });\n * document.addEventListener('click', evt => {\n *  const documentRelative = f(evt.pageX, evt.pageY);\n *  // Yields {x,y} on 0..1 scale\n * });\n * ```\n *\n * @param reference\n * @returns\n */\nexport declare const pointScaler: (reference?: PointSpaces) => (a: Readonly<Point | number | number[]>, b?: number) => Readonly<{\n    x: number;\n    y: number;\n}>;\nexport type ElPositionOpts = {\n    readonly target?: PointSpaces;\n    readonly relative?: boolean;\n    readonly anchor?: GridCardinalDirection | `center`;\n};\n/**\n * Returns a function which yields element position in target coordinate space with optional scaling.\n * Live position is calculated when the function is invoked.\n * Use {@link positionRelative} to simply get relative position of element in given coordinate space.\n *\n * @example Absolute position of #blah in viewport coordinate space\n * ```js\n * const f = positionFn('#blah');\n * f(); // Yields: {x,y}\n * // Or:\n * positionFn('#blah')(); // Immediately invoke\n * ```\n *\n * @example Relative position of element in viewport-space\n * ```js\n * const f = positionFn(evt.target, { relative: true });\n * f(); // Yields: {x,y}\n * ```\n *\n * @example Relative position of #blah in screen-space\n * ```js\n * const f = positionFn('#blah', { target: 'screen', relative: true });\n * f(); // Yields: {x,y}\n * ```\n *\n * By default, top-left corner (north west) is used. Other cardinal points or 'center' can be specified:\n * ```js\n * // Relative position by center\n * positionFn('#blah', { relative: true, anchor: 'center' });\n *\n * // ...by bottom-right corner\n * positionFn('#blah', { relative: true, anchor: 'se' });\n * ```\n *\n * This function is useful if you have a stable DOM element and conversion target.\n * If the DOM element is changing continually, consider using {@link viewportToSpace} to\n * convert from viewport coordinates to target coordinates:\n *\n * ```js\n * // Eg.1 Absolute coords in screen space\n * const vpToScreen = viewportToSpace('screen');\n * vpToScreen(el.getBoundingClientRect());\n *\n * // Eg.2 Relative coords in viewport space\n * const vpRelative = pointScaler(); // Re-usable scaler. Default uses viewport\n * vpRelative(el.getBoundingClientRect()); // Yields: { x,y }\n *\n * // Eg.3 Relative coords in screen space\n * const vpToScreen = viewportToSpace('screen'); // Map viewport->screen\n * const screenRelative = pointScaler('screen'); // Scale screen units\n *\n * // Combine into a resuable function that takes an element\n * const mapAndScale = (el) => screenRelative(vpToScreen(el.getBoundingClientRect()));\n *\n * // Call\n * mapAndScale(document.getElementById('blah')); // Yields: { x,y }\n * ```\n * @param domQueryOrEl\n * @param options\n * @returns\n */\nexport declare const positionFn: (domQueryOrEl: Readonly<string | HTMLElement>, options?: ElPositionOpts) => (() => Point);\n/**\n * Returns a {x,y} Point on a cardinal position of element.\n * ```\n * // Top edge, middle horizontal position\n * const pos = cardinalPosition(`#blah`, `n`);\n * ```\n * @param domQueryOrEl\n * @param anchor\n * @returns\n */\nexport declare const cardinalPosition: (domQueryOrEl: Readonly<string | HTMLElement>, anchor?: GridCardinalDirection | `center`) => Point;\n/**\n * Returns relative position of element in target coordinate space, or viewport by default.\n * Relative means that { x:0.5, y: 0.5 } is the middle of the target space. Eg for viewport, that means its the middle of the browser window.\n * ```js\n * // These all yield { x, y }\n * elPositionRelative('#blah');\n * elPositionRelative(evt.target, 'screen');\n * ```\n * @param domQueryOrEl DOM query or element\n * @param target Target coordinate space, or viewport by default\n * @returns Point\n */\nexport declare const positionRelative: (domQueryOrEl: Readonly<string | HTMLElement>, target?: PointSpaces) => Point;\n/**\n * Returns a function that converts input viewport coordinate space\n * to an output coordinate space.\n *\n * ```js\n * // f() will convert from viewport to document coordinate space\n * const f = viewportToSpace('document');\n *\n * // {x:100,y:100} is viewport coordinate space\n * f(100,100); // Yields: { x, y } converted to document space\n * ```\n *\n * Or immediately invoke for one-off use:\n * ```js\n * viewportToSpace('document')(100,100); // Yields: { x, y }\n * ```\n * @param targetSpace\n * @returns\n */\nexport declare const viewportToSpace: (targetSpace?: PointSpaces) => (a: Readonly<Point | number[] | number>, b?: number) => Readonly<{\n    x: number;\n    y: number;\n}>;\n/**\n * Position element by relative coordinate. Relative to window dimensions by default\n * @param relativePos Window-relative coordinate. 0.5/0.5 is middle of window.\n */\nexport declare const positionFromMiddle: (domQueryOrEl: string | HTMLElement, relativePos: Point, relativeTo?: `window` | `screen`) => void;\n/**\n * Given an array of class class names, this will cycle between them each time\n * it is called.\n *\n * Eg, assume `list` is: [ `a`, `b`, `c` ]\n *\n * If `el` already has the class `a`, the first time it is called, class `a`\n * is removed, and `b` added. The next time `b` is swapped for `c`. Once again,\n * `c` will swap with `a` and so on.\n *\n * If `el` is undefined or null, function silently returns.\n * @param el Element\n * @param list List of class names\n * @returns\n */\nexport declare const cycleCssClass: (el: Readonly<HTMLElement>, list: readonly string[]) => void;\n/**\n * Source: https://zellwk.com/blog/translate-in-javascript\n * @param domQueryOrEl\n */\nexport declare const getTranslation: (domQueryOrEl: Readonly<string | HTMLElement>) => Points.Point3d;\n/**\n * Creates an element after `sibling`\n * ```\n * const el = createAfter(siblingEl, `DIV`);\n * ```\n * @param sibling Element\n * @param tagName Element to create\n * @returns New element\n */\nexport declare const createAfter: (sibling: Readonly<HTMLElement>, tagName: string) => HTMLElement;\n/**\n * Creates an element inside of `parent`\n * ```\n * const newEl = createIn(parentEl, `DIV`);\n * ```\n * @param parent Parent element\n * @param tagName Tag to create\n * @returns New element\n */\nexport declare const createIn: (parent: Readonly<HTMLElement>, tagName: string) => HTMLElement;\n/**\n * Remove all child nodes from `parent`\n * @param parent\n */\nexport declare const clear: (parent: Readonly<HTMLElement>) => void;\n/**\n * Copies string representation of object to clipboard\n * @param object\n * @returns Promise\n */\nexport declare const copyToClipboard: (object: object) => Promise<unknown>;\n/**\n * Inserts `element` into `parent` sorted according to its HTML attribute `data-sort`.\n *\n * Assumes:\n * * Every child of `parent` and `element`, has a `data-sort` attribute. This is the basis for sorting.\n * * `parent` starts off empty or pre-sorted.\n * * Order of `parent`'s children is not changed (ie it always remains sorted)\n * @param parent Parent to insert into\n * @param element Element to insert\n */\nexport declare const insertSorted: (parent: HTMLElement, element: HTMLElement) => void;\n/**\n * Creates or updates an element based on an input value.\n * This function should not add the element to the DOM.\n */\nexport type CreateUpdateElement<V> = (\n/**\n * Value to create/update for\n */\nitem: V, \n/**\n * Element to update, or null if it needs to be created\n */\nel: HTMLElement | null) => HTMLElement;\n/**\n * Creates a DOM tree, based on provided data.\n *\n * This will create new DOM elements if needed, update\n * existing ones or remove them if the value is no longer present.\n *\n *\n * @param parentEl\n * @param list Values to create elements for\n * @param createUpdate Function to create/update elements based on a value\n */\nexport declare const reconcileChildren: <V>(parentEl: HTMLElement, list: Map<string, V>, createUpdate: CreateUpdateElement<V>) => void;\n/**\n * Gets a HTML element by id, throwing an error if not found\n * @param id\n * @returns\n */\nexport declare const byId: <T extends HTMLElement>(id: string) => T;\n//# sourceMappingURL=utility.d.ts.map","export * as DataTable from './data-table.js';\nexport * as DragDrop from './drag-drop.js';\nexport * as Forms from './forms.js';\nexport * from './css-variables.js';\nexport * from './css.js';\nexport * from './data-display.js';\nexport * from './el.js';\nexport * from './element-sizing.js';\nexport * from './error-handler.js';\nexport * from './inline-console.js';\nexport * from './log.js';\nexport * from './query.js';\nexport * from './resolve-el.js';\nexport * from './set-property.js';\nexport * from './shadow-dom.js';\nexport * from './tabbed-panel.js';\nexport * from './utility.js';\n//# sourceMappingURL=index.d.ts.map","type ColorType = 'hex' | 'hsl' | 'oklab' | 'oklch' | 'rgb';\ntype ColorModel = HSL | LAB | LCH | RGB;\ntype ColorModelKey = 'hsl' | 'oklab' | 'oklch' | 'rgb';\ntype ColorModelKeys<TModel extends ColorModelKey> = TModel extends 'hsl' ? keyof Omit<HSL, 'alpha'> : TModel extends 'oklab' ? keyof Omit<LAB, 'alpha'> : TModel extends 'oklch' ? keyof Omit<LCH, 'alpha'> : TModel extends 'rgb' ? keyof Omit<RGB, 'alpha'> : never;\ntype ColorKeysTuple = [string, string, string];\ntype ColorTuple = [number, number, number];\ntype ColorTokens = 50 | 100 | 200 | 300 | 400 | 500 | 600 | 700 | 800 | 900;\ntype ColorReturn<T extends ColorType> = T extends 'hex' ? HEX : T extends 'hsl' ? HSL : T extends 'oklab' ? LAB : T extends 'oklch' ? LCH : T extends 'rgb' ? RGB : never;\ninterface Colors {\n    alpha: Alpha;\n    hex: HEX;\n    hsl: HSL;\n    oklab: LAB;\n    oklch: LCH;\n    rgb: RGB;\n    type: ColorType;\n}\ntype ConverterParameters<TModel extends ColorModel> = TModel | ColorTuple;\ntype Alpha = number;\ntype Amount = number;\ntype Degrees = number;\ntype HEX = `#${string}`;\ninterface HSL {\n    h: number;\n    s: number;\n    l: number;\n    alpha?: Alpha;\n}\ninterface LAB {\n    l: number;\n    a: number;\n    b: number;\n    alpha?: Alpha;\n}\ninterface LCH {\n    l: number;\n    c: number;\n    h: number;\n    alpha?: Alpha;\n}\ninterface RGB {\n    r: number;\n    g: number;\n    b: number;\n    alpha?: Alpha;\n}\ninterface Analysis {\n    brightnessDifference: number;\n    colorDifference: number;\n    compliant: number;\n    contrast: number;\n    largeAA: boolean;\n    largeAAA: boolean;\n    normalAA: boolean;\n    normalAAA: boolean;\n}\ntype PlainObject<T = any> = Record<string, T>;\n\ninterface ColorizrOptions {\n    /**\n     * Output color format.\n     *\n     * If not specified, the output will use the same format as the input color.\n     */\n    format?: ColorType;\n}\ndeclare class Colorizr {\n    alpha: Alpha;\n    hex: HEX;\n    hsl: HSL;\n    oklab: LAB;\n    oklch: LCH;\n    rgb: RGB;\n    type: ColorType;\n    constructor(color: string | HSL | LAB | LCH | RGB, options?: ColorizrOptions);\n    /**\n     * Get css string\n     */\n    get css(): string;\n    /**\n     * Get the red value\n     */\n    get red(): number;\n    /**\n     * Get the green value\n     */\n    get green(): number;\n    /**\n     * Get the blue value\n     */\n    get blue(): number;\n    /**\n     * Get the hue value\n     */\n    get hue(): number;\n    /**\n     * Get the saturation value\n     */\n    get saturation(): number;\n    /**\n     * Get the lightness value\n     */\n    get lightness(): number;\n    /**\n     * Get the luminance value\n     */\n    get luminance(): number;\n    /**\n     * Get the chroma value\n     */\n    get chroma(): number;\n    get opacity(): number;\n    /**\n     * Get the contrasted color\n     */\n    get textColor(): string;\n    private get selectedColor();\n    brightnessDifference(input: string): number;\n    colorDifference(input: string): number;\n    /**\n     * Test 2 colors for compliance\n     */\n    compare(input: string): Analysis;\n    contrast(input: string): number;\n    format(type: ColorType, precision?: number): string;\n    /**\n     * Increase lightness\n     */\n    lighten(amount: Amount): string;\n    /**\n     * Decrease lightness\n     */\n    darken(amount: Amount): string;\n    /**\n     * Increase saturation\n     */\n    saturate(amount: Amount): string;\n    /**\n     * Decrease saturation\n     */\n    desaturate(amount: Amount): string;\n    /**\n     * Invert color\n     */\n    invert(): string;\n    /**\n     * Add opacity to the color.\n     */\n    opacify(alpha?: Alpha): string;\n    /**\n     * Rotate color\n     */\n    rotate(degrees: Degrees): string;\n    /**\n     * Make the color more transparent\n     */\n    transparentize(alpha?: Alpha): string;\n}\n\n/**\n * Get the brightness difference between 2 colors.\n */\ndeclare function brightnessDifference(left: string, right: string, precision?: number): number;\n\n/**\n * Get the chroma of a color.\n */\ndeclare function chroma(input: string): number;\n\n/**\n * Get the difference between 2 colors.\n */\ndeclare function colorDifference(left: string, right: string): number;\n\n/**\n * Check 2 colors for WCAG compliance.\n */\ndeclare function compare(left: string, right: string): Analysis;\n\n/**\n * Get the color contrast between 2 colors.\n */\ndeclare function contrast(left: string, right: string): number;\n\n/**\n * Convert a color string to another format.\n */\ndeclare function convert(input: string, format: ColorType): string;\n\n/**\n * Decrease color lightness\n */\ndeclare function darken(input: string, amount: Amount, format?: ColorType): string;\n\n/**\n * Decrease color saturation\n */\ndeclare function desaturate(input: string, amount: Amount, format?: ColorType): string;\n\ntype ExtractColorPartsReturn = {\n    alpha?: number;\n    model: ColorModelKey;\n} & PlainObject<number>;\n/**\n * Extract the color parts from a CSS color string.\n * Hex colors are not supported.\n */\ndeclare function extractColorParts(input: string): ExtractColorPartsReturn;\n\ninterface FormatCSSOptions {\n    /**\n     * The alpha value of the color.\n     */\n    alpha?: Alpha;\n    /**\n     * Output color format.\n     * @default 'hex'\n     */\n    format?: ColorType;\n    /**\n     * The number of digits of the output.\n     * @default 5\n     */\n    precision?: number;\n    /**\n     * The separator between the values.\n     *\n     * oklab and oklch always use space as a separator.\n     * @default ' '\n     */\n    separator?: string;\n}\ndeclare function formatCSS<T extends ColorModel | HEX>(input: T, options?: FormatCSSOptions): string;\n\ndeclare function formatHex(input: string): HEX;\n\ndeclare function isValidColor(input: string): boolean;\n\n/**\n * Increase color lightness\n */\ndeclare function lighten(input: string, amount: Amount, format?: ColorType): string;\n\n/**\n * Get the luminance of a color.\n */\ndeclare function luminance(input: string): number;\n\n/**\n * Get the name of a color.\n * Returns the hex value if the color is not found.\n */\ndeclare function name(input: string): string;\n\ninterface PaletteOptions {\n    /**\n     * Output color format.\n     *\n     * If not specified, the output will use the same format as the input color.\n     */\n    format?: ColorType;\n    /**\n     * Adjusts the lightness of the base color before generating the palette.\n     *\n     * Value should be between 0 and 100.\n     */\n    lightness?: number;\n    /**\n     * Adjusts the saturation of the base color before generating the palette.\n     *\n     * Value should be between 0 and 100.\n     */\n    saturation?: number;\n    /**\n     * The number of colors to generate in the palette.\n     *\n     * Minimum value is 2.\n     * @default 6\n     */\n    size?: number;\n    /**\n     * Generate a monochromatic palette.\n     *\n     * For more options, use the `swatch` function.\n     */\n    type?: 'monochromatic';\n}\ndeclare function palette(input: string, options?: PaletteOptions): string[];\n\n/**\n * Make the color transparent\n */\ndeclare function opacify(input: string, alpha: Alpha, format?: ColorType): string;\n\ndeclare function opacity(input: string): number;\n\n/**\n * Get the maximum chroma for a given lightness and hue in the OkLCH color space\n */\ndeclare function getOkLCHMaxChroma(input: string | LCH, precision?: number): number;\n/**\n * Get a OkLCH color in the P3 color space.\n */\ndeclare function getP3Color(input: string | LCH): string;\n\n/**\n * Parse CSS color\n */\ndeclare function parseCSS<T extends ColorType>(input: string, format?: T): ColorReturn<T>;\n\n/**\n * Generate a random color.\n */\ndeclare function random(type?: ColorType): string;\n\n/**\n * Change the color hue\n */\ndeclare function rotate(input: string, degrees: Degrees, format?: ColorType): string;\n\n/**\n * Increase color saturation\n */\ndeclare function saturate(input: string, amount: number, format?: ColorType): string;\n\ntype Scheme = 'analogous' | 'complementary' | 'rectangle' | 'split' | 'split-complementary' | 'square' | 'tetradic' | 'triadic';\ninterface SchemeOptions {\n    /**\n     * Output color format.\n     *\n     * If not specified, the output will use the same format as the input color.\n     */\n    format?: ColorType;\n    /**\n     * The type of scheme to generate.\n     * @default 'complementary'\n     */\n    type?: Scheme;\n}\n/**\n * Get the scheme for a color.\n */\ndeclare function scheme(input: string, typeOrOptions?: Scheme | SchemeOptions): string[];\n\ntype Swatch = {\n    [key in ColorTokens]: string;\n};\ntype SwatchVariant = 'deep' | 'neutral' | 'pastel' | 'subtle' | 'vibrant';\ninterface SwatchOptions {\n    /**\n     * Output color format.\n     *\n     * Determines the format of the generated colors (e.g., HEX, RGB, OKLCH, etc.).\n     *\n     * If not specified, the output will match the format of the input color.\n     */\n    format?: ColorType;\n    /**\n     * The lightness tuning factor for the swatch.\n     * - 1: Linear lightness distribution.\n     * - >1: Lighter tones are emphasized.\n     * - <1: Darker tones are emphasized.\n     * @default 1.5\n     */\n    lightnessFactor?: number;\n    /**\n     * The maximum lightness value for the swatch.\n     *\n     * Defines the upper bound for the lightest color in the palette.\n     *\n     * A number between 0 and 1.\n     * @default 0.97\n     */\n    maxLightness?: number;\n    /**\n     * The minimum lightness value for the swatch.\n     *\n     * Defines the lower bound for the darkest color in the palette.\n     *\n     * A number between 0 and 1.\n     *\n     * @default 0.2\n     */\n    minLightness?: number;\n    /**\n     * Determines the scale type for the swatch.\n     * - 'fixed': Shades are distributed with pre-defined lightness intervals.\n     * - 'dynamic': Shades are distributed adaptively based on the input color.\n     * @default 'dynamic'\n     */\n    scale?: 'dynamic' | 'fixed';\n    /**\n     * The variant of the swatch.\n     * - 'deep': Generates rich and bold tones with significantly reduced lightness.\n     * - 'neutral': Generates muted tones by reducing chroma.\n     * - 'pastel': Produces soft and airy tones with significant chroma reduction.\n     * - 'subtle': Creates extremely desaturated tones, close to grayscale.\n     * - 'vibrant': Enhances chroma for bold and striking tones.\n     */\n    variant?: SwatchVariant;\n}\n/**\n * Generate a swatch of colors based on the input color\n *\n * This utility is ideal for designers and developers who need dynamic color\n * palettes for UI themes, design systems, or data visualization. Supports\n * multiple modes, scales, and variants for flexibility.\n */\ndeclare function swatch(input: string, options?: SwatchOptions): Swatch;\n\ninterface TextColorOptions {\n    /**\n     * The dark color to return if the input is light.\n     * @default '#000000'\n     */\n    darkColor?: string;\n    /**\n     * The light color to return if the input is dark.\n     * @default '#ffffff'\n     */\n    lightColor?: string;\n    /**\n     * The threshold to determine if the color is light or dark.\n     *\n     * A number between 0 and 255.\n     * @default 128\n     */\n    threshold?: number;\n}\n/**\n * Get the contrasted color for a given hex.\n */\ndeclare function textColor(input: string, options?: TextColorOptions): string;\n\n/**\n * Increase the color transparency.\n */\ndeclare function transparentize(input: string, alpha: Alpha, format?: ColorType): string;\n\n/** Convert HEX to HSL */\ndeclare function hex2hsl(input: string): HSL;\n\n/** Convert HEX to oklab */\ndeclare function hex2oklab(input: string, precision?: number): LAB;\n\n/** Convert HEX to oklch */\ndeclare function hex2oklch(input: string, precision?: number): LCH;\n\n/** Convert HEX to RGB */\ndeclare function hex2rgb(input: string): RGB;\n\n/** Convert HSL to HEX */\ndeclare function hsl2hex(input: ConverterParameters<HSL>): HEX;\n\n/** Convert HSL to oklab */\ndeclare function hsl2oklab(input: ConverterParameters<HSL>, precision?: number): LAB;\n\n/** Convert HSL to oklch */\ndeclare function hsl2oklch(input: ConverterParameters<HSL>, precision?: number): LCH;\n\n/** Convert HSL to RGB */\ndeclare function hsl2rgb(input: ConverterParameters<HSL>): RGB;\n\n/** Convert oklab to HEX */\ndeclare function oklab2hex(input: ConverterParameters<LAB>): HEX;\n\n/** Convert oklab to HSL */\ndeclare function oklab2hsl(input: ConverterParameters<LAB>): HSL;\n\n/** Convert oklab to oklch */\ndeclare function oklab2oklch(input: ConverterParameters<LAB>, precision?: number): LCH;\n\n/** Convert oklab to RGB */\ndeclare function oklab2rgb(input: ConverterParameters<LAB>, precision?: number): RGB;\n\n/** Convert oklch to HEX */\ndeclare function oklch2hex(input: ConverterParameters<LCH>): HEX;\n\n/** Convert oklch to HSL */\ndeclare function oklch2hsl(input: ConverterParameters<LCH>): HSL;\n\n/** Convert oklch to oklab */\ndeclare function oklch2oklab(input: ConverterParameters<LCH>, precision?: number): LAB;\n\n/** Convert oklch to RGB */\ndeclare function oklch2rgb(input: ConverterParameters<LCH>, precision?: number): RGB;\n\n/** Convert RGB to HEX */\ndeclare function rgb2hex(input: ConverterParameters<RGB>): HEX;\n\n/** Convert RGB to HSL */\ndeclare function rgb2hsl(input: ConverterParameters<RGB>): HSL;\n\n/** Convert RGB to oklab */\ndeclare function rgb2oklab(input: ConverterParameters<RGB>, precision?: number): LAB;\n\n/** Convert RGB to oklch */\ndeclare function rgb2oklch(input: ConverterParameters<RGB>, precision?: number): LCH;\n\n/**\n * Add an alpha value to a hex string\n */\ndeclare function addAlphaToHex(input: string, alpha: Alpha): string;\n/**\n * Convert an alpha value to a hex value.\n */\ndeclare function convertAlphaToHex(input: Alpha): string;\n/**\n * Extract the alpha value from a hex string\n */\ndeclare function extractAlphaFromHex(input: string): number;\ndeclare function hexadecimalToNumber(input: string): number;\n/**\n * Remove the alpha value from a hex string\n */\ndeclare function removeAlphaFromHex(input: string): string;\n\ndeclare function isHex(input: any): input is HEX;\n/**\n * Check if an object contains HSL values\n * The input must be an object with keys 'h', 's', and 'l'\n * with values between 0 and 360 for hue or 0 and 100 for the others.\n */\ndeclare function isHSL(input: unknown): input is HSL;\n/**\n * Check if an object contains LAB values\n * The input must be an object with keys 'l', 'a', and 'b' with values between -1 and 1.\n */\ndeclare function isLAB(input: unknown): input is LAB;\n/**\n * Check if an object contains LAB values\n * The input must be an object with keys 'l', 'c', and 'h' with values between 0 and 360.\n */\ndeclare function isLCH(input: unknown): input is LCH;\n/**\n * Check if an object contains RGB values.\n * The input must be an object with keys 'r', 'g', and 'b' with values between 0 and 255.\n */\ndeclare function isRGB(input: unknown): input is RGB;\n\nexport { type Alpha, type Amount, type Analysis, type ColorKeysTuple, type ColorModel, type ColorModelKey, type ColorModelKeys, type ColorReturn, type ColorTokens, type ColorTuple, type ColorType, type ColorizrOptions, type Colors, type ConverterParameters, type Degrees, type FormatCSSOptions, type HEX, type HSL, type LAB, type LCH, type PaletteOptions, type PlainObject, type RGB, type Scheme, type SchemeOptions, type Swatch, type SwatchOptions, type SwatchVariant, type TextColorOptions, addAlphaToHex, brightnessDifference, chroma, colorDifference, compare, contrast, convert, convertAlphaToHex, darken, Colorizr as default, desaturate, extractAlphaFromHex, extractColorParts, formatCSS, formatHex, getOkLCHMaxChroma, getP3Color, hex2hsl, hex2oklab, hex2oklch, hex2rgb, hexadecimalToNumber, hsl2hex, hsl2oklab, hsl2oklch, hsl2rgb, isHSL, isHex, isLAB, isLCH, isRGB, isValidColor, lighten, luminance, name, oklab2hex, oklab2hsl, oklab2oklch, oklab2rgb, oklch2hex, oklch2hsl, oklch2oklab, oklch2rgb, opacify, opacity, palette, parseCSS, random, removeAlphaFromHex, rgb2hex, rgb2hsl, rgb2oklab, rgb2oklch, rotate, saturate, scheme, swatch, textColor, transparentize };\n"],"x_google_ignoreList":[18],"mappings":"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"}