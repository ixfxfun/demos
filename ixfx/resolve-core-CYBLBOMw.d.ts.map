{"version":3,"file":"resolve-core-CYBLBOMw.d.ts","names":["ReactiveNonInitial","V","Reactive","ReactiveInitial","Unsubscriber","SignalKinds","Passed","BasicType","ReactiveNonInitial","ResolveToValueSync","V","Generator","IterableIterator","ResolveToValueAsync","AsyncGenerator","AsyncIterableIterator","Promise","ResolveToValue","resolve","resolveSync","resolveWithFallback","T","ResolveFallbackOptions","resolveWithFallbackSync"],"sources":["../../core/dist/src/types-reactive.d.ts","../../core/dist/src/resolve-core.d.ts"],"sourcesContent":["/**\n * A reactive that does not have an initial value\n */\nexport type ReactiveNonInitial<V> = Reactive<V> & {\n    last(): V | undefined;\n};\n/**\n * A reactive with an initial value\n */\nexport type ReactiveInitial<V> = Reactive<V> & {\n    last(): V;\n};\n/**\n * Unsubscribes from a reactive\n */\nexport type Unsubscriber = () => void;\n/**\n * Signals\n */\nexport type SignalKinds = `done` | `warn`;\n/**\n * A message\n */\nexport type Passed<V> = {\n    value: V | undefined;\n    signal?: SignalKinds;\n    context?: string;\n};\n/**\n * A Reactive\n */\nexport type Reactive<V> = {\n    /**\n     * Subscribes to a reactive. Receives\n     * data as well as signals. Use `onValue` if you\n     * just care about values.\n     *\n     * Return result unsubscribes.\n     *\n     * ```js\n     * const unsub = someReactive.on(msg => {\n     *    // Do something with msg.value\n     * });\n     *\n     * unsub(); // Unsubscribe\n     * ```\n     * @param handler\n     */\n    on(handler: (value: Passed<V>) => void): Unsubscriber;\n    /**\n     * Subscribes to a reactive's values.\n     * Returns a function that unsubscribes.\n     * @param handler\n     */\n    onValue(handler: (value: V) => void): Unsubscriber;\n    /**\n     * Disposes the reactive, providing a reason for debug tracing\n     * @param reason\n     */\n    dispose(reason: string): void;\n    /**\n     * Returns _true_ if Reactive is disposed\n     */\n    isDisposed(): boolean;\n    /**\n     * Optional 'set' to write a value.\n     * @param value\n     */\n    set?(value: V): void;\n};\n//# sourceMappingURL=types-reactive.d.ts.map","import type { BasicType } from \"@ixfx/core\";\nimport type { ReactiveNonInitial } from \"./types-reactive.js\";\n/**\n * Something that can resolve to a value\n */\nexport type ResolveToValueSync<V> = BasicType | ReactiveNonInitial<V> | Generator<V> | IterableIterator<V> | ((...args: unknown[]) => V);\nexport type ResolveToValueAsync<V> = AsyncGenerator<V> | AsyncIterableIterator<V> | Promise<V> | ((...args: unknown[]) => Promise<V>);\nexport type ResolveToValue<V> = ResolveToValueAsync<V> | ResolveToValueSync<V>;\n/**\n * Resolves the input to a concrete value.\n *\n * The input can be:\n * * primitive value (string, boolean, number, object)\n * * a/sync function\n * * a/sync generator/iterator\n * * ReactiveNonInitial\n *\n * Examples:\n * ```js\n * await resolve(10);       // 10\n * await resolve(() => 10); // 10\n * await resole(async () => {\n *  sleep(100);\n *  return 10;\n * });                // 10\n * ```\n *\n * If the input is a function, any arguments given to `resolve` are passed to it as a spread.\n *\n * Resolve is not recursive. If the input is an object, it will be returned, even\n * though its properties may be resolvable. Use {@link resolveFields} if you want to handle this case.\n * @param resolvable Input to resolve\n * @param args Additional arguments to pass to function-resolvables.\n * @returns\n */\nexport declare function resolve<V extends BasicType>(resolvable: ResolveToValue<V>, ...args: unknown[]): Promise<V>;\n/**\n * For the given input, attempts to 'resolve' it. See {@link resolve} for details and asynchronous version.\n * @param resolvable\n * @param args\n * @returns\n */\nexport declare function resolveSync<V extends BasicType>(resolvable: ResolveToValueSync<V>, ...args: unknown[]): V;\n/**\n * Resolves a value as per {@link resolve}, however f an error is thrown\n * or the resolution results in _undefined_\n * or NaN, the fallback value is returned instead.\n *\n * `null` is an allowed return value.\n *\n * ```js\n * // Function returns undefined 50% of the time or 0\n * const fn = () => {\n *  if (Math.random() >= 0.5) return; // undefined\n *  return 0;\n * }\n * const r = resolveWithFallback(fn, 1);\n * const value = r(); // Always 0 or 1\n * ```\n *\n * See also {@link resolveWithFallbackSync}\n * @param p Thing to resolve\n * @param options Fallback value if an error happens, undefined or NaN\n * @param args\n * @returns\n */\nexport declare function resolveWithFallback<T extends BasicType>(p: ResolveToValue<T>, options: ResolveFallbackOptions<T>, ...args: unknown[]): Promise<T>;\n/**\n * Resolves a 'resolvable', using a fallback value if it results to _undefined_ or _NaN_. _null_ is allowed.\n *\n * See also {@link resolveWithFallback} for the asynchronous version.\n *\n * Options:\n * * value: Fallback value\n * * overrideWithLast: If true, uses the previously-valid value as the replacement fallback (default: false)\n * @param p\n * @param options\n * @param args\n * @returns\n */\nexport declare function resolveWithFallbackSync<T extends BasicType>(p: ResolveToValueSync<T>, options: ResolveFallbackOptions<T>, ...args: unknown[]): T;\n/**\n * Options for {@link resolveWithFallbackSync}\n */\nexport type ResolveFallbackOptions<T> = {\n    /**\n     * Fallback value\n     */\n    value: T;\n    /**\n     * If _true_, will use the last valid value as a replacement fallback\n     * Default: false\n     */\n    overrideWithLast?: boolean;\n};\n//# sourceMappingURL=resolve-core.d.ts.map"],"mappings":"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"}