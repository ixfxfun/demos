{"version":3,"file":"numeric-arrays-BoDjja2z.js","names":["values: readonly (readonly number[])[]","data: readonly number[] | Float32Array"],"sources":["../../packages/numbers/src/numeric-arrays.ts"],"sourcesContent":["/**\n * Applies a function `fn` to the elements of an array, weighting them based on their relative position.\n *\n * ```js\n * // Six items\n * weight([1,1,1,1,1,1], Modulation.gaussian());\n *\n * // Yields:\n * // [0.02, 0.244, 0.85, 0.85, 0.244, 0.02]\n * ```\n *\n * `fn` is expected to map (0..1) => (0..1), such as an easing function. The input to the\n * `fn` is the relative position of an element. Thus the first element will be 0, the middle 0.5 and so on.\n * The output of `fn` is then multiplied by the original value.\n *\n * In the below example (which is also the default if `fn` is not specified), the relative position is\n * how values are weighted:\n *\n * ```js\n * weight([1,1,1,1,1,1], (relativePos) => relativePos);\n * // Yields:\n * // [0, 0.2, 0.4, 0.6, 0.8, 1]\n * ```\n *\n * Throws TypeError if `data` is not an array or for any element not a number.\n * @param data Array of numbers\n * @param fn Returns a weighting based on the given relative position. If unspecified, `(x) => x` is used.\n */\nexport const weight = (\n  data: number[] | readonly number[],\n  fn?: (relativePos: number) => number\n): number[] => {\n  if (!Array.isArray(data)) throw new TypeError(`Param 'data' is expected to be an array. Got type: ${ typeof data }`);\n  const weightingFunction = fn ?? ((x: number) => x);\n  return data.map(\n    (value: number, index: number) => {\n      if (typeof value !== `number`) throw new TypeError(`Param 'data' contains non-number at index: '${ index }'. Type: '${ typeof value }' value: '${ value }'`);\n      const relativePos = index / (data.length - 1);\n      const weightForPosition = weightingFunction(relativePos);\n      if (typeof weightForPosition !== `number`) throw new TypeError(`Weighting function returned type '${ typeof weightForPosition }' rather than number for input: '${ relativePos }'`);\n      const finalResult = value * weightForPosition;\n      //console.log(`finalResult: ${ finalResult.toFixed(2) } rel: ${ relativePos.toFixed(2) } weightForPosition: ${ weightForPosition.toFixed(2) } input: ${ value } index: ${ index }`);\n      return finalResult;\n    }\n  );\n};\n\n/**\n * Returns an array of all valid numbers from `data`\n *\n * @param data\n * @returns\n */\nexport const validNumbers = (data: readonly number[]) =>\n  data.filter((d) => typeof d === `number` && !Number.isNaN(d));\n\n/**\n * Returns the dot product of arbitrary-sized arrays. Assumed they are of the same length.\n * @param values\n * @returns\n */\nexport const dotProduct = (\n  values: readonly (readonly number[])[]\n): number => {\n  let r = 0;\n  const length = values[ 0 ].length;\n\n  for (let index = 0; index < length; index++) {\n    let t = 0;\n    for (const [ p, value ] of values.entries()) {\n      if (p === 0) t = value[ index ];\n      else {\n        t *= value[ index ];\n      }\n    }\n    r += t;\n  }\n  return r;\n};\n\n/**\n * Calculates the average of all numbers in an array.\n * Array items which aren't a valid number are ignored and do not factor into averaging.\n *\n * Use {@link minMaxAvg} if you want min, max and total as well.\n *\n * @example\n * ```js\n * import * as Numbers from 'https://unpkg.com/ixfx/dist/numbers.js';\n *\n * // Average of a list\n * const avg = Numbers.average([1, 1.4, 0.9, 0.1]);\n *\n * // Average of a variable\n * const data = [100,200];\n * Numbers.average(data);\n * ```\n *\n * @see {@link averageWeighted} To weight items based on position in array\n * @param data Data to average.\n * @returns Average of array\n */\nexport const average = (data: readonly number[]): number => {\n  // âœ” UNIT TESTED\n  if (data === undefined) throw new Error(`data parameter is undefined`);\n  const valid = validNumbers(data);\n  const total = valid.reduce((accumulator, v) => accumulator + v, 0);\n  return total / valid.length;\n};\n\n/**\n * Returns the minimum number out of `data`.\n * Undefined and non-numbers are silently ignored.\n *\n * ```js\n * import { Numbers } from 'https://unpkg.com/ixfx/dist/Numbers.js';\n * Numbers.min([10, 20, 0]); // Yields 0\n * ```\n * @param data\n * @returns Minimum number\n */\nexport const min = (data: readonly number[]): number =>\n  Math.min(...validNumbers(data));\n\n/**\n * Returns the index of the largest value.\n * ```js\n * import { Numbers } from 'https://unpkg.com/ixfx/dist/Numbers.js';\n * const v = [ 10, 40, 5 ];\n * Numbers.maxIndex(v); // Yields 1\n * ```\n * @param data Array of numbers\n * @returns Index of largest value\n */\nexport const maxIndex = (data: readonly number[]): number =>\n\n  data.reduce(\n    (bestIndex, value, index, array) =>\n      value > array[ bestIndex ] ? index : bestIndex,\n    0\n  );\n\n/**\n * Returns the index of the smallest value.\n *\n * ```js\n * import { Numbers } from 'https://unpkg.com/ixfx/dist/Numbers.js';\n * const v = [ 10, 40, 5 ];\n * Numbers.minIndex(v); // Yields 2\n * ```\n * @param data Array of numbers\n * @returns Index of smallest value\n */\nexport const minIndex = (...data: readonly number[]): number =>\n\n  data.reduce(\n    (bestIndex, value, index, array) =>\n      value < array[ bestIndex ] ? index : bestIndex,\n    0\n  );\n\n/**\n * Returns the maximum number out of `data`.\n * Undefined and non-numbers are silently ignored.\n *\n * ```js\n * import { Numbers } from 'https://unpkg.com/ixfx/dist/numbers.js';\n * Numbers.max(100, 200, 50); // 200\n * ```\n * @param data List of numbers\n * @returns Maximum number\n */\nexport const max = (data: readonly number[]): number =>\n  Math.max(...validNumbers(data));\n\n/**\n * Returns the total of `data`.\n * Undefined and non-numbers are silently ignored.\n *\n * ```js\n * import { Numbers } from 'https://unpkg.com/ixfx/dist/numbers.js';\n * Numbers.total([1, 2, 3]); // 6\n * ```\n * @param data Array of numbers\n * @returns Total\n */\nexport const total = (data: readonly number[]): number =>\n  data.reduce((previous, current) => {\n    if (typeof current !== `number`) return previous;\n    if (Number.isNaN(current)) return previous;\n    if (!Number.isFinite(current)) return previous;\n    return previous + current;\n  }, 0);\n\n/**\n * Returns the maximum out of `data` without pre-filtering for speed.\n *\n * For most uses, {@link max} should suffice.\n *\n * ```js\n * import { Numbers } from 'https://unpkg.com/ixfx/dist/numbers.js';\n * Numbers.maxFast([ 10, 0, 4 ]); // 10\n * ```\n * @param data\n * @returns Maximum\n */\nexport const maxFast = (data: readonly number[] | Float32Array): number => {\n  let m = Number.MIN_SAFE_INTEGER;\n  for (const datum of data) {\n    m = Math.max(m, datum);\n  }\n  return m;\n};\n\n/**\n * Returns the total of `data` without pre-filtering for speed.\n *\n * For most uses, {@link total} should suffice.\n *\n * ```js\n * import { Numbers } from 'https://unpkg.com/ixfx/dist/numbers.js';\n * Numbers.totalFast([ 10, 0, 4 ]); // 14\n * ```\n * @param data\n * @returns Maximum\n */\nexport const totalFast = (data: readonly number[] | Float32Array): number => {\n  let m = 0;\n  for (const datum of data) {\n    m += datum;\n  }\n  return m;\n};\n\n/**\n * Returns the maximum out of `data` without pre-filtering for speed.\n *\n * For most uses, {@link max} should suffice.\n *\n * ```js\n * import { Numbers } from 'https://unpkg.com/ixfx/dist/numbers.js';\n * Numbers.minFast([ 10, 0, 100 ]); // 0\n * ```\n * @param data\n * @returns Maximum\n */\nexport const minFast = (data: readonly number[] | Float32Array): number => {\n  let m = Number.MIN_SAFE_INTEGER;\n  for (const datum of data) {\n    m = Math.min(m, datum);\n  }\n  return m;\n};\n"],"mappings":";;;;;;AA6DA,MAAa,aAAa,CACxBA,WACW;CACX,IAAI,IAAI;CACR,MAAM,SAAS,OAAQ,GAAI;AAE3B,MAAK,IAAI,QAAQ,GAAG,QAAQ,QAAQ,SAAS;EAC3C,IAAI,IAAI;AACR,OAAK,MAAM,CAAE,GAAG,MAAO,IAAI,OAAO,SAAS,CACzC,KAAI,MAAM,EAAG,KAAI,MAAO;MAEtB,MAAK,MAAO;AAGhB,OAAK;CACN;AACD,QAAO;AACR;;;;;;;;;;;;AA2ED,MAAa,WAAW,CAAC,GAAG,SAE1B,KAAK,OACH,CAAC,WAAW,OAAO,OAAO,UACxB,QAAQ,MAAO,aAAc,QAAQ,WACvC,EACD;;;;;;;;;;;;;AA+CH,MAAa,UAAU,CAACC,SAAmD;CACzE,IAAI,IAAI,OAAO;AACf,MAAK,MAAM,SAAS,KAClB,KAAI,KAAK,IAAI,GAAG,MAAM;AAExB,QAAO;AACR;;;;;;;;;;;;;AAcD,MAAa,YAAY,CAACA,SAAmD;CAC3E,IAAI,IAAI;AACR,MAAK,MAAM,SAAS,KAClB,MAAK;AAEP,QAAO;AACR;;;;;;;;;;;;;AAcD,MAAa,UAAU,CAACA,SAAmD;CACzE,IAAI,IAAI,OAAO;AACf,MAAK,MAAM,SAAS,KAClB,KAAI,KAAK,IAAI,GAAG,MAAM;AAExB,QAAO;AACR"}