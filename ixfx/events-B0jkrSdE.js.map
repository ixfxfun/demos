{"version":3,"file":"events-B0jkrSdE.js","names":["#store","#disposed","#listeners"],"sources":["../../packages/events/dist/src/race.js","../../packages/events/dist/src/map-of.js","../../packages/events/dist/src/simple-event-emitter.js","../src/events.ts"],"sourcesContent":["/**\n * Subscribes to events on `target`, returning the event data\n * from the first event that fires.\n *\n * By default waits a maximum of 1 minute.\n *\n * Automatically unsubscribes on success or failure (ie. timeout)\n *\n * ```js\n * // Event will be data from either event, whichever fires first\n * // Exception is thrown if neither fires within 1 second\n * const event = await eventRace(document.body, [`pointermove`, `pointerdown`], { timeout: 1000 });\n * ```\n * @param target Event source\n * @param eventNames Event name(s)\n * @param options Options\n * @returns\n */\nexport const eventRace = (target, eventNames, options = {}) => {\n    const intervalMs = options.timeoutMs ?? 60_1000; //intervalToMs(options.timeout, 60 * 1000);\n    const signal = options.signal;\n    let triggered = false;\n    let disposed = false;\n    let timeout;\n    const promise = new Promise((resolve, reject) => {\n        const onEvent = (event) => {\n            if (`type` in event) {\n                if (eventNames.includes(event.type)) {\n                    triggered = true;\n                    resolve(event);\n                    dispose();\n                }\n                else {\n                    console.warn(`eventRace: Got event '${event.type}' that is not in race list`);\n                }\n            }\n            else {\n                console.warn(`eventRace: Event data does not have expected 'type' field`);\n                console.log(event);\n            }\n        };\n        for (const name of eventNames) {\n            target.addEventListener(name, onEvent);\n        }\n        const dispose = () => {\n            if (disposed)\n                return;\n            if (timeout !== undefined)\n                clearTimeout(timeout);\n            timeout = undefined;\n            disposed = true;\n            for (const name of eventNames) {\n                target.removeEventListener(name, onEvent);\n            }\n        };\n        timeout = setTimeout(() => {\n            if (triggered || disposed)\n                return;\n            dispose();\n            reject(new Error(`eventRace: Events not fired within interval. Events: ${JSON.stringify(eventNames)} Interval: ${intervalMs}`));\n        }, intervalMs);\n        signal?.addEventListener(`abort`, () => {\n            if (triggered || disposed)\n                return;\n            dispose();\n            reject(new Error(`Abort signal received ${signal.reason}`));\n        });\n    });\n    return promise;\n};\n","export class MapOfSimple {\n    #store = new Map();\n    /**\n     * Gets a copy of the underlying array storing values at `key`, or an empty array if\n     * key does not exist\n     * @param key\n     * @returns\n     */\n    get(key) {\n        const arr = this.#store.get(key);\n        if (!arr)\n            return [];\n        return [...arr];\n    }\n    /**\n     * Returns the number of values stored under `key`\n     * @param key\n     * @returns\n     */\n    size(key) {\n        const arr = this.#store.get(key);\n        if (!arr)\n            return 0;\n        return arr.length;\n    }\n    /**\n     * Iterate over all values contained under `key`\n     * @param key\n     * @returns\n     */\n    *iterateKey(key) {\n        const arr = this.#store.get(key);\n        if (!arr)\n            return;\n        yield* arr.values();\n    }\n    /**\n     * Iterate all values, regardless of key\n     */\n    *iterateValues() {\n        for (const key of this.#store.keys()) {\n            yield* this.iterateKey(key);\n        }\n    }\n    /**\n     * Iterate all keys\n     */\n    *iterateKeys() {\n        yield* this.#store.keys();\n    }\n    addKeyedValues(key, ...values) {\n        let arr = this.#store.get(key);\n        if (!arr) {\n            arr = [];\n            this.#store.set(key, arr);\n        }\n        arr.push(...values);\n    }\n    deleteKeyValue(key, value) {\n        const arr = this.#store.get(key);\n        if (!arr)\n            return false;\n        const arrCopy = arr.filter(v => v !== value);\n        if (arrCopy.length === arr.length)\n            return false;\n        this.#store.set(key, arrCopy);\n        return true;\n    }\n    clear() {\n        this.#store.clear();\n    }\n}\n","import { MapOfSimple } from \"./map-of.js\";\nexport class SimpleEventEmitter {\n    #listeners = new MapOfSimple();\n    #disposed = false;\n    dispose() {\n        if (this.#disposed)\n            return;\n        this.clearEventListeners();\n    }\n    get isDisposed() {\n        return this.#disposed;\n    }\n    /**\n     * Fire event\n     * @param type Type of event\n     * @param args Arguments for event\n     * @returns\n     */\n    fireEvent(type, args) {\n        if (this.#disposed)\n            throw new Error(`Disposed`);\n        //console.log(`Firing ${ type as string }. Listeners: ${ this.#listeners.size(type as string) }`);\n        for (const l of this.#listeners.iterateKey(type)) {\n            l(args, this);\n        }\n    }\n    /**\n     * Adds event listener.\n     *\n     * @throws Error if emitter is disposed\n     * @typeParam K - Events\n     * @param name Event name\n     * @param listener Event handler\n     */\n    addEventListener(name, listener) {\n        if (this.#disposed)\n            throw new Error(`Disposed`);\n        this.#listeners.addKeyedValues(name, listener);\n    }\n    /**\n     * Remove event listener\n     *\n     * @param listener\n     */\n    removeEventListener(type, listener) {\n        if (this.#disposed)\n            return;\n        // listener: Listener<Events>): void {\n        this.#listeners.deleteKeyValue(type, listener);\n    }\n    /**\n     * Clear all event listeners\n     * @private\n     */\n    clearEventListeners() {\n        if (this.#disposed)\n            return;\n        this.#listeners.clear();\n    }\n}\n","export * from '@ixfx/events';"],"mappings":"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"}