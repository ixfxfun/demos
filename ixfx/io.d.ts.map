{"version":3,"file":"io.d.ts","names":["IsEqual","QueueDiscardPolicy","QueueOpts","V","IQueueMutable","IQueueMutableWithEvents","QueueMutableEvents","QueueOpts","IsEqual","SimpleEventEmitter","QueueMutable","V","mutable","LogOption","DriverOptions","Transitions","V","DriverStatesHandler","DriverExpressionOrResult","T","DriverResult","MachineState","StateNames","DriverRunner","Promise","TransitionResult","TransitionCondition","StateTargetStrict","StateTarget","TransitionsStrict","Record","Readonly","Machine","StateEvent","StateHandler","State","SimpleEventEmitter","StateNames","Transitions","StateChangeEvent","V","StopEvent","StateMachineEventMap","StateMachineWithEventsOptions","StateMachineWithEvents","Capturer","HTMLCanvasElement","ManualCapturer","ImageData","CaptureOpts","ManualCaptureOpts","CanvasRenderingContext2D","FramesOpts","frames","HTMLVideoElement","AsyncIterable","capture","manualCapture"],"sources":["../../collections/dist/src/queue/queue-types.d.ts","../../collections/dist/src/queue/queue-mutable.d.ts","../../flow/dist/src/state-machine/types.d.ts","../../flow/dist/src/state-machine/with-events.d.ts","../../io/src/codec.ts","../../io/src/string-receive-buffer.ts","../../io/src/string-write-buffer.ts","../../io/src/generic-state-transitions.ts","../../io/src/types.ts","../../io/src/ble-device.ts","../../io/src/nordic-ble-device.ts","../../io/src/audio/visualiser.ts","../../io/src/audio/analyser.ts","../../io/src/audio/types.ts","../../io/src/audio/from-audio-element.ts","../../io/src/audio/from-oscillator.ts","../../io/src/audio/index.ts","../../io/src/espruino-ble-device.ts","../../io/src/json-device.ts","../../io/src/serial.ts","../../io/src/espruino-serial-device.ts","../../io/src/espruino.ts","../../io/src/camera.ts","../../io/src/video-file.ts","../../visual/dist/src/video.d.ts","../../io/src/frame-processor.ts","../../io/src/reconnecting-web-socket.ts"],"sourcesContent":["import type { IsEqual } from \"@ixfx/core\";\nexport type QueueDiscardPolicy = `older` | `newer` | `additions`;\n/**\n * Queue options.\n *\n * @example Cap size to 5 items, throwing away newest items already in queue.\n * ```js\n * const q = Queues.mutable({capacity: 5, discardPolicy: `newer`});\n * ```\n */\nexport type QueueOpts<V> = {\n    readonly eq?: IsEqual<V>;\n    /**\n     * @private\n     */\n    readonly debug?: boolean;\n    /**\n     * Capcity limit\n     */\n    readonly capacity?: number;\n    /**\n     * Default is `additions`, meaning new items are discarded.\n     *\n     * `older`: Removes items front of the queue (ie older items are discarded)\n     *\n     * `newer`: Remove from rear of queue to make space for new items (ie newer items are discarded)\n     *\n     * `additions`: Only adds new items that there are room for (ie. brand new items are discarded)\n     *\n     */\n    readonly discardPolicy?: QueueDiscardPolicy;\n};\n//# sourceMappingURL=queue-types.d.ts.map","import { type IQueueMutable, type IQueueMutableWithEvents, type QueueMutableEvents } from './iqueue-mutable.js';\nimport { type QueueOpts } from './queue-types.js';\nimport { type IsEqual } from '@ixfx/core';\nimport { SimpleEventEmitter } from '@ixfx/events';\n/**\n * Mutable queue that fires events when manipulated.\n *\n * Queues are useful if you want to treat 'older' or 'newer'\n * items differently. _Enqueing_ adds items at the back of the queue, while\n * _dequeing_ removes items from the front (ie. the oldest).\n *\n * ```js\n * const q = Queues.mutable();       // Create\n * q.enqueue(`a`, `b`);     // Add two strings\n * const front = q.dequeue();  // `a` is at the front of queue (oldest)\n * ```\n *\n * @example Cap size to 5 items, throwing away newest items already in queue.\n * ```js\n * const q = Queues.mutable({capacity: 5, discardPolicy: `newer`});\n * ```\n *\n * Events can be used to monitor data flows.\n * * 'enqueue': fires when item(s) are added\n * * 'dequeue': fires when an item is dequeued from front\n * * 'removed': fires when an item is dequeued, queue is cleared or .removeWhere is used to trim queue\n *\n * Each of the event handlers return the state of the queue as the 'finalData'\n * field.\n *\n * ```js\n * q.addEventListener(`enqueue`, e => {\n *  // e.added, e.finalData\n * });\n * q.addEventListener(`removed`, e => {\n *  // e.removed, e.finalData\n * });\n * q.addEventListener(`dequeue`, e=> {\n *  // e.removed, e.finalData\n * })\n * ```\n * @typeParam V - Data type of items\n */\nexport declare class QueueMutable<V> extends SimpleEventEmitter<QueueMutableEvents<V>> implements IQueueMutable<V> {\n    readonly options: QueueOpts<V>;\n    data: readonly V[];\n    eq: IsEqual<V>;\n    constructor(opts?: QueueOpts<V>, data?: readonly V[]);\n    clear(): void;\n    /**\n     * Called when all data is cleared\n     */\n    protected onClear(): void;\n    at(index: number): V;\n    enqueue(...toAdd: readonly V[]): number;\n    protected onEnqueue(result: readonly V[], attemptedToAdd: readonly V[]): void;\n    dequeue(): V | undefined;\n    protected onRemoved(removed: readonly V[], finalData: readonly V[]): void;\n    /**\n     * Removes values that match `predicate`.\n     * @param predicate\n     * @returns Returns number of items removed.\n     */\n    removeWhere(predicate: (item: V) => boolean): number;\n    /**\n   * Return a copy of the array\n   * @returns\n   */\n    toArray(): V[];\n    get isEmpty(): boolean;\n    get isFull(): boolean;\n    get length(): number;\n    get peek(): V | undefined;\n}\n/**\n * Creates a new QueueMutable\n * @param options\n * @param startingItems\n * @returns\n */\nexport declare function mutable<V>(options?: QueueOpts<V>, ...startingItems: readonly V[]): IQueueMutableWithEvents<V>;\n//# sourceMappingURL=queue-mutable.d.ts.map","import type { LogOption } from \"@ixfx/debug\";\nexport type DriverOptions<V extends Transitions> = {\n    readonly handlers: readonly DriverStatesHandler<V>[];\n    readonly debug?: LogOption;\n    /**\n     * If _true_ execution of handlers is shuffled each time\n     */\n    readonly shuffleHandlers?: boolean;\n};\nexport type DriverExpressionOrResult<T extends Transitions> = DriverResult<T> | ((machine?: MachineState<T>) => DriverResult<T> | undefined | void);\nexport type DriverStatesHandler<V extends Transitions> = {\n    readonly if: readonly StateNames<V>[] | StateNames<V>[] | StateNames<V>;\n    readonly then: readonly DriverExpressionOrResult<V>[] | DriverExpressionOrResult<V>;\n    /**\n     * Logic for choosing which result, if there are multiple expressions.\n     * By default 'highest' (for highest ranked result)\n     */\n    readonly resultChoice?: `first` | `highest` | `lowest` | `random`;\n};\nexport type DriverRunner<V extends Transitions> = {\n    readonly run: () => Promise<MachineState<V> | undefined>;\n    readonly getValue: () => StateNames<V>;\n    readonly reset: () => void;\n    readonly to: (state: StateNames<V>) => MachineState<V>;\n};\nexport type DriverResult<V extends Transitions> = {\n    /**\n     * Score of this result. This is used when a state\n     * has multiple handlers returning results separately.\n     * If not defined, 0 is used.\n     */\n    readonly score?: number;\n    /**\n     * If specified,the state to transition to. Use\n     * _true_ to attempt to automatically advance machine.\n     * This field is 2nd priority.\n     */\n    readonly next?: StateNames<V> | boolean;\n    /**\n     * If true, resets the machine.\n     * This flag is 1st priority, taking precedence over the `next` field.\n     */\n    readonly reset?: boolean;\n};\n/**\n * Transition result\n * * 'Ok': transition valid\n * * 'FromNotFound': the from state is missing from machine definition\n * * 'ToNotFound': the 'to' state is missing from machine definition\n * * 'Invalid': not allowed to transition to target state from the current state\n * * 'Terminal':  not allowed to transition because from state is the final state\n */\nexport type TransitionResult = `Ok` | `FromNotFound` | `ToNotFound` | `Invalid` | `Terminal`;\nexport type TransitionCondition<V extends Transitions> = {\n    readonly hasPriorState: readonly StateNames<V>[];\n    readonly isInState: StateNames<V>;\n};\nexport type StateTargetStrict<V extends Transitions> = {\n    readonly state: StateNames<V> | null;\n    readonly preconditions?: readonly TransitionCondition<V>[];\n};\n/**\n * Possible state transitions, or _null_ if final state.\n */\nexport type StateTarget<V extends Transitions> = string | string[] | readonly string[] | null | StateTargetStrict<V>;\n/**\n * Maps state to allowable next states\n */\nexport type Transitions = {\n    readonly [key: string]: StateTarget<Transitions>;\n};\nexport type TransitionsStrict = Readonly<Record<string, readonly StateTargetStrict<Transitions>[]>>;\n/**\n * List of possible states\n */\nexport type StateNames<V extends Transitions> = keyof V & string;\nexport type Machine<V extends Transitions> = {\n    /**\n     * Allowable state transitions\n     */\n    readonly states: V;\n};\n/**\n * Encapsulation of a 'running' machine description and state.\n *\n * See:\n * - {@link cloneState}\n */\nexport type MachineState<V extends Transitions> = {\n    /**\n     * Current state\n     */\n    readonly value: StateNames<V>;\n    /**\n     * List of unique states visited. Won't contain the current\n     * state unless it has already been visited.\n     */\n    readonly visited: readonly StateNames<V>[];\n    /**\n     * Definition of state machine\n     */\n    readonly machine: Readonly<Record<StateNames<V>, readonly StateTargetStrict<V>[]>>;\n};\nexport type StateEvent = (args: unknown, sender: any) => void;\nexport type StateHandler = string | StateEvent | null;\nexport type State = Readonly<Record<string, StateHandler>>;\n//# sourceMappingURL=types.d.ts.map","import { SimpleEventEmitter } from '@ixfx/events';\nimport type { StateNames, Transitions } from './types.js';\nexport type StateChangeEvent<V extends Transitions> = {\n    readonly newState: StateNames<V>;\n    readonly priorState: StateNames<V>;\n};\nexport type StopEvent<V extends Transitions> = {\n    readonly state: StateNames<V>;\n};\nexport type StateMachineEventMap<V extends Transitions> = {\n    readonly change: StateChangeEvent<V>;\n    readonly stop: StopEvent<V>;\n};\nexport type StateMachineWithEventsOptions<V extends Transitions> = {\n    readonly debug?: boolean;\n    readonly initial?: StateNames<V>;\n};\n/**\n * A state machine that fires events when state changes.\n *\n * ```js\n * const transitions = StateMachine.fromList(`a`, `b`, `c`);\n * const m = new StateMachineWithEvents(transitions);\n * m.addEventListener(`change`, event => {\n *  console.log(`${event.priorState} -> ${event.newState}`);\n * });\n * m.addEventListener(`stop`, event => {\n *  console.log(`State machine has reached final state`);\n * });\n * ```\n */\nexport declare class StateMachineWithEvents<V extends Transitions> extends SimpleEventEmitter<StateMachineEventMap<V>> {\n    #private;\n    /**\n     * Create a state machine with initial state, description and options\n     * @param m Machine description\n     * @param opts Options for machine (defaults to `{debug:false}`)\n     */\n    constructor(m: V, opts?: StateMachineWithEventsOptions<V>);\n    /**\n     * Return a list of possible states from current state.\n     *\n     * If list is empty, no states are possible. Otherwise lists\n     * possible states, including 'null' for terminal\n     */\n    get statesPossible(): readonly (StateNames<V> | null)[];\n    /**\n     * Return a list of all defined states\n     */\n    get statesDefined(): readonly StateNames<V>[];\n    /**\n     * Moves to the next state if possible. If multiple states are possible, it will use the first.\n     * If machine is finalised, no error is thrown and null is returned.\n     *\n     * @returns {(string|null)} Returns new state, or null if machine is finalised\n     */\n    next(): string | null;\n    /**\n     * Returns _true_ if state machine is in its final state\n     *\n     * @returns\n     */\n    get isDone(): boolean;\n    /**\n     * Resets machine to initial state\n     */\n    reset(): void;\n    /**\n     * Throws if it's not valid to transition to `newState`\n     * @param newState\n     * @returns\n     */\n    validateTransition(newState: StateNames<V>): void;\n    /**\n     * Returns _true_ if `newState` is valid transition from current state.\n     * Use {@link validateTransition} if you want an explanation for the _false_ results.\n     * @param newState\n     * @returns\n     */\n    isValid(newState: StateNames<V>): boolean;\n    /**\n     * Gets or sets state. Throws an error if an invalid transition is attempted.\n     * Use `isValid()` to check validity without changing.\n     *\n     * If `newState` is the same as current state, the request is ignored silently.\n     */\n    set state(newState: StateNames<V>);\n    get state(): string;\n    /**\n     * Returns timestamp when state was last changed.\n     * See also `elapsed`\n     */\n    get changedAt(): number;\n    /**\n     * Returns milliseconds elapsed since last state change.\n     * See also `changedAt`\n     */\n    get elapsed(): number;\n}\n//# sourceMappingURL=with-events.d.ts.map","export type Capturer = {\n    start(): void;\n    cancel(): void;\n    readonly canvasEl: HTMLCanvasElement;\n};\nexport type ManualCapturer = {\n    capture(): ImageData;\n    readonly canvasEl: HTMLCanvasElement;\n    dispose(): void;\n};\nexport type CaptureOpts = {\n    /**\n     * Delay between reading frames.\n     * Default: 0, reading as fast as possible\n     */\n    readonly maxIntervalMs?: number;\n    /**\n     * Whether to show the created capture canvas.\n     * Default: false\n     */\n    readonly showCanvas?: boolean;\n    readonly workerScript?: string;\n    readonly onFrame?: (pixels: ImageData) => void;\n};\nexport type ManualCaptureOpts = {\n    /**\n     * If true, the intermediate canvas is shown\n     * The intermediate canvas is where captures from the source are put in order\n     * to get the ImageData\n     */\n    readonly showCanvas?: boolean;\n    /**\n     * If specified, this function will be called after ImageData is captured\n     * from the intermediate canvs. This allows for drawing on top of the\n     * captured image.\n     */\n    readonly postCaptureDraw?: (ctx: CanvasRenderingContext2D, width: number, height: number) => void;\n    /**\n     * If specified, this is the canvas captured to\n     */\n    readonly canvasEl?: HTMLCanvasElement;\n};\n/**\n * Options for frames generator\n */\nexport type FramesOpts = {\n    /**\n     * Max frame rate (millis per frame), or 0 for animation speed\n     */\n    readonly maxIntervalMs?: number;\n    /**\n     * False by default, created canvas will be hidden\n     */\n    readonly showCanvas?: boolean;\n    /**\n     * If provided, this canvas will be used as the buffer rather than creating one.\n     */\n    readonly canvasEl?: HTMLCanvasElement;\n};\n/**\n * Generator that yields frames from a video element as [ImageData](https://developer.mozilla.org/en-US/docs/Web/API/ImageData).\n *\n * ```js\n * import { Video } from '@ixfx/visual.js'\n *\n * const ctx = canvasEl.getContext(`2d`);\n * for await (const frame of Video.frames(videoEl)) {\n *   // TODO: Some processing of pixels\n *\n *   // Draw image on to the visible canvas\n *   ctx.putImageData(frame, 0, 0);\n * }\n * ```\n *\n * Under the hood it creates a hidden canvas where frames are drawn to. This is necessary\n * to read back pixel data. An existing canvas can be used if it is passed in as an option.\n *\n * Options:\n * * `canvasEl`: CANVAS element to use as a buffer (optional)\n * * `maxIntervalMs`: Max frame rate (0 by default, ie runs as fast as possible)\n * * `showCanvas`: Whether buffer canvas will be shown (false by default)\n * @param sourceVideoEl\n * @param opts\n */\nexport declare function frames(sourceVideoEl: HTMLVideoElement, opts?: FramesOpts): AsyncIterable<ImageData>;\n/**\n * Captures frames from a video element. It can send pixel data to a function or post to a worker script.\n *\n * @example Using a function\n * ```js\n * // Capture from a VIDEO element, handling frame data\n * // imageData is ImageData type: https://developer.mozilla.org/en-US/docs/Web/API/ImageData\n * Video.capture(sourceVideoEl, {\n *  onFrame(imageData => {\n *    // Do something with pixels...\n *  });\n * });\n * ```\n *\n * @example Using a worker\n * ```js\n * Video.capture(sourceVideoEl, {\n *  workerScript: `./frameProcessor.js`\n * });\n * ```\n *\n * In frameProcessor.js:\n * ```\n * const process = (frame) => {\n *  // ...process frame\n *\n *  // Send image back?\n *  self.postMessage({frame});\n * };\n *\n * self.addEventListener(`message`, evt => {\n *   const {pixels, width, height} = evt.data;\n *   const frame = new ImageData(new Uint8ClampedArray(pixels),\n *     width, height);\n *\n *   // Process it\n *   process(frame);\n * });\n * ```\n *\n * Options:\n * * `canvasEl`: CANVAS element to use as a buffer (optional)\n * * `maxIntervalMs`: Max frame rate (0 by default, ie runs as fast as possible)\n * * `showCanvas`: Whether buffer canvas will be shown (false by default)\n * * `workerScript`: If this specified, this URL will be loaded as a Worker, and frame data will be automatically posted to it\n *\n * Implementation: frames are captured using a animation-speed loop to a hidden canvas. From there\n * the pixel data is extracted and sent to either destination. In future the intermediate drawing to a\n * canvas could be skipped if it becomes possible to get pixel data from an ImageBitmap.\n * @param sourceVideoEl Source VIDEO element\n * @param opts\n * @returns\n */\nexport declare const capture: (sourceVideoEl: HTMLVideoElement, opts?: CaptureOpts) => Capturer;\nexport declare const manualCapture: (sourceVideoEl: HTMLVideoElement, opts?: ManualCaptureOpts) => ManualCapturer;\n//# sourceMappingURL=video.d.ts.map"],"mappings":"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"}