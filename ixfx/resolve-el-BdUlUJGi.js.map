{"version":3,"file":"resolve-el-BdUlUJGi.js","names":[],"sources":["../../dom/dist/src/resolve-el.js"],"sourcesContent":["import { resultToError } from \"@ixfx/guards\";\n/**\n * Resolves either a string or HTML element to an element.\n * Useful when an argument is either an HTML element or query.\n *\n * ```js\n * resolveEl(`#someId`);\n * resolveEl(someElement);\n * ```\n * @param domQueryOrEl\n * @returns\n */\nexport const resolveEl = (domQueryOrEl) => {\n    const r = resolveElementTry(domQueryOrEl);\n    if (r.success)\n        return r.value;\n    throw resultToError(r);\n};\n/**\n * Tries to resolve a query, returning a `Result`.\n *\n * ```js\n * const { success, value, error } = resolveElementTry(`#some-element`);\n * if (success) {\n *  // Do something with value\n * } else {\n *  console.error(error);\n * }\n * ```\n * @param domQueryOrEl\n * @returns\n */\nexport const resolveElementTry = (domQueryOrEl) => {\n    if (typeof domQueryOrEl === `string`) {\n        const d = document.querySelector(domQueryOrEl);\n        if (d === null) {\n            const error = domQueryOrEl.startsWith(`#`) ? `Query '${domQueryOrEl}' did not match anything. Try '#id', 'div', or '.class'`\n                : `Query '${domQueryOrEl}' did not match anything. Did you mean '#${domQueryOrEl}?`;\n            return { success: false, error };\n        }\n        domQueryOrEl = d;\n    }\n    else if (domQueryOrEl === null) {\n        return { success: false, error: `Param 'domQueryOrEl' is null` };\n    }\n    else if (domQueryOrEl === undefined) {\n        return { success: false, error: `Param 'domQueryOrEl' is undefined` };\n    }\n    const el = domQueryOrEl;\n    return { success: true, value: el };\n};\n/**\n * Returns a set of elements.\n *\n * Returns an empty list if `selectors` is undefined or null.\n *\n * @param selectors\n * @returns\n */\nexport const resolveEls = (selectors) => {\n    if (selectors === undefined)\n        return [];\n    if (selectors === null)\n        return [];\n    if (Array.isArray(selectors))\n        return selectors;\n    if (typeof selectors === `string`) {\n        const elements = [...document.querySelectorAll(selectors)];\n        return elements;\n    }\n    return [selectors];\n};\n"],"mappings":";;;;;;;;;;;;;;AAYA,MAAa,YAAY,CAAC,iBAAiB;CACvC,MAAM,IAAI,kBAAkB,aAAa;AACzC,KAAI,EAAE,QACF,QAAO,EAAE;AACb,OAAM,cAAc,EAAE;AACzB;;;;;;;;;;;;;;;AAeD,MAAa,oBAAoB,CAAC,iBAAiB;AAC/C,KAAI,OAAO,iBAAiB,CAAC,MAAM,CAAC,EAAE;EAClC,MAAM,IAAI,SAAS,cAAc,aAAa;AAC9C,MAAI,MAAM,MAAM;GACZ,MAAM,QAAQ,aAAa,WAAW,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,OAAO,EAAE,aAAa,uDAAuD,CAAC,GACtH,CAAC,OAAO,EAAE,aAAa,yCAAyC,EAAE,aAAa,CAAC,CAAC;AACvF,UAAO;IAAE,SAAS;IAAO;GAAO;EACnC;EACD,eAAe;CAClB,WACQ,iBAAiB,KACtB,QAAO;EAAE,SAAS;EAAO,OAAO,CAAC,4BAA4B,CAAC;CAAE;UAE3D,iBAAiB,OACtB,QAAO;EAAE,SAAS;EAAO,OAAO,CAAC,iCAAiC,CAAC;CAAE;CAEzE,MAAM,KAAK;AACX,QAAO;EAAE,SAAS;EAAM,OAAO;CAAI;AACtC;;;;;;;;;AASD,MAAa,aAAa,CAAC,cAAc;AACrC,KAAI,cAAc,OACd,QAAO,CAAE;AACb,KAAI,cAAc,KACd,QAAO,CAAE;AACb,KAAI,MAAM,QAAQ,UAAU,CACxB,QAAO;AACX,KAAI,OAAO,cAAc,CAAC,MAAM,CAAC,EAAE;EAC/B,MAAM,WAAW,CAAC,GAAG,SAAS,iBAAiB,UAAU,AAAC;AAC1D,SAAO;CACV;AACD,QAAO,CAAC,SAAU;AACrB"}