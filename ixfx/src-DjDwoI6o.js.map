{"version":3,"file":"src-DjDwoI6o.js","names":["makeHelper","line","circle","applyOpts","arc","ellipse","path","pos","text","rect","__export","clamp","round","convert","limit","withOpacity","changeLightness","fromHexString","fromLibrary","fromCss","rgbToLibraryHsl","toScalar","toAbsolute","abs","absolute","guard","generateScalar","lightness","opacity","interpolator","vf","guard","opacity","fromLibrary","scalar","fromHexString","fromCss","rgbTo8bit","lch","Colorizr","toScalar","toCssString","chroma","lightness","withOpacity","interpolator","fromCss","withOpacity","scalar","hslToLibraryRgb","toCssString","guard","opacity","Colorizr","interpolator","grid","#scaler","scaler","#scalerSize","#init","#logicalSize","#disposed","#resizer","#ctx","#drawHelper","#getContext","#handleEvents","#onResizeDone","#viewport","grid","lightness","hslScalar","opacity","c","Colorizr","guard","opacity","circle","line","text","center","ColourStringFirst","text","line","circle","center","el","#elementBase","#store","#aliases","fromCss","#lastFallback","capture","c","ctx","width","height","opacity","#data","#meta","#canvasEl","#sizeBasis","#pixelScaling","#sizeScaler","#createSizeScaler","#logicalSize","#ctx","#regions","rect","#add","#regionCompute","#r","text","c","circle","#data","#canvasRegion","#lastDataChange","#visualClear","#rangeMode","#valueStyle","#connectStyle","#visualPadding","#axisStyle","#textStyle","#grid","#currentRange","#createRange","#rangeManual","#useGrid","#drawAxes","#drawSeries","line","#valueLineToCanvasSpace","#drawLineCanvasSpace","#drawGridline","#drawWhisker","#drawXAxisValues","#drawYAxisValues","#drawConnected","#drawDot","dot","ColourToString"],"sources":["../packages/visual/dist/src/drawing.js","../node_modules/.pnpm/colorizr@3.0.7/node_modules/colorizr/dist/index.mjs","../packages/visual/dist/src/colour/guards.js","../packages/visual/dist/src/colour/utility.js","../packages/visual/dist/src/colour/hsl.js","../packages/visual/dist/src/colour/oklch.js","../packages/visual/dist/src/colour/css-colours.js","../packages/visual/dist/src/colour/srgb.js","../packages/visual/dist/src/image-data-grid.js","../packages/visual/dist/src/canvas-helper.js","../packages/visual/dist/src/svg/apply.js","../packages/visual/dist/src/svg/bounds.js","../packages/visual/dist/src/svg/create.js","../packages/visual/dist/src/colour/generate.js","../packages/visual/dist/src/colour/math.js","../packages/visual/dist/src/colour/interpolate.js","../packages/visual/dist/src/colour/index.js","../packages/visual/dist/src/colour/conversion.js","../packages/visual/dist/src/svg/stroke.js","../packages/visual/dist/src/svg/markers.js","../packages/visual/dist/src/svg/path.js","../packages/visual/dist/src/svg/elements.js","../packages/visual/dist/src/svg/geometry.js","../packages/visual/dist/src/svg/remove.js","../packages/visual/dist/src/svg/helper.js","../packages/visual/dist/src/svg/index.js","../packages/visual/dist/src/pointer-visualise.js","../packages/visual/dist/src/named-colour-palette.js","../packages/visual/dist/src/video.js","../packages/visual/dist/src/plot/bipolar-view.js","../packages/visual/dist/src/plot/cartesian.js","../packages/visual/dist/src/plot/DataSet.js","../packages/visual/dist/src/pi-pi.js","../packages/visual/dist/src/canvas-region.js","../packages/visual/dist/src/plot/cartesian-canvas-plot.js","../packages/visual/dist/src/plot/index.js","../packages/visual/dist/src/index.js"],"sourcesContent":["import { arrayTest, resultThrow } from '@ixfx/guards';\nimport { Colour } from '@ixfx/visual';\nimport { resolveEl } from '@ixfx/dom';\n//import type { IStackImmutable } from '@ixfx/collections';\nimport { StackImmutable } from '@ixfx/collections/stack';\nimport { Beziers, Lines, Points, Rects, Triangles } from '@ixfx/geometry';\nimport { quantiseEvery } from '@ixfx/numbers';\n// import type { Point } from '../geometry/point/PointType.js';\n// import type { Line } from '../geometry/line/LineType.js';\n// import type { CirclePositioned } from '../geometry/circle/CircleType.js';\n// import type { Rect, RectPositioned } from '../geometry/rect/index.js';\n// import type { Path } from '../geometry/path/PathType.js';\n// import type { Triangle } from '../geometry/triangle/TriangleType.js';\n// import { Empty as RectsEmpty } from '../geometry/rect/Empty.js';\n// import { corners as RectsCorners } from '../geometry/rect/Corners.js';\n// import { isLine } from '../geometry/line/Guard.js';\n// import { quantiseEvery } from '../numbers/Quantise.js';\nconst PIPI = Math.PI * 2;\n/**\n * Gets a 2d drawing context from canvas element or query, or throws an error\n * @param canvasElementContextOrQuery Canvas element reference or DOM query\n * @returns Drawing context.\n */\nexport const getContext = (canvasElementContextOrQuery) => {\n    if (canvasElementContextOrQuery === null) {\n        throw new Error(`canvasElCtxOrQuery null. Must be a 2d drawing context or Canvas element`);\n    }\n    if (canvasElementContextOrQuery === undefined) {\n        throw new Error(`canvasElCtxOrQuery undefined. Must be a 2d drawing context or Canvas element`);\n    }\n    const ctx = canvasElementContextOrQuery instanceof CanvasRenderingContext2D\n        ? canvasElementContextOrQuery\n        : canvasElementContextOrQuery instanceof HTMLCanvasElement\n            ? canvasElementContextOrQuery.getContext(`2d`)\n            : typeof canvasElementContextOrQuery === `string`\n                ? resolveEl(canvasElementContextOrQuery).getContext(`2d`)\n                : canvasElementContextOrQuery;\n    if (ctx === null)\n        throw new Error(`Could not create 2d context for canvas`);\n    return ctx;\n};\n/**\n * Makes a helper object that wraps together a bunch of drawing functions that all use the same drawing context\n * @param ctxOrCanvasEl Drawing context or canvs element reference\n * @param canvasBounds Bounds of drawing (optional). Used for limiting `textBlock`\n * @returns\n */\nexport const makeHelper = (ctxOrCanvasEl, canvasBounds) => {\n    const ctx = getContext(ctxOrCanvasEl);\n    return {\n        ctx,\n        paths(pathsToDraw, opts) {\n            paths(ctx, pathsToDraw, opts);\n        },\n        line(lineToDraw, opts) {\n            line(ctx, lineToDraw, opts);\n        },\n        rect(rectsToDraw, opts) {\n            rect(ctx, rectsToDraw, opts);\n        },\n        bezier(bezierToDraw, opts) {\n            bezier(ctx, bezierToDraw, opts);\n        },\n        connectedPoints(pointsToDraw, opts) {\n            connectedPoints(ctx, pointsToDraw, opts);\n        },\n        pointLabels(pointsToDraw, opts) {\n            pointLabels(ctx, pointsToDraw, opts);\n        },\n        dot(dotPosition, opts) {\n            dot(ctx, dotPosition, opts);\n        },\n        circle(circlesToDraw, opts) {\n            circle(ctx, circlesToDraw, opts);\n        },\n        arc(arcsToDraw, opts) {\n            arc(ctx, arcsToDraw, opts);\n        },\n        textBlock(lines, opts) {\n            if (opts.bounds === undefined && canvasBounds !== undefined) {\n                opts = { ...opts, bounds: { ...canvasBounds, x: 0, y: 0 } };\n            }\n            textBlock(ctx, lines, opts);\n        },\n    };\n};\n/**\n * Creates a drawing op to apply provided options\n * @param opts Drawing options that apply\n * @returns Stack\n */\nconst optsOp = (opts) => coloringOp(opts.strokeStyle, opts.fillStyle);\n/**\n * Applies drawing options to `ctx`, returning a {@link DrawingStack}\n * @param ctx Context\n * @param opts Options\n * @returns\n */\nconst applyOpts = (ctx, opts = {}, ...additionalOps) => {\n    if (ctx === undefined)\n        throw new Error(`ctx undefined`);\n    // Create a drawing stack, pushing an op generated from drawing options\n    const stack = drawingStack(ctx).push(optsOp(opts), ...additionalOps);\n    // Apply stack to context\n    stack.apply();\n    return stack;\n};\n/**\n * Draws one or more arcs.\n * @param ctx\n * @param arcs\n * @param opts\n */\nexport const arc = (ctx, arcs, opts = {}) => {\n    applyOpts(ctx, opts);\n    const draw = (arc) => {\n        ctx.beginPath();\n        ctx.arc(arc.x, arc.y, arc.radius, arc.startRadian, arc.endRadian);\n        ctx.stroke();\n    };\n    const arcsArray = Array.isArray(arcs) ? arcs : [arcs];\n    for (const arc of arcsArray) {\n        draw(arc);\n    }\n};\n/**\n * Colouring drawing op. Applies `fillStyle` and `strokeStyle`\n * @param strokeStyle\n * @param fillStyle\n * @returns\n */\nconst coloringOp = (strokeStyle, fillStyle) => {\n    const apply = (ctx) => {\n        if (fillStyle)\n            ctx.fillStyle = fillStyle;\n        if (strokeStyle)\n            ctx.strokeStyle = strokeStyle;\n    };\n    return apply;\n};\nconst lineOp = (lineWidth, lineJoin, lineCap) => {\n    const apply = (ctx) => {\n        if (lineWidth)\n            ctx.lineWidth = lineWidth;\n        if (lineJoin)\n            ctx.lineJoin = lineJoin;\n        if (lineCap)\n            ctx.lineCap = lineCap;\n    };\n    return apply;\n};\n/**\n * Creates and returns an immutable drawing stack for a context\n * @param ctx Context\n * @param stk Initial stack operations\n * @returns\n */\nexport const drawingStack = (ctx, stk) => {\n    stk ??= new StackImmutable();\n    const push = (...ops) => {\n        stk ??= new StackImmutable();\n        const s = stk.push(...ops);\n        for (const o of ops)\n            o(ctx);\n        return drawingStack(ctx, s);\n    };\n    const pop = () => {\n        const s = stk?.pop();\n        return drawingStack(ctx, s);\n    };\n    const apply = () => {\n        if (stk === undefined)\n            return drawingStack(ctx);\n        for (const op of stk.data)\n            op(ctx);\n        return drawingStack(ctx, stk);\n    };\n    return { push, pop, apply };\n};\n/**\n * Draws a curved line through a set of points\n * @param ctx\n * @param points\n * @param opts\n */\nexport const lineThroughPoints = (ctx, points, opts) => {\n    applyOpts(ctx, opts);\n    // https://stackoverflow.com/questions/7054272/how-to-draw-smooth-curve-through-n-points-using-javascript-html5-canvas\n    ctx.moveTo(points[0].x, points[0].y);\n    for (const [index, p] of points.entries()) {\n        if (index + 2 >= points.length)\n            continue;\n        const pNext = points[index + 1];\n        const mid = {\n            x: (p.x + pNext.x) / 2,\n            y: (p.y + pNext.y) / 2,\n        };\n        const cpX1 = (mid.x + p.x) / 2;\n        const cpX2 = (mid.x + pNext.x) / 2;\n        ctx.quadraticCurveTo(cpX1, pNext.y, mid.x, mid.y);\n        ctx.quadraticCurveTo(cpX2, pNext.y, pNext.x, pNext.y);\n    }\n};\n/**\n * Draws one or more circles. Will draw outline/fill depending on\n * whether `strokeStyle` or `fillStyle` params are present in the drawing options.\n *\n * ```js\n * // Draw a circle with radius of 10 at 0,0\n * circle(ctx, {radius:10});\n *\n * // Draw a circle of radius 10 at 100,100\n * circle(ctx, {radius: 10, x: 100, y: 100});\n *\n * // Draw two blue outlined circles\n * circle(ctx, [ {radius: 5}, {radius: 10} ], {strokeStyle:`blue`});\n * ```\n * @param ctx Drawing context\n * @param circlesToDraw Circle(s) to draw\n * @param opts Drawing options\n */\nexport const circle = (ctx, circlesToDraw, opts = {}) => {\n    applyOpts(ctx, opts);\n    const draw = (c) => {\n        ctx.beginPath();\n        ctx.arc(c.x, c.y, c.radius, 0, PIPI);\n        if (opts.strokeStyle)\n            ctx.stroke();\n        if (opts.fillStyle)\n            ctx.fill();\n    };\n    if (Array.isArray(circlesToDraw)) {\n        for (const c of circlesToDraw)\n            draw(c);\n    }\n    else {\n        draw(circlesToDraw);\n    }\n};\n/**\n * Draws one or more ellipses. Will draw outline/fill depending on\n * whether `strokeStyle` or `fillStyle` params are present in the drawing options.\n * @param ctx\n * @param ellipsesToDraw\n * @param opts\n */\nexport const ellipse = (ctx, ellipsesToDraw, opts = {}) => {\n    applyOpts(ctx, opts);\n    const draw = (ellipse) => {\n        ctx.beginPath();\n        const rotation = ellipse.rotation ?? 0;\n        const startAngle = ellipse.startAngle ?? 0;\n        const endAngle = ellipse.endAngle ?? PIPI;\n        ctx.ellipse(ellipse.x, ellipse.y, ellipse.radiusX, ellipse.radiusY, rotation, startAngle, endAngle);\n        if (opts.strokeStyle)\n            ctx.stroke();\n        if (opts.fillStyle)\n            ctx.fill();\n    };\n    const ellipsesArray = Array.isArray(ellipsesToDraw) ? ellipsesToDraw : [ellipsesToDraw];\n    for (const ellipse of ellipsesArray) {\n        draw(ellipse);\n    }\n};\n/**\n * Draws one or more paths.\n * supported paths are quadratic beziers and lines.\n * @param ctx\n * @param pathsToDraw\n * @param opts\n */\nexport const paths = (ctx, pathsToDraw, opts = {}) => {\n    applyOpts(ctx, opts);\n    const draw = (path) => {\n        // Call appropriate drawing function depending on the type of path\n        if (Beziers.isQuadraticBezier(path))\n            quadraticBezier(ctx, path, opts);\n        else if (Lines.isLine(path))\n            line(ctx, path, opts);\n        else\n            throw new Error(`Unknown path type ${JSON.stringify(path)}`);\n    };\n    if (Array.isArray(pathsToDraw)) {\n        for (const p of pathsToDraw)\n            draw(p);\n    }\n    else {\n        draw(pathsToDraw);\n    }\n};\n/**\n * Draws a line between all the given points.\n * If a fillStyle is specified, it will be filled.\n *\n * See also:\n * * {@link line}: Draw one or more lines\n *\n * @param ctx\n * @param pts\n */\nexport const connectedPoints = (ctx, pts, opts = {}) => {\n    const shouldLoop = opts.loop ?? false;\n    resultThrow(arrayTest(pts, `pts`));\n    if (pts.length === 0)\n        return;\n    // Throw an error if any point is invalid\n    for (const [index, pt] of pts.entries())\n        Points.guard(pt, `Index ${index}`);\n    applyOpts(ctx, opts);\n    // Draw points\n    if (opts.lineWidth)\n        ctx.lineWidth = opts.lineWidth;\n    ctx.beginPath();\n    ctx.moveTo(pts[0].x, pts[0].y);\n    for (const pt of pts)\n        ctx.lineTo(pt.x, pt.y);\n    if (shouldLoop)\n        ctx.lineTo(pts[0].x, pts[0].y);\n    // if (opts.strokeStyle) ctx.strokeStyle = opts.strokeStyle;\n    if (opts.strokeStyle ||\n        (opts.strokeStyle === undefined && opts.fillStyle === undefined)) {\n        ctx.stroke();\n    }\n    if (opts.fillStyle) {\n        ctx.fill();\n    }\n};\n/**\n * Draws labels for a set of points\n * @param ctx\n * @param pts Points to draw\n * @param opts\n * @param labels Labels for points\n */\nexport const pointLabels = (ctx, pts, opts = {}, labels) => {\n    if (pts.length === 0)\n        return;\n    // Throw an error if any point is invalid\n    for (const [index, pt] of pts.entries())\n        Points.guard(pt, `Index ${index}`);\n    applyOpts(ctx, opts);\n    for (const [index, pt] of pts.entries()) {\n        const label = labels !== undefined && index < labels.length ? labels[index] : index.toString();\n        ctx.fillText(label.toString(), pt.x, pt.y);\n    }\n};\n/**\n * Returns `point` with the canvas's translation matrix applied\n * @param ctx\n * @param point\n * @returns\n */\nexport const translatePoint = (ctx, point) => {\n    const m = ctx.getTransform();\n    return {\n        x: point.x * m.a + point.y * m.c + m.e,\n        y: point.x * m.b + point.y * m.d + m.f,\n    };\n};\n/**\n * Creates a new HTML IMG element with a snapshot of the\n * canvas. Element will need to be inserted into the document.\n *\n * ```\n * const myCanvas = document.getElementById('someCanvas');\n * const el = copyToImg(myCanvas);\n * document.getElementById('images').appendChild(el);\n * ```\n * @param canvasEl\n * @returns\n */\nexport const copyToImg = (canvasEl) => {\n    const img = document.createElement(`img`);\n    img.src = canvasEl.toDataURL(`image/jpeg`);\n    return img;\n};\n/**\n * Draws filled circle(s) at provided point(s)\n * @param ctx\n * @param pos\n * @param opts\n */\nexport const dot = (ctx, pos, opts) => {\n    opts ??= {};\n    const radius = opts.radius ?? 10;\n    const positions = Array.isArray(pos) ? pos : [pos];\n    const stroke = opts.stroke ? opts.stroke : opts.strokeStyle !== undefined;\n    let filled = opts.filled ? opts.filled : opts.fillStyle !== undefined;\n    if (!stroke && !filled)\n        filled = true;\n    applyOpts(ctx, opts);\n    for (const pos of positions) {\n        ctx.beginPath();\n        if (`radius` in pos) {\n            ctx.arc(pos.x, pos.y, pos.radius, 0, 2 * Math.PI);\n        }\n        else {\n            ctx.arc(pos.x, pos.y, radius, 0, 2 * Math.PI);\n        }\n        if (filled) {\n            ctx.fill();\n        }\n        if (stroke) {\n            ctx.stroke();\n        }\n    }\n    // const makePath = () => {\n    //   ctx.beginPath();\n    //   // x&y for arc is the center of circle\n    //   if (Array.isArray(pos)) {\n    //     for (const p of pos) {\n    //       ctx.arc(p.x, p.y, radius, 0, 2 * Math.PI);\n    //     }\n    //   } else {\n    //     const p = pos as Point;\n    //     ctx.arc(p.x, p.y, radius, 0, 2 * Math.PI);\n    //   }\n    // }\n    // makePath();\n    // if (opts.filled || !opts.stroke) {\n    //   ctx.fill();\n    // }\n    // if (opts.stroke) {\n    //   if (opts.strokeWidth) ctx.lineWidth = opts.strokeWidth;\n    //   //makePath();\n    //   ctx.stroke();\n    // }\n};\n/**\n * Draws a cubic or quadratic bezier\n * @param ctx\n * @param bezierToDraw\n * @param opts\n */\nexport const bezier = (ctx, bezierToDraw, opts) => {\n    if (Beziers.isQuadraticBezier(bezierToDraw)) {\n        quadraticBezier(ctx, bezierToDraw, opts);\n    }\n    else if (Beziers.isCubicBezier(bezierToDraw)) {\n        cubicBezier(ctx, bezierToDraw, opts);\n    }\n};\nconst cubicBezier = (ctx, bezierToDraw, opts = {}) => {\n    let stack = applyOpts(ctx, opts);\n    const { a, b, cubic1, cubic2 } = bezierToDraw;\n    const isDebug = opts.debug ?? false;\n    if (isDebug) {\n        /*\n         * const ss = ctx.strokeStyle;\n         * ctx.strokeStyle = ss;\n         */\n    }\n    ctx.beginPath();\n    ctx.moveTo(a.x, a.y);\n    ctx.bezierCurveTo(cubic1.x, cubic1.y, cubic2.x, cubic2.y, b.x, b.y);\n    ctx.stroke();\n    if (isDebug) {\n        stack = stack.push(optsOp({\n            ...opts,\n            strokeStyle: Colour.multiplyOpacity(opts.strokeStyle ?? `silver`, 0.6),\n            fillStyle: Colour.multiplyOpacity(opts.fillStyle ?? `yellow`, 0.4),\n        }));\n        stack.apply();\n        ctx.moveTo(a.x, a.y);\n        ctx.lineTo(cubic1.x, cubic1.y);\n        ctx.stroke();\n        ctx.moveTo(b.x, b.y);\n        ctx.lineTo(cubic2.x, cubic2.y);\n        ctx.stroke();\n        ctx.fillText(`a`, a.x + 5, a.y);\n        ctx.fillText(`b`, b.x + 5, b.y);\n        ctx.fillText(`c1`, cubic1.x + 5, cubic1.y);\n        ctx.fillText(`c2`, cubic2.x + 5, cubic2.y);\n        dot(ctx, cubic1, { radius: 3 });\n        dot(ctx, cubic2, { radius: 3 });\n        dot(ctx, a, { radius: 3 });\n        dot(ctx, b, { radius: 3 });\n        stack = stack.pop();\n        stack.apply();\n    }\n};\nconst quadraticBezier = (ctx, bezierToDraw, opts = {}) => {\n    const { a, b, quadratic } = bezierToDraw;\n    const isDebug = opts.debug ?? false;\n    let stack = applyOpts(ctx, opts);\n    ctx.beginPath();\n    ctx.moveTo(a.x, a.y);\n    ctx.quadraticCurveTo(quadratic.x, quadratic.y, b.x, b.y);\n    ctx.stroke();\n    if (isDebug) {\n        /*\n         * const fs = ctx.fillStyle;\n         * const ss = ctx.strokeStyle;\n         * ctx.fillStyle = opts.strokeStyle ?? `gray`;\n         * ctx.strokeStyle = opts.strokeStyle ?? `gray`;\n         */\n        stack = stack.push(optsOp({\n            ...opts,\n            strokeStyle: Colour.multiplyOpacity(opts.strokeStyle ?? `silver`, 0.6),\n            fillStyle: Colour.multiplyOpacity(opts.fillStyle ?? `yellow`, 0.4),\n        }));\n        connectedPoints(ctx, [a, quadratic, b]);\n        ctx.fillText(`a`, a.x + 5, a.y);\n        ctx.fillText(`b`, b.x + 5, b.y);\n        ctx.fillText(`h`, quadratic.x + 5, quadratic.y);\n        dot(ctx, quadratic, { radius: 3 });\n        dot(ctx, a, { radius: 3 });\n        dot(ctx, b, { radius: 3 });\n        /*\n         * ctx.fillStyle = fs;\n         * ctx.strokeStyle = ss;\n         */\n        stack = stack.pop();\n        stack.apply();\n    }\n};\n/**\n * Draws one or more lines.\n *\n * Each line is drawn independently, ie it's not assumed lines are connected.\n *\n * See also:\n * * {@link connectedPoints}: Draw a series of connected points\n * @param ctx\n * @param toDraw\n * @param opts\n */\nexport const line = (ctx, toDraw, opts = {}) => {\n    const isDebug = opts.debug ?? false;\n    const o = lineOp(opts.lineWidth, opts.lineJoin, opts.lineCap);\n    applyOpts(ctx, opts, o);\n    const draw = (d) => {\n        const { a, b } = d;\n        ctx.beginPath();\n        ctx.moveTo(a.x, a.y);\n        ctx.lineTo(b.x, b.y);\n        if (isDebug) {\n            ctx.fillText(`a`, a.x, a.y);\n            ctx.fillText(`b`, b.x, b.y);\n            dot(ctx, a, { radius: 5, strokeStyle: `black` });\n            dot(ctx, b, { radius: 5, strokeStyle: `black` });\n        }\n        ctx.stroke();\n    };\n    if (Array.isArray(toDraw)) {\n        for (const t of toDraw)\n            draw(t);\n    }\n    else {\n        draw(toDraw);\n    }\n};\n/**\n * Draws one or more triangles\n * @param ctx\n * @param toDraw\n * @param opts\n */\nexport const triangle = (ctx, toDraw, opts = {}) => {\n    applyOpts(ctx, opts);\n    const draw = (t) => {\n        connectedPoints(ctx, Triangles.corners(t), { ...opts, loop: true });\n        if (opts.debug) {\n            pointLabels(ctx, Triangles.corners(t), undefined, [`a`, `b`, `c`]);\n        }\n    };\n    if (Array.isArray(toDraw)) {\n        for (const t of toDraw) {\n            draw(t);\n        }\n    }\n    else {\n        draw(toDraw);\n    }\n};\n/**\n * Draws one or more rectangles.\n *\n * @param ctx\n * @param toDraw\n * @param opts\n */\nexport const rect = (ctx, toDraw, opts = {}) => {\n    applyOpts(ctx, opts);\n    const filled = opts.filled ?? (opts.fillStyle === undefined ? false : true);\n    const stroke = opts.stroke ?? (opts.strokeStyle === undefined ? false : true);\n    const draw = (d) => {\n        const x = `x` in d ? d.x : 0;\n        const y = `y` in d ? d.y : 0;\n        if (filled)\n            ctx.fillRect(x, y, d.width, d.height);\n        if (stroke) {\n            if (opts.strokeWidth)\n                ctx.lineWidth = opts.strokeWidth;\n            //if (opts.strokeStyle) ctx.strokeStyle = opts.strokeStyle;\n            ctx.strokeRect(x, y, d.width, d.height);\n        }\n        if (opts.crossed) {\n            ctx.beginPath();\n            ctx.moveTo(x, y);\n            ctx.lineTo(d.width, d.height);\n            ctx.stroke();\n            ctx.moveTo(0, d.height);\n            ctx.lineTo(d.width, 0);\n            ctx.stroke();\n        }\n        if (opts.debug) {\n            pointLabels(ctx, Rects.corners(d), undefined, [`NW`, `NE`, `SE`, `SW`]);\n        }\n    };\n    if (Array.isArray(toDraw)) {\n        for (const t of toDraw) {\n            draw(t);\n        }\n    }\n    else {\n        draw(toDraw);\n    }\n};\n/**\n * Returns the width of `text`. Rounds number up to nearest multiple if provided. If\n * text is empty or undefined, 0 is returned.\n * @param ctx\n * @param text\n * @param widthMultiple\n * @returns\n */\nexport const textWidth = (ctx, text, padding = 0, widthMultiple) => {\n    const rect = textRect(ctx, text, padding, widthMultiple);\n    return rect.width;\n};\nexport const textRect = (ctx, text, padding = 0, widthMultiple) => {\n    if (text === undefined || text === null || text.length === 0)\n        return Rects.Empty;\n    const m = ctx.measureText(text);\n    const width = (widthMultiple) ? quantiseEvery(m.width, widthMultiple) + padding : m.width + padding;\n    return {\n        width: width,\n        height: m.actualBoundingBoxAscent + m.actualBoundingBoxDescent + padding + padding\n    };\n};\nexport const textHeight = (ctx, text, padding = 0) => {\n    const rect = textRect(ctx, text, padding);\n    return rect.height;\n    // if (text === undefined || text === null || text.length === 0) return 0;\n    // const m = ctx.measureText(text);\n    // return m.actualBoundingBoxAscent + m.actualBoundingBoxDescent + padding + padding;\n};\n/**\n * Draws a block of text. Each array item is considered a line.\n * @param ctx\n * @param lines\n * @param opts\n */\nexport const textBlock = (ctx, lines, opts) => {\n    applyOpts(ctx, opts);\n    const anchorPadding = opts.anchorPadding ?? 0;\n    const align = opts.align ?? `top`;\n    const anchor = opts.anchor;\n    const bounds = opts.bounds ?? { x: 0, y: 0, width: 1_000_000, height: 1_000_000 };\n    // Measure each line\n    const blocks = lines.map((l) => ctx.measureText(l));\n    // Get width and height\n    const widths = blocks.map((tm) => tm.width);\n    const heights = blocks.map((tm) => tm.actualBoundingBoxAscent + tm.actualBoundingBoxDescent + 3);\n    // Find extremes\n    const maxWidth = Math.max(...widths);\n    const totalHeight = heights.reduce((accumulator, value) => accumulator + value, 0);\n    let { x, y } = anchor;\n    if (anchor.x + maxWidth > bounds.width) {\n        x = bounds.width - (maxWidth + anchorPadding);\n    }\n    else\n        x -= anchorPadding;\n    if (x < bounds.x)\n        x = bounds.x + anchorPadding;\n    if (anchor.y + totalHeight > bounds.height) {\n        y = bounds.height - (totalHeight + anchorPadding);\n    }\n    else\n        y -= anchorPadding;\n    if (y < bounds.y)\n        y = bounds.y + anchorPadding;\n    if (align === `top`) {\n        ctx.textBaseline = `top`;\n    }\n    else {\n        ctx.textBaseline = `middle`;\n    }\n    for (const [index, line] of lines.entries()) {\n        ctx.fillText(line, x, y);\n        y += heights[index];\n    }\n};\n/**\n * Draws an aligned text block\n */\nexport const textBlockAligned = (ctx, text, opts) => {\n    const { bounds } = opts;\n    const { horiz = `left`, vert = `top` } = opts;\n    const lines = typeof text === `string` ? [text] : text;\n    applyOpts(ctx, opts);\n    ctx.save();\n    ctx.translate(bounds.x, bounds.y);\n    ctx.textAlign = `left`;\n    ctx.textBaseline = `top`;\n    const middleX = bounds.width / 2;\n    const middleY = bounds.height / 2;\n    // Measure each line\n    const blocks = lines.map((l) => ctx.measureText(l));\n    const heights = blocks.map((tm) => tm.actualBoundingBoxAscent + tm.actualBoundingBoxDescent);\n    const totalHeight = heights.reduce((accumulator, value) => accumulator + value, 0);\n    let y = 0;\n    if (vert === `center`)\n        y = middleY - totalHeight / 2;\n    else if (vert === `bottom`) {\n        y = bounds.height - totalHeight;\n    }\n    for (const [index, line] of lines.entries()) {\n        let x = 0;\n        if (horiz === `center`)\n            x = middleX - blocks[index].width / 2;\n        else if (horiz === `right`)\n            x = bounds.width - blocks[index].width;\n        ctx.fillText(line, x, y);\n        y += heights[index];\n    }\n    ctx.restore();\n};\n","var __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __export = (target, all) => {\n  for (var name2 in all)\n    __defProp(target, name2, { get: all[name2], enumerable: true });\n};\nvar __publicField = (obj, key, value) => __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n\n// src/modules/invariant.ts\nfunction invariant(condition, message) {\n  if (condition) {\n    return;\n  }\n  if (process.env.NODE_ENV !== \"production\") {\n    if (message === void 0) {\n      throw new Error(\"invariant requires an error message argument\");\n    }\n  }\n  const error = !message ? new Error(\n    \"Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.\"\n  ) : new Error(message);\n  error.name = \"colorizr\";\n  throw error;\n}\n\n// src/modules/constants.ts\nvar COLOR_KEYS = {\n  hsl: [\"h\", \"s\", \"l\"],\n  oklab: [\"l\", \"a\", \"b\"],\n  oklch: [\"l\", \"c\", \"h\"],\n  rgb: [\"r\", \"g\", \"b\"]\n};\nvar COLOR_MODELS = [\"hsl\", \"oklab\", \"oklch\", \"rgb\"];\nvar DEG2RAD = Math.PI / 180;\nvar LAB_TO_LMS = {\n  l: [0.3963377773761749, 0.2158037573099136],\n  m: [-0.1055613458156586, -0.0638541728258133],\n  s: [-0.0894841775298119, -1.2914855480194092]\n};\nvar LRGB_TO_LMS = {\n  l: [0.4122214708, 0.5363325363, 0.0514459929],\n  m: [0.2119034982, 0.6806995451, 0.1073969566],\n  s: [0.0883024619, 0.2817188376, 0.6299787005]\n};\nvar LSM_TO_LAB = {\n  l: [0.2104542553, 0.793617785, 0.0040720468],\n  a: [1.9779984951, 2.428592205, 0.4505937099],\n  b: [0.0259040371, 0.7827717662, 0.808675766]\n};\nvar LSM_TO_RGB = {\n  r: [4.076741636075958, -3.307711539258063, 0.2309699031821043],\n  g: [-1.2684379732850315, 2.609757349287688, -0.341319376002657],\n  b: [-0.0041960761386756, -0.7034186179359362, 1.7076146940746117]\n};\nvar SRGB_TO_P3 = [\n  [0.8224270476, 0.1775729524, 0],\n  [0.0331008087, 0.9668991913, 0],\n  [0.0170720188, 0.0723477973, 0.9105801839]\n];\nvar PRECISION = 5;\nvar RAD2DEG = 180 / Math.PI;\nvar MESSAGES = {\n  alpha: \"amount must be a number between 0 and 1\",\n  hueRange: \"hue must be a number between 0 and 360\",\n  input: \"input is required\",\n  inputHex: \"input is required and must be a hex\",\n  inputNumber: \"input is required and must be a number\",\n  inputString: \"input is required and must be a string\",\n  invalid: \"invalid input\",\n  invalidCSS: \"invalid CSS string\",\n  left: \"left is required and must be a string\",\n  lightnessRange: \"lightness must be a number between 0 and 1\",\n  options: \"invalid options\",\n  right: \"right is required and must be a string\",\n  threshold: \"threshold must be a number between 0 and 255\"\n};\n\n// src/modules/css-colors.ts\nvar cssColors = {\n  aliceblue: \"#f0f8ff\",\n  antiquewhite: \"#faebd7\",\n  aqua: \"#00ffff\",\n  aquamarine: \"#7fffd4\",\n  azure: \"#f0ffff\",\n  beige: \"#f5f5dc\",\n  bisque: \"#ffe4c4\",\n  black: \"#000000\",\n  blanchedalmond: \"#ffebcd\",\n  blue: \"#0000ff\",\n  blueviolet: \"#8a2be2\",\n  brown: \"#a52a2a\",\n  burlywood: \"#deb887\",\n  cadetblue: \"#5f9ea0\",\n  chartreuse: \"#7fff00\",\n  chocolate: \"#d2691e\",\n  coral: \"#ff7f50\",\n  cornflowerblue: \"#6495ed\",\n  cornsilk: \"#fff8dc\",\n  crimson: \"#dc143c\",\n  cyan: \"#00ffff\",\n  darkblue: \"#00008b\",\n  darkcyan: \"#008b8b\",\n  darkgoldenrod: \"#b8860b\",\n  darkgray: \"#a9a9a9\",\n  darkgreen: \"#006400\",\n  darkkhaki: \"#bdb76b\",\n  darkmagenta: \"#8b008b\",\n  darkolivegreen: \"#556b2f\",\n  darkorange: \"#ff8c00\",\n  darkorchid: \"#9932cc\",\n  darkred: \"#8b0000\",\n  darksalmon: \"#e9967a\",\n  darkseagreen: \"#8fbc8f\",\n  darkslateblue: \"#483d8b\",\n  darkslategray: \"#2f4f4f\",\n  darkslategrey: \"#2f4f4f\",\n  darkturquoise: \"#00ced1\",\n  darkviolet: \"#9400d3\",\n  deeppink: \"#ff1493\",\n  deepskyblue: \"#00bfff\",\n  dimgray: \"#696969\",\n  dimgrey: \"#696969\",\n  dodgerblue: \"#1e90ff\",\n  firebrick: \"#b22222\",\n  floralwhite: \"#fffaf0\",\n  forestgreen: \"#228b22\",\n  fuchsia: \"#ff00ff\",\n  gainsboro: \"#dcdcdc\",\n  ghostwhite: \"#f8f8ff\",\n  gold: \"#ffd700\",\n  goldenrod: \"#daa520\",\n  gray: \"#808080\",\n  grey: \"#808080\",\n  green: \"#008000\",\n  greenyellow: \"#adff2f\",\n  honeydew: \"#f0fff0\",\n  hotpink: \"#ff69b4\",\n  indianred: \"#cd5c5c\",\n  indigo: \"#4b0082\",\n  ivory: \"#fffff0\",\n  khaki: \"#f0e68c\",\n  lavender: \"#e6e6fa\",\n  lavenderblush: \"#fff0f5\",\n  lawngreen: \"#7cfc00\",\n  lemonchiffon: \"#fffacd\",\n  lightblue: \"#add8e6\",\n  lightcoral: \"#f08080\",\n  lightcyan: \"#e0ffff\",\n  lightgoldenrodyellow: \"#fafad2\",\n  lightgray: \"#d3d3d3\",\n  lightgreen: \"#90ee90\",\n  lightgrey: \"#d3d3d3\",\n  lightpink: \"#ffb6c1\",\n  lightsalmon: \"#ffa07a\",\n  lightseagreen: \"#20b2aa\",\n  lightskyblue: \"#87cefa\",\n  lightslategray: \"#778899\",\n  lightslategrey: \"#778899\",\n  lightsteelblue: \"#b0c4de\",\n  lightyellow: \"#ffffe0\",\n  lime: \"#00ff00\",\n  limegreen: \"#32cd32\",\n  linen: \"#faf0e6\",\n  magenta: \"#ff00ff\",\n  maroon: \"#800000\",\n  mediumaquamarine: \"#66cdaa\",\n  mediumblue: \"#0000cd\",\n  mediumorchid: \"#ba55d3\",\n  mediumpurple: \"#9370db\",\n  mediumseagreen: \"#3cb371\",\n  mediumslateblue: \"#7b68ee\",\n  mediumspringgreen: \"#00fa9a\",\n  mediumturquoise: \"#48d1cc\",\n  mediumvioletred: \"#c71585\",\n  midnightblue: \"#191970\",\n  mintcream: \"#f5fffa\",\n  mistyrose: \"#ffe4e1\",\n  moccasin: \"#ffe4b5\",\n  navajowhite: \"#ffdead\",\n  navy: \"#000080\",\n  oldlace: \"#fdf5e6\",\n  olive: \"#808000\",\n  olivedrab: \"#6b8e23\",\n  orange: \"#ffa500\",\n  orangered: \"#ff4500\",\n  orchid: \"#da70d6\",\n  palegoldenrod: \"#eee8aa\",\n  palegreen: \"#98fb98\",\n  paleturquoise: \"#afeeee\",\n  palevioletred: \"#db7093\",\n  papayawhip: \"#ffefd5\",\n  peachpuff: \"#ffdab9\",\n  peru: \"#cd853f\",\n  pink: \"#ffc0cb\",\n  plum: \"#dda0dd\",\n  powderblue: \"#b0e0e6\",\n  purple: \"#800080\",\n  rebeccapurple: \"#663399\",\n  red: \"#ff0000\",\n  rosybrown: \"#bc8f8f\",\n  royalblue: \"#4169e1\",\n  saddlebrown: \"#8b4513\",\n  salmon: \"#fa8072\",\n  sandybrown: \"#f4a460\",\n  seagreen: \"#2e8b57\",\n  seashell: \"#fff5ee\",\n  sienna: \"#a0522d\",\n  silver: \"#c0c0c0\",\n  skyblue: \"#87ceeb\",\n  slateblue: \"#6a5acd\",\n  slategray: \"#708090\",\n  slategrey: \"#708090\",\n  snow: \"#fffafa\",\n  springgreen: \"#00ff7f\",\n  steelblue: \"#4682b4\",\n  tan: \"#d2b48c\",\n  teal: \"#008080\",\n  thistle: \"#d8bfd8\",\n  tomato: \"#ff6347\",\n  turquoise: \"#40e0d0\",\n  violet: \"#ee82ee\",\n  wheat: \"#f5deb3\",\n  white: \"#ffffff\",\n  whitesmoke: \"#f5f5f5\",\n  yellow: \"#ffff00\",\n  yellowgreen: \"#9acd32\"\n};\n\n// src/modules/validators.ts\nfunction hasValidMatches(input) {\n  return Array.isArray(input) && input.length === 6;\n}\nfunction isNamedColor(input) {\n  return isString(input) && Object.keys(cssColors).includes(input.toLowerCase());\n}\nfunction isNumber(input) {\n  return typeof input === \"number\" && !Number.isNaN(input);\n}\nfunction isPlainObject(input) {\n  if (!input) {\n    return false;\n  }\n  const { toString } = Object.prototype;\n  const prototype = Object.getPrototypeOf(input);\n  return toString.call(input) === \"[object Object]\" && (prototype === null || prototype === Object.getPrototypeOf({}));\n}\nfunction isString(input, validate = true) {\n  const isValid = typeof input === \"string\";\n  if (validate) {\n    return isValid && !!input.trim().length;\n  }\n  return isValid;\n}\nfunction isValidColorModel(input) {\n  return isHSL(input) || isRGB(input) || isLAB(input) || isLCH(input);\n}\nfunction isHex(input) {\n  if (!isString(input)) {\n    return false;\n  }\n  return /^#([\\da-f]{3,4}|[\\da-f]{6,8})$/i.test(input);\n}\nfunction isHSL(input) {\n  if (!isPlainObject(input)) {\n    return false;\n  }\n  const entries = Object.entries(input);\n  return !!entries.length && entries.every(([key, value]) => {\n    if (key === \"h\") {\n      return value >= 0 && value <= 360;\n    }\n    if (key === \"alpha\") {\n      return value >= 0 && value <= 1;\n    }\n    return COLOR_KEYS.hsl.includes(key) && value >= 0 && value <= 100;\n  });\n}\nfunction isLAB(input) {\n  if (!isPlainObject(input)) {\n    return false;\n  }\n  const entries = Object.entries(input);\n  return !!entries.length && entries.every(([key, value]) => {\n    if (key === \"l\") {\n      return value >= 0 && value <= 100;\n    }\n    if (key === \"alpha\") {\n      return value >= 0 && value <= 1;\n    }\n    return COLOR_KEYS.oklab.includes(key) && value >= -1 && value <= 1;\n  });\n}\nfunction isLCH(input) {\n  if (!isPlainObject(input)) {\n    return false;\n  }\n  const entries = Object.entries(input);\n  return !!entries.length && entries.every(([key, value]) => {\n    if (key === \"l\") {\n      return value >= 0 && value <= 100;\n    }\n    if (key === \"alpha\") {\n      return value >= 0 && value <= 1;\n    }\n    return COLOR_KEYS.oklch.includes(key) && value >= 0 && value <= (key === \"h\" ? 360 : 1);\n  });\n}\nfunction isRGB(input) {\n  if (!isPlainObject(input)) {\n    return false;\n  }\n  const entries = Object.entries(input);\n  return !!entries.length && entries.every(([key, value]) => {\n    if (key === \"alpha\") {\n      return value >= 0 && value <= 1;\n    }\n    return COLOR_KEYS.rgb.includes(key) && value >= 0 && value <= 255;\n  });\n}\n\n// src/modules/utils.ts\nfunction addAlpha(input, alpha) {\n  invariant(isValidColorModel(input), MESSAGES.invalid);\n  let value = alpha;\n  if (!value) {\n    return input;\n  }\n  if (value > 1) {\n    value /= 100;\n  }\n  if (value === 1) {\n    return input;\n  }\n  return { ...input, alpha: value };\n}\nfunction clamp(value, min = 0, max = 100) {\n  return Math.min(Math.max(value, min), max);\n}\nfunction constrainDegrees(input, amount) {\n  invariant(isNumber(input), MESSAGES.inputNumber);\n  let value = input + amount;\n  if (value > 360) {\n    value %= 360;\n  }\n  if (value < 0) {\n    value += 360;\n  }\n  return Math.abs(value);\n}\nfunction limit(input, model, key) {\n  invariant(isNumber(input), \"Input is not a number\");\n  invariant(COLOR_MODELS.includes(model), `Invalid model${model ? `: ${model}` : \"\"}`);\n  invariant(COLOR_KEYS[model].includes(key), `Invalid key${key ? `: ${key}` : \"\"}`);\n  switch (model) {\n    case \"hsl\": {\n      invariant(COLOR_KEYS.hsl.includes(key), \"Invalid key\");\n      if ([\"s\", \"l\"].includes(key)) {\n        return clamp(input);\n      }\n      return clamp(input, 0, 360);\n    }\n    case \"rgb\": {\n      invariant(COLOR_KEYS.rgb.includes(key), \"Invalid key\");\n      return clamp(input, 0, 255);\n    }\n    /* c8 ignore next 3 */\n    default: {\n      throw new Error(\"Invalid inputs\");\n    }\n  }\n}\nfunction parseInput(input, model) {\n  const keys = COLOR_KEYS[model];\n  const validator = {\n    hsl: isHSL,\n    oklab: isLAB,\n    oklch: isLCH,\n    rgb: isRGB\n  };\n  invariant(isPlainObject(input) || Array.isArray(input), MESSAGES.invalid);\n  const value = Array.isArray(input) ? { [keys[0]]: input[0], [keys[1]]: input[1], [keys[2]]: input[2] } : input;\n  invariant(validator[model](value), `invalid ${model} color`);\n  return value;\n}\nfunction restrictValues(input, precision = PRECISION, forcePrecision = true) {\n  const output = new Map(Object.entries(input));\n  for (const [key, value] of output.entries()) {\n    output.set(key, round(value, precision, forcePrecision));\n  }\n  return Object.fromEntries(output);\n}\nfunction round(input, precision = 2, forcePrecision = true) {\n  if (!isNumber(input) || input === 0) {\n    return 0;\n  }\n  if (forcePrecision) {\n    const factor2 = 10 ** precision;\n    return Math.round(input * factor2) / factor2;\n  }\n  const absInput = Math.abs(input);\n  let digits = Math.abs(Math.ceil(Math.log(absInput) / Math.LN10));\n  if (digits === 0) {\n    digits = 2;\n  } else if (digits > precision) {\n    digits = precision;\n  }\n  let exponent = precision - (digits < 0 ? 0 : digits);\n  if (exponent <= 1 && precision > 1) {\n    exponent = 2;\n  } else if (exponent > precision || exponent === 0) {\n    exponent = precision;\n  }\n  const factor = 10 ** exponent;\n  return Math.round(input * factor) / factor;\n}\n\n// src/modules/hex-utils.ts\nfunction addAlphaToHex(input, alpha) {\n  invariant(isHex(input), MESSAGES.inputHex);\n  invariant(isNumber(alpha), MESSAGES.inputNumber);\n  if (alpha >= 1) {\n    return removeAlphaFromHex(input);\n  }\n  return `${removeAlphaFromHex(input)}${convertAlphaToHex(alpha)}`;\n}\nfunction convertAlphaToHex(input) {\n  invariant(isNumber(input), MESSAGES.inputNumber);\n  let alpha = input;\n  if (input > 1) {\n    alpha /= 100;\n  }\n  return Math.round(alpha * 255).toString(16).padStart(2, \"0\");\n}\nfunction extractAlphaFromHex(input) {\n  invariant(isHex(input), MESSAGES.inputString);\n  const alpha = input.substring(7, 9);\n  if (!alpha) {\n    return 1;\n  }\n  return round(parseInt(alpha, 16) / 255);\n}\nfunction hexadecimalToNumber(input) {\n  return round(parseInt(input, 16));\n}\nfunction removeAlphaFromHex(input) {\n  invariant(isHex(input), MESSAGES.inputHex);\n  if (input.length === 5) {\n    return input.substring(0, 4);\n  }\n  return input.substring(0, 7);\n}\n\n// src/converters/index.ts\nvar converters_exports = {};\n__export(converters_exports, {\n  hex2hsl: () => hex2hsl,\n  hex2oklab: () => hex2oklab,\n  hex2oklch: () => hex2oklch,\n  hex2rgb: () => hex2rgb,\n  hsl2hex: () => hsl2hex,\n  hsl2oklab: () => hsl2oklab,\n  hsl2oklch: () => hsl2oklch,\n  hsl2rgb: () => hsl2rgb,\n  oklab2hex: () => oklab2hex,\n  oklab2hsl: () => oklab2hsl,\n  oklab2oklch: () => oklab2oklch,\n  oklab2rgb: () => oklab2rgb,\n  oklch2hex: () => oklch2hex,\n  oklch2hsl: () => oklch2hsl,\n  oklch2oklab: () => oklch2oklab,\n  oklch2rgb: () => oklch2rgb,\n  rgb2hex: () => rgb2hex,\n  rgb2hsl: () => rgb2hsl,\n  rgb2oklab: () => rgb2oklab,\n  rgb2oklch: () => rgb2oklch\n});\n\n// src/format-hex.ts\nfunction formatHex(input) {\n  invariant(isHex(input), MESSAGES.inputHex);\n  let color = input.replace(\"#\", \"\");\n  if (color.length === 3 || color.length === 4) {\n    const values = [...color];\n    color = \"\";\n    values.forEach((d) => {\n      color += `${d}${d}`;\n    });\n  }\n  const hex = `#${color}`;\n  invariant(isHex(hex), \"invalid hex\");\n  return hex;\n}\n\n// src/converters/hex2rgb.ts\nfunction hex2rgb(input) {\n  invariant(isHex(input), MESSAGES.inputHex);\n  const hex = formatHex(input).slice(1);\n  return {\n    r: parseInt(hex.charAt(0) + hex.charAt(1), 16),\n    g: parseInt(hex.charAt(2) + hex.charAt(3), 16),\n    b: parseInt(hex.charAt(4) + hex.charAt(5), 16)\n  };\n}\n\n// src/converters/rgb2hsl.ts\nfunction rgb2hsl(input) {\n  const value = parseInput(input, \"rgb\");\n  const rLimit = limit(value.r, \"rgb\", \"r\") / 255;\n  const gLimit = limit(value.g, \"rgb\", \"g\") / 255;\n  const bLimit = limit(value.b, \"rgb\", \"b\") / 255;\n  const min = Math.min(rLimit, gLimit, bLimit);\n  const max = Math.max(rLimit, gLimit, bLimit);\n  const delta = max - min;\n  let h = 0;\n  let s;\n  const l = (max + min) / 2;\n  let rate;\n  switch (max) {\n    case rLimit:\n      rate = !delta ? 0 : (gLimit - bLimit) / delta;\n      h = 60 * rate;\n      break;\n    case gLimit:\n      rate = (bLimit - rLimit) / delta;\n      h = 60 * rate + 120;\n      break;\n    case bLimit:\n      rate = (rLimit - gLimit) / delta;\n      h = 60 * rate + 240;\n      break;\n    /* c8 ignore next 2 */\n    default:\n      break;\n  }\n  if (h < 0) {\n    h = 360 + h;\n  }\n  if (min === max) {\n    s = 0;\n  } else {\n    s = l < 0.5 ? delta / (2 * l) : delta / (2 - 2 * l);\n  }\n  return {\n    h: Math.abs(+(h % 360).toFixed(2)),\n    s: +(s * 100).toFixed(2),\n    l: +(l * 100).toFixed(2)\n  };\n}\n\n// src/converters/hex2hsl.ts\nfunction hex2hsl(input) {\n  invariant(isHex(input), MESSAGES.inputHex);\n  return rgb2hsl(hex2rgb(input));\n}\n\n// src/converters/rgb2oklab.ts\nvar { cbrt, sign } = Math;\nfunction rgb2lrgb(input) {\n  const abs2 = Math.abs(input);\n  if (abs2 < 0.04045) {\n    return input / 12.92;\n  }\n  return (sign(input) || 1) * ((abs2 + 0.055) / 1.055) ** 2.4;\n}\nfunction rgb2oklab(input, precision = PRECISION) {\n  const value = parseInput(input, \"rgb\");\n  const [lr, lg, lb] = [rgb2lrgb(value.r / 255), rgb2lrgb(value.g / 255), rgb2lrgb(value.b / 255)];\n  const l = cbrt(LRGB_TO_LMS.l[0] * lr + LRGB_TO_LMS.l[1] * lg + LRGB_TO_LMS.l[2] * lb);\n  const m = cbrt(LRGB_TO_LMS.m[0] * lr + LRGB_TO_LMS.m[1] * lg + LRGB_TO_LMS.m[2] * lb);\n  const s = cbrt(LRGB_TO_LMS.s[0] * lr + LRGB_TO_LMS.s[1] * lg + LRGB_TO_LMS.s[2] * lb);\n  const lab = {\n    l: LSM_TO_LAB.l[0] * l + LSM_TO_LAB.l[1] * m - LSM_TO_LAB.l[2] * s,\n    a: LSM_TO_LAB.a[0] * l - LSM_TO_LAB.a[1] * m + LSM_TO_LAB.a[2] * s,\n    b: LSM_TO_LAB.b[0] * l + LSM_TO_LAB.b[1] * m - LSM_TO_LAB.b[2] * s\n  };\n  return restrictValues(lab, precision);\n}\n\n// src/converters/hex2oklab.ts\nfunction hex2oklab(input, precision) {\n  invariant(isHex(input), MESSAGES.inputHex);\n  return rgb2oklab(hex2rgb(input), precision);\n}\n\n// src/converters/oklab2oklch.ts\nvar { atan2, sqrt } = Math;\nfunction oklab2oklch(input, precision) {\n  const { l, a, b } = restrictValues(parseInput(input, \"oklab\"));\n  const c = sqrt(a ** 2 + b ** 2);\n  let h = (atan2(b, a) * RAD2DEG + 360) % 360;\n  if (round(c * 1e4) === 0) {\n    h = 0;\n  }\n  return restrictValues({ l, c, h }, precision);\n}\n\n// src/converters/rgb2oklch.ts\nfunction rgb2oklch(input, precision) {\n  const value = parseInput(input, \"rgb\");\n  return oklab2oklch(rgb2oklab(value, precision), precision);\n}\n\n// src/converters/hex2oklch.ts\nfunction hex2oklch(input, precision) {\n  invariant(isHex(input), MESSAGES.inputHex);\n  return rgb2oklch(hex2rgb(input), precision);\n}\n\n// src/modules/hue2rgb.ts\nfunction hue2rgb(point, chroma2, h) {\n  invariant(isNumber(point) && isNumber(chroma2) && isNumber(h), \"point, chroma and h are required\");\n  let hue = h;\n  if (hue < 0) {\n    hue += 1;\n  }\n  if (hue > 1) {\n    hue -= 1;\n  }\n  if (hue < 1 / 6) {\n    return round(point + (chroma2 - point) * 6 * hue, 4);\n  }\n  if (hue < 1 / 2) {\n    return round(chroma2, 4);\n  }\n  if (hue < 2 / 3) {\n    return round(point + (chroma2 - point) * (2 / 3 - hue) * 6, 4);\n  }\n  return round(point, 4);\n}\n\n// src/converters/hsl2rgb.ts\nfunction hsl2rgb(input) {\n  const value = parseInput(input, \"hsl\");\n  const h = round(value.h) / 360;\n  const s = round(value.s) / 100;\n  const l = round(value.l) / 100;\n  let r;\n  let g;\n  let b;\n  let point;\n  let chroma2;\n  if (s === 0) {\n    r = l;\n    g = l;\n    b = l;\n  } else {\n    chroma2 = l < 0.5 ? l * (1 + s) : l + s - l * s;\n    point = 2 * l - chroma2;\n    r = hue2rgb(point, chroma2, h + 1 / 3);\n    g = hue2rgb(point, chroma2, h);\n    b = hue2rgb(point, chroma2, h - 1 / 3);\n  }\n  return {\n    r: Math.round(r * 255),\n    g: Math.round(g * 255),\n    b: Math.round(b * 255)\n  };\n}\n\n// src/converters/rgb2hex.ts\nfunction rgb2hex(input) {\n  const rgb = parseInput(input, \"rgb\");\n  return `#${Object.values(rgb).map((d) => `0${Math.floor(d).toString(16)}`.slice(-2)).join(\"\")}`;\n}\n\n// src/converters/hsl2hex.ts\nfunction hsl2hex(input) {\n  const value = parseInput(input, \"hsl\");\n  return rgb2hex(hsl2rgb(value));\n}\n\n// src/converters/hsl2oklab.ts\nfunction hsl2oklab(input, precision) {\n  const value = parseInput(input, \"hsl\");\n  return rgb2oklab(hsl2rgb(value), precision);\n}\n\n// src/converters/hsl2oklch.ts\nfunction hsl2oklch(input, precision) {\n  const value = parseInput(input, \"hsl\");\n  return rgb2oklch(hsl2rgb(value), precision);\n}\n\n// src/converters/oklab2rgb.ts\nvar { abs } = Math;\nfunction lrgb2rgb(input) {\n  const absoluteNumber = abs(input);\n  const sign2 = input < 0 ? -1 : 1;\n  if (absoluteNumber > 31308e-7) {\n    return sign2 * (absoluteNumber ** (1 / 2.4) * 1.055 - 0.055);\n  }\n  return input * 12.92;\n}\nfunction oklab2rgb(input, precision = 0) {\n  const { l: L, a: A, b: B } = parseInput(input, \"oklab\");\n  const l = (L + LAB_TO_LMS.l[0] * A + LAB_TO_LMS.l[1] * B) ** 3;\n  const m = (L + LAB_TO_LMS.m[0] * A + LAB_TO_LMS.m[1] * B) ** 3;\n  const s = (L + LAB_TO_LMS.s[0] * A + LAB_TO_LMS.s[1] * B) ** 3;\n  const r = 255 * lrgb2rgb(LSM_TO_RGB.r[0] * l + LSM_TO_RGB.r[1] * m + LSM_TO_RGB.r[2] * s);\n  const g = 255 * lrgb2rgb(LSM_TO_RGB.g[0] * l + LSM_TO_RGB.g[1] * m + LSM_TO_RGB.g[2] * s);\n  const b = 255 * lrgb2rgb(LSM_TO_RGB.b[0] * l + LSM_TO_RGB.b[1] * m + LSM_TO_RGB.b[2] * s);\n  return {\n    r: clamp(round(r, precision), 0, 255),\n    g: clamp(round(g, precision), 0, 255),\n    b: clamp(round(b, precision), 0, 255)\n  };\n}\n\n// src/converters/oklab2hex.ts\nfunction oklab2hex(input) {\n  const value = parseInput(input, \"oklab\");\n  return rgb2hex(oklab2rgb(value));\n}\n\n// src/converters/oklab2hsl.ts\nfunction oklab2hsl(input) {\n  const value = parseInput(input, \"oklab\");\n  return rgb2hsl(oklab2rgb(value));\n}\n\n// src/converters/oklch2oklab.ts\nvar { sin, cos } = Math;\nfunction oklch2oklab(input, precision) {\n  let { l, c, h } = parseInput(input, \"oklch\");\n  if (Number.isNaN(h) || h < 0) {\n    h = 0;\n  }\n  return restrictValues({ l, a: c * cos(h * DEG2RAD), b: c * sin(h * DEG2RAD) }, precision);\n}\n\n// src/converters/oklch2rgb.ts\nfunction oklch2rgb(input, precision = 0) {\n  const value = parseInput(input, \"oklch\");\n  return oklab2rgb(oklch2oklab(value), precision);\n}\n\n// src/converters/oklch2hex.ts\nfunction oklch2hex(input) {\n  const value = parseInput(input, \"oklch\");\n  return rgb2hex(oklch2rgb(value));\n}\n\n// src/converters/oklch2hsl.ts\nfunction oklch2hsl(input) {\n  const value = parseInput(input, \"oklch\");\n  return rgb2hsl(oklch2rgb(value));\n}\n\n// src/extract-color-parts.ts\nfunction extractColorParts(input) {\n  invariant(isString(input), MESSAGES.inputString);\n  if (isHex(input)) {\n    const keys2 = COLOR_KEYS.rgb;\n    const { r, g, b } = hex2rgb(input);\n    const alpha2 = extractAlphaFromHex(input);\n    return {\n      model: \"rgb\",\n      [keys2[0]]: r,\n      [keys2[1]]: g,\n      [keys2[2]]: b,\n      alpha: alpha2 < 1 ? alpha2 : void 0\n    };\n  }\n  const colorRegex = /(?:(rgb|hsl|oklab|oklch)a?\\s*\\(\\s*([\\d%.-]+)\\s*[ ,/]\\s*([\\d%.-]+)\\s*[ ,/]\\s*([\\d%.-]+)(?:\\s*[ ,/]\\s*([\\d%.-]+))?\\s*\\))/i;\n  const matches = colorRegex.exec(input);\n  invariant(hasValidMatches(matches), MESSAGES.invalidCSS);\n  const model = matches[1];\n  const keys = COLOR_KEYS[model];\n  let alpha = matches[5] ? parseFloat(matches[5]) : 1;\n  if (alpha > 1) {\n    alpha /= 100;\n  }\n  return {\n    model,\n    [keys[0]]: parseFloat(matches[2]),\n    [keys[1]]: parseFloat(matches[3]),\n    [keys[2]]: parseFloat(matches[4]),\n    alpha: alpha < 1 ? alpha : void 0\n  };\n}\n\n// src/parse-css.ts\nfunction parseCSS(input, format) {\n  invariant(isString(input), MESSAGES.inputString);\n  let result;\n  const value = isNamedColor(input) ? cssColors[input.toLowerCase()] : input;\n  const output = format ?? (isHex(value) ? \"hex\" : extractColorParts(value).model);\n  const colorParams = (params) => Object.values(params);\n  if (isHex(value)) {\n    const alpha = extractAlphaFromHex(value);\n    switch (output) {\n      case \"hsl\": {\n        result = addAlpha(hex2hsl(value), alpha);\n        break;\n      }\n      case \"oklab\": {\n        result = addAlpha(hex2oklab(value), alpha);\n        break;\n      }\n      case \"oklch\": {\n        result = addAlpha(hex2oklch(value), alpha);\n        break;\n      }\n      case \"rgb\": {\n        result = addAlpha(hex2rgb(value), alpha);\n        break;\n      }\n      default: {\n        result = `${removeAlphaFromHex(value)}${alpha !== 1 ? convertAlphaToHex(alpha) : \"\"}`;\n        break;\n      }\n    }\n    return result;\n  }\n  switch (output) {\n    case \"hsl\": {\n      const { alpha, model, ...color } = extractColorParts(value);\n      if ([\"oklab\", \"oklch\"].includes(model) && color.l > 1) {\n        color.l = round(color.l / 100, PRECISION);\n      }\n      result = addAlpha(\n        model === \"hsl\" ? color : converters_exports[`${model}2hsl`](colorParams(color)),\n        alpha\n      );\n      break;\n    }\n    case \"oklab\": {\n      const { alpha, model, ...color } = extractColorParts(value);\n      if ([\"oklab\", \"oklch\"].includes(model) && color.l > 1) {\n        color.l = round(color.l / 100, PRECISION);\n      }\n      result = addAlpha(\n        model === \"oklab\" ? color : converters_exports[`${model}2oklab`](colorParams(color)),\n        alpha\n      );\n      break;\n    }\n    case \"oklch\": {\n      const { alpha, model, ...color } = extractColorParts(value);\n      if ([\"oklab\", \"oklch\"].includes(model) && color.l > 1) {\n        color.l = round(color.l / 100, PRECISION);\n      }\n      result = addAlpha(\n        model === \"oklch\" ? color : converters_exports[`${model}2oklch`](colorParams(color)),\n        alpha\n      );\n      break;\n    }\n    case \"rgb\": {\n      const { alpha, model, ...color } = extractColorParts(value);\n      if ([\"oklab\", \"oklch\"].includes(model) && color.l > 1) {\n        color.l /= 100;\n      }\n      result = addAlpha(\n        model === \"rgb\" ? color : converters_exports[`${model}2rgb`](colorParams(color)),\n        alpha\n      );\n      break;\n    }\n    case \"hex\":\n    default: {\n      const { alpha, model, ...color } = extractColorParts(value);\n      let alphaPrefix = \"\";\n      if ([\"oklab\", \"oklch\"].includes(model) && color.l > 1) {\n        color.l = round(color.l / 100, PRECISION);\n      }\n      if (alpha) {\n        alphaPrefix = convertAlphaToHex(alpha);\n      }\n      result = `${converters_exports[`${model}2hex`](colorParams(color))}${alphaPrefix}`;\n      break;\n    }\n  }\n  return result;\n}\n\n// src/modules/parse-color.ts\nfunction parseColor(color) {\n  invariant(!!color, MESSAGES.input);\n  const output = {};\n  if (isString(color)) {\n    const { alpha = 1 } = extractColorParts(color);\n    const type = isHex(color) ? \"hex\" : extractColorParts(color).model;\n    output.hex = addAlphaToHex(parseCSS(color, \"hex\"), alpha);\n    output.hsl = addAlpha(parseCSS(color, \"hsl\"), alpha);\n    output.oklab = addAlpha(parseCSS(color, \"oklab\"), alpha);\n    output.oklch = addAlpha(parseCSS(color, \"oklch\"), alpha);\n    output.rgb = addAlpha(parseCSS(color, \"rgb\"), alpha);\n    output.alpha = alpha;\n    output.type = type;\n  } else if (isPlainObject(color)) {\n    const { alpha = 1 } = color;\n    if (isHSL(color)) {\n      output.hsl = {\n        h: limit(color.h, \"hsl\", \"h\"),\n        s: limit(color.s, \"hsl\", \"s\"),\n        l: limit(color.l, \"hsl\", \"l\")\n      };\n      output.rgb = hsl2rgb(output.hsl);\n      output.oklab = hsl2oklab(output.hsl);\n      output.oklch = hsl2oklch(output.hsl);\n      output.type = \"hsl\";\n    } else if (isLAB(color)) {\n      output.hsl = oklab2hsl(color);\n      output.oklab = color;\n      output.oklch = oklab2oklch(color);\n      output.rgb = oklab2rgb(color);\n      output.type = \"oklab\";\n    } else if (isLCH(color)) {\n      output.hsl = oklch2hsl(color);\n      output.oklab = oklch2oklab(color);\n      output.oklch = color;\n      output.rgb = oklch2rgb(color);\n      output.type = \"oklch\";\n    } else if (isRGB(color)) {\n      output.rgb = {\n        r: limit(color.r, \"rgb\", \"r\"),\n        g: limit(color.g, \"rgb\", \"g\"),\n        b: limit(color.b, \"rgb\", \"b\")\n      };\n      output.hsl = rgb2hsl(output.rgb);\n      output.oklab = rgb2oklab(output.rgb);\n      output.oklch = rgb2oklch(output.rgb);\n      output.type = \"rgb\";\n    } else {\n      throw new Error(\"invalid color\");\n    }\n    output.hex = addAlphaToHex(hsl2hex(output.hsl), alpha);\n    output.hsl = addAlpha(output.hsl, alpha);\n    output.oklab = addAlpha(output.oklab, alpha);\n    output.oklch = addAlpha(output.oklch, alpha);\n    output.rgb = addAlpha(output.rgb, alpha);\n    output.alpha = alpha;\n  } else {\n    throw new Error(MESSAGES.input);\n  }\n  return output;\n}\n\n// src/brightness-difference.ts\nfunction brightnessDifference(left, right, precision = PRECISION) {\n  invariant(isString(left), MESSAGES.left);\n  invariant(isString(right), MESSAGES.right);\n  const RGBLeft = parseCSS(left, \"rgb\");\n  const RGBRight = parseCSS(right, \"rgb\");\n  const brightnessLeft = (RGBLeft.r * 299 + RGBLeft.g * 587 + RGBLeft.b * 114) / 1e3;\n  const brightnessRight = (RGBRight.r * 299 + RGBRight.g * 587 + RGBRight.b * 114) / 1e3;\n  return round(Math.abs(brightnessRight - brightnessLeft), precision);\n}\n\n// src/chroma.ts\nfunction chroma(input) {\n  invariant(isString(input), MESSAGES.inputString);\n  const { r, g, b } = parseCSS(input, \"rgb\");\n  const max = Math.max(r, g, b);\n  const min = Math.min(r, g, b);\n  return round((max - min) / 255, 4);\n}\n\n// src/color-difference.ts\nfunction colorDifference(left, right) {\n  invariant(isString(left), MESSAGES.left);\n  invariant(isString(right), MESSAGES.right);\n  const RGBLeft = parseCSS(left, \"rgb\");\n  const RGBRight = parseCSS(right, \"rgb\");\n  return Math.max(RGBLeft.r, RGBRight.r) - Math.min(RGBLeft.r, RGBRight.r) + (Math.max(RGBLeft.g, RGBRight.g) - Math.min(RGBLeft.g, RGBRight.g)) + (Math.max(RGBLeft.b, RGBRight.b) - Math.min(RGBLeft.b, RGBRight.b));\n}\n\n// src/luminance.ts\nfunction luminance(input) {\n  invariant(isString(input), MESSAGES.inputString);\n  const { r, g, b } = parseCSS(input, \"rgb\");\n  const rgb = [r / 255, g / 255, b / 255];\n  for (let index = 0; index < rgb.length; index++) {\n    if (rgb[index] <= 0.03928) {\n      rgb[index] /= 12.92;\n    } else {\n      rgb[index] = ((rgb[index] + 0.055) / 1.055) ** 2.4;\n    }\n  }\n  return round(0.2126 * rgb[0] + 0.7152 * rgb[1] + 0.0722 * rgb[2], 4);\n}\n\n// src/contrast.ts\nfunction contrast(left, right) {\n  invariant(isString(left), MESSAGES.left);\n  invariant(isString(right), MESSAGES.right);\n  const LuminanceLeft = luminance(left);\n  const LuminanceRight = luminance(right);\n  return round(\n    LuminanceLeft >= LuminanceRight ? (LuminanceLeft + 0.05) / (LuminanceRight + 0.05) : (LuminanceRight + 0.05) / (LuminanceLeft + 0.05)\n  );\n}\n\n// src/compare.ts\nfunction compare(left, right) {\n  invariant(isString(left), MESSAGES.left);\n  invariant(isString(right), MESSAGES.right);\n  const colorThreshold = 500;\n  const brightnessThreshold = 125;\n  const colorDifference2 = colorDifference(left, right);\n  const contrast2 = contrast(left, right);\n  const brightnessDifference2 = brightnessDifference(left, right);\n  const isBright = brightnessDifference2 >= brightnessThreshold;\n  const hasEnoughDifference = colorDifference2 >= colorThreshold;\n  let compliant = 0;\n  if (isBright && hasEnoughDifference) {\n    compliant = 2;\n  } else if (isBright || hasEnoughDifference) {\n    compliant = 1;\n  }\n  return {\n    brightnessDifference: brightnessDifference2,\n    colorDifference: colorDifference2,\n    compliant,\n    contrast: contrast2,\n    largeAA: contrast2 >= 3,\n    largeAAA: contrast2 >= 4.5,\n    normalAA: contrast2 >= 4.5,\n    normalAAA: contrast2 >= 7\n  };\n}\n\n// src/format-css.ts\nfunction getColorModel(input) {\n  if (isHex(input) || isNamedColor(input)) {\n    return \"hex\";\n  }\n  if (isString(input)) {\n    return extractColorParts(input).model;\n  } else if (isHSL(input)) {\n    return \"hsl\";\n  } else if (isLAB(input)) {\n    return \"oklab\";\n  } else if (isLCH(input)) {\n    return \"oklch\";\n  } else if (isRGB(input)) {\n    return \"rgb\";\n  }\n  throw new Error(MESSAGES.invalid);\n}\nfunction getColorValue(input, output) {\n  const value = isNamedColor(input) ? cssColors[input.toLowerCase()] : input;\n  const from = getColorModel(value);\n  if (from === output) {\n    return value;\n  }\n  const converterKey = `${from}2${output}`;\n  const converter = converters_exports[converterKey];\n  if (!converter) {\n    throw new Error(`Converter not found for ${from} to ${output}`);\n  }\n  switch (from) {\n    case \"hex\": {\n      if (output === \"hex\") {\n        return value;\n      }\n      return converter(value);\n    }\n    case \"hsl\": {\n      if (output === \"hsl\") {\n        return value;\n      }\n      return converter(value);\n    }\n    case \"oklab\": {\n      if (output === \"oklab\") {\n        return value;\n      }\n      return converter(value);\n    }\n    case \"oklch\": {\n      if (output === \"oklch\") {\n        return value;\n      }\n      return converter(value);\n    }\n    default: {\n      if (output === \"rgb\") {\n        return value;\n      }\n      return converter(value);\n    }\n  }\n}\nfunction formatCSS(input, options = {}) {\n  invariant(isHex(input) || isValidColorModel(input), MESSAGES.invalid);\n  const { alpha, format = \"hex\", precision = PRECISION, separator: baseSeparator = \" \" } = options;\n  const opacity2 = alpha && alpha !== 1 ? `${round(alpha * 100)}%` : null;\n  let params = [];\n  let separator = baseSeparator;\n  switch (format) {\n    case \"hsl\": {\n      const { h, s, l } = getColorValue(input, \"hsl\");\n      params = [h, `${s}%`, `${l}%`];\n      break;\n    }\n    case \"oklab\": {\n      separator = \" \";\n      const { l, a, b } = restrictValues(getColorValue(input, \"oklab\"), precision);\n      params = [`${round(l * 100, precision)}%`, a, b];\n      break;\n    }\n    case \"oklch\": {\n      separator = \" \";\n      const { l, c, h } = restrictValues(getColorValue(input, \"oklch\"), precision);\n      params = [`${round(l * 100, precision)}%`, c, h];\n      break;\n    }\n    case \"rgb\": {\n      const { r, g, b } = getColorValue(input, \"rgb\");\n      params = [r, g, b];\n      break;\n    }\n    default: {\n      const hex = removeAlphaFromHex(getColorValue(input, \"hex\"));\n      if (alpha && alpha !== 1) {\n        return `${hex}${convertAlphaToHex(alpha)}`;\n      }\n      return hex;\n    }\n  }\n  return `${format}(${params.join(separator)}${opacity2 ? ` / ${opacity2}` : \"\"})`;\n}\n\n// src/modules/updater.ts\nfunction updater(key, operator, format) {\n  return (input, amount) => {\n    invariant(isString(input), MESSAGES.inputString);\n    invariant(isNumber(amount), MESSAGES.alpha);\n    const color = parseCSS(input, \"hsl\");\n    const output = isHex(input) || isNamedColor(input) ? \"hex\" : extractColorParts(input).model;\n    return formatCSS(\n      {\n        ...color,\n        [key]: clamp(color[key] + (operator === \"+\" ? amount : -amount), 0, 100)\n      },\n      { format: format ?? output }\n    );\n  };\n}\n\n// src/darken.ts\nfunction darken(input, amount, format) {\n  return updater(\"l\", \"-\", format)(input, amount);\n}\n\n// src/desaturate.ts\nfunction desaturate(input, amount, format) {\n  return updater(\"s\", \"-\", format)(input, amount);\n}\n\n// src/rotate.ts\nfunction rotate(input, degrees, format) {\n  invariant(isString(input), MESSAGES.inputString);\n  invariant(isNumber(degrees), \"degrees must be a number\");\n  const color = parseCSS(input, \"hsl\");\n  const output = isHex(input) || isNamedColor(input) ? \"hex\" : extractColorParts(input).model;\n  return formatCSS(\n    {\n      ...color,\n      h: constrainDegrees(color.h, degrees)\n    },\n    { format: format ?? output }\n  );\n}\n\n// src/invert.ts\nfunction invert(input) {\n  invariant(isString(input), MESSAGES.inputString);\n  const format = isHex(input) || isNamedColor(input) ? \"hex\" : extractColorParts(input).model;\n  const hex = parseCSS(input, \"hex\");\n  return formatCSS(rotate(hex, 180), { format });\n}\n\n// src/lighten.ts\nfunction lighten(input, amount, format) {\n  return updater(\"l\", \"+\", format)(input, amount);\n}\n\n// src/opacify.ts\nfunction opacify(input, alpha, format) {\n  invariant(isString(input), MESSAGES.inputString);\n  invariant(isNumber(alpha), MESSAGES.alpha);\n  const type = isHex(input) || isNamedColor(input) ? \"hex\" : extractColorParts(input).model;\n  const rgb = parseCSS(input, \"rgb\");\n  return formatCSS(rgb, { format: format ?? type, alpha });\n}\n\n// src/opacity.ts\nfunction opacity(input) {\n  invariant(isString(input), MESSAGES.inputString);\n  if (isHex(input)) {\n    return extractAlphaFromHex(input);\n  } else if (Object.keys(cssColors).includes(input)) {\n    return 1;\n  }\n  const { alpha } = extractColorParts(input);\n  if (!alpha) {\n    return 1;\n  }\n  return alpha;\n}\n\n// src/saturate.ts\nfunction saturate(input, amount, format) {\n  return updater(\"s\", \"+\", format)(input, amount);\n}\n\n// src/text-color.ts\nfunction textColor(input, options = {}) {\n  const { darkColor = \"#000000\", lightColor = \"#ffffff\", threshold = 128 } = options;\n  invariant(isString(input), MESSAGES.inputString);\n  invariant(threshold >= 0 && threshold <= 255, MESSAGES.threshold);\n  try {\n    const { r, g, b } = hex2rgb(parseCSS(input, \"hex\"));\n    const yiq = (r * 299 + g * 587 + b * 114) / 1e3;\n    return yiq >= threshold ? darkColor : lightColor;\n  } catch (error) {\n    console.warn(`Invalid color input: ${input}`);\n    console.warn(error);\n    return darkColor;\n  }\n}\n\n// src/transparentize.ts\nfunction transparentize(input, alpha, format) {\n  invariant(isString(input), MESSAGES.inputString);\n  invariant(isNumber(alpha), MESSAGES.alpha);\n  invariant(alpha >= -1 && alpha <= 1, MESSAGES.alpha);\n  const oklch = parseCSS(input, \"oklab\");\n  const value = round(clamp(opacity(input) - alpha, 0, 1));\n  return formatCSS(oklch, { format, alpha: value });\n}\n\n// src/colorizr.ts\nvar Colorizr = class {\n  constructor(color, options = {}) {\n    __publicField(this, \"alpha\");\n    __publicField(this, \"hex\");\n    __publicField(this, \"hsl\");\n    __publicField(this, \"oklab\");\n    __publicField(this, \"oklch\");\n    __publicField(this, \"rgb\");\n    __publicField(this, \"type\");\n    invariant(!!color, \"color is required\");\n    const { alpha, hex, hsl, oklab, oklch, rgb, type } = parseColor(color);\n    this.hex = hex;\n    this.hsl = hsl;\n    this.oklab = oklab;\n    this.oklch = oklch;\n    this.rgb = rgb;\n    this.alpha = alpha;\n    this.type = options.format ?? type;\n  }\n  /**\n   * Get css string\n   */\n  get css() {\n    return this.selectedColor;\n  }\n  /**\n   * Get the red value\n   */\n  get red() {\n    return Number(this.rgb.r);\n  }\n  /**\n   * Get the green value\n   */\n  get green() {\n    return Number(this.rgb.g);\n  }\n  /**\n   * Get the blue value\n   */\n  get blue() {\n    return Number(this.rgb.b);\n  }\n  /**\n   * Get the hue value\n   */\n  get hue() {\n    return Number(this.hsl.h);\n  }\n  /**\n   * Get the saturation value\n   */\n  get saturation() {\n    return Number(this.hsl.s);\n  }\n  /**\n   * Get the lightness value\n   */\n  get lightness() {\n    return Number(this.hsl.l);\n  }\n  /**\n   * Get the luminance value\n   */\n  get luminance() {\n    return luminance(this.selectedColor);\n  }\n  /**\n   * Get the chroma value\n   */\n  get chroma() {\n    return chroma(this.selectedColor);\n  }\n  get opacity() {\n    return opacity(this.selectedColor);\n  }\n  /**\n   * Get the contrasted color\n   */\n  get textColor() {\n    return textColor(this.selectedColor);\n  }\n  get selectedColor() {\n    return formatCSS(this[this.type], { format: this.type, alpha: this.alpha });\n  }\n  brightnessDifference(input) {\n    return brightnessDifference(this.selectedColor, input);\n  }\n  colorDifference(input) {\n    return colorDifference(this.selectedColor, input);\n  }\n  /**\n   * Test 2 colors for compliance\n   */\n  compare(input) {\n    return compare(this.selectedColor, input);\n  }\n  contrast(input) {\n    return contrast(this.selectedColor, input);\n  }\n  format(type, precision) {\n    return formatCSS(this.rgb, {\n      alpha: this.alpha,\n      format: type,\n      precision\n    });\n  }\n  /**\n   * Increase lightness\n   */\n  lighten(amount) {\n    return lighten(this.selectedColor, amount);\n  }\n  /**\n   * Decrease lightness\n   */\n  darken(amount) {\n    return darken(this.selectedColor, amount);\n  }\n  /**\n   * Increase saturation\n   */\n  saturate(amount) {\n    return saturate(this.selectedColor, amount);\n  }\n  /**\n   * Decrease saturation\n   */\n  desaturate(amount) {\n    return desaturate(this.selectedColor, amount);\n  }\n  /**\n   * Invert color\n   */\n  invert() {\n    return invert(this.selectedColor);\n  }\n  /**\n   * Add opacity to the color.\n   */\n  opacify(alpha = 0.9) {\n    return opacify(this.selectedColor, alpha, this.type);\n  }\n  /**\n   * Rotate color\n   */\n  rotate(degrees) {\n    return rotate(this.selectedColor, degrees);\n  }\n  /**\n   * Make the color more transparent\n   */\n  transparentize(alpha = 0.1) {\n    return transparentize(this.selectedColor, alpha, this.type);\n  }\n};\n\n// src/convert.ts\nfunction convert(input, format) {\n  const value = parseCSS(input, format);\n  return formatCSS(value, { format });\n}\n\n// src/is-valid-color.ts\nfunction isValidColor(input) {\n  try {\n    parseCSS(input);\n    return true;\n  } catch {\n    return false;\n  }\n}\n\n// src/name.ts\nfunction name(input) {\n  invariant(isString(input), MESSAGES.inputString);\n  const hex = parseCSS(input, \"hex\");\n  const [color] = Object.entries(cssColors).find(([, value]) => value === hex) || [];\n  return color ?? hex;\n}\n\n// src/palette.ts\nfunction palette(input, options = {}) {\n  invariant(isString(input), MESSAGES.inputString);\n  invariant(isPlainObject(options), MESSAGES.options);\n  const { format, lightness, saturation, size = 6, type } = options;\n  const hsl = parseCSS(input, \"hsl\");\n  const colorFormat = isHex(input) || isNamedColor(input) ? \"hex\" : extractColorParts(input).model;\n  const output = [];\n  if (type === \"monochromatic\") {\n    const step = 80 / size;\n    for (let index = size; index > 0; index--) {\n      output.push(hsl2hex({ ...hsl, l: step * index }));\n    }\n  } else {\n    const step = 360 / size;\n    output.push(hsl2hex({ ...hsl, l: lightness ?? hsl.l, s: saturation ?? hsl.s }));\n    for (let index = 1; index < size; index++) {\n      const color = rotate(input, hsl.h + step * index, \"hex\");\n      output.push(hsl2hex({ ...hex2hsl(color), l: lightness ?? hsl.l, s: saturation ?? hsl.s }));\n    }\n  }\n  return output.map((color) => convert(color, format ?? colorFormat));\n}\n\n// src/p3.ts\nfunction multiplyMatrix(matrix, vector) {\n  return [\n    matrix[0][0] * vector[0] + matrix[0][1] * vector[1] + matrix[0][2] * vector[2],\n    matrix[1][0] * vector[0] + matrix[1][1] * vector[1] + matrix[1][2] * vector[2],\n    matrix[2][0] * vector[0] + matrix[2][1] * vector[1] + matrix[2][2] * vector[2]\n  ];\n}\nfunction isInP3Gamut(color) {\n  const epsilon = 1e-6;\n  return color.every((component) => component >= 0 - epsilon && component <= 1 + epsilon);\n}\nfunction oklabToLinearSRGB(L, a, b) {\n  const l = (L + LAB_TO_LMS.l[0] * a + LAB_TO_LMS.l[1] * b) ** 3;\n  const m = (L + LAB_TO_LMS.m[0] * a + LAB_TO_LMS.m[1] * b) ** 3;\n  const s = (L + LAB_TO_LMS.s[0] * a + LAB_TO_LMS.s[1] * b) ** 3;\n  return [\n    LSM_TO_RGB.r[0] * l + LSM_TO_RGB.r[1] * m + LSM_TO_RGB.r[2] * s,\n    LSM_TO_RGB.g[0] * l + LSM_TO_RGB.g[1] * m + LSM_TO_RGB.g[2] * s,\n    LSM_TO_RGB.b[0] * l + LSM_TO_RGB.b[1] * m + LSM_TO_RGB.b[2] * s\n  ];\n}\nfunction oklabToLinearP3(L, a, b) {\n  const srgb = oklabToLinearSRGB(L, a, b);\n  return multiplyMatrix(SRGB_TO_P3, srgb);\n}\nfunction getOkLCHMaxChroma(input, precision = PRECISION) {\n  const { l, h } = isString(input) ? parseCSS(input, \"oklch\") : input;\n  invariant(isNumber(l) && l >= 0 && l <= 1, MESSAGES.lightnessRange);\n  invariant(isNumber(h) && h >= 0 && h <= 360, MESSAGES.hueRange);\n  const epsilon = 1e-6;\n  let low = 0;\n  let high = 0.5;\n  while (high - low > epsilon) {\n    const mid = (low + high) / 2;\n    const { l: L, a, b } = oklch2oklab({ l, c: mid, h }, 16);\n    const p3Color = oklabToLinearP3(L, a, b);\n    if (isInP3Gamut(p3Color)) {\n      low = mid;\n    } else {\n      high = mid;\n    }\n  }\n  return round(low, precision);\n}\nfunction getP3Color(input) {\n  const lch = isString(input) ? parseCSS(input, \"oklch\") : input;\n  return `oklch(${lch.l} ${getOkLCHMaxChroma(lch)} ${lch.h})`;\n}\n\n// src/random.ts\nfunction random(type = \"hex\") {\n  const hsl = {\n    h: Math.floor(Math.random() * 360) + 1,\n    s: Math.floor(Math.random() * 90) + 10,\n    l: Math.floor(Math.random() * 80) + 10\n  };\n  return formatCSS(hsl, { format: type });\n}\n\n// src/scheme.ts\nfunction scheme(input, typeOrOptions) {\n  invariant(isString(input), MESSAGES.inputString);\n  const { format, type = \"complementary\" } = isString(typeOrOptions) ? { type: typeOrOptions } : typeOrOptions ?? {};\n  const output = isHex(input) || isNamedColor(input) ? \"hex\" : extractColorParts(input).model;\n  const colors = [];\n  switch (type) {\n    case \"analogous\": {\n      colors.push(rotate(input, -30), input, rotate(input, 30));\n      break;\n    }\n    case \"complementary\": {\n      colors.push(input, rotate(input, 180));\n      break;\n    }\n    case \"split\":\n    case \"split-complementary\": {\n      colors.push(input, rotate(input, 150), rotate(input, 210));\n      break;\n    }\n    case \"triadic\": {\n      colors.push(input, rotate(input, 120), rotate(input, 240));\n      break;\n    }\n    case \"tetradic\":\n    case \"rectangle\": {\n      colors.push(input, rotate(input, 60), rotate(input, 180), rotate(input, 240));\n      break;\n    }\n    case \"square\": {\n      colors.push(input, rotate(input, 90), rotate(input, 180), rotate(input, 270));\n      break;\n    }\n    default: {\n      throw new TypeError(\"invalid type\");\n    }\n  }\n  return colors.map((color) => convert(color, format ?? output));\n}\n\n// src/swatch.ts\nfunction shadeColor(input, lightness) {\n  const { c, h } = input;\n  const chromaScale = c === 0 ? 1 : 4 * lightness * (1 - lightness);\n  const chroma2 = c * chromaScale;\n  const adjustedChroma = clamp(chroma2, 0, 0.4);\n  return { l: lightness, c: adjustedChroma, h };\n}\nfunction swatch(input, options = {}) {\n  invariant(isString(input), MESSAGES.inputString);\n  const {\n    format,\n    lightnessFactor = 1.5,\n    maxLightness = 0.97,\n    minLightness = 0.2,\n    scale = \"dynamic\",\n    variant = \"base\"\n  } = options;\n  invariant(\n    maxLightness > minLightness && maxLightness <= 1 && minLightness >= 0,\n    \"maxLightness must be greater than minLightness and within the range [0, 1].\"\n  );\n  const lch = parseCSS(input, \"oklch\");\n  const chromaScale = {\n    base: 1,\n    deep: 0.8,\n    neutral: 0.5,\n    pastel: 0.3,\n    subtle: 0.2,\n    vibrant: 1.25\n  }[variant];\n  lch.l = 0.7;\n  lch.c *= chromaScale;\n  if (variant === \"deep\") {\n    lch.l *= 0.7;\n  }\n  const colorFormat = isHex(input) || isNamedColor(input) ? \"hex\" : extractColorParts(input).model;\n  const steps = 11;\n  let palette2 = {};\n  if (scale === \"dynamic\") {\n    for (let index = 0; index < steps; index++) {\n      const lightness = maxLightness - (maxLightness - minLightness) * (index / (steps - 1)) ** lightnessFactor;\n      let tone = index * 100;\n      if (index === 0) {\n        tone = 50;\n      } else if (index === 10) {\n        tone = 950;\n      }\n      palette2[tone] = lightness;\n    }\n  } else {\n    palette2 = {\n      50: 0.97,\n      100: 0.92,\n      200: 0.85,\n      300: 0.78,\n      400: 0.69,\n      500: 0.57,\n      600: 0.46,\n      700: 0.35,\n      800: 0.24,\n      900: 0.18,\n      950: 0.1\n    };\n  }\n  const output = Object.entries(palette2).reduce(\n    (acc, [key, value]) => {\n      acc[Number(key)] = shadeColor(lch, value);\n      return acc;\n    },\n    {}\n  );\n  return Object.entries(output).reduce((acc, [key, value]) => {\n    return {\n      ...acc,\n      [key]: formatCSS(value, { format: format ?? colorFormat })\n    };\n  }, {});\n}\n\n// src/index.ts\nvar index_default = Colorizr;\nexport {\n  addAlphaToHex,\n  brightnessDifference,\n  chroma,\n  colorDifference,\n  compare,\n  contrast,\n  convert,\n  convertAlphaToHex,\n  darken,\n  index_default as default,\n  desaturate,\n  extractAlphaFromHex,\n  extractColorParts,\n  formatCSS,\n  formatHex,\n  getOkLCHMaxChroma,\n  getP3Color,\n  hex2hsl,\n  hex2oklab,\n  hex2oklch,\n  hex2rgb,\n  hexadecimalToNumber,\n  hsl2hex,\n  hsl2oklab,\n  hsl2oklch,\n  hsl2rgb,\n  isHSL,\n  isHex,\n  isLAB,\n  isLCH,\n  isRGB,\n  isValidColor,\n  lighten,\n  luminance,\n  name,\n  oklab2hex,\n  oklab2hsl,\n  oklab2oklch,\n  oklab2rgb,\n  oklch2hex,\n  oklch2hsl,\n  oklch2oklab,\n  oklch2rgb,\n  opacify,\n  opacity,\n  palette,\n  parseCSS,\n  random,\n  removeAlphaFromHex,\n  rgb2hex,\n  rgb2hsl,\n  rgb2oklab,\n  rgb2oklch,\n  rotate,\n  saturate,\n  scheme,\n  swatch,\n  textColor,\n  transparentize\n};\n//# sourceMappingURL=index.mjs.map","export const isHsl = (v) => {\n    if (typeof v !== `object`)\n        return false;\n    if (!(`h` in v))\n        return false;\n    if (!(`s` in v))\n        return false;\n    if (!(`l` in v))\n        return false;\n    if (!(`unit` in v))\n        return false;\n    if (!(`space` in v))\n        return false;\n    if (v.space !== `hsl`)\n        return false;\n    return true;\n};\nexport const isRgb = (v) => {\n    if (typeof v !== `object`)\n        return false;\n    if (!(`r` in v))\n        return false;\n    if (!(`g` in v))\n        return false;\n    if (!(`b` in v))\n        return false;\n    if (!(`space` in v))\n        return false;\n    if (!(`unit` in v))\n        return false;\n    if (v.space === `srgb`)\n        return true;\n    return false;\n};\n/**\n * If the input object has r,g&b properties, it will return a fully-\n * formed Rgb type with `unit` and `space` properties.\n *\n * If it lacks these basic three properties or they are out of range,\n *  _undefined_ is returned.\n *\n * If RGB values are less than 1 assumes unit:scalar. Otherwise unit:8bit.\n * If RGB values exceed 255, _undefined_ returned.\n * @param v\n * @returns\n */\nexport const tryParseObjectToRgb = (v) => {\n    if (!(`r` in v && `g` in v && `b` in v))\n        return;\n    if (!(`unit` in v)) {\n        if (v.r <= 1 && v.g <= 1 && v.b <= 1) {\n            v.unit = `scalar`;\n        }\n        else if (v.r > 255 && v.g <= 255 && v.b <= 255) {\n            return; // out of range\n        }\n        else {\n            v.unit = `8bit`;\n        }\n    }\n    if (!(`space` in v)) {\n        v.space = `srgb`;\n    }\n    return v;\n};\nexport const tryParseObjectToHsl = (v) => {\n    if (!(`h` in v && `s` in v && `l` in v))\n        return;\n    if (!(`unit` in v)) {\n        if (v.r <= 1 && v.g <= 1 && v.b <= 1) {\n            v.unit = `scalar`;\n        }\n        else if (v.s > 100 && v.l <= 100) {\n            return; // out of range\n        }\n        else {\n            v.unit = `absolute`;\n        }\n    }\n    if (!(`space` in v)) {\n        v.space = `hsl`;\n    }\n    return v;\n};\nexport const isOkLch = (v) => {\n    if (typeof v !== `object`)\n        return false;\n    if (!(`l` in v))\n        return false;\n    if (!(`c` in v))\n        return false;\n    if (!(`h` in v))\n        return false;\n    if (!(`unit` in v))\n        return false;\n    if (!(`space` in v))\n        return false;\n    if (v.space === `lch`)\n        return true;\n    if (v.space === `oklch`)\n        return true;\n    return false;\n};\nexport const isColourish = (v) => {\n    if (typeof v === `string`)\n        return true;\n    if (typeof v !== `object`)\n        return false;\n    if (isHsl(v))\n        return true;\n    if (isOkLch(v))\n        return true;\n    if (isRgb(v))\n        return true;\n    return false;\n};\n","export function calculateHueDistance(a, b, limit = 1) {\n    let long = -1;\n    let short = -1;\n    if (b < a) {\n        long = (b - a);\n        short = limit - (a - b);\n    }\n    else {\n        long = (b - a);\n        short = (long) - limit;\n    }\n    const forward = short > 0 ? short : long;\n    const backward = short > 0 ? long : short;\n    if (Math.abs(long) < Math.abs(short)) {\n        const t = short;\n        short = long;\n        long = t;\n    }\n    return { long, short, forward, backward };\n}\nexport function wrapScalarHue(value) {\n    value = value % 1;\n    if (value < 0)\n        return (1 - Math.abs(value)) % 1;\n    return value;\n}\n// export function cssAngleFormat(value:string) {\n//   let start = value.indexOf(`)`);\n//   let end = value.lastIndexOf(')');\n//   if (start < 0) return value;\n//   if (end < start) return value;\n// }\n","import Colorizr, * as C from \"colorizr\";\nimport { numberInclusiveRangeTest, numberTest, percentTest } from \"@ixfx/guards\";\nimport { resultThrow } from \"@ixfx/guards\";\nimport { cssDefinedHexColours, resolveCss } from \"./css-colours.js\";\nimport { angleConvert, angleParse } from \"@ixfx/geometry\";\nimport { clamp, interpolate } from \"@ixfx/numbers\";\nimport { isRgb } from \"./guards.js\";\nimport { calculateHueDistance, wrapScalarHue } from \"./utility.js\";\nimport { parseCssRgbFunction, to8bit as rgbTo8bit, toLibraryHsl as rgbToLibraryHsl } from \"./srgb.js\";\n/**\n * Scales the opacity value of an input HSL value\n * ```js\n * withOpacity()\n * ```\n * @param value Colour\n * @param fn Function that calcules opacity based on input scalar value\n * @returns\n */\nexport const withOpacity = (value, fn) => {\n    switch (value.unit) {\n        case `absolute`:\n            return {\n                ...value,\n                opacity: fn((value.opacity ?? 100) / 100, value) * 100\n            };\n        case `scalar`:\n            return {\n                ...value,\n                opacity: fn((value.opacity ?? 1), value)\n            };\n    }\n};\n/**\n * Increases or decreases lightness by this percentage, returning new colour\n *\n * Amount to change:\n * * 'fixed': a fixed amount\n * * 'delta': increase/decrease by this amount\n * * 'pdelta': proportion of current value to change by ('percentage delta')\n *\n * ```\n * const colour = { h: 0.5, s: 0.5, l: 0.5, space: `hsl`, unit: `scalar` };\n * changeLightness(colour, { pdelta: 0.1 }); // l: 0.55\n * changeLightness(colour, { delta: 0.1 });  // l: 0.6\n * changeLightness(colour, { fixed: 0.5 });  // l: 0.5\n * ```\n *\n * Keep in mind the numerical value will depend on the unit of `value`. If it's scalar,\n * lightness is 0..1 scale, otherwise 0..100 scale.\n *\n * Use negative values to decrease (does not apply to 'fixed')\n * @param value Hsl colour\n * @param amount Amount to change\n */\nexport const changeLightness = (value, amount) => {\n    let newL = 0;\n    if (typeof amount.pdelta !== `undefined`) {\n        newL = value.l + (value.l * amount.pdelta);\n    }\n    else if (typeof amount.delta !== `undefined`) {\n        newL = amount.delta + value.l;\n    }\n    else if (typeof amount.fixed !== `undefined`) {\n        if (amount.fixed < 0)\n            throw new TypeError(`Cannot use negative value with 'fixed'`);\n        newL = amount.fixed;\n    }\n    else {\n        throw new TypeError(`Parameter 'amount' is missing 'delta/pdelta/fixed' properties`);\n    }\n    return {\n        ...value,\n        l: scaleProperty(value, newL, `l`)\n    };\n};\nconst scaleProperty = (hsl, value, property) => {\n    if (hsl.unit === `scalar`) {\n        // 0..1 scale\n        if (value > 1)\n            value = 1;\n        else if (value < 0)\n            value = 0;\n    }\n    else {\n        // 0..100 scale\n        if (value > 100)\n            value = 100;\n        else if (value < 0)\n            value = 0;\n    }\n    return value;\n};\nconst hslTransparent = Object.freeze({\n    h: 0, s: 0, l: 0, opacity: 0, unit: `absolute`, space: `hsl`\n});\nexport function fromHexString(hexString, options = {}) {\n    return fromLibrary(C.hex2hsl(hexString), options);\n}\nexport function fromCss(value, options = {}) {\n    value = value.toLowerCase();\n    if (value.startsWith(`hsla(`))\n        throw new Error(`hsla() not supported`);\n    if (value.startsWith(`rgba(`))\n        throw new Error(`rgba() not supported`);\n    if (value.startsWith(`#`)) {\n        return fromHexString(value, options);\n    }\n    if (value.startsWith(`--`)) {\n        try {\n            value = resolveCss(value);\n        }\n        catch (error) {\n            if (typeof options.fallbackString !== `undefined`)\n                value = options.fallbackString;\n            if (typeof options.fallbackColour !== `undefined`)\n                return options.fallbackColour;\n            throw error;\n        }\n    }\n    if (value === `transparent`)\n        return hslTransparent;\n    if (typeof cssDefinedHexColours[value] !== `undefined`) {\n        return fromHexString(cssDefinedHexColours[value], options);\n    }\n    if (value.startsWith(`rgb(`)) {\n        const hsl = rgbToLibraryHsl(value);\n        return fromLibrary(hsl, options);\n    }\n    if (!value.startsWith(`hsl(`)) {\n        try {\n            value = C.convert(value, `hsl`);\n        }\n        catch (error) {\n            if (options.fallbackString) {\n                value = options.fallbackString;\n            }\n            else {\n                throw error;\n            }\n        }\n    }\n    try {\n        // Hand-rolled hsl() parse because the package is broken\n        const hsl = parseCssHslFunction(value);\n        if (options.scalar)\n            return toScalar(hsl);\n        return toAbsolute(hsl);\n    }\n    catch (error) {\n        if (options.fallbackColour)\n            return options.fallbackColour;\n        throw error;\n    }\n}\nexport const toCssString = (hsl) => {\n    const abs = toAbsolute(hsl);\n    let css = `hsl(${abs.h}deg ${abs.s}% ${abs.l}%`;\n    if (`opacity` in abs && abs.opacity !== undefined && abs.opacity < 100) {\n        css += ` / ${abs.opacity}%`;\n    }\n    css += ')';\n    return css;\n};\nconst toLibrary = (hsl) => {\n    const abs = toAbsolute(hsl);\n    return {\n        h: abs.h,\n        s: abs.s,\n        l: abs.l,\n        alpha: abs.opacity,\n    };\n};\nfunction fromLibrary(hsl, parsingOptions = {}) {\n    if (typeof hsl === `undefined` || hsl === null) {\n        if (parsingOptions.fallbackColour)\n            return parsingOptions.fallbackColour;\n    }\n    const scalarOpt = parsingOptions.scalar ?? true;\n    // Library result is absolute\n    resultThrow(numberInclusiveRangeTest(hsl.h, 0, 360, `h`), numberInclusiveRangeTest(hsl.s, 0, 100, `s`), numberInclusiveRangeTest(hsl.l, 0, 100, `l`), percentTest((hsl.alpha ?? 1), `alpha`)\n    // () => hsl.alpha !== undefined ? numberInclusiveRangeTest(hsl.alpha, 0, 100, `alpha`) : { success: true, value: hsl },\n    );\n    if (scalarOpt) {\n        return scalar(hsl.h / 360, hsl.s / 100, hsl.l / 100, (hsl.alpha ?? 1));\n    }\n    else {\n        return absolute(hsl.h, hsl.s, hsl.l, (hsl.alpha ?? 1) * 100);\n    }\n}\nexport const toAbsolute = (hslOrString) => {\n    // if (typeof hslOrString === `string`) {\n    //   return toAbsolute(fromLibrary(C.parseCSS(hslOrString, `hsl`), { scalar: false }));\n    // }\n    if (typeof hslOrString === `string`) {\n        return fromCss(hslOrString, { scalar: false });\n        // try {\n        //   return toScalar(fromLibrary(C.parseCSS(hslOrString, `hsl`), { scalar: true }));\n        // } catch (error) {\n        //   console.error(`Hsl.toScalar: ${ hslOrString }`);\n        //   throw error;\n        // }\n    }\n    if (isRgb(hslOrString)) {\n        return toAbsolute(fromLibrary(rgbToLibraryHsl(hslOrString), { scalar: false }));\n    }\n    const hsl = hslOrString;\n    guard(hsl);\n    if (hsl.unit === `absolute`)\n        return hsl;\n    return {\n        h: hsl.h * 360,\n        s: hsl.s * 100,\n        l: hsl.l * 100,\n        opacity: (hsl.opacity ?? 1) * 100,\n        unit: `absolute`,\n        space: `hsl`\n    };\n};\n/**\n * Generates a {@link HslScalar} value.\n *\n * ```js\n * generateScaler(10); // 10deg, default to full saturation, half lightness and full opacity\n *\n * // Generate HSL value from radian angle and 50% saturation\n * generateScalar(`10rad`, 0.5);\n *\n * // Generate from numeric CSS variable\n * generateScalar(`--hue`);\n * ```\n * @param absoluteHslOrVariable Hue angle or CSS variable\n * @param saturation\n * @param lightness\n * @param opacity\n */\nexport const generateScalar = (absoluteHslOrVariable, saturation = 1, lightness = 0.5, opacity = 1) => {\n    if (typeof absoluteHslOrVariable === `string`) {\n        if (absoluteHslOrVariable.startsWith(`--`)) {\n            absoluteHslOrVariable = getComputedStyle(document.body).getPropertyValue(absoluteHslOrVariable).trim();\n        }\n    }\n    const hue = angleParse(absoluteHslOrVariable);\n    if (saturation > 1)\n        throw new TypeError(`Param 'saturation' must be between 0..1`);\n    if (lightness > 1)\n        throw new TypeError(`Param 'lightness' must be between 0..1`);\n    if (opacity > 1)\n        throw new TypeError(`Param 'opacity' must be between 0..1`);\n    const hueDeg = angleConvert(hue, `deg`).value / 360;\n    return {\n        h: hueDeg,\n        s: saturation,\n        l: lightness,\n        opacity: opacity,\n        unit: `scalar`,\n        space: `hsl`\n    };\n};\n/**\n * Converts a {@link Hsl} value to scalar units, or parses a colour string\n * and converts it.\n *\n * ```js\n * toScalar({ h: 100, s: 50, l: 100, unit: `absolute` });\n * toScalar(`red`);\n * ```\n * @param hslOrString\n * @returns\n */\nexport const toScalar = (hslOrString) => {\n    if (typeof hslOrString === `string`) {\n        return fromCss(hslOrString, { scalar: true });\n        // try {\n        //   return toScalar(fromLibrary(C.parseCSS(hslOrString, `hsl`), { scalar: true }));\n        // } catch (error) {\n        //   console.error(`Hsl.toScalar: ${ hslOrString }`);\n        //   throw error;\n        // }\n    }\n    if (isRgb(hslOrString)) {\n        return toScalar(fromLibrary(rgbToLibraryHsl(hslOrString), { scalar: true }));\n    }\n    const hsl = hslOrString;\n    guard(hsl);\n    if (hsl.unit === `scalar`)\n        return hsl;\n    return {\n        h: hsl.h / 360,\n        s: hsl.s / 100,\n        l: hsl.l / 100,\n        opacity: (hsl.opacity ?? 1) / 100,\n        unit: `scalar`,\n        space: `hsl`\n    };\n};\nexport const guard = (hsl) => {\n    const { h, s, l, opacity, space, unit } = hsl;\n    if (space !== `hsl`)\n        throw new Error(`Space is expected to be 'hsl'. Got: ${space}`);\n    if (unit === `absolute`) {\n        resultThrow(numberTest(h, `finite`, `h`), numberInclusiveRangeTest(s, 0, 100, `s`), numberInclusiveRangeTest(l, 0, 100, `l`), () => {\n            if (typeof opacity === `number`) {\n                return numberInclusiveRangeTest(opacity, 0, 100, `opacity`);\n            }\n        });\n    }\n    else if (unit === `scalar`) {\n        resultThrow(numberTest(h, `percentage`, `h`), numberTest(s, `percentage`, `s`), numberTest(l, `percentage`, `l`), () => {\n            if (typeof opacity === `number`) {\n                return numberTest(opacity, `percentage`, `opacity`);\n            }\n        });\n    }\n    else {\n        throw new Error(`Unit is expected to be 'absolute' or 'scalar'. Got: ${unit}`);\n    }\n};\nexport const interpolator = (a, b, direction = `shorter`) => {\n    a = toScalar(a);\n    b = toScalar(b);\n    const aOpacity = a.opacity ?? 1;\n    const distanceCalc = calculateHueDistance(a.h, b.h, 1);\n    const hueDistance = direction === `longer` ? distanceCalc.long : distanceCalc.short;\n    const satDistance = b.s - a.s;\n    const lightDistance = b.l - a.l;\n    const opacityDistance = (b.opacity ?? 1) - aOpacity;\n    return (amount) => {\n        amount = clamp(amount);\n        let h = interpolate(amount, 0, Math.abs(hueDistance));\n        if (hueDistance < 0)\n            h = a.h - h;\n        else\n            h = a.h + h;\n        const s = interpolate(amount, 0, satDistance);\n        const l = interpolate(amount, 0, lightDistance);\n        const o = interpolate(amount, 0, opacityDistance);\n        return scalar(wrapScalarHue(h), s + a.s, l + a.l, o + aOpacity);\n    };\n};\n/**\n * Creates a HslScalar value from scalar (0..1) values\n * @param hue\n * @param sat\n * @param lightness\n * @param opacity\n * @returns\n */\nexport function scalar(hue = 0.5, sat = 1, lightness = 0.5, opacity = 1) {\n    const hsl = {\n        unit: `scalar`,\n        space: `hsl`,\n        h: hue,\n        s: sat,\n        l: lightness,\n        opacity: opacity\n    };\n    guard(hsl);\n    return hsl;\n}\nexport function absolute(hue = 200, sat = 100, lightness = 50, opacity = 100) {\n    const hsl = {\n        unit: `absolute`,\n        space: `hsl`,\n        h: hue,\n        s: sat,\n        l: lightness,\n        opacity: opacity\n    };\n    guard(hsl);\n    return hsl;\n}\n/**\n * It seems Colorizr can't handle 'deg' units\n * @param value\n */\nexport function parseCssHslFunction(value) {\n    if (value.startsWith(`hsla`))\n        throw new Error(`hsla() is not supported`);\n    if (!value.startsWith(`hsl(`))\n        throw new Error(`Expected hsl(..) CSS colour`);\n    const start = value.indexOf('(');\n    const end = value.indexOf(')');\n    if (end < start)\n        throw new Error(`Is hsl() not terminated? Missing ')'`);\n    const part = value.substring(start + 1, end);\n    let split = part.split(/[\\s,]+/);\n    if (split.length < 3)\n        throw new Error(`Expected three tokens. Got: ${split.length} length`);\n    let returnRelative = false;\n    if (split[0].endsWith(`%`))\n        returnRelative = true;\n    if (split[1].endsWith(`%`) && split[2].endsWith(`%`))\n        returnRelative = true;\n    const valueAsScalar = (v, pos) => {\n        if (v === `none`)\n            return 0;\n        if (v.endsWith(`%`)) {\n            return Number.parseFloat(v.substring(0, v.length - 1)) / 100;\n        }\n        if (v.endsWith(`deg`) && pos === 0) {\n            v = v.substring(0, v.length - 3);\n        }\n        const vf = Number.parseFloat(v);\n        if (pos === 0)\n            return vf / 360;\n        if (pos === 3)\n            return vf; // opacity\n        return vf / 100;\n    };\n    const valueAsAbs = (v, pos) => {\n        if (v === `none`)\n            return 0;\n        if (v.endsWith(`%`)) {\n            const vf = Number.parseFloat(v.substring(0, v.length - 1));\n            if (pos === 0)\n                return vf * 360;\n            return vf;\n        }\n        if (v.endsWith(`deg`) && pos === 0) {\n            return Number.parseFloat(v.substring(0, v.length - 3));\n        }\n        const vf = Number.parseFloat(v);\n        return vf;\n    };\n    // Is there opacity?\n    if (split.length > 3) {\n        if (split[3] === '/') {\n            // Remove / part\n            split = [split[0], split[1], split[2], split[4]];\n        }\n    }\n    if (returnRelative) {\n        return scalar(valueAsScalar(split[0], 0), valueAsScalar(split[1], 1), valueAsScalar(split[2], 2), valueAsScalar(split[3] ?? `100%`, 3));\n    }\n    else {\n        // Return as absolute\n        return absolute(valueAsAbs(split[0], 0), valueAsAbs(split[1], 1), valueAsAbs(split[2], 2), valueAsAbs(split[3] ?? `100%`, 3));\n    }\n}\n/**\n * Converts a Hsl structure (or CSS string) to Colorizr's RGB format\n * @param hsl HSL colour\n * @returns\n */\nexport function toLibraryRgb(hsl) {\n    if (typeof hsl === `string`) {\n        const parseResult = fromCss(hsl, { scalar: false });\n        //console.log(`parseResult hsl: ${ hsl } pr: `, parseResult);\n        return toLibraryRgb(parseResult);\n    }\n    hsl = toAbsolute(hsl);\n    //console.log(`toLibraryRgb hsl`, hsl);\n    const rgb = C.hsl2rgb({ h: hsl.h, s: hsl.s, l: hsl.l });\n    return { ...rgb, alpha: (hsl.opacity ?? 100) / 100 * 255 };\n}\n","import { numberInclusiveRangeTest, percentTest, resultThrow } from \"@ixfx/guards\";\nimport Colorizr, * as C from \"colorizr\";\nimport { cssDefinedHexColours } from \"./css-colours.js\";\nimport { angleConvert, angleParse } from \"@ixfx/geometry\";\nimport { calculateHueDistance, wrapScalarHue } from \"./utility.js\";\nimport { clamp, interpolate } from \"@ixfx/numbers\";\nimport { parseCssRgbFunction, to8bit as rgbTo8bit } from \"./srgb.js\";\nexport const OKLCH_CHROMA_MAX = 0.4;\nexport const guard = (lch) => {\n    const { l, c, h, opacity, space, unit } = lch;\n    if (space !== `oklch`)\n        throw new Error(`Space is expected to be 'oklch'. Got: ${space}`);\n    if (unit === `absolute`) {\n        resultThrow(percentTest(l, `l`), () => {\n            if (typeof c === `number`) {\n                return numberInclusiveRangeTest(c, 0, OKLCH_CHROMA_MAX, `c`);\n            }\n        }, () => {\n            if (typeof h === `number`) {\n                return numberInclusiveRangeTest(c, 0, 360, `h`);\n            }\n        }, percentTest((opacity ?? 1), `opacity`));\n    }\n    else if (unit === `scalar`) {\n        // Percentage values for L,C,H\n        resultThrow(percentTest(l, `l`), percentTest(c, `c`), percentTest(h, `h`), percentTest((lch.opacity ?? 1), `opacity`));\n    }\n    else {\n        throw new Error(`Unit is expected to be 'absolute' or 'scalar'. Got: ${unit}`);\n    }\n};\n/**\n * Coverts from the Colorizr library\n * Tests ranges:\n * * l: 0..1\n * * c: 0..1\n * * h: 0..360\n * * alpha: 0..1\n *\n * Default option: { scalar: true }\n * @param lch LCH value\n * @param parsingOptions Options for parsing\n * @returns\n */\nexport function fromLibrary(lch, parsingOptions = {}) {\n    if (typeof lch === `undefined` || lch === null) {\n        if (parsingOptions.fallbackColour)\n            return parsingOptions.fallbackColour;\n    }\n    const scalarReturn = parsingOptions.scalar ?? true;\n    // Validate\n    resultThrow(percentTest(lch.l, `l`), percentTest(lch.c, `c`), numberInclusiveRangeTest(lch.h, 0, 360, `h`), percentTest((lch.alpha ?? 1), `alpha`));\n    if (scalarReturn) {\n        return scalar(lch.l, lch.c / OKLCH_CHROMA_MAX, lch.h / 360, (lch.alpha ?? 1));\n    }\n    else {\n        return absolute(lch.l, lch.c, lch.h, (lch.alpha ?? 1));\n    }\n}\nexport const fromHexString = (hexString, options = {}) => {\n    return fromLibrary(C.hex2oklch(hexString), options);\n};\nconst oklchTransparent = Object.freeze({\n    l: 0, c: 0, h: 0, opacity: 0, unit: `absolute`, space: `oklch`\n});\nexport function fromCss(value, options = {}) {\n    value = value.toLowerCase();\n    if (value.startsWith(`#`)) {\n        return fromHexString(value, options);\n    }\n    if (value === `transparent`)\n        return oklchTransparent;\n    if (typeof cssDefinedHexColours[value] !== `undefined`) {\n        return fromHexString(cssDefinedHexColours[value], options);\n    }\n    if (value.startsWith(`rgb(`)) {\n        const rgb = rgbTo8bit(parseCssRgbFunction(value));\n        const lch = C.rgb2oklch({ r: rgb.r, g: rgb.g, b: rgb.b });\n        return fromLibrary(lch, options);\n    }\n    if (!value.startsWith(`hsl(`) && !value.startsWith(`oklch(`)) {\n        try {\n            const converted = C.convert(value, `oklch`);\n            value = converted;\n        }\n        catch (error) {\n            if (options.fallbackString) {\n                value = options.fallbackString;\n            }\n            else {\n                throw error;\n            }\n        }\n    }\n    const cc = new Colorizr(value);\n    const lch = cc.oklch;\n    return fromLibrary(lch, options);\n    // const c = C.extractColorParts(value);\n    // if (c.model !== `oklch`) {\n    //   if (options.fallbackColour) return options.fallbackColour;\n    //   throw new Error(`Expecting OKLCH colour space. Got: ${ c.model }`);\n    // }\n    // return fromLibrary(c as any as C.LCH, options);\n}\n//export const fromCssScalar = (value: string, options: ParsingOptions<OkLchAbsolute> = {}): OkLchScalar => toScalar(fromCssAbsolute(value, options));\n/**\n * Returns a string or {@link OkLch} value to absolute form.\n *\n * This means ranges are:\n * * lightness: 0..1\n * * chroma: 0...CHROMA_MAX (0.4)\n * * hue: 0..360\n * @param lchOrString\n * @returns\n */\nexport const toAbsolute = (lchOrString) => {\n    if (typeof lchOrString === `string`) {\n        return toAbsolute(fromCss(lchOrString, { scalar: true }));\n    }\n    guard(lchOrString);\n    if (lchOrString.unit === `absolute`)\n        return lchOrString;\n    return {\n        space: `oklch`,\n        unit: `absolute`,\n        l: lchOrString.l,\n        c: lchOrString.c * OKLCH_CHROMA_MAX,\n        h: lchOrString.h * 360,\n        opacity: lchOrString.opacity\n    };\n};\nexport const toScalar = (lchOrString) => {\n    if (typeof lchOrString === `string`) {\n        return toScalar(fromCss(lchOrString, { scalar: true }));\n    }\n    const lch = lchOrString;\n    guard(lch);\n    //console.log(`toScalar input: ${ JSON.stringify(lchOrString) } lch: `, lch);\n    // Already relative\n    if (lch.unit === `scalar`)\n        return lch;\n    // Absolute values\n    return {\n        l: lch.l, // unchanged\n        c: lch.c / OKLCH_CHROMA_MAX,\n        h: lch.h / 360,\n        opacity: (lch.opacity ?? 1),\n        unit: `scalar`,\n        space: `oklch`\n    };\n};\nconst toLibrary = (lch) => {\n    const abs = toAbsolute(lch);\n    return {\n        l: abs.l,\n        c: abs.c,\n        h: abs.h,\n        alpha: abs.opacity,\n    };\n};\n// const libraryLchToScalar = (c: C.LCH): OkLchScalar => {\n//   return {\n//     l: c.h,\n//     c: c.c,\n//     h: c.h / 360,\n//     opacity: c.alpha ?? 1,\n//     unit: `scalar`,\n//     space: `oklch`\n//   }\n// }\n/**\n * Returns the colour as a CSS colour string: `oklch(l c h / opacity)`.\n *\n * @param lch Colour\n * @param precision Set precision of numbers, defaults to 3\n * @returns CSS colour string\n */\nexport const toCssString = (lch, precision = 3) => {\n    guard(lch);\n    const { l, c, h, opacity } = lch;\n    let css = ``;\n    switch (lch.unit) {\n        case `absolute`:\n            css = `oklch(${(l * 100).toFixed(precision)}% ${c.toFixed(precision)} ${h.toFixed(precision)}`;\n            break;\n        case `scalar`:\n            css = `oklch(${l.toFixed(precision)} ${(c * OKLCH_CHROMA_MAX).toFixed(precision)} ${(h * 360).toFixed(precision)}`;\n            break;\n    }\n    if (typeof opacity !== `undefined` && opacity !== 1) {\n        css += ` / ${opacity.toFixed(precision)}`;\n    }\n    css += `)`;\n    return css;\n};\n// export const oklchFromCss = (css: string): OkLchScalar => {\n//   if (css.startsWith(`#`)) {\n//     libraryLchToScalar(C.hex2oklch(css));\n//   }\n//   const p = C.extractColorParts(css);\n//   return libraryToScalar(p);\n// }\n// const libraryToScalar = (colour: unknown): OkLchScalar => {\n//   if (C.isLCH(colour)) {\n//     return libraryLchToScalar(colour);\n//   }\n//   if (C.isRGB(colour)) {\n//     return libraryToScalar(C.rgb2oklch(colour));\n//   }\n//   if (C.isLAB(colour)) {\n//     return libraryToScalar(C.oklab2oklch(colour));\n//   }\n//   if (C.isHSL(colour)) {\n//     return libraryToScalar(C.hsl2oklch(colour));\n//   }\n//   if (C.isHex(colour)) {\n//     return libraryLchToScalar(C.hex2oklch(colour));\n//   }\n//   throw new Error(`Unexpected colour format`);\n// }\n// export const oklchToColorJs = (lch: OkLch): ColorConstructor => {\n//   throwNumberTest(lch.l, `percentage`, `lch.l`);\n//   throwNumberTest(lch.c, `percentage`, `lch.c`);\n//   throwNumberTest(lch.h, `percentage`, `lch.h`);\n//   throwNumberTest(lch.opacity, `percentage`, `lch.opacity`);\n//   return {\n//     alpha: lch.opacity,\n//     coords: [ lch.l, lch.c * 0.4, lch.h * 360 ],\n//     spaceId: `oklch`\n//   }\n// }\n// const oklchToColorJs = (oklch: OkLch) => {\n//   throwNumberTest(oklch.l, `percentage`, `oklch.l`);\n//   throwNumberTest(oklch.c, `percentage`, `oklch.c`);\n//   throwNumberTest(oklch.h, `percentage`, `oklch.h`);\n//   throwNumberTest(oklch.opacity, `percentage`, `oklch.opacity`);\n//   const coords: [ number, number, number ] = [\n//     oklch.l,\n//     oklch.c * 0.4,\n//     oklch.h * 360\n//   ]\n//   return new ColorJs.default(`oklch`, coords, oklch.opacity);\n// }\n// export const isOklch = (p: Colourish | undefined | null): p is OkLch => {\n//   if (typeof p === `undefined` || p === null) return false;\n//   if (typeof p !== `object`) return false;\n//   // Check if Colourjs\n//   //if ((p as ColorJs.ColorObject).spaceId !== undefined) return false;\n//   //if ((p as ColorJs.ColorObject).coords !== undefined) return false;\n//   if (p.space !== `oklch`) return false;\n//   if (typeof p.l === `undefined`) return false;\n//   if (typeof p.c === `undefined`) return false;\n//   if (typeof p.h === `undefined`) return false;\n//   return true;\n// }\nexport const generateScalar = (absoluteHslOrVariable, chroma = 1, lightness = 0.5, opacity = 1) => {\n    if (typeof absoluteHslOrVariable === `string`) {\n        if (absoluteHslOrVariable.startsWith(`--`)) {\n            absoluteHslOrVariable = getComputedStyle(document.body).getPropertyValue(absoluteHslOrVariable).trim();\n        }\n    }\n    if (lightness > 1)\n        throw new TypeError(`Param 'lightness' must be between 0..1`);\n    if (chroma > 1)\n        throw new TypeError(`Param 'chroma' must be between 0..1`);\n    const hue = angleParse(absoluteHslOrVariable);\n    const hueDeg = angleConvert(hue, `deg`).value / 360;\n    if (opacity > 1)\n        throw new TypeError(`Param 'opacity' must be between 0..1`);\n    return {\n        l: lightness,\n        c: chroma,\n        h: hueDeg,\n        opacity: opacity,\n        unit: `scalar`,\n        space: `oklch`\n    };\n};\n/**\n * Scales the opacity value of an input Oklch value\n * ```js\n * withOpacity()\n * ```\n * @param value\n * @param fn\n * @returns\n */\nexport const withOpacity = (value, fn) => {\n    switch (value.unit) {\n        case `absolute`:\n            return {\n                ...value,\n                opacity: fn((value.opacity ?? 100) / 100, value) * 100\n            };\n        case `scalar`:\n            return {\n                ...value,\n                opacity: fn((value.opacity ?? 1), value)\n            };\n    }\n};\nexport const interpolator = (a, b, direction = `shorter`) => {\n    a = toScalar(a);\n    b = toScalar(b);\n    //console.log(`a`, a);\n    //console.log(`b`, b);\n    const aOpacity = a.opacity ?? 1;\n    const distanceCalc = calculateHueDistance(a.h, b.h, 1);\n    const hueDistance = direction === `longer` ? distanceCalc.long : distanceCalc.short;\n    const chromaDistance = b.c - a.c;\n    const lightDistance = b.l - a.l;\n    const opacityDistance = (b.opacity ?? 1) - aOpacity;\n    //console.log(`distanceCalc`, distanceCalc);\n    //console.log(`interpolator distances: hue: ${ hueDistance } c: ${ chromaDistance } light: ${ lightDistance } opacity: ${ opacityDistance }`);\n    return (amount) => {\n        amount = clamp(amount);\n        let h = interpolate(amount, 0, Math.abs(hueDistance));\n        if (hueDistance < 0)\n            h = a.h - h;\n        else\n            h = a.h + h;\n        const c = interpolate(amount, 0, chromaDistance);\n        const l = interpolate(amount, 0, lightDistance);\n        const o = interpolate(amount, 0, opacityDistance);\n        //console.log(`amount: ${ amount } h: ${ h } s: ${ s } l: ${ l } o: ${ o }`);\n        return scalar(l + a.l, c + a.c, wrapScalarHue(h), o + aOpacity);\n    };\n};\nexport function scalar(lightness = 0.7, chroma = 0.1, hue = 0.5, opacity = 1) {\n    const lch = {\n        unit: `scalar`,\n        space: `oklch`,\n        l: lightness,\n        c: chroma,\n        h: hue,\n        opacity: opacity\n    };\n    guard(lch);\n    return lch;\n}\n/**\n * Create an LCH colour using absolute hue\n * @param l Lightness 0..1\n * @param c Chroma 0..4\n * @param h Hue 0..360\n * @param opacity\n * @returns\n */\nexport const absolute = (l, c, h, opacity = 1) => {\n    const lch = {\n        space: `oklch`,\n        unit: `absolute`,\n        opacity,\n        l, c, h\n    };\n    guard(lch);\n    return lch;\n};\n","import * as SrgbSpace from \"./srgb.js\";\nimport * as HslSpace from './hsl.js';\nimport * as OklchSpace from './oklch.js';\n/**\n * Converts from some kind of colour that is legal in CSS\n * into a structured Colour type.\n *\n * Handles: hex format, CSS variables, colour names\n * ```js\n * fromCssColour(`#ffffff`);\n * fromCssColour(`blue`);\n * fromCssColour(`--some-variable`);\n * fromCssColour(`hsl(50, 50%, 50%)`);\n * fromCssColour(`rgb(50, 100, 100)`);\n * ```\n * @param colour\n * @returns\n */\nexport const fromCssColour = (colour) => {\n    if (colour.startsWith(`#`)) {\n        return SrgbSpace.fromHexString(colour, true);\n    }\n    if (typeof cssDefinedHexColours[colour] !== `undefined`) {\n        return SrgbSpace.fromHexString(cssDefinedHexColours[colour], true);\n    }\n    if (colour.startsWith(`--`)) {\n        const fromCss = getComputedStyle(document.body).getPropertyValue(colour).trim();\n        if (fromCss.length === 0 || fromCss === null)\n            throw new Error(`Variable missing: ${colour}`);\n        return fromCssColour(fromCss);\n    }\n    colour = colour.toLowerCase();\n    if (colour.startsWith(`hsl(`)) {\n        return HslSpace.fromCss(colour, { scalar: true });\n    }\n    if (colour.startsWith(`rgb(`)) {\n        return SrgbSpace.fromCss(colour, { scalar: true });\n    }\n    if (colour.startsWith(`oklch(`)) {\n        return OklchSpace.fromCss(colour, { scalar: true });\n    }\n    throw new Error(`String colour is not a hex colour, CSS variable nor well-defined colour. Input: '${colour}'`);\n};\n/**\n * Resolves a named colour or CSS variable to a colour string.\n * Doesn't do conversion or parsing.\n *\n * ```js\n * resolveCss(`red`);\n * resolveCss(`my-var`);\n * ```\n * @param colour Colour\n * @param fallback Fallback if CSS variable is missing\n * @returns\n */\nexport const resolveCss = (colour, fallback) => {\n    if (colour.startsWith(`--`)) {\n        const fromCss = getComputedStyle(document.body).getPropertyValue(colour).trim();\n        if (fromCss.length === 0 || fromCss === null) {\n            if (typeof fallback !== `undefined`)\n                return fallback;\n            throw new Error(`CSS variable missing: '${colour}'`);\n        }\n        return resolveCss(fromCss); // Recurse, because value might be a named colour\n    }\n    if (typeof cssDefinedHexColours[colour] !== `undefined`) {\n        return cssDefinedHexColours[colour];\n    }\n    return colour; // assume legit\n};\nexport const cssDefinedHexColours = {\n    \"aliceblue\": \"#f0f8ff\",\n    \"antiquewhite\": \"#faebd7\",\n    \"aqua\": \"#00ffff\",\n    \"aquamarine\": \"#7fffd4\",\n    \"azure\": \"#f0ffff\",\n    \"beige\": \"#f5f5dc\",\n    \"bisque\": \"#ffe4c4\",\n    \"black\": \"#000000\",\n    \"blanchedalmond\": \"#ffebcd\",\n    \"blue\": \"#0000ff\",\n    \"blueviolet\": \"#8a2be2\",\n    \"brown\": \"#a52a2a\",\n    \"burlywood\": \"#deb887\",\n    \"cadetblue\": \"#5f9ea0\",\n    \"chartreuse\": \"#7fff00\",\n    \"chocolate\": \"#d2691e\",\n    \"coral\": \"#ff7f50\",\n    \"cornflowerblue\": \"#6495ed\",\n    \"cornsilk\": \"#fff8dc\",\n    \"crimson\": \"#dc143c\",\n    \"cyan\": \"#00ffff\",\n    \"darkblue\": \"#00008b\",\n    \"darkcyan\": \"#008b8b\",\n    \"darkgoldenrod\": \"#b8860b\",\n    \"darkgray\": \"#a9a9a9\",\n    \"darkgreen\": \"#006400\",\n    \"darkkhaki\": \"#bdb76b\",\n    \"darkmagenta\": \"#8b008b\",\n    \"darkolivegreen\": \"#556b2f\",\n    \"darkorange\": \"#ff8c00\",\n    \"darkorchid\": \"#9932cc\",\n    \"darkred\": \"#8b0000\",\n    \"darksalmon\": \"#e9967a\",\n    \"darkseagreen\": \"#8fbc8f\",\n    \"darkslateblue\": \"#483d8b\",\n    \"darkslategray\": \"#2f4f4f\",\n    \"darkturquoise\": \"#00ced1\",\n    \"darkviolet\": \"#9400d3\",\n    \"deeppink\": \"#ff1493\",\n    \"deepskyblue\": \"#00bfff\",\n    \"dimgray\": \"#696969\",\n    \"dodgerblue\": \"#1e90ff\",\n    \"firebrick\": \"#b22222\",\n    \"floralwhite\": \"#fffaf0\",\n    \"forestgreen\": \"#228b22\",\n    \"fuchsia\": \"#ff00ff\",\n    \"gainsboro\": \"#dcdcdc\",\n    \"ghostwhite\": \"#f8f8ff\",\n    \"gold\": \"#ffd700\",\n    \"goldenrod\": \"#daa520\",\n    \"gray\": \"#808080\",\n    \"green\": \"#008000\",\n    \"greenyellow\": \"#adff2f\",\n    \"honeydew\": \"#f0fff0\",\n    \"hotpink\": \"#ff69b4\",\n    \"indianred\": \"#cd5c5c\",\n    \"indigo\": \"#4b0082\",\n    \"ivory\": \"#fffff0\",\n    \"khaki\": \"#f0e68c\",\n    \"lavender\": \"#e6e6fa\",\n    \"lavenderblush\": \"#fff0f5\",\n    \"lawngreen\": \"#7cfc00\",\n    \"lemonchiffon\": \"#fffacd\",\n    \"lightblue\": \"#add8e6\",\n    \"lightcoral\": \"#f08080\",\n    \"lightcyan\": \"#e0ffff\",\n    \"lightgoldenrodyellow\": \"#fafad2\",\n    \"lightgray\": \"#d3d3d3\",\n    \"lightgreen\": \"#90ee90\",\n    \"lightpink\": \"#ffb6c1\",\n    \"lightsalmon\": \"#ffa07a\",\n    \"lightseagreen\": \"#20b2aa\",\n    \"lightskyblue\": \"#87cefa\",\n    \"lightslategray\": \"#778899\",\n    \"lightsteelblue\": \"#b0c4de\",\n    \"lightyellow\": \"#ffffe0\",\n    \"lime\": \"#00ff00\",\n    \"limegreen\": \"#32cd32\",\n    \"linen\": \"#faf0e6\",\n    \"magenta\": \"#ff00ff\",\n    \"maroon\": \"#800000\",\n    \"mediumaquamarine\": \"#66cdaa\",\n    \"mediumblue\": \"#0000cd\",\n    \"mediumorchid\": \"#ba55d3\",\n    \"mediumpurple\": \"#9370db\",\n    \"mediumseagreen\": \"#3cb371\",\n    \"mediumslateblue\": \"#7b68ee\",\n    \"mediumspringgreen\": \"#00fa9a\",\n    \"mediumturquoise\": \"#48d1cc\",\n    \"mediumvioletred\": \"#c71585\",\n    \"midnightblue\": \"#191970\",\n    \"mintcream\": \"#f5fffa\",\n    \"mistyrose\": \"#ffe4e1\",\n    \"moccasin\": \"#ffe4b5\",\n    \"navajowhite\": \"#ffdead\",\n    \"navy\": \"#000080\",\n    \"oldlace\": \"#fdf5e6\",\n    \"olive\": \"#808000\",\n    \"olivedrab\": \"#6b8e23\",\n    \"orange\": \"#ffa500\",\n    \"orangered\": \"#ff4500\",\n    \"orchid\": \"#da70d6\",\n    \"palegoldenrod\": \"#eee8aa\",\n    \"palegreen\": \"#98fb98\",\n    \"paleturquoise\": \"#afeeee\",\n    \"palevioletred\": \"#db7093\",\n    \"papayawhip\": \"#ffefd5\",\n    \"peachpuff\": \"#ffdab9\",\n    \"peru\": \"#cd853f\",\n    \"pink\": \"#ffc0cb\",\n    \"plum\": \"#dda0dd\",\n    \"powderblue\": \"#b0e0e6\",\n    \"purple\": \"#800080\",\n    \"rebeccapurple\": \"#663399\",\n    \"red\": \"#ff0000\",\n    \"rosybrown\": \"#bc8f8f\",\n    \"royalblue\": \"#4169e1\",\n    \"saddlebrown\": \"#8b4513\",\n    \"salmon\": \"#fa8072\",\n    \"sandybrown\": \"#f4a460\",\n    \"seagreen\": \"#2e8b57\",\n    \"seashell\": \"#fff5ee\",\n    \"sienna\": \"#a0522d\",\n    \"silver\": \"#c0c0c0\",\n    \"skyblue\": \"#87ceeb\",\n    \"slateblue\": \"#6a5acd\",\n    \"slategray\": \"#708090\",\n    \"snow\": \"#fffafa\",\n    \"springgreen\": \"#00ff7f\",\n    \"steelblue\": \"#4682b4\",\n    \"tan\": \"#d2b48c\",\n    \"teal\": \"#008080\",\n    \"thistle\": \"#d8bfd8\",\n    \"tomato\": \"#ff6347\",\n    \"turquoise\": \"#40e0d0\",\n    \"violet\": \"#ee82ee\",\n    \"wheat\": \"#f5deb3\",\n    \"white\": \"#ffffff\",\n    \"whitesmoke\": \"#f5f5f5\",\n    \"yellow\": \"#ffff00\",\n    \"yellowgreen\": \"#9acd32\",\n    \"transparent\": \"#00000000\"\n};\n","import Colorizr, * as C from \"colorizr\";\nimport { numberInclusiveRangeTest, numberTest } from \"@ixfx/guards\";\nimport { resultThrow } from \"@ixfx/guards\";\nimport { cssDefinedHexColours } from \"./css-colours.js\";\nimport { clamp, interpolate } from \"@ixfx/numbers\";\nimport { toLibraryRgb as hslToLibraryRgb } from \"./hsl.js\";\nimport { isHsl } from \"./guards.js\";\nexport const withOpacity = (value, fn) => {\n    switch (value.unit) {\n        case `8bit`:\n            return {\n                ...value,\n                opacity: fn((value.opacity ?? 255) / 255, value) * 255\n            };\n        case `scalar`:\n            return {\n                ...value,\n                opacity: fn((value.opacity ?? 1), value)\n            };\n    }\n};\nexport function fromHexString(hexString, scalar = true) {\n    return fromLibrary(C.hex2rgb(hexString), { scalar });\n}\n;\nconst srgbTansparent = Object.freeze({\n    r: 0, g: 0, b: 0, opacity: 0, unit: `8bit`, space: `srgb`\n});\n/**\n * Converts a colour in a legal CSS form into Rgb value, by default RgbScalar (0..1) scale.\n * ```js\n * fromCss(`rebeccapurple`);\n * fromCss(`rgb(40% 20% 60%)`);\n *\n * // Get 8bit version on 0..255 scale\n * fromCss(`blue`, { scalar: false });\n * ```\n *\n * @param value\n * @param options\n * @returns\n */\nexport function fromCss(value, options = {}) {\n    value = value.toLowerCase();\n    if (value.startsWith(`hsla(`))\n        throw new Error(`hsla() not supported`);\n    if (value.startsWith(`rgba(`))\n        throw new Error(`rgba() not supported`);\n    const scalar = options.scalar ?? true;\n    // Convert from hex\n    if (value.startsWith(`#`))\n        return fromHexString(value, scalar);\n    // Special-case transparent\n    if (value === `transparent`)\n        return srgbTansparent;\n    // Convert from named colour\n    if (typeof cssDefinedHexColours[value] !== `undefined`)\n        fromHexString(cssDefinedHexColours[value], scalar);\n    if (value.startsWith(`hsl(`)) {\n        const rgb = hslToLibraryRgb(value);\n        return fromLibrary(rgb, options);\n    }\n    // if (value.startsWith(`hsl(`)) {\n    //   const hslRel = hslToScalar(parseCssHslFunction(value));\n    //   const rgb = C.hsl2rgb({ h: hslRel.h, s: hslRel.s, l: hslRel.l, alpha: hslRel.opacity ?? 1 });\n    //   return fromLibrary(rgb, options);\n    // }\n    // Convert to rgb() colour function\n    if (!value.startsWith(`rgb(`)) {\n        try {\n            value = C.convert(value, `rgb`);\n        }\n        catch (error) {\n            if (options.fallbackString) {\n                value = options.fallbackString;\n            }\n            else {\n                throw error;\n            }\n        }\n    }\n    try {\n        // Hand-rolled rgb() parse because the package is broken\n        const rgb = parseCssRgbFunction(value);\n        if (scalar)\n            return toScalar(rgb);\n        return to8bit(rgb);\n    }\n    catch (error) {\n        if (options.fallbackColour)\n            return options.fallbackColour;\n        throw error;\n    }\n}\nexport const toCssString = (rgb) => {\n    guard(rgb);\n    switch (rgb.unit) {\n        case `8bit`:\n            if (rgb.opacity === undefined || rgb.opacity === 255) {\n                return `rgb(${rgb.r} ${rgb.g} ${rgb.b})`;\n            }\n            return `rgb(${rgb.r} ${rgb.g} ${rgb.b} / ${(rgb.opacity ?? 255) / 255})`;\n        case `scalar`:\n            if (rgb.opacity === undefined || rgb.opacity === 1) {\n                return `rgb(${rgb.r * 100}% ${rgb.g * 100}% ${rgb.b * 100}%)`;\n            }\n            return `rgb(${rgb.r * 100}% ${rgb.g * 100}% ${rgb.b * 100}% / ${(rgb.opacity ?? 1) * 100}%)`;\n        default:\n            throw new Error(`Unknown unit: ${rgb.unit}`);\n    }\n};\nconst toLibrary = (rgb) => {\n    const abs = to8bit(rgb);\n    return {\n        r: abs.r,\n        g: abs.g,\n        b: abs.b,\n        alpha: abs.opacity,\n    };\n};\nfunction fromLibrary(rgb, parsingOptions = {}) {\n    if (parsingOptions.scalar) {\n        return {\n            r: rgb.r / 255,\n            g: rgb.g / 255,\n            b: rgb.b / 255,\n            opacity: rgb.alpha ?? 1,\n            unit: `scalar`,\n            space: `srgb`\n        };\n    }\n    else {\n        return {\n            r: rgb.r,\n            g: rgb.g,\n            b: rgb.b,\n            opacity: rgb.alpha ?? 255,\n            unit: `8bit`,\n            space: `srgb`\n        };\n    }\n}\nexport const to8bit = (rgbOrString) => {\n    if (typeof rgbOrString === `string`) {\n        return fromCss(rgbOrString, { scalar: false });\n    }\n    if (isHsl(rgbOrString)) {\n        return to8bit(fromLibrary(hslToLibraryRgb(rgbOrString), { scalar: false }));\n    }\n    guard(rgbOrString);\n    if (rgbOrString.unit === `8bit`)\n        return rgbOrString;\n    return {\n        r: rgbOrString.r * 255,\n        g: rgbOrString.g * 255,\n        b: rgbOrString.b * 255,\n        opacity: (rgbOrString.opacity ?? 1) * 255,\n        unit: `8bit`,\n        space: `srgb`\n    };\n};\nexport const toScalar = (rgbOrString) => {\n    if (typeof rgbOrString === `string`) {\n        return fromCss(rgbOrString, { scalar: true });\n    }\n    if (isHsl(rgbOrString)) {\n        return toScalar(fromLibrary(hslToLibraryRgb(rgbOrString), { scalar: true }));\n    }\n    guard(rgbOrString);\n    if (rgbOrString.unit === `scalar`)\n        return rgbOrString;\n    return {\n        r: rgbOrString.r / 255,\n        g: rgbOrString.g / 255,\n        b: rgbOrString.b / 255,\n        opacity: (rgbOrString.opacity ?? 1) / 255,\n        unit: `scalar`,\n        space: `srgb`\n    };\n};\nexport const guard = (rgb) => {\n    const { r, g, b, opacity, space, unit } = rgb;\n    if (space !== `srgb`)\n        throw new Error(`Space is expected to be 'srgb'. Got: ${space}`);\n    if (unit === `8bit`) {\n        resultThrow(numberInclusiveRangeTest(r, 0, 255, `r`), numberInclusiveRangeTest(g, 0, 255, `g`), numberInclusiveRangeTest(b, 0, 255, `b`), () => {\n            if (typeof opacity === `number`) {\n                return numberInclusiveRangeTest(opacity, 0, 255, `opacity`);\n            }\n        });\n    }\n    else if (unit === `scalar`) {\n        resultThrow(numberTest(r, `percentage`, `r`), numberTest(g, `percentage`, `g`), numberTest(b, `percentage`, `b`), () => {\n            if (typeof opacity === `number`) {\n                return numberTest(opacity, `percentage`, `opacity`);\n            }\n        });\n    }\n    else {\n        throw new Error(`Unit is expected to be '8bit' or 'scalar'. Got: ${unit}`);\n    }\n};\n/**\n * Sets the lightness value.\n *\n * Amount to change:\n * * 'fixed': a fixed amount\n * * 'delta': increase/decrease by this amount\n * * 'pdelta': proportion of current value to change by ('percentage delta')\n *\n * Use negative values to decrease\n * @param value\n * @param amount\n */\nexport const changeLightness = (rgb, amount) => {\n    let newL = 0;\n    const co = new Colorizr(toCssString(rgb));\n    const scalarUnit = rgb.unit === `scalar`;\n    if (typeof amount.pdelta !== `undefined`) {\n        newL = co.oklab.l + (co.oklab.l * amount.pdelta);\n    }\n    else if (typeof amount.delta !== `undefined`) {\n        newL = co.oklab.l + amount.delta;\n    }\n    else if (typeof amount.fixed !== `undefined`) {\n        if (amount.fixed < 0)\n            throw new TypeError(`Amount cannot be negative when using 'fixed'`);\n        newL = amount.fixed;\n    }\n    else {\n        throw new TypeError(`Parameter 'amount' is missing 'pdelta/delta/fixed' properties`);\n    }\n    if (newL < 0)\n        newL = 0;\n    else if (newL > 1)\n        newL = 1;\n    const rgbResult = C.oklab2rgb({ a: co.oklab.a, b: co.oklab.b, l: newL, alpha: co.oklab.alpha });\n    return fromLibrary(rgbResult, { scalar: scalarUnit });\n    //return eightBit ? fromLibrary8bit(rgbResult) : fromLibraryScalar(rgbResult);\n};\n/**\n * Returns a lightness value (0..1) for an RGB input\n *\n * Calculates lightness by converting to Oklab and using the 'L' value\n * @param rgb\n * @returns\n */\nexport function lightness(rgb) {\n    const co = new Colorizr(toCssString(rgb));\n    return co.oklab.l;\n}\nconst scaleProperty = (rgb, value, property) => {\n    if (rgb.unit === `scalar`) {\n        // 0..1 scale\n        if (value > 1)\n            value = 1;\n        else if (value < 0)\n            value = 0;\n    }\n    else {\n        // 0..255 scale\n        if (value > 255)\n            value = 255;\n        else if (value < 0)\n            value = 0;\n    }\n    return value;\n};\n/**\n * Creates a Rgb8Bit value from 8bit (0..255) values\n * @param red\n * @param green\n * @param blue\n * @param opacity\n * @returns\n */\nexport function eightBit(red = 100, green = 100, blue = 100, opacity = 255) {\n    const rgb = {\n        unit: `8bit`,\n        space: `srgb`,\n        r: red,\n        g: green,\n        b: blue,\n        opacity: opacity\n    };\n    guard(rgb);\n    return rgb;\n}\n/**\n * Creates a RgbScalar value from scalar (0..1) values\n * @param red\n * @param green\n * @param blue\n * @param opacity\n * @returns\n */\nexport function scalar(red = 0.5, green = 0.5, blue = 0.5, opacity = 1) {\n    const rgb = {\n        unit: `scalar`,\n        space: `srgb`,\n        r: red,\n        g: green,\n        b: blue,\n        opacity: opacity\n    };\n    guard(rgb);\n    return rgb;\n}\n/**\n * It seems Colorizr can't handle % values properly :'(\n * @param value\n */\nexport function parseCssRgbFunction(value) {\n    if (value.startsWith(`rgba`))\n        throw new Error(`RGBA is not supported`);\n    if (!value.startsWith(`rgb(`))\n        throw new Error(`Expected rgb(..) CSS colour`);\n    const start = value.indexOf('(');\n    const end = value.indexOf(')');\n    if (end < start)\n        throw new Error(`Is rgb() not terminated? Missing ')'`);\n    const part = value.substring(start + 1, end);\n    let split = part.split(/[\\s,]+/);\n    if (split.length < 3)\n        throw new Error(`Expected three tokens. Got: ${split.length} length`);\n    let relativeCount = 0;\n    for (const s of split) {\n        if (s.endsWith('%'))\n            relativeCount++;\n    }\n    const valueAsScalar = (v, pos) => {\n        if (v.endsWith(`%`)) {\n            return Number.parseFloat(v.substring(0, v.length - 1)) / 100;\n        }\n        if (pos < 3) {\n            // r, g or b\n            return Number.parseFloat(v) / 255;\n        }\n        else {\n            // opacity should already be in scalar value\n            return Number.parseFloat(v);\n        }\n    };\n    const valueAs8bit = (v, pos) => {\n        if (v.endsWith(`%`)) {\n            return Number.parseFloat(v.substring(0, v.length - 1)) / 100 * 255;\n        }\n        if (pos < 3) {\n            // r, g or b\n            return Number.parseFloat(v);\n        }\n        else {\n            // opacity should already be in scalar value\n            return Number.parseFloat(v) * 255;\n        }\n    };\n    // Is there opacity?\n    if (split.length > 3) {\n        if (split[3] === '/') {\n            // Remove / part\n            split = [split[0], split[1], split[2], split[4]];\n        }\n    }\n    if (relativeCount > 1) {\n        // Return as scalar\n        return scalar(valueAsScalar(split[0], 0), valueAsScalar(split[1], 1), valueAsScalar(split[2], 2), valueAsScalar(split[3] ?? `1`, 3));\n    }\n    else {\n        // Return as 8bit\n        return eightBit(valueAs8bit(split[0], 0), valueAs8bit(split[1], 1), valueAs8bit(split[2], 2), valueAs8bit(split[3] ?? `1`, 3));\n    }\n}\n/**\n * Interpolates colours in Srgb space. Probably\n * really ugly, use OkLch space isntead.\n *\n * ```js\n * const i = interpolator(`red`, `blue`);\n * i(0.5); // Get 50% between these colours\n * ```\n * @param colourA\n * @param colourB\n * @returns\n */\nexport const interpolator = (colourA, colourB) => {\n    const aa = toScalar(colourA);\n    const bb = toScalar(colourB);\n    const aOpacity = aa.opacity ?? 1;\n    const opacityDistance = (bb.opacity ?? 1) - aOpacity;\n    const r = bb.r - aa.r;\n    const g = bb.g - aa.g;\n    const b = bb.b - aa.b;\n    return (amount) => {\n        amount = clamp(amount);\n        return scalar(aa.r + interpolate(amount, 0, r), aa.g + interpolate(amount, 0, g), aa.b + interpolate(amount, 0, b), aOpacity + interpolate(amount, 0, opacityDistance));\n    };\n};\n/**\n * Converts a Rgb structure (or CSS string) to Colorizr's HSL format\n * @param rgb\n * @returns\n */\nexport function toLibraryHsl(rgb) {\n    if (typeof rgb === `string`) {\n        const parseResult = fromCss(rgb, { scalar: false });\n        return toLibraryHsl(parseResult);\n    }\n    rgb = to8bit(rgb);\n    const hsl = C.rgb2hsl({ r: rgb.r, g: rgb.g, b: rgb.b });\n    return { ...hsl, alpha: (rgb.opacity ?? 255) / 255 };\n}\n","import { Grids } from '@ixfx/geometry';\nimport * as SrgbSpace from './colour/srgb.js';\n/**\n * Returns a {@link @ixfx/geometry/Grids.Grid} based on the provided `image`\n * @param image ImageData\n * @returns Grid\n */\nexport const grid = (image) => {\n    const g = { rows: image.width, cols: image.height };\n    return g;\n};\n/**\n * Returns an object that allows get/set grid semantics on the underlying `image` data.\n * Uses 8-bit sRGB values, meaning 0..255 range for red, green, blue & opacity.\n *\n * ```js\n * // Get CANVAS element, drawing context and then image data\n * const canvasEl = document.querySelector(`#my-canvas`);\n * const ctx = canvasEl.getContext(`2d`);\n * const imageData = ctx.getImageData();\n *\n * // Now that we have image data, we can wrap it:\n * const asGrid = ImageDataGrid.wrap(imageData);\n * asGrid.get({ x:10, y: 20 }); // Get pixel at 10,20\n * asGrid.set(colour, { x:10, y: 20 }); // Set pixel value\n *\n * // Display changes back on the canvas\n * ctx.putImageData(imageData, 0, 0)\n * ```\n * @param image\n * @returns\n */\nexport const wrap = (image) => {\n    return {\n        ...grid(image),\n        get: accessor(image),\n        set: setter(image)\n    };\n};\n/**\n * Returns a function to access pixel values by x,y\n * @param image\n * @returns\n */\nexport const accessor = (image) => {\n    const g = grid(image);\n    const data = image.data;\n    const fn = (cell, bounds = `undefined`) => {\n        const index = Grids.indexFromCell(g, cell, bounds);\n        if (index === undefined)\n            return;\n        const pxIndex = index * 4;\n        return {\n            r: data[pxIndex],\n            g: data[pxIndex + 1],\n            b: data[pxIndex + 2],\n            opacity: data[pxIndex + 3],\n            unit: `8bit`,\n            space: `srgb`\n        };\n    };\n    return fn;\n};\n/**\n * Returns a function that sets pixel values\n * @param image\n * @returns\n */\nexport const setter = (image) => {\n    const g = grid(image);\n    const data = image.data;\n    const fn = (value, cell, bounds = `undefined`) => {\n        const index = Grids.indexFromCell(g, cell, bounds);\n        if (index === undefined)\n            throw new Error(`Cell out of range. ${cell.x},${cell.y}`);\n        const pixel = SrgbSpace.to8bit(value);\n        const pxIndex = index * 4;\n        data[pxIndex] = pixel.r;\n        data[pxIndex + 1] = pixel.g;\n        data[pxIndex + 2] = pixel.b;\n        data[pxIndex + 3] = pixel.opacity ?? 255;\n    };\n    return fn;\n};\n// export function* visit(image: ImageData, visitor: Grids.VisitGenerator) {\n//   const a = accessor(image);\n//   for (const cell of visitor) {\n//     yield a(cell, `undefined`);\n//   }\n// }\n/**\n * Yields pixels of an image row by row\n * @param image\n */\nexport function* byRow(image) {\n    const a = accessor(image);\n    const g = grid(image);\n    const v = Grids.As.rows(g, { x: 0, y: 0 });\n    for (const row of v) {\n        const pixels = row.map(p => a(p, `undefined`));\n        yield pixels;\n    }\n}\n/**\n * Yields pixels of an image column by column\n * @param image\n */\nexport function* byColumn(image) {\n    const a = accessor(image);\n    const g = grid(image);\n    for (let x = 0; x < g.cols; x++) {\n        const col = [];\n        for (let y = 0; y < g.rows; y++) {\n            const p = a({ x, y }, `undefined`);\n            if (p)\n                col.push(p);\n        }\n        yield col;\n    }\n}\n","import { ElementSizer, resolveEl } from '@ixfx/dom';\nimport { SimpleEventEmitter } from '@ixfx/events';\nimport { Rects, scaler } from '@ixfx/geometry';\nimport * as Drawing from './drawing.js';\nimport * as ImageDataGrid from './image-data-grid.js';\nimport { cloneFromFields } from '@ixfx/core/records';\n/**\n * A wrapper for the CANVAS element that scales the canvas for high-DPI displays\n * and helps with resizing.\n *\n * ```js\n * const canvas = new CanvasHelper(`#my-canvas`, { resizeLogic: `both` });\n * const { ctx, width, height } = canvas.ctx; // Get drawing context, width & height\n * ```\n *\n * Draw whenever it is resized using the 'resize' event\n * ```js\n * canvas.addEventListener(`resize`, ({ctx, size}) => {\n *  // Use ctx...\n * });\n * ```\n *\n * Or provide a function when initialising:\n * ```js\n * const onResize = (ctx, size) => {\n *  // Do drawing\n * }\n * const canvas = new CanvasHelper(`#my-canvas`, { resizeLogic: `both`, onResize });\n * ```\n *\n * Automatically draw at animation speeds:\n * ```js\n * const draw = () => {\n * }\n * const canvas = new CanvasHelper(`#my-canvas`, { resizeLogic: `both`, draw });\n * ```\n */\nexport class CanvasHelper extends SimpleEventEmitter {\n    el;\n    opts;\n    #scaler;\n    #scalerSize;\n    #viewport = Rects.EmptyPositioned;\n    #logicalSize = Rects.Empty;\n    #ctx;\n    #drawHelper;\n    #resizer;\n    #disposed = false;\n    constructor(domQueryOrEl, opts = {}) {\n        super();\n        if (!domQueryOrEl)\n            throw new Error(`Param 'domQueryOrEl' is null or undefined`);\n        this.el = resolveEl(domQueryOrEl);\n        if (this.el.nodeName !== `CANVAS`) {\n            throw new Error(`Expected CANVAS HTML element. Got: ${this.el.nodeName}`);\n        }\n        const size = this.el.getBoundingClientRect();\n        this.opts = {\n            resizeLogic: opts.resizeLogic ?? `none`,\n            disablePointerEvents: opts.disablePointerEvents ?? false,\n            pixelZoom: opts.pixelZoom ?? (window.devicePixelRatio || 1),\n            height: opts.height ?? size.height,\n            width: opts.width ?? size.width,\n            zIndex: opts.zIndex ?? -1,\n            coordinateScale: opts.coordinateScale ?? `both`,\n            onResizing: opts.onResizing,\n            onResized: opts.onResized,\n            clearOnResize: opts.clearOnResize ?? true,\n            draw: opts.draw,\n            skipCss: opts.skipCss ?? false,\n            colourSpace: `srgb`\n        };\n        this.#scaler = scaler(`both`);\n        this.#scalerSize = scaler(`both`, size);\n        this.#init();\n    }\n    getRectangle() {\n        return {\n            x: 0, y: 0,\n            ...this.#logicalSize\n        };\n    }\n    dispose(reason) {\n        if (this.#disposed)\n            return;\n        this.#disposed = true;\n        if (this.#resizer) {\n            this.#resizer.dispose(`CanvasHelper disposing ${reason}`.trim());\n            this.#resizer = undefined;\n        }\n    }\n    #getContext(reset = false) {\n        if (this.#ctx === undefined || reset) {\n            const ratio = this.ratio;\n            const c = this.el.getContext(`2d`);\n            if (c === null)\n                throw new Error(`Could not create drawing context`);\n            this.#ctx = c;\n            // Reset scale\n            c.setTransform(1, 0, 0, 1, 0, 0);\n            c.scale(ratio, ratio);\n        }\n        return this.#ctx;\n    }\n    ;\n    /**\n     * Gets the drawable area of the canvas.\n     * This accounts for scaling due to high-DPI displays etc.\n     * @returns\n     */\n    getPhysicalSize() {\n        return {\n            width: this.width * this.ratio,\n            height: this.height * this.ratio\n        };\n    }\n    /**\n     * Creates a drawing helper for the canvas.\n     * If one is already created it is reused.\n     */\n    getDrawHelper() {\n        if (!this.#drawHelper) {\n            this.#drawHelper = Drawing.makeHelper(this.#getContext(), {\n                width: this.width, height: this.height\n            });\n        }\n    }\n    setLogicalSize(logicalSize) {\n        Rects.guard(logicalSize, `logicalSize`);\n        const logicalSizeInteger = Rects.applyFields(v => Math.floor(v), logicalSize);\n        const ratio = this.opts.pixelZoom;\n        // Scaler for going between relative and logical units\n        this.#scaler = scaler(this.opts.coordinateScale, logicalSize);\n        this.#scalerSize = scaler(`both`, logicalSize);\n        // Scaled logical size for DPI\n        const pixelScaled = Rects.multiplyScalar(logicalSize, ratio);\n        // Canvas will actually be much larger, based on DPI\n        this.el.width = pixelScaled.width;\n        this.el.height = pixelScaled.height;\n        // But scaled down on screen\n        this.el.style.width = logicalSizeInteger.width.toString() + `px`;\n        this.el.style.height = logicalSizeInteger.height.toString() + `px`;\n        // Since dimensions have change, reset context\n        this.#getContext(true);\n        if (this.opts.clearOnResize) {\n            this.ctx.clearRect(0, 0, this.width, this.height);\n        }\n        this.#logicalSize = logicalSizeInteger;\n        //console.log(`setting logical size to ${ this.#logicalSize.width }x${ this.#logicalSize.height }`);\n        // Notify listeners of resize\n        // const r = this.opts.onResizing;\n        // if (r) {\n        //   setTimeout(() => { r(this.ctx, this.size, this) }, 100);\n        // }\n        if (this.opts.onResizing) {\n            this.opts.onResizing(this.ctx, this.size, this);\n        }\n        this.fireEvent(`resize`, { ctx: this.ctx, size: this.#logicalSize, helper: this });\n    }\n    #init() {\n        //console.log(`init`, this.opts);\n        // If there is a 'draw' callback, set up an animation loop\n        const d = this.opts.draw;\n        if (d) {\n            const sched = () => {\n                d(this.ctx, this.#logicalSize, this);\n                requestAnimationFrame(sched);\n            };\n            setTimeout(() => { sched(); }, 100);\n        }\n        if (!this.opts.disablePointerEvents) {\n            this.#handleEvents();\n        }\n        const resizeLogic = this.opts.resizeLogic ?? `none`;\n        if (resizeLogic === `none`) {\n            this.setLogicalSize({ width: this.opts.width, height: this.opts.height });\n        }\n        else {\n            const resizerOptions = {\n                onSizeChanging: (size) => {\n                    if (Rects.isEqual(this.#logicalSize, size))\n                        return;\n                    this.setLogicalSize(size);\n                },\n                onSizeDone: (size, el) => {\n                    this.#onResizeDone(size);\n                },\n                naturalSize: { width: this.opts.width, height: this.opts.height },\n                stretch: this.opts.resizeLogic ?? `none`\n            };\n            this.#resizer = new ElementSizer(this.el, resizerOptions);\n        }\n        this.#getContext();\n    }\n    #onResizeDone(size) {\n        if (this.opts.onResized)\n            this.opts.onResized(this.ctx, this.size, this);\n        this.fireEvent(`resized`, { ctx: this.ctx, size: this.#logicalSize, helper: this });\n    }\n    #handleEvents() {\n        const handlePointerEvent = (event) => {\n            const { offsetX, offsetY } = event;\n            const physicalX = offsetX * this.ratio;\n            const physicalY = offsetY * this.ratio;\n            event = cloneFromFields(event);\n            const eventData = {\n                physicalX, physicalY,\n                // eslint-disable-next-line @typescript-eslint/no-misused-spread\n                ...event\n            };\n            switch (event.type) {\n                case `pointerup`: {\n                    {\n                        this.fireEvent(`pointerup`, eventData);\n                        break;\n                    }\n                    ;\n                }\n                case `pointermove`: {\n                    {\n                        this.fireEvent(`pointermove`, eventData);\n                        break;\n                    }\n                    ;\n                }\n                case `pointerdown`: {\n                    {\n                        this.fireEvent(`pointerup`, eventData);\n                        break;\n                    }\n                    ;\n                }\n            }\n            ;\n        };\n        this.el.addEventListener(`pointermove`, handlePointerEvent);\n        this.el.addEventListener(`pointerdown`, handlePointerEvent);\n        this.el.addEventListener(`pointerup`, handlePointerEvent);\n    }\n    /**\n     * Clears the canvas.\n     *\n     * Shortcut for:\n     * `ctx.clearRect(0, 0, this.width, this.height)`\n     */\n    clear() {\n        if (!this.#ctx)\n            return;\n        this.#ctx.clearRect(0, 0, this.width, this.height);\n    }\n    /**\n     * Fills the canvas with a given colour.\n     *\n     * Shortcut for:\n     * ```js\n        * ctx.fillStyle = ``;\n     * ctx.fillRect(0, 0, this.width, this.height);\n     * ```\n     * @param colour Colour\n     */\n    fill(colour) {\n        if (!this.#ctx)\n            return;\n        if (colour)\n            this.#ctx.fillStyle = colour;\n        this.#ctx.fillRect(0, 0, this.width, this.height);\n    }\n    /**\n     * Gets the drawing context\n     */\n    get ctx() {\n        if (this.#ctx === undefined)\n            throw new Error(`Context not available`);\n        return this.#getContext();\n    }\n    get viewport() {\n        return this.#viewport;\n    }\n    /**\n     * Gets the logical width of the canvas\n     * See also: {@link height}, {@link size}\n     */\n    get width() {\n        return this.#logicalSize.width;\n    }\n    /**\n     * Gets the logical height of the canvas\n     * See also: {@link width}, {@link size}\n     */\n    get height() {\n        return this.#logicalSize.height;\n    }\n    /**\n     * Gets the logical size of the canvas\n     * See also: {@link width}, {@link height}\n     */\n    get size() {\n        return this.#logicalSize;\n    }\n    /**\n     * Gets the current scaling ratio being used\n     * to compensate for high-DPI display\n     */\n    get ratio() {\n        return window.devicePixelRatio || 1;\n    }\n    /**\n     * Returns the width or height, whichever is smallest\n     */\n    get dimensionMin() {\n        return Math.min(this.width, this.height);\n    }\n    /**\n     * Returns the width or height, whichever is largest\n     */\n    get dimensionMax() {\n        return Math.max(this.width, this.height);\n    }\n    drawBounds(strokeStyle = `green`) {\n        const ctx = this.#getContext();\n        Drawing.rect(ctx, { x: 0, y: 0, width: this.width, height: this.height }, { crossed: true, strokeStyle, strokeWidth: 1 });\n        Drawing.rect(ctx, this.#viewport, { crossed: true, strokeStyle: `silver`, strokeWidth: 3 });\n    }\n    /**\n     * Returns a Scaler that converts from absolute\n     * to relative coordinates.\n     * This is based on the canvas size.\n     *\n     * ```js\n        * // Assuming a canvas of 800x500\n     * toRelative({ x: 800, y: 600 });  // { x: 1,   y: 1 }\n     * toRelative({ x: 0, y: 0 });   // { x: 0,   y: 0 }\n     * toRelative({ x: 400, y: 300 }); // { x: 0.5, y: 0.5 }\n     * ```\n     */\n    get toRelative() {\n        return this.#scaler.rel;\n    }\n    /**\n     * Returns a scaler for points based on width & height\n     */\n    get toAbsoluteFixed() {\n        return this.#scalerSize.abs;\n    }\n    /**\n     * Returns a scaler for points based on width & height\n     */\n    get toRelativeFixed() {\n        return this.#scalerSize.rel;\n    }\n    get logicalCenter() {\n        return {\n            x: this.#logicalSize.width / 2,\n            y: this.#logicalSize.height / 2\n        };\n    }\n    /**\n   * Returns a Scaler that converts from relative to absolute\n   * coordinates.\n   * This is based on the canvas size.\n   *\n   * ```js\n   * // Assuming a canvas of 800x600\n   * toAbsolute({ x: 1, y: 1 });      // { x: 800, y: 600}\n   * toAbsolute({ x: 0, y: 0 });      // { x: 0, y: 0}\n   * toAbsolute({ x: 0.5, y: 0.5 });  // { x: 400, y: 300}\n   * ```\n   */\n    get toAbsolute() {\n        return this.#scaler.abs;\n    }\n    /**\n     * Gets the center coordinate of the canvas\n     */\n    get center() {\n        return { x: this.width / 2, y: this.height / 2 };\n    }\n    /**\n     * Gets the image data for the canvas.\n     * Uses the 'physical' canvas size. Eg. A logical size of 400x400 might be\n     * 536x536 with a high-DPI display.\n     * @returns\n     */\n    getImageData() {\n        const size = this.getPhysicalSize();\n        const data = this.ctx.getImageData(0, 0, size.width, size.height, { colorSpace: this.opts.colourSpace });\n        if (data === null || data === undefined)\n            throw new Error(`Could not get image data from context`);\n        return data;\n    }\n    /**\n     * Returns the canvas frame data as a writable grid.\n     * When editing, make as many edits as needed before calling\n     * `flip`, which writes buffer back to the canvas.\n     * ```js\n        * const g = helper.getWritableBuffer();\n     * // Get {r,g,b,opacity} of pixel 10,10\n     * const pixel = g.get({ x: 10, y: 10 });\n     *\n     * // Set a colour to pixel 10,10\n     * g.set({ r: 0.5, g: 1, b: 0, opacity: 0 }, { x: 10, y: 10 });\n     *\n     * // Write buffer to canvas\n     * g.flip();\n     * ```\n     *\n     * Uses 'physical' size of canvas. Eg with a high-DPI screen, this will\n     * mean a higher number of rows and columns compared to the logical size.\n     * @returns\n     */\n    getWritableBuffer() {\n        const ctx = this.ctx;\n        const data = this.getImageData();\n        const grid = ImageDataGrid.grid(data);\n        const get = ImageDataGrid.accessor(data);\n        const set = ImageDataGrid.setter(data);\n        const flip = () => {\n            ctx.putImageData(data, 0, 0);\n        };\n        return { grid, get, set, flip };\n    }\n}\n// export const imageDataAsGrid = (canvas: HTMLCanvasElement, colorSpace: PredefinedColorSpace = `srgb`) => {\n//   const ctx = canvas.getContext(`2d`);\n//   if (!ctx) throw new Error(`Could not create context`);\n//   const data = ctx.getImageData(0, 0, canvas.width, canvas.height, { colorSpace });\n//   if (!data) throw new Error(`Could not get image data from context`);\n//   const get = ImageDataGrid.accessor(data);\n//   const set = ImageDataGrid.setter(data);\n// }\n","/**\n * Applies drawing options to given SVG element.\n * Applies: fillStyle\n * @param elem Element\n * @param opts Drawing options\n */\nexport const applyOpts = (elem, opts) => {\n    if (opts.fillStyle)\n        elem.setAttributeNS(null, `fill`, opts.fillStyle);\n    if (opts.opacity) {\n        elem.setAttributeNS(null, `opacity`, opts.opacity.toString());\n    }\n};\n","import {} from '@ixfx/geometry/rect';\n/**\n * Get the bounds of an SVG element (determined by its width/height attribs)\n * @param svg\n * @returns\n */\nexport const getBounds = (svg) => {\n    const w = svg.getAttributeNS(null, `width`);\n    const width = w === null ? 0 : Number.parseFloat(w);\n    const h = svg.getAttributeNS(null, `height`);\n    const height = h === null ? 0 : Number.parseFloat(h);\n    return { width, height };\n};\n/**\n * Set the bounds of an element, using its width/height attribs.\n * @param svg\n * @param bounds\n */\nexport const setBounds = (svg, bounds) => {\n    svg.setAttributeNS(null, `width`, bounds.width.toString());\n    svg.setAttributeNS(null, `height`, bounds.height.toString());\n};\n","/**\n * Creates an element of `type` and with `id` (if specified)\n * @param type Element type, eg `circle`\n * @param id Optional id to assign to element\n * @returns Element\n */\nexport const createEl = (type, id) => {\n    const m = document.createElementNS(`http://www.w3.org/2000/svg`, type);\n    if (id) {\n        m.id = id;\n    }\n    return m;\n};\n/**\n * Creates and appends a SVG element.\n *\n * ```js\n * // Create a circle\n * const circleEl = createOrResolve(parentEl, `SVGCircleElement`);\n * ```\n *\n * If `queryOrExisting` is specified, it is used as a query to find an existing element. If\n * query starts with `#`, this will be set as the element id, if created.\n *\n * ```js\n * // Creates an element with id 'myCircle' if it doesn't exist\n * const circleEl = createOrResolve(parentEl, `SVGCircleElement`, `#myCircle`);\n * ```\n * @param parent Parent element\n * @param type Type of SVG element\n * @param queryOrExisting Query, eg `#id`\n * @returns\n */\nexport const createOrResolve = (parent, type, queryOrExisting, suffix) => {\n    let existing = null;\n    if (queryOrExisting !== undefined) {\n        existing = typeof queryOrExisting === `string` ? parent.querySelector(queryOrExisting) : queryOrExisting;\n    }\n    if (existing === null) {\n        const p = document.createElementNS(`http://www.w3.org/2000/svg`, type);\n        parent.append(p);\n        if (queryOrExisting && typeof queryOrExisting === `string` &&\n            queryOrExisting.startsWith(`#`)) {\n            p.id = suffix !== undefined && !queryOrExisting.endsWith(suffix) ? queryOrExisting.slice(1) + suffix : queryOrExisting.slice(1);\n        }\n        return p;\n    }\n    return existing;\n};\n","import { numberTest, resultThrow } from '@ixfx/guards';\nimport {} from '@ixfx/random';\nimport { scalar as hslScalar, toCssString } from './hsl.js';\n/**\n * Returns a full HSL colour string (eg `hsl(20,50%,75%)`) based on a index.\n * It's useful for generating perceptually different shades as the index increments.\n *\n * ```\n * el.style.backgroundColor = goldenAgeColour(10);\n * ```\n *\n * Saturation and lightness can be specified, as numeric ranges of 0-1.\n *\n * @param saturation Saturation (0-1), defaults to 0.5\n * @param lightness Lightness (0-1), defaults to 0.75\n * @param alpha Opacity (0-1), defaults to 1.0\n * @returns HSL colour string eg `hsl(20,50%,75%)`\n */\nexport const goldenAngleColour = (index, saturation = 0.5, lightness = 0.75, alpha = 1) => {\n    resultThrow(numberTest(index, `positive`, `index`), numberTest(saturation, `percentage`, `saturation`), numberTest(lightness, `percentage`, `lightness`), numberTest(alpha, `percentage`, `alpha`));\n    // Via Stackoverflow\n    const hueDeg = index * 137.508; // use golden angle approximation\n    const hueRel = (hueDeg % 360) / 360;\n    return toCssString(hslScalar(hueRel, saturation, lightness, alpha));\n    //return alpha === 1 ? `hsl(${ hue },${ saturation * 100 }%,${ lightness * 100 }%)` : `hsl(${ hue },${ saturation * 100 }%,${ lightness * 100 }%,${ alpha * 100 }%)`;\n};\n/**\n * Returns a random hue component (0..359)\n *\n * ```\n * // Generate hue\n * const h = randomHue(); // 0-359\n *\n * // Generate hue and assign as part of a HSL string\n * el.style.backgroundColor = `hsl(${randomHue(), 50%, 75%})`;\n * ```\n * @param rand\n * @returns\n */\nexport const randomHue = (rand = Math.random) => rand() * 360;\n","import { toColour, toCssColour } from './conversion.js';\nimport * as HslSpace from './hsl.js';\nimport * as SrgbSpace from './srgb.js';\nimport { clamp } from '@ixfx/numbers';\nimport { OklchSpace } from './index.js';\nimport * as C from 'colorizr';\n/**\n * Multiplies the opacity of a colour by `amount`, returning a computed CSS colour.\n *\n * ```js\n * multiplyOpacity(`red`, 0.5); // Returns a colour string\n * ```\n *\n * For example, to half the opacity, use `amount: 0.5`.\n * Clamps the result to ensure it's between 0..1\n * @param colourish Colour\n * @param amount Amount\n * @returns\n */\nexport function multiplyOpacity(colourish, amount) {\n    return withOpacity(colourish, o => clamp(o * amount));\n}\n/**\n * Does a computation with the opacity of a colour, returning colour.\n *\n * Passes operation to `HslSpace` or `SrgbSpace` depending on space of `colourish`.\n * @param colourish Colour\n * @param fn Function that takes original opacity as input and returns output opacity\n */\nexport function withOpacity(colourish, fn) {\n    const colour = toColour(colourish);\n    let result;\n    switch (colour.space) {\n        case `hsl`:\n            result = HslSpace.withOpacity(colour, fn);\n            break;\n        case `srgb`:\n            result = SrgbSpace.withOpacity(colour, fn);\n            break;\n        case `oklch`:\n            result = OklchSpace.withOpacity(colour, fn);\n            break;\n        default:\n            throw new Error(`Unknown space: '${colour.space}'. Expected hsl, srgb, oklch`);\n    }\n    if (!result)\n        throw new Error(`Is colour in correct form?`);\n    // If input type was string, return result as string\n    if (typeof colourish === `string`) {\n        return toCssColour(result);\n    }\n    return result;\n}\n;\nexport function setOpacity(colourish, opacity) {\n    const colour = toColour(colourish);\n    colour.opacity = opacity;\n    if (typeof colourish === `string`) {\n        return toCssColour(colour);\n    }\n    return colour;\n}\n// export function lighten(colour: string, amount: number): string;\n// export function lighten(colour: Colour, amount: number): Colour;\n// export function lighten(colourish: Colourish, amount: number): Colourish {\n//   const asString = toCssColour(colourish);\n//   const result = C.lighten(asString, amount, ``)\n// }\n// export const multiplySaturation = (colour: Colourish, amt: number): string => {\n//   throwNumberTest(amt, `percentage`, `amt`);\n//   const c = structuredToColorJs(colour);\n//   c.s = (c.s ?? 0) * amt;\n//   return c.toString();\n// };\n","import { pairwise } from '@ixfx/arrays';\nimport * as HslSpace from './hsl.js';\nimport { convert, toCssColour } from \"./conversion.js\";\nimport { convertScalar, OklchSpace, SrgbSpace } from \"./index.js\";\nfunction interpolateInit(colours, destination = `hsl`) {\n    if (!Array.isArray(colours))\n        throw new Error(`Param 'colours' is not an array as expected. Got: ${typeof colours}`);\n    if (colours.length < 2)\n        throw new Error(`Param 'colours' should be at least two in length. Got: ${colours.length}`);\n    const c = colours.map(colour => convertScalar(colour, destination));\n    return [...pairwise(c)];\n}\n/**\n * Returns a CSS `linear-gradient` with stops corresponding to the given list of `colours`.\n * ```js\n * element.style.background = Colour.cssLinearGradient(['red','green','blue']);\n * ```\n * @param colours\n * @returns\n */\nexport const cssLinearGradient = (colours) => {\n    const c = colours.map(c => toCssColour(c));\n    return `linear-gradient(to right, ${c.join(`, `)})`;\n};\n/**\n * Returns a function that interpolates between two colours. Returns string colour values.\n * ```js\n * const i = interpolator(`blue`, `red`);\n * i(0.5); // Get the colour at 50%, as a string.\n * ```\n *\n * To work with structured colour values, use one of the space's `interpolate` functions.\n * @param colourA\n * @param colourB\n * @param options\n * @returns\n */\nexport const interpolator = (colourA, colourB, options = {}) => {\n    const space = options.space ?? `oklch`;\n    const direction = options.direction ?? `shorter`;\n    let inter;\n    switch (space) {\n        case `hsl`:\n            inter = HslSpace.interpolator(convert(colourA, `hsl-scalar`), convert(colourB, `hsl-scalar`), direction);\n            break;\n        case `srgb`:\n            inter = SrgbSpace.interpolator(convert(colourA, `srgb-scalar`), convert(colourB, `srgb-scalar`));\n            break;\n        default:\n            inter = OklchSpace.interpolator(convert(colourA, `oklch-scalar`), convert(colourB, `oklch-scalar`), direction);\n    }\n    return (amount) => toCssColour(inter(amount));\n};\n/**\n * Produces a stepped scale of colours.\n *\n * ```js\n * // A scale of from red to green, with three colours in-between\n * const steps = Colour.scale([ `red`, `green` ], { stepsBetween: 3 });\n * for (const step of steps) {\n *  // A CSS colour string\n * }\n * ```\n *\n * {@link cssLinearGradient} can produce a smooth gradient in CSS on the basis\n * of the stepped colours.\n * @param colours\n * @param opts\n * @returns\n */\nexport const scale = (colours, opts = {}) => {\n    const direction = opts.direction ?? `shorter`;\n    const space = opts.space ?? `oklch`;\n    const pieces = interpolateInit(colours, space);\n    let stepsBetween = 0;\n    if (typeof opts.stepsBetween === `number`) {\n        stepsBetween = opts.stepsBetween;\n        if (stepsBetween < 1)\n            throw new Error(`Param 'stepsBetween' must be at least 1`);\n    }\n    else if (typeof opts.stepsTotal === `number`) {\n        if (opts.stepsTotal <= colours.length)\n            throw new Error(`Param 'stepsTotal' must be greater than number of provided colour stops (${colours.length}) +1 per stop`);\n        const totalSteps = opts.stepsTotal - colours.length;\n        stepsBetween = Math.floor(totalSteps / pieces.length);\n    }\n    const steps = pieces.map((piece) => {\n        //const pieceSteps = HslSpace.createSteps(piece[ 0 ], piece[ 1 ], stepsBetween, direction, true);\n        const pieceSteps = createSteps(piece[0], piece[1], { steps: stepsBetween, space, direction, exclusive: true });\n        // Add end colour\n        pieceSteps.push(piece[1]);\n        return pieceSteps;\n    });\n    // Add very first colour\n    const firstPiece = pieces[0];\n    steps.unshift([firstPiece[0]]);\n    return steps.flat().map(c => toCssColour(c));\n};\n/**\n * Creates discrete colour steps between two colours.\n *\n * Start and end colours are included (and counted as a step) unless `exclusive` is set to _true_\n *\n * ```js\n * // Array of five HslScalar\n * createSteps(`red`,`blue`, { steps: 5 });\n * ```\n *\n * Defaults to the oklch colour space, 5 steps and non-exclusive.\n * @param a Start colour\n * @param b End colour\n * @param options\n * @returns\n */\nexport function createSteps(a, b, options = {}) {\n    const exclusive = options.exclusive ?? false;\n    const steps = options.steps ?? 5;\n    const space = options.space ?? `oklch`;\n    const direction = options.direction ?? `shorter`;\n    if (!exclusive && steps < 2)\n        throw new Error(`Param 'steps' should be at least 2 when 'exclusive' is false`);\n    if (exclusive && steps < 1)\n        throw new Error(`Param 'steps' should be at least 1 when 'exlusive' is true`);\n    const aa = convertScalar(a, space);\n    const bb = convertScalar(b, space);\n    // Create interpolator\n    let inter;\n    switch (space) {\n        case `hsl`:\n            inter = HslSpace.interpolator(aa, bb, direction);\n            break;\n        case `oklch`:\n            inter = OklchSpace.interpolator(aa, bb, direction);\n            break;\n        case `srgb`:\n            inter = SrgbSpace.interpolator(aa, bb);\n            break;\n        default:\n            throw new Error(`Colour space '${space}' not supported for interpolation.`);\n    }\n    if (!inter)\n        throw new Error(`Could not create interpolator for space: ${space}`);\n    let stepBy = 0;\n    let startAt = 0;\n    let endAt = 1;\n    if (exclusive) {\n        stepBy = 1 / (steps + 1);\n        startAt = stepBy;\n        endAt = 1 - stepBy;\n    }\n    else {\n        stepBy = 1 / (steps - 1);\n    }\n    const results = [];\n    for (let interpolateAmount = startAt; interpolateAmount <= endAt; interpolateAmount += stepBy) {\n        results.push(inter(interpolateAmount));\n    }\n    return results;\n}\n","export * from './conversion.js';\nexport * from './css-colours.js';\nexport * from './generate.js';\nexport * from './guards.js';\n//export * from './interpolate.js';\nexport * from './math.js';\nexport * from './interpolate.js';\nexport * as HslSpace from './hsl.js';\nexport * as OklchSpace from './oklch.js';\nexport * as SrgbSpace from './srgb.js';\nexport * from './types.js';\n","import Colorizr, * as C from \"colorizr\";\nimport {} from \"./types.js\";\nimport * as SrgbSpace from \"./srgb.js\";\nimport * as HslSpace from './hsl.js';\nimport * as OkLchSpace from './oklch.js';\nimport { fromCssColour } from \"./css-colours.js\";\nimport { isHsl, isRgb, tryParseObjectToRgb, tryParseObjectToHsl, isColourish, isOkLch } from \"./guards.js\";\nimport { OklchSpace } from \"./index.js\";\n/**\n * Converts an object or string representation of colour to ixfx's\n * structured colour.\n * Use {@link convertToString} if you want a CSS colour string instead.\n * @param colour\n * @param destination\n * @returns\n */\nexport function convert(colour, destination) {\n    if (destination === `hsl-scalar`) {\n        if (typeof colour === `string` || isHsl(colour) || isRgb(colour)) {\n            return HslSpace.toScalar(colour);\n        }\n    }\n    else if (destination === `hsl-absolute`) {\n        if (typeof colour === `string` || isHsl(colour)) {\n            return HslSpace.toAbsolute(colour);\n        }\n    }\n    else if (destination === `oklch-scalar`) {\n        if (typeof colour === `string` || isOkLch(colour)) {\n            return OkLchSpace.toScalar(colour);\n        }\n    }\n    else if (destination === `oklch-absolute`) {\n        if (typeof colour === `string` || isOkLch(colour)) {\n            return OkLchSpace.toAbsolute(colour);\n        }\n    }\n    else if (destination === `srgb-8bit`) {\n        if (typeof colour === `string` || isRgb(colour)) {\n            return SrgbSpace.to8bit(colour);\n        }\n    }\n    else if (destination === `srgb-scalar`) {\n        if (typeof colour === `string` || isRgb(colour)) {\n            return SrgbSpace.toScalar(colour);\n        }\n    }\n    else {\n        throw new Error(`Destination '${destination}' not supported for input: ${JSON.stringify(colour)}`);\n    }\n    return convert(toCssColour(colour), destination);\n}\n/**\n * Like {@link convert}, but result is a CSS colour string\n * @param colour\n * @param destination\n * @returns\n */\nexport function convertToString(colour, destination) {\n    const c = convert(colour, destination);\n    return toCssColour(c);\n}\nexport function convertScalar(colour, destination) {\n    if (destination === `oklch`)\n        return convert(colour, `oklch-scalar`);\n    if (destination === `srgb`)\n        return convert(colour, `srgb-scalar`);\n    if (destination === `hsl`)\n        return convert(colour, `hsl-scalar`);\n    throw new Error(`Unknown destination: '${destination}'`);\n}\nexport const toCssColour = (colour) => {\n    if (typeof colour === `string`)\n        return colour;\n    if (isHsl(colour)) {\n        return HslSpace.toCssString(colour);\n    }\n    if (isRgb(colour)) {\n        return SrgbSpace.toCssString(colour);\n    }\n    if (isOkLch(colour)) {\n        return OklchSpace.toCssString(colour);\n    }\n    const asRgb = tryParseObjectToRgb(colour);\n    if (asRgb)\n        return SrgbSpace.toCssString(asRgb);\n    const asHsl = tryParseObjectToHsl(colour);\n    if (asHsl)\n        return HslSpace.toCssString(asHsl);\n    throw new Error(`Unknown colour format: '${JSON.stringify(colour)}'`);\n};\nexport const toLibraryColour = (colour) => {\n    const asCss = toCssColour(colour);\n    return new Colorizr(asCss);\n};\n// export const convertColourString = (colour: string, destination: 'hex' | 'hsl' | 'oklab' | 'oklch' | 'srgb' | `rgb`): string => {\n//   if (destination === `srgb`) destination = `rgb`;\n//   return C.convert(colour, destination);\n// }\nexport const guard = (colour) => {\n    switch (colour.space) {\n        case `hsl`:\n            HslSpace.guard(colour);\n            break;\n        case `srgb`:\n            SrgbSpace.guard(colour);\n            break;\n        case `oklch`:\n            OkLchSpace.guard(colour);\n            break;\n        default:\n            throw new Error(`Unsupported colour space: '${colour.space}'`);\n    }\n};\nexport const toColour = (colourish) => {\n    if (!isColourish(colourish))\n        throw new Error(`Could not parse input. Expected CSS colour string or structured colour {r,g,b}, {h,s,l} etc. Got: ${JSON.stringify(colourish)}`);\n    let c;\n    if (typeof colourish === `string`)\n        c = fromCssColour(colourish);\n    else\n        c = colourish;\n    if (c === undefined)\n        throw new Error(`Could not parse input. Expected CSS colour string or structured colour {r,g,b}, {h,s,l} etc.`);\n    guard(c);\n    return c;\n};\n/**\n * Returns a CSS-ready string\n * representation.\n * ```js\n * element.style.backgroundColor = resolveToString(`red`);\n * ```\n *\n * Tries each parameter in turn, returning the value\n * for the first that resolves. This can be useful for\n * having fallback values.\n *\n * ```js\n * // Try a CSS variable, a object property or finally fallback to red.\n * element.style.backgroundColor = toStringFirst('--some-var', opts.background, `red`);\n * ```\n * @param colours Array of colours to resolve\n * @returns\n */\nexport const toStringFirst = (...colours) => {\n    for (const colour of colours) {\n        if (colour === undefined)\n            continue;\n        if (colour === null)\n            continue;\n        try {\n            const c = toColour(colour);\n            return toCssColour(c);\n        }\n        catch { /* empty */ }\n    }\n    return `rebeccapurple`;\n};\nexport function rgbToHsl(rgb, scalarResult) {\n    // Needed because the Colorizr package has broken RGB to HSL\n    // Converts rgb { model: 'rgb', r: 40, g: 20, b: 60, alpha: undefined }\n    // to : { h: 270, s: 50, l: 0.06 }\n    // when it should be: { h: 270, s: 50, l: 40 }\n    // Source: https://www.jameslmilner.com/posts/converting-rgb-hex-hsl-colors/\n    let { r, g, b } = rgb;\n    const opacity = rgb.opacity ?? 1;\n    if (rgb.unit === `8bit`) {\n        r /= 255;\n        g /= 255;\n        b /= 255;\n    }\n    const max = Math.max(r, g, b);\n    const min = Math.min(r, g, b);\n    let h = (max + min) / 2;\n    let s = h;\n    const l = h;\n    if (max === min) {\n        // Achromatic\n        if (scalarResult) {\n            return HslSpace.scalar(0, 0, 0, opacity);\n        }\n        else {\n            return HslSpace.absolute(0, 0, 0, opacity);\n        }\n    }\n    const d = max - min;\n    s = l >= 0.5 ? d / (2 - (max + min)) : d / (max + min);\n    switch (max) {\n        case r:\n            h = ((g - b) / d + 0) * 60;\n            break;\n        case g:\n            h = ((b - r) / d + 2) * 60;\n            break;\n        case b:\n            h = ((r - g) / d + 4) * 60;\n            break;\n    }\n    if (scalarResult) {\n        return HslSpace.scalar(h / 360, s, l, opacity);\n    }\n    else {\n        return HslSpace.absolute(h, s * 100, l * 100, opacity);\n    }\n}\n","/**\n * Applies drawing options to given SVG element.\n * Applies: strokeStyle, strokeWidth, strokeDash, strokeLineCap\n * @param elem Element\n * @param opts\n */\nexport const applyStrokeOpts = (elem, opts) => {\n    if (opts.strokeStyle)\n        elem.setAttributeNS(null, `stroke`, opts.strokeStyle);\n    if (opts.strokeWidth) {\n        elem.setAttributeNS(null, `stroke-width`, opts.strokeWidth.toString());\n    }\n    if (opts.strokeDash)\n        elem.setAttribute(`stroke-dasharray`, opts.strokeDash);\n    if (opts.strokeLineCap) {\n        elem.setAttribute(`stroke-linecap`, opts.strokeLineCap);\n    }\n};\n","import { applyOpts } from \"./apply.js\";\nimport { createEl, createOrResolve } from \"./create.js\";\nexport const createMarker = (id, opts, childCreator) => {\n    const m = createEl(`marker`, id);\n    if (opts.markerWidth) {\n        m.setAttribute(`markerWidth`, opts.markerWidth?.toString());\n    }\n    if (opts.markerHeight) {\n        m.setAttribute(`markerHeight`, opts.markerHeight?.toString());\n    }\n    if (opts.orient)\n        m.setAttribute(`orient`, opts.orient.toString());\n    else\n        m.setAttribute(`orient`, `auto-start-reverse`);\n    if (opts.viewBox)\n        m.setAttribute(`viewBox`, opts.viewBox.toString());\n    if (opts.refX)\n        m.setAttribute(`refX`, opts.refX.toString());\n    if (opts.refY)\n        m.setAttribute(`refY`, opts.refY.toString());\n    if (childCreator) {\n        const c = childCreator();\n        m.appendChild(c);\n    }\n    return m;\n};\nexport const markerPrebuilt = (elem, opts, _context) => {\n    if (elem === null)\n        return `(elem null)`;\n    const parent = elem.ownerSVGElement;\n    if (parent === null)\n        throw new Error(`parent for elem is null`);\n    const defsEl = createOrResolve(parent, `defs`, `defs`);\n    //eslint-disable-next-line functional/no-let\n    let defEl = defsEl.querySelector(`#${opts.id}`);\n    if (defEl !== null) {\n        return `url(#${opts.id})`;\n    }\n    if (opts.id === `triangle`) {\n        opts = { ...opts, strokeStyle: `transparent` };\n        if (!opts.markerHeight)\n            opts = { ...opts, markerHeight: 6 };\n        if (!opts.markerWidth)\n            opts = { ...opts, markerWidth: 6 };\n        if (!opts.refX)\n            opts = { ...opts, refX: opts.markerWidth };\n        if (!opts.refY)\n            opts = { ...opts, refY: opts.markerHeight };\n        if (!opts.fillStyle || opts.fillStyle === `none`) {\n            opts = { ...opts, fillStyle: `black` };\n        }\n        if (!opts.viewBox)\n            opts = { ...opts, viewBox: `0 0 10 10` };\n        defEl = createMarker(opts.id, opts, () => {\n            const tri = createEl(`path`);\n            tri.setAttribute(`d`, `M 0 0 L 10 5 L 0 10 z`);\n            if (opts)\n                applyOpts(tri, opts);\n            return tri;\n        });\n    }\n    else\n        throw new Error(`Do not know how to make ${opts.id}`);\n    //eslint-disable-next-line functional/immutable-data\n    defEl.id = opts.id;\n    defsEl.appendChild(defEl);\n    return `url(#${opts.id})`;\n};\n","import { markerPrebuilt } from \"./markers.js\";\n/**\n * Applies path drawing options to given element\n * Applies: markerEnd, markerStart, markerMid\n * @param elem Element (presumed path)\n * @param opts Options\n */\nexport const applyPathOpts = (elem, opts) => {\n    if (opts.markerEnd) {\n        elem.setAttribute(`marker-end`, markerPrebuilt(elem, opts.markerEnd, opts));\n    }\n    if (opts.markerStart) {\n        elem.setAttribute(`marker-start`, markerPrebuilt(elem, opts.markerStart, opts));\n    }\n    if (opts.markerMid) {\n        elem.setAttribute(`marker-mid`, markerPrebuilt(elem, opts.markerMid, opts));\n    }\n};\n","//import type { CirclePositioned } from '../../geometry/circle/CircleType.js';\n//import type { Point } from '../../geometry/point/PointType.js';\n//import type { Line } from '../../geometry/line/LineType.js';\n//import * as Lines from '../geometry/line/index.js';\nimport { Lines, Polar } from '@ixfx/geometry';\n//import * as Svg from './index.js';\nimport { toStringFirst as ColourStringFirst } from '../colour/conversion.js';\nimport { applyOpts } from './apply.js';\nimport { applyStrokeOpts } from './stroke.js';\nimport { createEl, createOrResolve } from './create.js';\nimport { applyPathOpts } from './path.js';\n//import type { PolarRay } from 'src/geometry/polar/Types.js';\n//import { toCartesian as polarRayToCartesian } from 'src/geometry/polar/Ray.js';\n//import {Palette} from \".\";\nconst numberOrPercentage = (v) => {\n    if (v >= 0 && v <= 1)\n        return `${v * 100}%`;\n    return v.toString();\n};\n/**\n * Creates and adds an SVG path element\n * @example\n * ```js\n * const paths = [\n *  `M300,200`,\n *  `a25,25 -30 0,1 50, -25 l 50,-25`\n * ]\n * const pathEl = path(paths, parentEl);\n * ```\n * @param svgOrArray Path syntax, or array of paths. Can be empty if path data will be added later\n * @param parent SVG parent element\n * @param opts Options Drawing options\n * @returns\n */\nexport const path = (svgOrArray, parent, opts, queryOrExisting) => {\n    const elem = createOrResolve(parent, `path`, queryOrExisting);\n    const svg = typeof svgOrArray === `string` ? svgOrArray : svgOrArray.join(`\\n`);\n    elem.setAttributeNS(null, `d`, svg);\n    parent.append(elem);\n    return pathUpdate(elem, opts);\n};\nexport const pathUpdate = (elem, opts) => {\n    if (opts)\n        applyOpts(elem, opts);\n    if (opts)\n        applyStrokeOpts(elem, opts);\n    return elem;\n};\n/**\n * Updates an existing `SVGCircleElement` with potentially updated circle data and drawing options\n * @param elem Element\n * @param circle Circle\n * @param opts Drawing options\n * @returns SVGCircleElement\n */\nexport const circleUpdate = (elem, circle, opts) => {\n    elem.setAttributeNS(null, `cx`, circle.x.toString());\n    elem.setAttributeNS(null, `cy`, circle.y.toString());\n    elem.setAttributeNS(null, `r`, circle.radius.toString());\n    if (opts)\n        applyOpts(elem, opts);\n    if (opts)\n        applyStrokeOpts(elem, opts);\n    return elem;\n};\n/**\n * Creates or reuses a `SVGCircleElement`.\n *\n * To update an existing element, use `circleUpdate`\n * @param circle\n * @param parent\n * @param opts\n * @param queryOrExisting\n * @returns\n */\nexport const circle = (circle, parent, opts, queryOrExisting) => {\n    const p = createOrResolve(parent, `circle`, queryOrExisting);\n    return circleUpdate(p, circle, opts);\n};\n/**\n * Creates or resuses a `SVGGElement` (group)\n *\n * To update an existing elemnet, use `groupUpdate`\n * @param children\n * @param parent\n * @param queryOrExisting\n * @returns\n */\nexport const group = (children, parent, queryOrExisting) => {\n    const p = createOrResolve(parent, `g`, queryOrExisting);\n    return groupUpdate(p, children);\n};\nexport const groupUpdate = (elem, children) => {\n    for (const c of children) {\n        if (c.parentNode !== elem) {\n            elem.append(c);\n        }\n    }\n    return elem;\n};\n/**\n * Creates or reuses a SVGLineElement.\n *\n * @param line\n * @param parent\n * @param opts\n * @param queryOrExisting\n * @returns\n */\nexport const line = (line, parent, opts, queryOrExisting) => {\n    const lineEl = createOrResolve(parent, `line`, queryOrExisting);\n    return lineUpdate(lineEl, line, opts);\n};\n/**\n * Updates a SVGLineElement instance with potentially changed line and drawing data\n * @param lineEl\n * @param line\n * @param opts\n * @returns\n */\nexport const lineUpdate = (lineEl, line, opts) => {\n    lineEl.setAttributeNS(null, `x1`, line.a.x.toString());\n    lineEl.setAttributeNS(null, `y1`, line.a.y.toString());\n    lineEl.setAttributeNS(null, `x2`, line.b.x.toString());\n    lineEl.setAttributeNS(null, `y2`, line.b.y.toString());\n    if (opts)\n        applyOpts(lineEl, opts);\n    if (opts)\n        applyPathOpts(lineEl, opts);\n    if (opts)\n        applyStrokeOpts(lineEl, opts);\n    return lineEl;\n};\nexport const polarRayUpdate = (lineEl, ray, opts) => {\n    const l = Polar.Ray.toCartesian(ray);\n    lineEl.setAttributeNS(null, `x1`, l.a.x.toString());\n    lineEl.setAttributeNS(null, `y1`, l.a.y.toString());\n    lineEl.setAttributeNS(null, `x2`, l.b.x.toString());\n    lineEl.setAttributeNS(null, `y2`, l.b.y.toString());\n    if (opts)\n        applyOpts(lineEl, opts);\n    if (opts)\n        applyPathOpts(lineEl, opts);\n    if (opts)\n        applyStrokeOpts(lineEl, opts);\n    return lineEl;\n};\n/**\n * Updates an existing SVGTextPathElement instance with text and drawing options\n * @param el\n * @param text\n * @param opts\n * @returns\n */\nexport const textPathUpdate = (el, text, opts) => {\n    if (opts?.method)\n        el.setAttributeNS(null, `method`, opts.method);\n    if (opts?.side)\n        el.setAttributeNS(null, `side`, opts.side);\n    if (opts?.spacing)\n        el.setAttributeNS(null, `spacing`, opts.spacing);\n    if (opts?.startOffset) {\n        el.setAttributeNS(null, `startOffset`, numberOrPercentage(opts.startOffset));\n    }\n    if (opts?.textLength) {\n        el.setAttributeNS(null, `textLength`, numberOrPercentage(opts.textLength));\n    }\n    if (text) {\n        el.textContent = text;\n    }\n    if (opts)\n        applyOpts(el, opts);\n    if (opts)\n        applyStrokeOpts(el, opts);\n    return el;\n};\n/**\n * Creates or reuses a SVGTextPathElement.\n * @param pathReference\n * @param text\n * @param parent\n * @param opts\n * @param textQueryOrExisting\n * @param pathQueryOrExisting\n * @returns\n */\nexport const textPath = (pathReference, text, parent, opts, textQueryOrExisting, pathQueryOrExisting) => {\n    const textEl = createOrResolve(parent, `text`, textQueryOrExisting, `-text`);\n    // Update text properties, but don't pass in position or text\n    textUpdate(textEl, undefined, undefined, opts);\n    const p = createOrResolve(textEl, `textPath`, pathQueryOrExisting);\n    p.setAttributeNS(null, `href`, pathReference);\n    return textPathUpdate(p, text, opts);\n};\n/**\n * Updates an existing SVGTextElement instance with position, text and drawing options\n * @param el\n * @param pos\n * @param text\n * @param opts\n * @returns\n */\nexport const textUpdate = (el, pos, text, opts) => {\n    if (pos) {\n        el.setAttributeNS(null, `x`, pos.x.toString());\n        el.setAttributeNS(null, `y`, pos.y.toString());\n    }\n    if (text) {\n        el.textContent = text;\n    }\n    if (opts) {\n        applyOpts(el, opts);\n        if (opts)\n            applyStrokeOpts(el, opts);\n        if (opts.anchor)\n            el.setAttributeNS(null, `text-anchor`, opts.anchor);\n        if (opts.align)\n            el.setAttributeNS(null, `alignment-baseline`, opts.align);\n        const userSelect = opts.userSelect ?? true;\n        if (!userSelect) {\n            el.style.userSelect = `none`;\n        }\n    }\n    return el;\n};\n/**\n * Creates or reuses a SVGTextElement\n * @param pos Position of text\n * @param text Text\n * @param parent\n * @param opts\n * @param queryOrExisting\n * @returns\n */\nexport const text = (text, parent, pos, opts, queryOrExisting) => {\n    const p = createOrResolve(parent, `text`, queryOrExisting);\n    return textUpdate(p, pos, text, opts);\n};\n/**\n * Creates a square grid based at a center point, with cells having `spacing` height and width.\n *\n * It fits in as many cells as it can within `width` and `height`.\n *\n * Returns a SVG group, consisting of horizontal and vertical lines\n * @param parent Parent element\n * @param center Center point of grid\n * @param spacing Width/height of cells\n * @param width How wide grid should be\n * @param height How high grid should be\n * @param opts\n */\nexport const grid = (parent, center, spacing, width, height, opts = {}) => {\n    if (!opts.strokeStyle) {\n        opts = { ...opts, strokeStyle: ColourStringFirst(`bg-dim`, `silver`) };\n    }\n    if (!opts.strokeWidth)\n        opts = { ...opts, strokeWidth: 1 };\n    const g = createEl(`g`);\n    applyOpts(g, opts);\n    applyPathOpts(g, opts);\n    applyStrokeOpts(g, opts);\n    // Horizontals\n    let y = 0;\n    while (y < height) {\n        const horiz = Lines.fromNumbers(0, y, width, y);\n        line(horiz, g);\n        y += spacing;\n    }\n    // Verticals\n    let x = 0;\n    while (x < width) {\n        const vert = Lines.fromNumbers(x, 0, x, height);\n        line(vert, g);\n        x += spacing;\n    }\n    parent.append(g);\n    return g;\n};\n","import { Polar } from \"@ixfx/geometry\";\n// import type { Line } from \"../../geometry/line/LineType.js\";\n// import type { Point } from \"../../geometry/point/PointType.js\";\n// import { fromLine as polarRayFromLine } from \"../../geometry/polar/Ray.js\";\n/**\n * Returns a Line type from an SVGLineElement\n * @param el SVG Line Element\n * @returns\n */\nexport const lineFromSvgLine = (el) => {\n    if (!el)\n        throw new Error(`Param 'el' is undefined`);\n    const a = { x: el.x1.baseVal.value, y: el.y1.baseVal.value };\n    const b = { x: el.x2.baseVal.value, y: el.y2.baseVal.value };\n    return { a, b };\n};\nexport const polarRayFromSvgLine = (el, origin) => {\n    const l = lineFromSvgLine(el);\n    return Polar.Ray.fromLine(l, origin);\n};\n","/**\n * Removes an SVG element from a parent\n * @param parent Parent\n * @param queryOrExisting Query or existing element\n * @returns\n */\nexport const remove = (parent, queryOrExisting) => {\n    if (typeof queryOrExisting === `string`) {\n        const elem = parent.querySelector(queryOrExisting);\n        if (elem === null)\n            return;\n        elem.remove();\n    }\n    else {\n        queryOrExisting.remove();\n    }\n};\n/**\n * Removes all children of `parent`, but not `parent` itself.\n * @param parent\n */\nexport const clear = (parent) => {\n    let c = parent.lastElementChild;\n    while (c) {\n        c.remove();\n        c = parent.lastElementChild;\n    }\n};\n","import { applyOpts } from './apply.js';\nimport { applyStrokeOpts } from './stroke.js';\nimport { remove } from './remove.js';\nimport * as Elements from './elements.js';\n/**\n * Creates a {@link SvgHelper} for the creating and management of SVG elements.\n * @param parent\n * @param parentOpts\n * @returns\n */\nexport const makeHelper = (parent, parentOpts) => {\n    if (parentOpts) {\n        applyOpts(parent, parentOpts);\n        applyStrokeOpts(parent, parentOpts);\n    }\n    const o = {\n        remove: (queryOrExisting) => { remove(parent, queryOrExisting); },\n        text: (text, pos, opts, queryOrExisting) => Elements.text(text, parent, pos, opts, queryOrExisting),\n        textPath: (pathReference, text, opts, textQueryOrExisting, pathQueryOrExisting) => Elements.textPath(pathReference, text, parent, opts, textQueryOrExisting, pathQueryOrExisting),\n        line: (line, opts, queryOrExisting) => Elements.line(line, parent, opts, queryOrExisting),\n        circle: (circle, opts, queryOrExisting) => Elements.circle(circle, parent, opts, queryOrExisting),\n        path: (svgString, opts, queryOrExisting) => Elements.path(svgString, parent, opts, queryOrExisting),\n        grid: (center, spacing, width, height, opts) => Elements.grid(parent, center, spacing, width, height, opts),\n        query: (selectors) => parent.querySelector(selectors),\n        get width() {\n            const w = parent.getAttributeNS(null, `width`);\n            if (w === null)\n                return 0;\n            return Number.parseFloat(w);\n        },\n        set width(width) {\n            parent.setAttributeNS(null, `width`, width.toString());\n        },\n        get parent() {\n            return parent;\n        },\n        get height() {\n            const w = parent.getAttributeNS(null, `height`);\n            if (w === null)\n                return 0;\n            return Number.parseFloat(w);\n        },\n        set height(height) {\n            parent.setAttributeNS(null, `height`, height.toString());\n        },\n        clear: () => {\n            while (parent.firstChild) {\n                parent.lastChild.remove();\n            }\n        },\n    };\n    return o;\n};\n","export * from './apply.js';\nexport * from './bounds.js';\nexport * from './create.js';\nexport * as Elements from './elements.js';\nexport * from './geometry.js';\nexport * from './helper.js';\nexport * from './markers.js';\nexport * from './path.js';\nexport * from './remove.js';\nexport * from './stroke.js';\n","import { PointsTracker } from '@ixfx/geometry/point';\nimport * as Svg from './svg/index.js';\nimport { ElementSizer, resolveEl } from '@ixfx/dom';\n/**\n * Visualises pointer events within a given element.\n *\n * ```js\n * // Show pointer events for whole document\n * pointerVis(document);\n * ```\n *\n * Note you may need to set the following CSS properties on the target element:\n *\n * ```css\n * touch-action: none;\n * user-select: none;\n * overscroll-behavior: none;\n * ```\n *\n * Options\n * * touchRadius/mouseRadius: size of circle for these kinds of pointer events\n * * trace: if true, intermediate events are captured and displayed\n * @param elOrQuery Element to monitor\n * @param options Options\n */\nexport const pointerVisualise = (elOrQuery, options = {}) => {\n    const touchRadius = options.touchRadius ?? 45;\n    const mouseRadius = options.touchRadius ?? 20;\n    const trace = options.trace ?? false;\n    const hue = options.hue ?? 100;\n    const startFillStyle = `hsla(${hue}, 100%, 10%, 10%)`;\n    let currentHue = hue;\n    const el = resolveEl(elOrQuery);\n    const tracker = new PointsTracker({\n        storeIntermediate: trace,\n    });\n    const svg = document.createElementNS(`http://www.w3.org/2000/svg`, `svg`);\n    svg.id = `pointerVis`;\n    svg.style.zIndex = `-1000`;\n    svg.style.position = `fixed`;\n    svg.style.top = `0`;\n    svg.style.left = `0`;\n    svg.style.width = `100%`;\n    svg.style.height = `100%`;\n    svg.style.boxSizing = `border-box`;\n    svg.style.border = `3px solid red`;\n    svg.style.pointerEvents = `none`;\n    svg.style.touchAction = `none`;\n    // const er = new ElementSizer(svg, {\n    //   containerEl:document.body,\n    //   stretch:`both`,\n    //   onSetSize(size) {\n    //     svg.setAttribute(`width`, size.width.toString());\n    //     svg.setAttribute(`height`, size.height.toString());\n    //   },\n    // })\n    const er = ElementSizer.svgViewport(svg);\n    //fullSizeElement(svg);\n    let pointerCount = 0;\n    const lostPointer = (event) => {\n        const id = event.pointerId.toString();\n        tracker.delete(id);\n        currentHue = hue;\n        svg.querySelector(`#pv-start-${id}`)?.remove();\n        for (let index = 0; index < pointerCount + 10; index++) {\n            svg.querySelector(`#pv-progress-${id}-${index}`)?.remove();\n        }\n        pointerCount = 0;\n    };\n    const trackPointer = async (event) => {\n        const id = event.pointerId.toString();\n        const pt = { x: event.x, y: event.y };\n        const type = event.pointerType;\n        if (event.type === `pointermove` && !tracker.has(id)) {\n            return;\n        }\n        const info = (await tracker.seen(event.pointerId.toString(), { x: event.clientX, y: event.clientY }));\n        if (info.values.length === 1) {\n            const el = Svg.Elements.circle({\n                ...info.values[0],\n                radius: type === `touch` ? touchRadius : mouseRadius,\n            }, svg, {\n                fillStyle: startFillStyle,\n            }, `#pv-start-${id}`);\n            el.style.pointerEvents = `none`;\n            el.style.touchAction = `none`;\n        }\n        const fillStyle = `hsla(${currentHue}, 100%, 50%, 50%)`;\n        const el2 = Svg.Elements.circle({ ...pt, radius: type === `touch` ? touchRadius : mouseRadius }, svg, {\n            fillStyle,\n        }, `#pv-progress-${id}-${info.values.length}`);\n        el2.style.pointerEvents = `none`;\n        el2.style.touchAction = `none`;\n        currentHue += 1;\n        pointerCount = info.values.length;\n    };\n    document.body.append(svg);\n    el.addEventListener(`pointerdown`, trackPointer);\n    el.addEventListener(`pointermove`, trackPointer);\n    el.addEventListener(`pointerup`, lostPointer);\n    el.addEventListener(`pointerleave`, lostPointer);\n    el.addEventListener(`contextmenu`, (event) => {\n        event.preventDefault();\n    });\n};\n","export const create = (fallbacks) => new NamedColourPaletteImpl(fallbacks);\nclass NamedColourPaletteImpl {\n    #store = new Map();\n    #aliases = new Map();\n    fallbacks;\n    #lastFallback = 0;\n    #elementBase;\n    constructor(fallbacks) {\n        if (fallbacks !== undefined)\n            this.fallbacks = fallbacks;\n        else\n            this.fallbacks = [`red`, `blue`, `green`, `orange`];\n        this.#elementBase = document.body;\n    }\n    setElementBase(el) {\n        this.#elementBase = el;\n    }\n    add(key, colour) {\n        this.#store.set(key, colour);\n    }\n    alias(from, to) {\n        this.#aliases.set(from, to);\n    }\n    get(key, fallback) {\n        const alias = this.#aliases.get(key);\n        if (alias !== undefined)\n            key = alias;\n        const c = this.#store.get(key);\n        if (c !== undefined)\n            return c;\n        const variableName = `--` + key;\n        let fromCss = getComputedStyle(this.#elementBase)\n            .getPropertyValue(variableName)\n            .trim();\n        // Not found\n        if (fromCss === undefined || fromCss.length === 0) {\n            if (fallback !== undefined)\n                return fallback;\n            fromCss = this.fallbacks[this.#lastFallback];\n            this.#lastFallback++;\n            if (this.#lastFallback === this.fallbacks.length)\n                this.#lastFallback = 0;\n        }\n        return fromCss;\n    }\n    getOrAdd(key, fallback) {\n        if (this.has(key))\n            return this.get(key);\n        const c = this.get(key, fallback);\n        this.add(key, c);\n        return c;\n    }\n    has(key) {\n        return this.#store.has(key);\n    }\n}\n","import { continuously } from '@ixfx/core';\nimport { delayLoop } from '@ixfx/flow';\n/**\n * Generator that yields frames from a video element as [ImageData](https://developer.mozilla.org/en-US/docs/Web/API/ImageData).\n *\n * ```js\n * import { Video } from '@ixfx/visual.js'\n *\n * const ctx = canvasEl.getContext(`2d`);\n * for await (const frame of Video.frames(videoEl)) {\n *   // TODO: Some processing of pixels\n *\n *   // Draw image on to the visible canvas\n *   ctx.putImageData(frame, 0, 0);\n * }\n * ```\n *\n * Under the hood it creates a hidden canvas where frames are drawn to. This is necessary\n * to read back pixel data. An existing canvas can be used if it is passed in as an option.\n *\n * Options:\n * * `canvasEl`: CANVAS element to use as a buffer (optional)\n * * `maxIntervalMs`: Max frame rate (0 by default, ie runs as fast as possible)\n * * `showCanvas`: Whether buffer canvas will be shown (false by default)\n * @param sourceVideoEl\n * @param opts\n */\nexport async function* frames(sourceVideoEl, opts = {}) {\n    // TODO: Ideally use OffscreenCanvas when it has wider support?\n    // TODO: When ImageBitmap has possibility to get pixels, that might also help to avoid having to write to hidden canvas\n    const maxIntervalMs = opts.maxIntervalMs ?? 0;\n    const showCanvas = opts.showCanvas ?? false;\n    let canvasEl = opts.canvasEl;\n    let w, h;\n    w = h = 0;\n    // Create & setup canvas\n    if (canvasEl === undefined) {\n        canvasEl = document.createElement(`CANVAS`);\n        canvasEl.classList.add(`ixfx-frames`);\n        if (!showCanvas) {\n            canvasEl.style.display = `none`;\n        }\n        document.body.appendChild(canvasEl);\n    }\n    // Update size of canvas based on video\n    const updateSize = () => {\n        if (canvasEl === undefined)\n            return;\n        w = sourceVideoEl.videoWidth;\n        h = sourceVideoEl.videoHeight;\n        canvasEl.width = w;\n        canvasEl.height = h;\n    };\n    let c = null;\n    const looper = delayLoop(maxIntervalMs);\n    for await (const _ of looper) {\n        // If we don't yet have the size of video, get it\n        if (w === 0 || h === 0)\n            updateSize();\n        // If there is still no dimensions (ie stream has not started), there's nothing to do yet\n        if (w === 0 || h === 0)\n            continue;\n        // Draw current frame from video element to hidden canvas\n        c ??= canvasEl.getContext(`2d`);\n        if (c === null)\n            return;\n        c.drawImage(sourceVideoEl, 0, 0, w, h);\n        // Get pixels\n        const pixels = c.getImageData(0, 0, w, h);\n        yield pixels;\n    }\n}\n/**\n * Captures frames from a video element. It can send pixel data to a function or post to a worker script.\n *\n * @example Using a function\n * ```js\n * // Capture from a VIDEO element, handling frame data\n * // imageData is ImageData type: https://developer.mozilla.org/en-US/docs/Web/API/ImageData\n * Video.capture(sourceVideoEl, {\n *  onFrame(imageData => {\n *    // Do something with pixels...\n *  });\n * });\n * ```\n *\n * @example Using a worker\n * ```js\n * Video.capture(sourceVideoEl, {\n *  workerScript: `./frameProcessor.js`\n * });\n * ```\n *\n * In frameProcessor.js:\n * ```\n * const process = (frame) => {\n *  // ...process frame\n *\n *  // Send image back?\n *  self.postMessage({frame});\n * };\n *\n * self.addEventListener(`message`, evt => {\n *   const {pixels, width, height} = evt.data;\n *   const frame = new ImageData(new Uint8ClampedArray(pixels),\n *     width, height);\n *\n *   // Process it\n *   process(frame);\n * });\n * ```\n *\n * Options:\n * * `canvasEl`: CANVAS element to use as a buffer (optional)\n * * `maxIntervalMs`: Max frame rate (0 by default, ie runs as fast as possible)\n * * `showCanvas`: Whether buffer canvas will be shown (false by default)\n * * `workerScript`: If this specified, this URL will be loaded as a Worker, and frame data will be automatically posted to it\n *\n * Implementation: frames are captured using a animation-speed loop to a hidden canvas. From there\n * the pixel data is extracted and sent to either destination. In future the intermediate drawing to a\n * canvas could be skipped if it becomes possible to get pixel data from an ImageBitmap.\n * @param sourceVideoEl Source VIDEO element\n * @param opts\n * @returns\n */\nexport const capture = (sourceVideoEl, opts = {}) => {\n    const maxIntervalMs = opts.maxIntervalMs ?? 0;\n    const showCanvas = opts.showCanvas ?? false;\n    const onFrame = opts.onFrame;\n    // Ideally use OffscreenCanvas when it has support?\n    const w = sourceVideoEl.videoWidth;\n    const h = sourceVideoEl.videoHeight;\n    // Create canvas\n    const canvasEl = document.createElement(`CANVAS`);\n    canvasEl.classList.add(`ixfx-capture`);\n    if (!showCanvas) {\n        canvasEl.style.display = `none`;\n    }\n    canvasEl.width = w;\n    canvasEl.height = h;\n    let c = null;\n    let worker;\n    if (opts.workerScript) {\n        worker = new Worker(opts.workerScript);\n    }\n    // Should we get image data?\n    const getPixels = worker || onFrame;\n    if (!getPixels && !showCanvas) {\n        console.warn(`Video will be captured to hidden element without any processing. Is this what you want?`);\n    }\n    const loop = continuously(() => {\n        // Draw current frame from video element to hidden canvas\n        if (c === null)\n            c = canvasEl.getContext(`2d`);\n        if (c === null)\n            return;\n        c.drawImage(sourceVideoEl, 0, 0, w, h);\n        let pixels;\n        if (getPixels) {\n            // ImageData necessary\n            pixels = c.getImageData(0, 0, w, h);\n        }\n        if (worker) {\n            // Send to worker\n            worker.postMessage({\n                pixels: pixels.data.buffer,\n                width: w,\n                height: h,\n                channels: 4,\n            }, [pixels.data.buffer]);\n        }\n        if (onFrame) {\n            // Send to callback\n            try {\n                onFrame(pixels);\n            }\n            catch (e) {\n                console.error(e);\n            }\n        }\n    }, maxIntervalMs);\n    return {\n        start: () => { loop.start(); },\n        cancel: () => { loop.cancel(); },\n        canvasEl,\n    };\n};\nexport const manualCapture = (sourceVideoEl, opts = {}) => {\n    const showCanvas = opts.showCanvas ?? false;\n    // Ideally use OffscreenCanvas when it has support?\n    const w = sourceVideoEl.videoWidth;\n    const h = sourceVideoEl.videoHeight;\n    // Create canvas if necessary\n    const definedCanvasEl = opts.canvasEl !== undefined;\n    let canvasEl = opts.canvasEl;\n    if (!canvasEl) {\n        canvasEl = document.createElement(`CANVAS`);\n        canvasEl.classList.add(`ixfx-capture`);\n        document.body.append(canvasEl);\n        if (!showCanvas)\n            canvasEl.style.display = `none`;\n    }\n    canvasEl.width = w;\n    canvasEl.height = h;\n    const capture = () => {\n        let c;\n        // Draw current frame from video element to canvas\n        if (!c)\n            c = canvasEl.getContext(`2d`, { willReadFrequently: true });\n        if (!c)\n            throw new Error(`Could not create graphics context`);\n        c.drawImage(sourceVideoEl, 0, 0, w, h);\n        const pixels = c.getImageData(0, 0, w, h);\n        pixels.currentTime = sourceVideoEl.currentTime;\n        if (opts.postCaptureDraw)\n            opts.postCaptureDraw(c, w, h);\n        return pixels;\n    };\n    const dispose = () => {\n        if (definedCanvasEl)\n            return; // we didn't create it\n        try {\n            canvasEl.remove();\n        }\n        catch (_) {\n            // no-op\n        }\n    };\n    const c = {\n        canvasEl,\n        capture,\n        dispose,\n    };\n    return c;\n};\n","import * as Drawing from \"../drawing.js\";\nimport { Bipolar } from \"@ixfx/numbers\";\nimport { QueueImmutable } from \"@ixfx/collections/queue\";\nimport * as Colour from \"../colour/index.js\";\nimport {} from \"@ixfx/geometry/circle\";\nfunction getNumericAttribute(el, name, defaultValue) {\n    const a = el.getAttribute(name);\n    if (a === null)\n        return defaultValue;\n    return Number.parseInt(a);\n}\n/**\n * Initialises a plotter for bipolar values (-1...1)\n *\n * ```js\n * const p = BipolarView.init(`#my-canvas`);\n * // Shows the dot at 1, 0.5\n * p(1, 0.5);\n * ```\n * @param elementQuery\n * @param options\n * @returns\n */\nexport const init = (elementQuery, options = {}) => {\n    const element = document.querySelector(elementQuery);\n    if (!element)\n        throw new Error(`Element query could not be found (${elementQuery})`);\n    const labels = options.labels ?? [`x`, `y`];\n    const labelPrecision = options.labelPrecision ?? 2;\n    const asPercentages = options.asPercentages ?? false;\n    const displayLastValues = options.displayLastValues ?? 0;\n    // Flags\n    const showWhiskers = options.showWhiskers ?? true;\n    const showDot = options.showDot ?? true;\n    const showLabels = options.showLabels ?? true;\n    const yAxisBottomNegative = options.yAxisBottomNegative ?? true;\n    // Colours\n    const axisColour = Colour.toStringFirst(options.axisColour, `silver`);\n    const bgColour = Colour.toStringFirst(options.bgColour, `white`);\n    const whiskerColour = Colour.toStringFirst(options.whiskerColour, `black`);\n    const dotColour = Colour.toStringFirst(options.dotColour, options.whiskerColour, `black`);\n    const labelColour = Colour.toStringFirst(options.labelColour, options.axisColour, `silver`);\n    // Sizes\n    const axisWidth = (options.axisWidth ?? 1 * window.devicePixelRatio);\n    const dotRadius = (options.dotRadius ?? 5 * window.devicePixelRatio);\n    const pad = (options.padding ?? 10 * window.devicePixelRatio);\n    const whiskerSize = (options.whiskerSize ?? 5 * window.devicePixelRatio);\n    const width = (options.width ?? getNumericAttribute(element, `width`, 200) * window.devicePixelRatio);\n    const height = (options.height ?? getNumericAttribute(element, `height`, 200) * window.devicePixelRatio);\n    let lastValues;\n    if (displayLastValues > 0) {\n        lastValues = new QueueImmutable({\n            capacity: displayLastValues,\n            discardPolicy: `older`\n        });\n    }\n    element.width = width; // * window.devicePixelRatio;\n    element.height = height; // * window.devicePixelRatio;\n    element.style.width = `${(width / window.devicePixelRatio)}px`;\n    element.style.height = `${(height / window.devicePixelRatio)}px`;\n    const midY = height / 2;\n    const midX = width / 2;\n    const ctx = element.getContext(`2d`);\n    if (!ctx)\n        throw new Error(`Could not create drawing context`);\n    if (window.devicePixelRatio >= 2) {\n        ctx.font = `20px sans-serif`;\n    }\n    const percentageFormat = (v) => `${Math.round(v * 100)}%`;\n    const fixedFormat = (v) => v.toFixed(labelPrecision);\n    const valueFormat = asPercentages ? percentageFormat : fixedFormat;\n    if (showLabels) {\n        labels[0] = labels[0] + `:`;\n        labels[1] = labels[1] + `:`;\n    }\n    else {\n        labels[0] = ``;\n        labels[1] = ``;\n    }\n    const renderBackground = options.renderBackground ?? ((ctx, width, height) => {\n        if (options.bgColour === `transparent`) {\n            ctx.clearRect(0, 0, width, height);\n        }\n        else {\n            ctx.fillStyle = bgColour;\n            ctx.fillRect(0, 0, width, height);\n        }\n    });\n    return (x, y) => {\n        x = Bipolar.clamp(x);\n        y = Bipolar.clamp(y);\n        renderBackground(ctx, width, height);\n        // Labels\n        ctx.fillStyle = labelColour;\n        ctx.textBaseline = `top`;\n        ctx.save();\n        ctx.translate(midX, midY);\n        ctx.rotate(-Math.PI / 2);\n        ctx.fillText((labels[1] + ` ` + valueFormat(y)).trim(), -midX + pad, 1);\n        ctx.restore();\n        ctx.fillText((labels[0] + ` ` + valueFormat(x)).trim(), pad, midX + 2);\n        if (!yAxisBottomNegative)\n            y *= -1;\n        // Axes\n        ctx.strokeStyle = axisColour;\n        ctx.lineWidth = axisWidth;\n        ctx.beginPath();\n        ctx.moveTo(pad, midY);\n        ctx.lineTo(width - pad, midY);\n        ctx.moveTo(midX, pad);\n        ctx.lineTo(midX, height - pad);\n        ctx.stroke();\n        ctx.closePath();\n        const yy = (height - pad - pad) / 2 * -y;\n        const xx = (width - pad - pad) / 2 * x;\n        const dotPos = { x: xx, y: yy, radius: dotRadius };\n        if (lastValues) {\n            lastValues = lastValues.enqueue(dotPos);\n        }\n        ctx.save();\n        ctx.translate(midX, midY);\n        // Dot\n        if (showDot) {\n            if (lastValues) {\n                const opacityStep = 1 / lastValues.length;\n                let opacity = 1;\n                lastValues.forEach(d => {\n                    const colour = Colour.multiplyOpacity(dotColour, opacity);\n                    Drawing.circle(ctx, d, { fillStyle: colour });\n                    opacity -= opacityStep;\n                });\n            }\n            else {\n                Drawing.circle(ctx, dotPos, { fillStyle: dotColour });\n            }\n        }\n        // Whiskers\n        if (showWhiskers) {\n            ctx.strokeStyle = whiskerColour;\n            // y line\n            ctx.beginPath();\n            ctx.moveTo(0, yy - whiskerSize);\n            ctx.lineTo(0, yy + whiskerSize);\n            // x line\n            ctx.moveTo(xx - whiskerSize, 0);\n            ctx.lineTo(xx + whiskerSize, 0);\n            ctx.stroke();\n            ctx.closePath();\n        }\n        // Restore transform\n        ctx.restore();\n    };\n};\n","import { scaler } from \"@ixfx/numbers\";\nexport const computeMinMax = (mm) => {\n    const x = mm.map(m => m.x);\n    const y = mm.map(m => m.y);\n    const minX = Math.min(...x);\n    const maxX = Math.max(...x);\n    const minY = Math.min(...y);\n    const maxY = Math.max(...y);\n    const width = maxX - minX;\n    const height = maxY - minY;\n    return {\n        min: { x: minX, y: minY },\n        max: { x: maxX, y: maxY },\n        width, height,\n        minDim: Math.min(width, height),\n        maxDim: Math.max(width, height)\n    };\n};\nexport const relativeCompute = (minMax) => {\n    if (!Number.isFinite(minMax.height)) {\n        return (point) => point;\n    }\n    const xScale = scaler(minMax.min.x, minMax.max.x);\n    const yScale = scaler(minMax.min.y, minMax.max.y);\n    return (point) => ({\n        x: xScale(point.x),\n        y: yScale(point.y)\n    });\n};\nexport const absoluteCompute = (minMax) => {\n    const xScale = scaler(0, 1, minMax.min.x, minMax.max.x);\n    const yScale = scaler(0, 1, minMax.min.y, minMax.max.y);\n    return (point) => ({\n        x: xScale(point.x),\n        y: yScale(point.y)\n    });\n};\nexport const computeAxisMark = (mm, increments, major) => {\n    // Vertical\n    const xValues = [];\n    let count = 0;\n    for (let x = mm.min.x; x < mm.max.x; x += increments) {\n        const isMajor = count % major === 0;\n        xValues.push({ x, y: 0, major: isMajor });\n        count++;\n    }\n    // Horizontal\n    count = 0;\n    const yValues = [];\n    for (let y = mm.min.y; y < mm.max.y; y += increments) {\n        const isMajor = count % major === 0;\n        yValues.push({ x: 0, y, major: isMajor });\n        count++;\n    }\n    return { x: xValues, y: yValues };\n};\n","import { MapOfSimpleMutable } from \"@ixfx/collections\";\nexport class DataSet {\n    #data;\n    #meta;\n    lastChange;\n    constructor() {\n        this.lastChange = performance.now();\n        this.#data = new MapOfSimpleMutable();\n        this.#meta = new Map();\n    }\n    get metaCount() {\n        return this.#meta.size;\n    }\n    clear() {\n        this.#data.clear();\n        this.lastChange = performance.now();\n    }\n    set(series, data) {\n        this.#data.setValues(series, data);\n    }\n    deleteBySeries(series) {\n        const changed = this.#data.delete(series);\n        if (changed) {\n            this.lastChange = performance.now();\n        }\n        return changed;\n    }\n    setMeta(series, meta) {\n        this.#meta.set(series, meta);\n    }\n    hasMeta(series) {\n        return this.#meta.has(series);\n    }\n    getMeta(series) {\n        return this.#meta.get(series);\n    }\n    *getValues() {\n        yield* this.#data.valuesFlat();\n    }\n    *getEntries() {\n        yield* this.#data.entries();\n    }\n    *getSeries() {\n        yield* this.#data.values();\n    }\n    add(value, series = `default`) {\n        this.#data.addKeyedValues(series, value);\n        this.lastChange = performance.now();\n    }\n}\n","export const piPi = Math.PI * 2;\n","import { scalerTwoWay, clamp } from \"@ixfx/numbers\";\nimport { resolveEl, resolveElementTry } from \"@ixfx/dom\";\nimport { resultErrorToString } from \"@ixfx/guards\";\nimport { Points, Rects } from \"@ixfx/geometry\";\nimport { piPi } from \"./pi-pi.js\";\nexport class CanvasSource {\n    #canvasEl;\n    #ctx;\n    #sizeBasis;\n    #sizeScaler;\n    #logicalSize;\n    #pixelScaling;\n    #regions = [];\n    constructor(canvasElementOrQuery, sizeBasis = `min`) {\n        this.#canvasEl = resolveEl(canvasElementOrQuery);\n        this.#sizeBasis = sizeBasis;\n        this.#pixelScaling = window.devicePixelRatio || 1;\n        this.#sizeScaler = this.#createSizeScaler();\n        this.#logicalSize = this.setLogicalSize({ width: this.#canvasEl.width, height: this.#canvasEl.height });\n    }\n    setLogicalSize(size) {\n        this.#logicalSize = size;\n        const el = this.#canvasEl;\n        el.width = (size.width * this.#pixelScaling);\n        el.height = (size.height * this.#pixelScaling);\n        el.style.width = `${(size.width).toString()}px`;\n        el.style.height = `${(size.height).toString()}px`;\n        this.#sizeScaler = this.#createSizeScaler();\n        this.invalidateContext();\n        return size;\n    }\n    #createSizeScaler() {\n        let inMax = 1;\n        switch (this.#sizeBasis) {\n            case `min`:\n                inMax = Math.min(this.#canvasEl.width, this.#canvasEl.height);\n                break;\n            case `max`:\n                inMax = Math.max(this.#canvasEl.width, this.#canvasEl.height);\n                break;\n        }\n        const s = scalerTwoWay(0, inMax, 0, 1);\n        return {\n            abs: s.in,\n            rel: s.out\n        };\n    }\n    invalidateContext() {\n        this.#ctx = undefined;\n    }\n    #add(region) {\n        if (!region)\n            throw new Error(`Param 'region' is undefined/null`);\n        if (this.#regions.includes(region))\n            throw new Error(`Region already exists`);\n        this.#regions.push(region);\n        return region;\n    }\n    toAbsPoint(pt, kind = `independent`) {\n        let { x, y } = pt;\n        switch (kind) {\n            case `independent`:\n                x *= this.width;\n                y *= this.height;\n        }\n        return { x, y };\n    }\n    get offset() {\n        const b = this.#canvasEl.getBoundingClientRect();\n        return { x: b.left, y: b.top };\n    }\n    toRelPoint(pt, source, kind = `independent`, clamped = true) {\n        let { x, y } = pt;\n        if (source === `screen`) {\n            const b = this.#canvasEl.getBoundingClientRect();\n            x -= b.x;\n            y -= b.y;\n        }\n        switch (kind) {\n            case `independent`:\n                x /= this.width;\n                y /= this.height;\n                break;\n            case `skip`:\n                break;\n        }\n        if (clamped) {\n            x = clamp(x);\n            y = clamp(y);\n        }\n        return { x, y };\n    }\n    toAbsRect(rect, kind = `independent`) {\n        let { width, height } = rect;\n        switch (kind) {\n            case `independent`:\n                width *= this.width;\n                height *= this.height;\n                if (Rects.isRectPositioned(rect)) {\n                    return {\n                        ...this.toAbsPoint(rect),\n                        width,\n                        height\n                    };\n                }\n        }\n        return { width, height };\n    }\n    /**\n     * Creates a region\n     *\n     * Absolute positioned. Uses source coordinates which don't change\n     * ```js\n     * source.createRegion({\n     *  absPositioned: { x: 0, y: 0, width: 100, height: 100}\n     * });\n     * ```\n     *\n     * Relative positioned. Uses coordiantes relative to source dimensions.\n     * Updated if source changes.\n     * ```js\n     * source.createRegion({\n     *  relativePositioned: { x: 0, y:0, width: 1, height: 0.5 },\n     *  scale: `independent`\n     * });\n     * ```\n     *\n     * Relative sized. Uses size relative to source dimension. By default centers.\n     * ```js\n     * source.createRegion({\n     *  relativeSize: { width: 0.5, height: 0.5 }\n     *  position: `center`\n     * })\n     * ```\n     * @param spec\n     * @returns\n     */\n    createRegion(spec) {\n        const marginPx = spec.marginPx ?? 0;\n        const marginPx2 = marginPx * 2;\n        if (`absPositioned` in spec) {\n            const rect = Rects.subtractSize(spec.absPositioned, marginPx, marginPx);\n            return this.#add(new CanvasRegion(this, () => rect));\n        }\n        if (`relativePositioned` in spec) {\n            let compute;\n            const rect = spec.relativePositioned;\n            switch (spec.scale) {\n                case `independent`:\n                    compute = (source) => ({\n                        x: (rect.x * source.width) + marginPx,\n                        y: (rect.y * source.height) + marginPx,\n                        width: (rect.width * source.width) - marginPx2,\n                        height: (rect.height * source.height) - marginPx2\n                    });\n                    break;\n                default:\n                    throw new Error(`Param 'kind' unknown (${spec.scale})`);\n            }\n            return this.#add(new CanvasRegion(this, compute));\n        }\n        if (`relativeSize` in spec) {\n            let compute;\n            const rect = spec.relativeSize;\n            const position = spec.position;\n            switch (spec.scale) {\n                case `independent`:\n                    compute = (source) => {\n                        const width = (rect.width * source.width) - marginPx2;\n                        const height = (rect.height * source.height) - marginPx2;\n                        let x = source.width / 2 - width / 2;\n                        let y = source.height / 2 - height / 2;\n                        switch (position) {\n                            case `n`:\n                                y = 0;\n                                break;\n                            case `s`:\n                                y = source.height - height;\n                                break;\n                            default:\n                            /** no-op, */\n                        }\n                        x += marginPx;\n                        y += marginPx;\n                        return { width, height, x, y };\n                    };\n                    break;\n                default:\n                    throw new Error(`Param 'kind' unknown (${spec.scale})`);\n            }\n            return this.#add(new CanvasRegion(this, compute));\n        }\n        if (`match` in spec) {\n            const result = resolveElementTry(spec.match);\n            if (!result.success) {\n                throw new Error(`Could not resolve match element. ${resultErrorToString(result)}`);\n            }\n            const compute = (_source) => {\n                const bounds = result.value.getBoundingClientRect();\n                return {\n                    x: bounds.x + marginPx,\n                    y: bounds.y + marginPx,\n                    width: bounds.width - marginPx2,\n                    height: bounds.height - marginPx2\n                };\n            };\n            return this.#add(new CanvasRegion(this, compute));\n        }\n        throw new Error(`Spec doesn't seem valid`);\n    }\n    clear() {\n        const c = this.context;\n        c.clearRect(0, 0, this.width, this.height);\n    }\n    get context() {\n        if (this.#ctx)\n            return this.#ctx;\n        const c = this.#canvasEl.getContext(`2d`);\n        if (!c)\n            throw new Error(`Could not create 2d context`);\n        c.setTransform(1, 0, 0, 1, 0, 0);\n        c.scale(this.#pixelScaling, this.#pixelScaling);\n        this.#ctx = c;\n        for (const r of this.#regions) {\n            r.recomputeRegion();\n        }\n        return this.#ctx;\n    }\n    get sizeScaler() {\n        return this.#sizeScaler;\n    }\n    get width() {\n        return this.#logicalSize.width;\n    }\n    get height() {\n        return this.#logicalSize.height;\n    }\n}\n/**\n * Draws on a canvas, constrained to a specific region\n */\nexport class CanvasRegion {\n    source;\n    #regionCompute;\n    #r;\n    /**\n     * Creates, using coordinate in canvas coordinates\n     */\n    constructor(source, regionCompute) {\n        this.source = source;\n        this.#regionCompute = regionCompute;\n        this.#r = regionCompute(source);\n    }\n    /**\n     * Calls the original `regionCompute` function passed in to the constructor\n     * to recompute the absolute region\n     */\n    recomputeRegion() {\n        this.#r = this.#regionCompute(this.source);\n    }\n    /**\n     * Converts a region-relative point (0..1) to an absolute\n     * point, which uses region-relative coordinates.\n     *\n     * Eg if the region had an x,y of 100,100, `toAbsRegion({x:0,y:0})`\n     * will return 0,0.\n     *\n     * @param regionRel\n     * @param scaleBy\n     * @returns\n     */\n    toAbsRegion(regionRel, scaleBy = `both`) {\n        switch (scaleBy) {\n            case `both`:\n                return {\n                    x: regionRel.x * this.#r.width,\n                    y: regionRel.y * this.#r.height\n                };\n                break;\n        }\n    }\n    /**\n     * Returns a copy of `p` offset by the region's x & y\n     * @param p\n     * @returns\n     */\n    applyRegionOffset(p) {\n        return {\n            x: p.x + this.#r.x,\n            y: p.y + this.#r.y\n        };\n    }\n    /**\n     * Draws a line from a series of points.\n     * Assumes region-relative, % coordinates (ie 0..1 scale)\n     * @param relativePoints Points to connect, in region-relative coordinates\n     * @param strokeStyle Stroke style\n     * @param lineWidth Line with\n     */\n    drawConnectedPointsRelative(relativePoints, strokeStyle, lineWidth = 1) {\n        const points = relativePoints.map(p => this.toAbsRegion(p));\n        this.drawConnectedPoints(points, strokeStyle, lineWidth);\n    }\n    /**\n     * Draws connected points in absolute coordinates,\n     * however with 0,0 being the top-left of the region.\n     *\n     * Thus, this will apply the region offset before drawing.\n     * @param points Points to draw\n     * @param strokeStyle Stroke style\n     * @param lineWidth Line width\n     */\n    drawConnectedPoints(points, strokeStyle, lineWidth = 1) {\n        const c = this.context;\n        c.save();\n        c.translate(this.#r.x, this.#r.y);\n        c.beginPath();\n        c.strokeStyle = strokeStyle;\n        c.lineWidth = lineWidth;\n        for (let index = 0; index < points.length; index++) {\n            if (index === 0) {\n                c.moveTo(points[index].x, points[index].y);\n            }\n            else {\n                c.lineTo(points[index].x, points[index].y);\n            }\n        }\n        c.stroke();\n        c.restore();\n    }\n    /**\n     * Fills text at a relative position\n     * @param text\n     * @param relPos Relative, meaning 0.5,0.5 is the middle of the region\n     * @param fillStyle\n     * @param baseline\n     * @param align\n     */\n    fillTextRelative(text, relPos, fillStyle = `black`, font, baseline = `alphabetic`, align = `start`) {\n        const point = this.toAbsRegion(relPos);\n        this.fillTextRelative(text, point, fillStyle, font, baseline, align);\n    }\n    /**\n     * Fills text at a region-relative position\n     * @param text\n     * @param point Region relative, meaning 0,0 is top-left of region\n     * @param fillStyle\n     * @param baseline\n     * @param align\n     */\n    fillText(text, point, fillStyle = `black`, font, baseline = `alphabetic`, align = `start`) {\n        const c = this.context;\n        c.save();\n        c.translate(this.#r.x, this.#r.y);\n        if (font.length > 0) {\n            c.font = font;\n        }\n        c.textBaseline = baseline;\n        c.textAlign = align;\n        c.fillStyle = fillStyle;\n        c.fillText(text, point.x, point.y);\n        c.restore();\n    }\n    drawCircles(relativeCircles, fillStyle, strokeStyle = ``, lineWidth = 1) {\n        const circles = relativeCircles.map(c => {\n            return {\n                ...this.toAbsRegion(c),\n                radius: this.source.sizeScaler.abs(c.radius)\n            };\n        });\n        const c = this.context;\n        c.save();\n        c.translate(this.#r.x, this.#r.y);\n        c.fillStyle = fillStyle;\n        c.strokeStyle = strokeStyle;\n        c.lineWidth = lineWidth;\n        for (const circle of circles) {\n            c.beginPath();\n            c.arc(circle.x, circle.y, circle.radius, 0, piPi);\n            c.closePath();\n            if (fillStyle.length > 0) {\n                c.fill();\n            }\n            if (strokeStyle.length > 0) {\n                c.stroke();\n            }\n        }\n        c.restore();\n    }\n    clear() {\n        const c = this.context;\n        c.clearRect(this.#r.x, this.#r.y, this.#r.width, this.#r.height);\n    }\n    fill(fillStyle = `white`) {\n        const c = this.context;\n        c.fillStyle = fillStyle;\n        c.fillRect(this.#r.x, this.#r.y, this.#r.width, this.#r.height);\n    }\n    drawBounds(strokeStyle, lineWidth = 1) {\n        this.drawConnectedPointsRelative([\n            { x: 0, y: 0 },\n            { x: 1, y: 0 },\n            { x: 1, y: 1 },\n            { x: 0, y: 1 },\n            { x: 0, y: 0 }\n        ], strokeStyle, lineWidth);\n        this.drawConnectedPointsRelative([\n            { x: 0, y: 1 },\n            { x: 1, y: 0 }\n        ], strokeStyle, lineWidth);\n        this.drawConnectedPointsRelative([\n            { x: 0, y: 0 },\n            { x: 1, y: 1 }\n        ], strokeStyle, lineWidth);\n    }\n    /**\n     * Converts a  point to a region-relative one.\n     * @param pt\n     * @param kind\n     * @returns\n     */\n    toRelPoint(pt, source = `screen`, kind = `independent`, clamped = true) {\n        pt = this.source.toRelPoint(pt, source, `skip`, false);\n        let { x, y } = pt;\n        x -= this.x;\n        y -= this.y;\n        switch (kind) {\n            case `independent`:\n                x /= this.width;\n                y /= this.height;\n        }\n        if (clamped) {\n            x = clamp(x);\n            y = clamp(y);\n        }\n        return { x, y };\n    }\n    absToRegionPoint(pt, source, clamped) {\n        if (source === `screen`) {\n            pt = Points.subtract(pt, this.source.offset);\n        }\n        let { x, y } = pt;\n        x -= this.x;\n        y -= this.y;\n        if (clamped) {\n            if (x < 0)\n                x = 0;\n            if (y < 0)\n                y = 0;\n            if (x > this.width + this.x)\n                x = this.x + this.width;\n            if (y > this.height + this.y)\n                y = this.y + this.height;\n        }\n        return { x, y };\n    }\n    get center() {\n        return Rects.center(this.#r);\n    }\n    get context() {\n        return this.source.context;\n    }\n    set region(value) {\n        this.#r = value;\n    }\n    get region() {\n        return this.#r;\n    }\n    get width() {\n        return this.#r.width;\n    }\n    get height() {\n        return this.#r.height;\n    }\n    get x() {\n        return this.#r.x;\n    }\n    get y() {\n        return this.#r.y;\n    }\n    get dimensionMin() {\n        return Math.min(this.#r.width, this.#r.height);\n    }\n}\n","import { DataSet } from \"./DataSet.js\";\nimport * as Cart from './cartesian.js';\nimport { round } from \"@ixfx/numbers\";\nimport { CanvasSource } from \"../canvas-region.js\";\nimport { resolveEl } from \"@ixfx/dom\";\nimport { ElementSizer } from \"@ixfx/dom\";\nimport { Points, Rects } from \"@ixfx/geometry\";\nimport { goldenAngleColour } from \"../colour/generate.js\";\nimport { toCssColour as ColourToString } from \"../colour/conversion.js\";\nexport const insert = (insertOptions, options = {}) => {\n    const parentEl = (insertOptions.parent === undefined) ? document.body : resolveEl(insertOptions.parent);\n    const canvasEl = document.createElement(`canvas`);\n    parentEl.prepend(canvasEl);\n    const ds = new DataSet();\n    const source = new CanvasSource(canvasEl, `min`);\n    const spec = insertOptions.region ?? ({ relativePositioned: { x: 0, y: 0, width: 1, height: 1 } });\n    const region = source.createRegion(spec);\n    const p = new CartesianCanvasPlot(region, ds, options);\n    if (insertOptions.canvasResizeTo === `viewport`) {\n        ElementSizer.canvasViewport(canvasEl, {\n            onSizeChanging: (size, _el) => {\n                source.setLogicalSize(size);\n                p.invalidateRange();\n                p.draw();\n            }\n        });\n    }\n    else {\n        // Parent\n        ElementSizer.canvasParent(canvasEl, {\n            onSizeChanging: (size, _el) => {\n                source.setLogicalSize(size);\n                p.invalidateRange();\n                p.draw();\n            }\n        });\n    }\n    return p;\n};\n/**\n * Simple plotting of cartesian values.\n *\n * Create a plot that fills screen\n * ```js\n * const p = Plot.insert({fill`viewport});\n * const dataSet = p.dataSet;\n *\n * // Add data\n * ds.add({ x: 1, y: 2 });\n *\n * // Draw\n * p.draw();\n * ```\n *\n * Create a plot that fills a container\n * ```js\n * const p = Plot.insert({parent:`#someel`});\n * ```\n *\n * Add data using the created data set\n * ```js\n *\n * // Add a value to the `alpha` series\n * p.dataSet.add({x:1,y:1}, `alpha`);\n * ```\n *\n * Set default series formatting\n * ```js\n * p.setMeta(`default`, {\n *  colour: `hsl(50,100%,50%)`,\n *  lineWidth: 10\n * });\n * ```\n *\n * Series can have metadata associated with it in the DataSet\n * ```js\n * // Use 'pink' by default for the series 'alpha'\n * p.setMeta(`alpha`, { colour: `pink` });\n * ``\n *\n */\nexport class CartesianCanvasPlot {\n    #data;\n    #lastDataChange;\n    #canvasRegion;\n    actualDataRange = Rects.EmptyPositioned;\n    visibleRange = Rects.PlaceholderPositioned;\n    show;\n    whiskerLength;\n    axisRounder = round(1, true);\n    onInvalidated;\n    /**\n     * List of lines to draw after drawing everything else.\n     * Lines are given in value-coordinate space\n     */\n    overlayLines = [];\n    #grid;\n    #rangeMode;\n    #currentRange;\n    #axisStyle;\n    #valueStyle;\n    #connectStyle;\n    #rangeManual;\n    #textStyle;\n    #visualPadding;\n    #visualClear;\n    constructor(cr, data, options = {}) {\n        if (!data)\n            throw new TypeError(`Param 'data' is undefined`);\n        if (typeof data !== `object`)\n            throw new TypeError(`Param 'data' is not an object. Got: ${typeof data}`);\n        this.onInvalidated = options.onInvalidated;\n        this.#data = data;\n        this.#canvasRegion = cr;\n        this.#lastDataChange = 0;\n        this.#visualClear = options.clear ?? `region`;\n        this.#rangeMode = options.range ?? `auto`;\n        this.#valueStyle = options.valueStyle ?? `dot`;\n        this.#connectStyle = options.connectStyle ?? ``;\n        this.whiskerLength = options.whiskerLength ?? 5;\n        this.#visualPadding = options.visualPadding ?? 20;\n        this.show = {\n            axes: true,\n            axisValues: true,\n            grid: true,\n            whiskers: true,\n            ...options.show\n        };\n        this.#axisStyle = {\n            colour: `black`,\n            width: 2,\n            ...options.axisStyle\n        };\n        this.#textStyle = {\n            colour: `black`,\n            size: `1em`,\n            font: `system-ui`,\n            ...options.textStyle\n        };\n        this.#grid = {\n            increments: 0.1,\n            major: 5,\n            colour: `whitesmoke`,\n            width: 1,\n            ...options.grid\n        };\n    }\n    getCurrentRange() {\n        if (this.#data.lastChange === this.#lastDataChange && this.#currentRange)\n            return this.#currentRange;\n        this.#lastDataChange = this.#data.lastChange;\n        const r = this.#createRange();\n        this.#currentRange = r;\n        if (this.onInvalidated)\n            this.onInvalidated();\n        return r;\n    }\n    invalidateRange() {\n        this.#currentRange = undefined;\n    }\n    #createRange() {\n        // Compute scale of data\n        const range = this.getDataRange(); // actual data range, or user-provided\n        const absDataToRelative = Cart.relativeCompute(range);\n        const relDataToAbs = Cart.absoluteCompute(range);\n        const cr = this.#canvasRegion;\n        const padding = this.#visualPadding;\n        // Offsets are in canvas coordinates, not region\n        // eg 0,0 is top-left corner of canvas\n        let xOffset = cr.x + padding;\n        let yOffset = cr.y + padding;\n        const allowedHeight = cr.height - (padding * 2);\n        const allowedWidth = cr.width - (padding * 2);\n        const dimensionMin = Math.min(allowedHeight, allowedWidth);\n        ;\n        if (allowedWidth >= allowedHeight) {\n            // Landscape\n            xOffset += (allowedWidth / 2) - (dimensionMin / 2);\n        }\n        else {\n            // Portrait\n            yOffset += (allowedHeight / 2) - (dimensionMin / 2);\n        }\n        const relDataToCanvas = (pt) => {\n            let { x, y } = pt;\n            if (x === Number.NEGATIVE_INFINITY)\n                x = 0;\n            else if (x === Number.POSITIVE_INFINITY)\n                x = 1;\n            if (y === Number.NEGATIVE_INFINITY)\n                y = 0;\n            else if (y === Number.POSITIVE_INFINITY)\n                y = 1;\n            x = x * dimensionMin;\n            y = (1 - y) * dimensionMin;\n            x += xOffset;\n            y += yOffset;\n            return { x, y };\n        };\n        const canvasToRelData = (pt) => {\n            let { x, y } = pt;\n            x -= xOffset;\n            y -= yOffset;\n            x = x / dimensionMin;\n            y = 1 - (y / dimensionMin);\n            return { x, y };\n        };\n        // Convert region-space to plot area relative\n        const regionSpaceToRelative = (pt) => {\n            let { x, y } = pt;\n            x = x - cr.x + this.#visualPadding;\n            y = (dimensionMin + this.#visualPadding) - y;\n            x /= dimensionMin;\n            y = (y / dimensionMin);\n            return { x, y };\n        };\n        return {\n            absDataToRelative, relDataToCanvas, canvasToRelData, regionSpaceToRelative, relDataToAbs, range\n        };\n    }\n    /**\n     * Positions an element at the viewport location of `data` point.\n     * Ensure the element has `position:absolute` set.\n     * @param data\n     * @param elementToPosition\n     * @param by\n     */\n    positionElementAt(data, elementToPosition, by = `middle`, relativeToQuery) {\n        const el = resolveEl(elementToPosition);\n        let { x, y } = this.valueToScreenSpace(data);\n        // x -= this.canvasSource.offset.x;\n        // y -= this.canvasSource.offset.y;\n        if (by === `middle`) {\n            const bounds = el.getBoundingClientRect();\n            x -= bounds.width / 2;\n            y -= bounds.height / 2;\n        }\n        else if (by === `top-left`) {\n            // no-op\n        }\n        else\n            throw new Error(`Param 'by' expected to be 'middle' or 'top-left'.`);\n        if (relativeToQuery) {\n            const relativeTo = resolveEl(relativeToQuery);\n            const bounds = relativeTo.getBoundingClientRect();\n            //console.log(`Plot relativeTo: ${ relativeTo.scrollTop } y:  ${ bounds.y }`);\n            x -= bounds.x;\n            y -= bounds.y;\n        }\n        el.style.left = `${x}px`;\n        el.style.top = `${y}px`;\n    }\n    /**\n     * When range is auto, returns the range of the data\n     * Otherwise returns the user-provided range.\n     * @returns\n     */\n    getDataRange() {\n        if (this.#rangeMode === `auto`) {\n            return Cart.computeMinMax([...this.#data.getValues()]);\n        }\n        else {\n            if (!this.#rangeManual) {\n                this.#rangeManual = Cart.computeMinMax([this.#rangeMode.max, this.#rangeMode.min]);\n            }\n            return this.#rangeManual;\n        }\n    }\n    valueToScreenSpace(dataPoint) {\n        const region = this.valueToRegionSpace(dataPoint);\n        const offset = this.canvasSource.offset;\n        const scr = {\n            x: region.x + offset.x,\n            y: region.y + offset.y\n        };\n        return scr;\n    }\n    valueToRegionSpace(dataValue, debug = false) {\n        const ds = this.getCurrentRange();\n        // Scale absolute value relative to total dimensions of data\n        const rel = ds.absDataToRelative(dataValue);\n        // Scale relative data value to canvas space\n        const region = ds.relDataToCanvas(rel);\n        if (debug)\n            console.log(`orig: ${dataValue.x}x${dataValue.y} rel: ${rel.x}x${rel.y} region: ${region.x}x${region.y}`);\n        return {\n            ...dataValue,\n            x: region.x,\n            y: region.y\n        };\n    }\n    // #regionSpaceToValue(scr: Point, clamped: boolean) {\n    //   const ds = this.getCurrentRange();\n    //   const rel = ds.regionSpaceToRelative(scr);\n    //   //console.log(`regionSpaceToRelative ${ rel.x.toFixed(2) },${ rel.y.toFixed(2) }`);\n    //   const value = ds.relDataToAbs(rel);\n    //   //if (debug) console.log(`orig: ${ a.x }x${ a.y } rel: ${ rel.x }x${ rel.y } scr: ${ scr.x }x${ scr.y }`);\n    //   const pt = {\n    //     ...scr,\n    //     x: value.x,\n    //     y: value.y\n    //   }\n    //   if (clamped) return clamp(pt);\n    //   return pt;\n    // }\n    /**\n     * Converts a point in pixel coordinates to a value.\n     * Useful for converting from user input coordinates.\n     * @param point\n     * @returns\n     */\n    pointToValue(point, _source) {\n        const ds = this.getCurrentRange();\n        // Apply offset\n        const canvasPoint = Points.subtract(point, this.canvasSource.offset);\n        const v = ds.canvasToRelData(canvasPoint);\n        return ds.relDataToAbs(v);\n    }\n    // valueToScreen(a: Point) {\n    //   const ds = this.getCurrentRange();\n    //   const rel = ds.valueToRelative(a);\n    //   const scr = ds.relativeToElementSpace(rel);\n    //   const bounds = this.helper.el.getBoundingClientRect();\n    //   return {\n    //     x: scr.x + bounds.x,\n    //     y: scr.y + bounds.y\n    //   }\n    // }\n    // valueRectToScreen(a: Point, b: Point): RectPositioned {\n    //   a = this.valueToScreen(a);\n    //   b = this.valueToScreen(b);\n    //   return {\n    //     x: a.x,\n    //     y: b.y,\n    //     width: b.x - a.x,\n    //     height: a.y - b.y\n    //   }\n    // }\n    /**\n     * Compute canvas-relative coordinates based on two points in value space\n     * @param valueA\n     * @param valueB\n     */\n    #valueLineToCanvasSpace(valueA, valueB, debug = false) {\n        valueA = this.valueToRegionSpace(valueA, debug);\n        valueB = this.valueToRegionSpace(valueB, debug);\n        return { a: valueA, b: valueB };\n    }\n    getDefaultMeta() {\n        return {\n            colour: goldenAngleColour(this.#data.metaCount),\n            lineWidth: 2,\n            dotRadius: 5\n        };\n    }\n    draw() {\n        if (this.#visualClear === `region`) {\n            this.#canvasRegion.clear();\n        }\n        else {\n            this.canvasSource.clear();\n        }\n        //const ctx = this.helper.ctx;\n        //this.helper.drawBounds(`whitesmoke`);\n        //Drawing.rect(ctx, this.renderArea, { strokeStyle: `whitesmoke` });\n        this.#useGrid();\n        if (this.show.axes)\n            this.#drawAxes();\n        //let seriesCount = 0;\n        for (const [k, v] of this.#data.getEntries()) {\n            let meta = this.#data.getMeta(k);\n            if (!meta) {\n                meta = this.getDefaultMeta();\n                this.#data.setMeta(k, meta);\n            }\n            this.#drawSeries(k, v, meta);\n            //seriesCount++;\n        }\n        //console.log(`series count: ${ seriesCount }`);\n        for (const line of this.overlayLines) {\n            this.drawLine(line, line.colour, line.width);\n        }\n    }\n    /**\n     * Draws a line in value-coordinate space\n     * @param line\n     * @param colour\n     * @param width\n     */\n    drawLine(line, colour, width) {\n        const l = this.#valueLineToCanvasSpace(line.a, line.b);\n        this.#drawLineCanvasSpace(l, colour, width);\n    }\n    setMeta(series, meta) {\n        this.#data.setMeta(series, {\n            ...this.getDefaultMeta(),\n            ...meta\n        });\n    }\n    #drawAxes() {\n        const { colour, width } = this.#axisStyle;\n        // Axis coordinates in canvas-space\n        const yAxis = this.#valueLineToCanvasSpace({ x: 0, y: Number.NEGATIVE_INFINITY }, { x: 0, y: Number.POSITIVE_INFINITY }, false);\n        const xAxis = this.#valueLineToCanvasSpace({ x: Number.NEGATIVE_INFINITY, y: 0 }, { x: Number.POSITIVE_INFINITY, y: 0 }, false);\n        //console.log(`x axis: ${ xAxis.a.x }-${ xAxis.b.x }`);\n        this.#drawLineCanvasSpace(xAxis, colour, width, false);\n        this.#drawLineCanvasSpace(yAxis, colour, width, false);\n    }\n    #drawYAxisValues(yPoints) {\n        //const { ctx } = this.helper;\n        const ctx = this.#canvasRegion.context;\n        ctx.font = this.#textStyle.size + ` ` + this.#textStyle.font;\n        ctx.fillStyle = this.#textStyle.colour;\n        ctx.textBaseline = `middle`;\n        for (const p of yPoints) {\n            if (p.x === 0 && p.y === 0)\n                continue;\n            const reg = this.valueToRegionSpace(p, false);\n            const value = this.axisRounder(p.y);\n            const label = value.toString();\n            const measure = ctx.measureText(label);\n            const x = reg.x - measure.width - (this.whiskerLength / 2) - 5;\n            const y = reg.y;\n            ctx.fillText(label, x, y);\n        }\n    }\n    #drawXAxisValues(xPoints) {\n        //const { ctx } = this.helper;\n        const ctx = this.#canvasRegion.context;\n        ctx.font = this.#textStyle.size + ` ` + this.#textStyle.font;\n        ctx.fillStyle = this.#textStyle.colour;\n        ctx.textBaseline = `top`;\n        for (const p of xPoints) {\n            const reg = this.valueToRegionSpace(p, false);\n            const value = this.axisRounder(p.x);\n            const label = value.toString();\n            const measure = ctx.measureText(label);\n            const x = reg.x - measure.width / 2;\n            const y = reg.y + measure.actualBoundingBoxAscent + measure.actualBoundingBoxDescent + (this.whiskerLength / 2);\n            ctx.fillText(label, x, y);\n        }\n    }\n    #drawWhisker(p, vertical) {\n        const whiskerHalfLength = this.whiskerLength / 2;\n        const v = vertical ? { x: p.x, y: 0 } : { y: p.y, x: 0 };\n        const reg = this.valueToRegionSpace(v, false);\n        const line = vertical ? {\n            a: { x: reg.x, y: reg.y - whiskerHalfLength },\n            b: { x: reg.x, y: reg.y + whiskerHalfLength },\n        } :\n            {\n                a: { y: reg.y, x: reg.x - whiskerHalfLength },\n                b: { y: reg.y, x: reg.x + whiskerHalfLength },\n            };\n        this.#drawLineCanvasSpace(line, this.#axisStyle.colour, this.#axisStyle.width, false);\n    }\n    #drawGridline(p, vertical) {\n        const line = vertical ?\n            this.#valueLineToCanvasSpace({ x: p.x, y: Number.NEGATIVE_INFINITY }, { x: p.x, y: Number.POSITIVE_INFINITY }) :\n            this.#valueLineToCanvasSpace({ y: p.y, x: Number.NEGATIVE_INFINITY }, { y: p.y, x: Number.POSITIVE_INFINITY }, false);\n        this.#drawLineCanvasSpace(line, this.#grid.colour, p.major ? this.#grid.width * 2 : this.#grid.width);\n    }\n    #useGrid() {\n        const g = this.#grid;\n        const showGrid = this.show.grid;\n        const showWhiskers = this.show.whiskers;\n        const showValues = this.show.axisValues;\n        const mm = this.getCurrentRange().range; // actual data range, or user-provided\n        const { increments, major } = g;\n        // Vertical lines\n        const axisMarks = Cart.computeAxisMark(mm, increments, major);\n        for (const p of axisMarks.x) {\n            if (showGrid)\n                this.#drawGridline(p, true);\n            if (showWhiskers && p.major)\n                this.#drawWhisker(p, true);\n        }\n        // Horizontal lines\n        for (const p of axisMarks.y) {\n            if (showGrid)\n                this.#drawGridline(p, false);\n            if (showWhiskers && p.major)\n                this.#drawWhisker(p, false);\n        }\n        if (showValues) {\n            this.#drawXAxisValues(axisMarks.x.filter(p => p.major));\n            this.#drawYAxisValues(axisMarks.y.filter(p => p.major));\n        }\n    }\n    #drawSeries(name, series, meta) {\n        if (this.#connectStyle === `line`) {\n            this.#drawConnected(series, meta.colour, meta.lineWidth);\n        }\n        //let valueCount = 0;\n        if (this.#valueStyle === `dot`) {\n            for (const v of series) {\n                this.#drawDot(v, meta.colour, meta.dotRadius);\n                //valueCount++;\n            }\n        }\n        //console.log(`valueCount: ${ valueCount }`);\n    }\n    #drawConnected(dots, colour, width) {\n        const ctx = this.#canvasRegion.context;\n        ctx.beginPath();\n        for (const [index, dot_] of dots.entries()) {\n            const dot = this.valueToRegionSpace(dot_, false);\n            if (index === 0)\n                ctx.moveTo(dot.x, dot.y);\n            ctx.lineTo(dot.x, dot.y);\n        }\n        ctx.strokeStyle = ColourToString(colour);\n        ctx.lineWidth = width;\n        ctx.stroke();\n        ctx.closePath();\n    }\n    #drawDot(originalDot, fallbackColour, fallbackRadius) {\n        const colour = ColourToString(originalDot.fillStyle ?? fallbackColour);\n        const pos = this.valueToRegionSpace(originalDot);\n        const radius = originalDot.radius ?? fallbackRadius;\n        this.#canvasRegion.drawCircles([\n            { ...pos, radius }\n        ], colour);\n        // const ctx = this.helper.ctx;\n        // const dot = this.#valueToElementSpace(originalDot, false);\n        // const radius = originalDot.radius ?? fallbackRadius;\n        // //console.log(`dot ${ dot.x }x${ dot.y } (from ${ originalDot.x }x${ originalDot.y })`);\n        // ctx.fillStyle = Colour.resolveToString(originalDot.fillStyle ?? fallbackColour);\n        // ctx.beginPath();\n        // ctx.arc(dot.x, dot.y, radius, 0, Math.PI * 2);\n        // ctx.fill();\n        // ctx.closePath();\n    }\n    #drawLineCanvasSpace(line, colour, width, debug = false) {\n        if (debug)\n            console.log(line);\n        const ctx = this.#canvasRegion.context;\n        colour = ColourToString(colour);\n        //this.#canvasRegion.drawConnectedPoints([ line.a, line.b ], colour, width);\n        ctx.beginPath();\n        ctx.moveTo(line.a.x, line.a.y);\n        ctx.lineTo(line.b.x, line.b.y);\n        ctx.strokeStyle = ColourToString(colour);\n        ctx.lineWidth = width;\n        ctx.stroke();\n        ctx.closePath();\n    }\n    get dataSet() {\n        return this.#data;\n    }\n    get canvasRegion() {\n        return this.#canvasRegion;\n    }\n    get canvasSource() {\n        return this.#canvasRegion.source;\n    }\n}\n","export * as BipolarView from './bipolar-view.js';\nexport * from './cartesian.js';\nexport * from './cartesian-canvas-plot.js';\nexport * from './DataSet.js';\n","export * from './canvas-helper.js';\nexport * from './pointer-visualise.js';\nexport * as Svg from './svg/index.js';\nimport * as NamedColourPalette from './named-colour-palette.js';\nimport * as Colour from './colour/index.js';\nexport * as Colour from './colour/index.js';\nimport * as Video from './video.js';\nexport * as Drawing from './drawing.js';\n/**\n * Wraps [ImageData](https://developer.mozilla.org/en-US/docs/Web/API/ImageData) as an ixfx {@link @ixfx/geometry.Grid} type.\n * This is useful because it's otherwise a one-dimensional array listing each rgba in turn.\n */\nexport * as ImageDataGrid from './image-data-grid.js';\nexport * as Plot from './plot/index.js';\n/**\n * Working with video, either playback from a file or stream from a video camera.\n *\n * Overview\n * * {@link frames}: Yields frames from a video camera\n * * {@link capture}: Capture frames from a VIDEO element\n *\n * @example Importing\n * ```js\n * // If library is stored two directories up under `ixfx/`\n * import {Video} from '../../ixfx/dist/visual.js';\n * // Import from web\n * import {Video} from '@ixfx/visual.js'\n * ```\n */\nexport * as Video from './video.js';\ntry {\n    if (typeof window !== `undefined`) {\n        window.ixfx = {\n            ...window.ixfx,\n            Visuals: {\n                NamedColourPalette,\n                Colour,\n                Video,\n            },\n        };\n    }\n}\ncatch {\n    /* no-op */\n}\n"],"x_google_ignoreList":[1],"mappings":"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"}