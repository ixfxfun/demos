{"version":3,"file":"debug.js","names":["map: Map<K, V>","fn: (key: K, args?: Z) => V","key: K","args?: Z","prefix: string","kind: `log` | `warn` | `error`","colourKey?: string","m: any","_: any","l?: LogOption","defaults: { readonly category?: string; readonly kind?: string }","_: LogMessage | string","messageOrString: LogMessage | string","ex: unknown"],"sources":["../packages/debug/src/util.ts","../packages/debug/src/logger.ts","../packages/debug/src/fps-counter.ts","../packages/debug/src/error-message.ts"],"sourcesContent":["export const getOrGenerateSync =\n  <K, V, Z>(map: Map<K, V>, fn: (key: K, args?: Z) => V) =>\n    (key: K, args?: Z): V => {\n      let value = map.get(key);\n      if (value !== undefined) return value;\n      value = fn(key, args);\n      map.set(key, value);\n      return value;\n    };","import type { MessageLogger, LogMessage } from \"./types.js\";\nimport { getOrGenerateSync } from \"./util.js\";\n\n/**\n * Returns a console logging function which prefixes messages. This is\n * useful for tracing messages from different components. Each prefix\n * is assigned a colour, further helping to distinguish messages.\n *\n * Use {@link logSet} to get a bundled set.\n *\n * ```\n * // Initialise once\n * const log = logger(`a`);\n * const error = logger(`a`, `error`);\n * const warn = logger(`a`, `warn);\n *\n * // And then use\n * log(`Hello`);    // console.log(`a Hello`);\n * error(`Uh-oh`);  // console.error(`a Uh-oh`);\n * warn(`Eek!`);    // console.warn(`a Eeek!`);\n * ```\n *\n * Provide the `colourKey` parameter to make log messages\n * be coloured the same, even though the prefix is different.\n * ```js\n * // Both loggers will use the same colour because they\n * // share the colour key `system`\n * const log = logger(`a`,`log`,`system`);\n * const log2 = logger(`b`, `log`, `system`);\n * ```\n * @param prefix\n * @param kind\n * @param colourKey Optional key to colour log lines by instead of prefix\n * @returns\n */\n\n\n\n\nexport const logger =\n  (\n    prefix: string,\n    kind: `log` | `warn` | `error` = `log`,\n    colourKey?: string\n  ): MessageLogger =>\n    (m: any) => {\n      if (m === undefined) {\n        m = `(undefined)`;\n      } else if (typeof m === `object`) {\n        m = JSON.stringify(m);\n      }\n\n      const colour = colourKey ?? prefix;\n      switch (kind) {\n        case `log`: {\n          console.log(`%c${ prefix } ${ m }`, `color: ${ logColours(colour) }`);\n          break;\n        }\n        case `warn`: {\n          console.warn(prefix, m);\n          break;\n        }\n        case `error`: {\n          console.error(prefix, m);\n          break;\n        }\n      }\n    };\n\n/**\n* Returns a bundled collection of {@link logger}s\n*\n* ```js\n* const con = logSet(`a`);\n* con.log(`Hello`);  // console.log(`a Hello`);\n* con.warn(`Uh-oh`); // console.warn(`a Uh-oh`);\n* con.error(`Eek!`); // console.error(`a Eek!`);\n* ```\n*\n* By default each prefix is assigned a colour. To use\n* another logic, provide the `colourKey` parameter.\n*\n* ```js\n* // Both set of loggers will use same colour\n* const con = logSet(`a`, true, `system`);\n* const con2 = logSet(`b`, true, `system`);\n* ```\n* @param prefix Prefix for log messages\n* @param verbose True by default. If false, log() messages are a no-op\n* @param colourKey If specified, log messages will be coloured by this key instead of prefix (default)\n* @returns\n*/\nexport const logSet = (prefix: string, verbose = true, colourKey?: string) => {\n  if (verbose) {\n    return {\n      log: logger(prefix, `log`, colourKey),\n      warn: logger(prefix, `warn`, colourKey),\n      error: logger(prefix, `error`, colourKey),\n    };\n  }\n  return {\n    log: (_: any) => {\n      /** no-op */\n    },\n    warn: logger(prefix, `warn`, colourKey),\n    error: logger(prefix, `error`, colourKey),\n  };\n};\n\n/**\n * Either a flag for default console logging, or a simple log function\n */\nexport type LogOption = boolean | MessageLogger;\n\n/**\n * Resolve a LogOption to a function\n * @param l\n * @returns\n */\nexport const resolveLogOption = (\n  l?: LogOption,\n  defaults: { readonly category?: string; readonly kind?: string } = {}\n): MessageLogger => {\n  if (l === undefined || (typeof l === `boolean` && !l)) {\n    return (_: LogMessage | string) => {\n      /** no-op */\n    };\n  }\n  const defaultCat = defaults.category ?? ``;\n  const defaultKind = defaults.kind ?? undefined;\n\n  if (typeof l === `boolean`) {\n    return (messageOrString: LogMessage | string) => {\n      const m =\n        typeof messageOrString === `string` ? { msg: messageOrString } : messageOrString;\n      const kind = m.kind ?? defaultKind;\n      const category = m.category ?? defaultCat;\n      let message = m.msg;\n      if (category) message = `[${ category }] ${ message }`;\n      switch (kind) {\n        case `error`: {\n          console.error(message);\n          break;\n        }\n        case `warn`: {\n          console.warn(message);\n          break;\n        }\n        case `info`: {\n          console.info(message);\n          break;\n        }\n        default: {\n          console.log(message);\n        }\n      }\n    };\n  }\n  return l;\n};\n\n\nlet logColourCount = 0;\nexport const logColours = getOrGenerateSync(new Map<string, string>(), () => {\n  const hue = ++logColourCount * 137.508; // use golden angle approximation\n  return `hsl(${ hue },50%,75%)`;\n});","/**\n * Calculates frames per second.\n * \n * Returns a function which needs to be called at the end of each frame.\n * \n * ```js\n * const fps = fpsCounter();\n * \n * function loop() {\n *  fps(); // Calculate fps\n *  window.requestAnimationFrame(loop);\n * }\n * \n * loop();\n * ```\n * @param autoDisplay If true (default), prints out the FPS to the console\n * @param computeAfterFrames Calculates after this many frames. Higher numbers smoothes the value somewhat\n * @returns \n */\nexport const fpsCounter = (autoDisplay = true, computeAfterFrames = 500) => {\n  let count = 0;\n  let lastFps = 0;\n  let countStart = performance.now();\n\n  return () => {\n    if (count++ >= computeAfterFrames) {\n      const elapsed = performance.now() - countStart;\n      countStart = performance.now();\n      count = 0;\n      lastFps = Math.floor((computeAfterFrames / elapsed) * 1000);\n      if (autoDisplay) console.log(`fps: ${ lastFps }`);\n    }\n    return lastFps\n  }\n}","/**\n * Returns a string representation of an error\n * @param ex \n * @returns \n */\nexport const getErrorMessage = (ex: unknown): string => {\n  if (typeof ex === `string`) return ex;\n  if (ex instanceof Error) {\n    return ex.message;\n  }\n  return ex as string;\n};"],"mappings":"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"}