{"version":3,"file":"iqueue-mutable-DvKBPw5h.d.ts","names":["SimpleEventEmitter","QueueMutableEvents","V","IQueueMutableWithEvents","IQueueMutable"],"sources":["../../collections/dist/src/queue/iqueue-mutable.d.ts"],"sourcesContent":["import type { SimpleEventEmitter } from '@ixfx/events';\nexport type QueueMutableEvents<V> = {\n    /**\n     * Data has been added\n     * * added: data attempted to be added. Note: not all of it may have been accepted into queue\n     * * finalData: actual state of queue\n     */\n    enqueue: {\n        added: readonly V[];\n        finalData: readonly V[];\n    };\n    /**\n     * Single item dequeued.\n     * When dequeing the 'removed' event also fires\n     */\n    dequeue: {\n        removed: V;\n        finalData: readonly V[];\n    };\n    /**\n     * One or more items removed due to dequeuing, clearing or removeWhere called\n     */\n    removed: {\n        removed: readonly V[];\n        finalData: readonly V[];\n    };\n};\nexport interface IQueueMutableWithEvents<V> extends IQueueMutable<V>, SimpleEventEmitter<QueueMutableEvents<V>> {\n}\n/**\n * Queue (mutable). See also {@link IQueueImmutable} for the immutable version.\n *\n * Queues are useful if you want to treat 'older' or 'newer'\n * items differently. _Enqueing_ adds items at the back of the queue, while\n * _dequeing_ removes items from the front (ie. the oldest).\n *\n * ```js\n * const q = queue();       // Create\n * q.enqueue(`a`, `b`);     // Add two strings\n * const front = q.dequeue();  // `a` is at the front of queue (oldest)\n * ```\n *\n * @example Cap size to 5 items, throwing away newest items already in queue.\n * ```js\n * const q = queue({capacity: 5, discardPolicy: `newer`});\n * ```\n *\n */\nexport interface IQueueMutable<V> {\n    /**\n     * Dequeues (removes oldest item / item at front of queue)\n     *\n     * Use {@link peek} to look at the item at front of queue without removing it.\n     * @returns Item, or undefined if queue is empty\n     */\n    readonly dequeue: () => V | undefined;\n    /**\n     * Enqueues (adds items to back of queue).\n     * If a capacity is set, not all items might be added.\n     * @returns How many items were added\n     */\n    readonly enqueue: (...toAdd: readonly V[]) => number;\n    /**\n   * Returns a copy of data in queue as an array\n   */\n    toArray(): readonly V[];\n    /**\n     * Returns front of queue (oldest item), or _undefined_ if queue is empty\n     */\n    get peek(): V | undefined;\n    /**\n     * Number of items in queue\n     */\n    get length(): number;\n    /**\n     * Is queue full? Returns _false_ if no capacity has been set\n     */\n    get isFull(): boolean;\n    /**\n   * Returns true if queue is empty\n   */\n    get isEmpty(): boolean;\n    /**\n     * Removes values that match `predicate`.\n     *\n     * ```js\n     * // Eg queue of strings, compare by value\n     * queue.removeWhere(v => v === `someValue`);\n     *\n     * // Eg queue of objects, compare by reference\n     * queue.removeWhere(v => v === someTarget);\n     *\n     * // Eg use ixfx function to compare value of objects, regardless of key ordering\n     * queue.removeWhere(v => isEqualValueIgnoreOrder(v, someTarget));\n     * ```\n     * @param predicate\n     * @returns Returns number of items removed.\n     */\n    removeWhere(predicate: (item: V) => boolean): number;\n    /**\n     * Returns the item at given rank (0 being front of queue)\n     * @param index\n     */\n    at(index: number): V;\n    /**\n     * Clears the queue\n     */\n    clear(): void;\n}\n//# sourceMappingURL=iqueue-mutable.d.ts.map"],"mappings":";;;KACYC;;AAAZ;;;;EAQ6B,OAOZC,EAAAA;IACWA,KAAAA,EAAAA,SATJA,CASIA,EAAAA;IAMFA,SAAAA,EAAAA,SAdEA,CAcFA,EAAAA;EAAC,CAAA;EACE;AAG7B;;;EAAmE,OAAyCA,EAAAA;IAAnBD,OAAAA,EAXxEC,CAWwED;IAArCG,SAAAA,EAAAA,SAVxBF,CAUwBE,EAAAA;EAAa,CAAA;EAAuB;AAqBxF;;EAA8B,OAOFF,EAAAA;IAMcA,OAAAA,EAAAA,SAtChBA,CAsCgBA,EAAAA;IAIlBA,SAAAA,EAAAA,SAzCIA,CAyCJA,EAAAA;EAAC,CAAA;CAIR;AAkCMA,UA5ENC,uBA4EMD,CAAAA,CAAAA,CAAAA,SA5E6BE,aA4E7BF,CA5E2CA,CA4E3CA,CAAAA,EA5E+CF,kBA4E/CE,CA5EkED,kBA4ElEC,CA5EqFA,CA4ErFA,CAAAA,CAAAA,CAAAA,CAAC;;;;;;;;;;;;;;;;;;;;UAvDPE;;;;;;;0BAOWF;;;;;;wCAMcA;;;;sBAIlBA;;;;cAIRA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;gCA6BkBA;;;;;qBAKXA"}