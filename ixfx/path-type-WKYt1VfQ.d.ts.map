{"version":3,"file":"path-type-WKYt1VfQ.d.ts","names":["Point","RectPositioned","Path","ReadonlyArray","WithBeziers","CompoundPath","Dimensions"],"sources":["../../geometry/dist/src/path/path-type.d.ts"],"sourcesContent":["import type { Point } from \"../point/point-type.js\";\nimport type { RectPositioned } from \"../rect/rect-types.js\";\nexport type Path = {\n    /**\n     * Length of path\n     */\n    length(): number;\n    /**\n     * Returns a point at a relative (0.0-1.0) position along the path\n     *\n     * Inverse of {@link relativePosition}.\n     * @param {number} t Relative position (0.0-1.0)\n     * @returns {Point} Point\n     */\n    interpolate(t: number): Point;\n    /**\n     * Returns relative position of `point` along path.\n     * If `pt` is same as start, result will be 0, if it's the same as end, it will be 1.\n     *\n     * Inverse of {@link interpolate}.\n     * @param point\n     * @param intersectionThreshold\n     */\n    relativePosition(point: Point, intersectionThreshold: number): number;\n    /**\n     * Gets smallest box that encloses path\n     */\n    bbox(): RectPositioned;\n    /**\n     * Returns the nearest point on path to `point`\n     * @param point\n     */\n    nearest(point: Point): Point;\n    /**\n     * Distance from start of path to this point.\n     * If path is closed (eg. a circle) it may have some arbitary 'start' point\n     * @param point\n     */\n    distanceToPoint(point: Point): number;\n    /**\n     * Returns a string representation of pth values\n     */\n    toString(): string;\n    /**\n     * Returns an array of SVG segments that can render path\n     */\n    toSvgString(): ReadonlyArray<string>;\n    /**\n     * Well-known path kind\n     */\n    readonly kind: `compound` | `elliptical` | `circular` | `arc` | `bezier/cubic` | `bezier/quadratic` | `line`;\n};\nexport type WithBeziers = {\n    getBeziers(): ReadonlyArray<Path>;\n};\nexport type CompoundPath = Path & {\n    readonly segments: ReadonlyArray<Path>;\n    readonly kind: `compound`;\n};\nexport type Dimensions = {\n    /**\n     * Width of each path (based on bounding box)\n     */\n    readonly widths: ReadonlyArray<number>;\n    /**\n     * Length of each path\n     */\n    readonly lengths: ReadonlyArray<number>;\n    /**\n     * Total length of all paths\n     */\n    readonly totalLength: number;\n    /**\n     * Total width of all paths\n     */\n    readonly totalWidth: number;\n};\n//# sourceMappingURL=path-type.d.ts.map"],"mappings":";;;KAEYE,IAAAA;EAAAA;;;EAYqB,MASLF,EAAAA,EAAAA,MAAAA;EAAK;;;;;AAuBD;;0BAhCJA;;;;;;;;;0BASAA;;;;UAIhBC;;;;;iBAKOD,QAAQA;;;;;;yBAMAA;;;;;;;;iBAQRG"}