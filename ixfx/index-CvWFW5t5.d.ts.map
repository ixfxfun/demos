{"version":3,"file":"index-CvWFW5t5.d.ts","names":["HslBase","ColourSpaces","HslScalar","HslAbsolute","Hsl","RgbBase","RgbScalar","Rgb8Bit","Rgb","LchBase","ColourInterpolator","Colour","T","OkLchBase","OkLchScalar","OkLchAbsolute","OkLch","Colourish","ColourInterpolationOpts","ColourStepOpts","ParsingOptions","Partial","__colour_types_js1","ElementResizeLogic","SimpleEventEmitter","ScaleBy","Rect","RectPositioned","Grid","CanvasEvents","CanvasHelper","CanvasRenderingContext2D","PointerEvent","CanvasHelperOptions","PredefinedColorSpace","Readonly","HTMLCanvasElement","Partial","_ixfx_geometry5","Scaler","ImageData","Rgb8Bit","GridCellAccessor","Rgb","GridCellSetter","Rect","RectPositioned","Point","CirclePositioned","CanvasRegionSpecRelativePositioned","CanvasRegionSpecAbsolutePositioned","CanvasRegionSpecRelativeSized","CanvasRegionSpecMatched","HTMLElement","CanvasRegionSpec","CanvasSource","HTMLCanvasElement","CanvasRegion","CanvasRenderingContext2D","CanvasTextBaseline","CanvasTextAlign","Opts","pointerVisualise","HTMLElement","MarkerOpts","StrokeOpts","DrawingOpts","LineDrawingOpts","MarkerDrawingOpts","CircleDrawingOpts","PathDrawingOpts","TextDrawingOpts","TextPathDrawingOpts","DrawingOpts","applyOpts","SVGElement","Rect","getBounds","SVGElement","setBounds","createEl","SVGElement","V","createOrResolve","Polar","CircleDrawingOpts","LineDrawingOpts","PathDrawingOpts","TextDrawingOpts","TextPathDrawingOpts","CirclePositioned","Line","Point","path","SVGElement","SVGPathElement","pathUpdate","circleUpdate","SVGCircleElement","circle","group","SVGGElement","groupUpdate","line","SVGLineElement","lineUpdate","polarRayUpdate","PolarRay","textPathUpdate","SVGTextPathElement","textPath","SVGTextElement","textUpdate","text","grid","Polar","Line","Point","lineFromSvgLine","SVGLineElement","polarRayFromSvgLine","PolarRay","CircleDrawingOpts","DrawingOpts","LineDrawingOpts","PathDrawingOpts","StrokeOpts","TextDrawingOpts","Point","CirclePositioned","Line","SvgHelper","SVGElement","SVGTextElement","SVGTextPathElement","SVGLineElement","SVGCircleElement","SVGPathElement","SVGGElement","V","makeHelper","DrawingOpts","MarkerOpts","createMarker","SVGElement","SVGMarkerElement","markerPrebuilt","PathDrawingOpts","applyPathOpts","SVGElement","remove","SVGElement","V","clear","StrokeOpts","applyStrokeOpts","SVGElement","Elements","IStackImmutable","Beziers","Lines","Points","Rects","Triangles","Arcs","Circles","Ellipses","Paths","CanvasContextQuery","CanvasRenderingContext2D","HTMLCanvasElement","getContext","makeHelper","Rect","Path","DrawingOpts","Line","RectPositioned","RectOpts","QuadraticBezier","CubicBezier","Point","ConnectedPointsOptions","Partial","DotOpts","CirclePositioned","ArcPositioned","LineOpts","CanvasLineCap","CanvasLineJoin","arc","StackOp","DrawingStack","drawingStack","lineThroughPoints","circle","ellipse","EllipsePositioned","paths","connectedPoints","pointLabels","translatePoint","copyToImg","HTMLImageElement","dot","bezier","line","triangle","Triangle","Readonly","rect","textWidth","textRect","textHeight","textBlock","HorizAlign","VertAlign","textBlockAligned","makeHelper","DrawingHelper","ReturnType","Grids","Rgb8Bit","Kernel","T","CellValueScalar","TCell","GridCellAndValue","TKernel","KernelCompute","GridCell","V","KernelReduce","multiply","convolveCell","Kernel2dArray","GridReadable","convolveImage","ImageData","Generator","convolve","Iterable","IterableIterator","kernel2dToArray","rgbReducer","identityKernel","edgeDetectionKernel","sharpenKernel","boxBlurKernel","gaussianBlur3Kernel","gaussianBlur5Kernel","unsharpMasking5Kernel","Colorizr","Colour","Colourish","ColourSpaces","HslAbsolute","HslScalar","OkLchAbsolute","OkLchScalar","Rgb","Rgb8Bit","RgbScalar","ConvertDestinations","convert","T","convertToString","convertScalar","toCssColour","toLibraryColour","guard","toColour","toStringFirst","rgbToHsl","Colour","fromCssColour","resolveCss","cssDefinedHexColours","RandomSource","goldenAngleColour","randomHue","Hsl","Rgb","OkLch","Colourish","isHsl","isRgb","tryParseObjectToRgb","tryParseObjectToHsl","isOkLch","isColourish","Colourish","Hsl","OkLch","Rgb","multiplyOpacity","T","withOpacity","setOpacity","ColourInterpolationOpts","Colourish","ColourSpaces","ColourStepOpts","HslScalar","OkLchScalar","RgbScalar","cssLinearGradient","interpolator","Partial","scale","CreateStepsOptions","createSteps","T","C","Hsl","HslAbsolute","HslScalar","ParsingOptions","Rgb","Angle","withOpacity","T","changeLightness","Partial","fromHexString","fromCss","toCssString","toAbsolute","generateScalar","toScalar","guard","interpolator","scalar","absolute","parseCssHslFunction","toLibraryRgb","RGB","OkLch","OkLchAbsolute","OkLchScalar","ParsingOptions","C","Angle","OKLCH_CHROMA_MAX","guard","fromLibrary","LCH","T","fromHexString","fromCss","toAbsolute","toScalar","toCssString","generateScalar","withOpacity","interpolator","scalar","absolute","C","Hsl","ParsingOptions","Rgb","Rgb8Bit","RgbScalar","withOpacity","T","fromHexString","fromCss","toCssString","to8bit","toScalar","guard","changeLightness","Partial","lightness","eightBit","scalar","parseCssRgbFunction","interpolator","toLibraryHsl","HSL","HslSpace","OklchSpace","SrgbSpace","Grids","Rgb","Rgb8Bit","grid","ImageData","Grid","wrap","GridWritable","GridReadable","accessor","GridCellAccessor","setter","GridCellSetter","byRow","Generator","byColumn","BipolarViewOptions","Render","Readonly","CanvasRenderingContext2D","BipolarView","init","TextStyle","LineStyle","GridStyle","ShowOptions","SeriesMeta","GridStyle","LineStyle","ShowOptions","TextStyle","Point","PointMinMax","PlotPoint","CartesianScaler","CartesianDataRange","CartesianPlotOptions","Partial","computeMinMax","relativeCompute","absoluteCompute","AxisMark","computeAxisMark","DataSet","TValue","TSeriesMeta","Generator","DataSet","Cart","LineStyle","SeriesMeta","ShowOptions","RecursivePartial","CanvasRegion","CanvasRegionSpec","CanvasSource","RectPositioned","Points","Line","Point","InsertOptions","HTMLElement","insert","CartesianPlotOptions","CartesianCanvasPlot","PlotPoint","CartesianDataRange","PointMinMax","Partial","BipolarView","Capturer","HTMLCanvasElement","ManualCapturer","ImageData","CaptureOpts","ManualCaptureOpts","CanvasRenderingContext2D","FramesOpts","frames","HTMLVideoElement","AsyncIterable","capture","manualCapture","Svg","Convolve2d","Colour","Drawing","ImageDataGrid","Plot","Video"],"sources":["../../visual/dist/src/colour/types.d.ts","../../visual/dist/src/canvas-helper.d.ts","../../visual/dist/src/canvas-region.d.ts","../../visual/dist/src/pointer-visualise.d.ts","../../visual/dist/src/svg/types.d.ts","../../visual/dist/src/svg/apply.d.ts","../../visual/dist/src/svg/bounds.d.ts","../../visual/dist/src/svg/create.d.ts","../../visual/dist/src/svg/elements.d.ts","../../visual/dist/src/svg/geometry.d.ts","../../visual/dist/src/svg/helper.d.ts","../../visual/dist/src/svg/markers.d.ts","../../visual/dist/src/svg/path.d.ts","../../visual/dist/src/svg/remove.d.ts","../../visual/dist/src/svg/stroke.d.ts","../../visual/dist/src/svg/index.d.ts","../../visual/dist/src/drawing.d.ts","../../visual/dist/src/types.d.ts","../../visual/dist/src/convolve-2d.d.ts","../../visual/dist/src/colour/conversion.d.ts","../../visual/dist/src/colour/css-colours.d.ts","../../visual/dist/src/colour/generate.d.ts","../../visual/dist/src/colour/guards.d.ts","../../visual/dist/src/colour/math.d.ts","../../visual/dist/src/colour/interpolate.d.ts","../../visual/dist/src/colour/hsl.d.ts","../../visual/dist/src/colour/oklch.d.ts","../../visual/dist/src/colour/srgb.d.ts","../../visual/dist/src/colour/index.d.ts","../../visual/dist/src/image-data-grid.d.ts","../../visual/dist/src/plot/bipolar-view.d.ts","../../visual/dist/src/plot/types.d.ts","../../visual/dist/src/plot/cartesian.d.ts","../../visual/dist/src/plot/DataSet.d.ts","../../visual/dist/src/plot/cartesian-canvas-plot.d.ts","../../visual/dist/src/plot/index.d.ts","../../visual/dist/src/video.d.ts","../../visual/dist/src/index.d.ts"],"sourcesContent":["export type HslBase = {\n    /**\n     * Hue\n     */\n    h: number;\n    /**\n     * Saturation\n     */\n    s: number;\n    /**\n     * Lightness\n     */\n    l: number;\n    /**\n     * Opacity\n     */\n    opacity?: number;\n    space?: `hsl`;\n};\nexport type ColourSpaces = `srgb` | `hsl` | `oklch`;\n/**\n * Scalar values use 0..1 for each field\n */\nexport type HslScalar = HslBase & {\n    unit: `scalar`;\n};\n/**\n * Absolute values use hue:0..360, all other fields 0..100\n */\nexport type HslAbsolute = HslBase & {\n    unit: `absolute`;\n};\n/**\n * HSL value.\n * By default assumes scalar coordinates (0..1) for each field.\n * Use 'absolute' unit for hue:0...360, all other fields on 0..100 scale.\n */\nexport type Hsl = HslScalar | HslAbsolute;\n/**\n * Rgb.\n * Units determine how to interperet rgb values.\n * * 'scalar': 0..1 range for RGB & opacity\n * * '8bit': 0..255 range for RGB & opacity\n */\nexport type RgbBase = {\n    r: number;\n    g: number;\n    b: number;\n    opacity?: number;\n    space?: `srgb`;\n};\nexport type RgbScalar = RgbBase & {\n    unit: `scalar`;\n};\n/**\n * RGB in 0...255 range, including opacity.\n */\nexport type Rgb8Bit = RgbBase & {\n    unit: `8bit`;\n};\n/**\n * Rgb.\n * Units determine how to interperet rgb values.\n * * 'scalar': 0..1 range for RGB & opacity\n * * '8bit': 0..255 range for RGB & opacity\n */\nexport type Rgb = RgbScalar | Rgb8Bit;\nexport type LchBase = {\n    /**\n     * Lightness/perceived brightnes\n     */\n    l: number;\n    /**\n     * Chroma ('amount of colour')\n     */\n    c: number;\n    /**\n     * Hue\n     */\n    h: number;\n    /**\n     * Opacity on 0..1 scale\n     */\n    opacity?: number;\n    space: `lch` | `oklch`;\n};\nexport type ColourInterpolator<T extends Colour> = (amount: number) => T;\nexport type OkLchBase = LchBase & {\n    space: `oklch`;\n};\n/**\n * Oklch colour expressed in 0..1 scalar values for LCH & opacity\n */\nexport type OkLchScalar = OkLchBase & {\n    unit: `scalar`;\n};\n/**\n * Oklch colour expressed with:\n * l: 0..1\n * c: 0..4\n * h: 0..360 degrees\n * opacity: 0..1\n */\nexport type OkLchAbsolute = OkLchBase & {\n    unit: `absolute`;\n};\nexport type OkLch = OkLchAbsolute | OkLchScalar;\nexport type Colour = {\n    opacity?: number;\n} & (Hsl | OkLch | Rgb);\n/**\n * A representation of colour. Eg: `blue`, `rgb(255,0,0)`, `hsl(20,100%,50%)`\n */\nexport type Colourish = Colour | string;\n/**\n * Options for interpolation\n */\nexport type ColourInterpolationOpts = {\n    direction: `longer` | `shorter`;\n    space: ColourSpaces;\n};\nexport type ColourStepOpts = ColourInterpolationOpts & {\n    /**\n     * If set, determines total number of steps, including colour stops.\n     * Use this _or_ `stepsBetween`.\n     */\n    stepsTotal?: number;\n    /**\n     * If set, determines number of steps between colour stops.\n     * Use this _or_ `stepsTotal`.\n     */\n    stepsBetween?: number;\n};\nexport type ParsingOptions<T> = Partial<{\n    scalar: boolean;\n    ensureSafe: boolean;\n    /**\n     * Value to use if input is invalid\n     */\n    fallbackString: string;\n    /**\n     * Fallback colour to use if value cannot be parsed\n     */\n    fallbackColour: T;\n}>;\n//# sourceMappingURL=types.d.ts.map","import { type ElementResizeLogic } from '@ixfx/dom';\nimport { SimpleEventEmitter } from '@ixfx/events';\nimport type { ScaleBy } from '@ixfx/geometry';\nimport type { Rect, RectPositioned } from '@ixfx/geometry/rect';\nimport type { Grid } from '@ixfx/geometry/grid';\nexport type CanvasEvents = {\n    /**\n     * Fired when canvas is resized\n     */\n    resize: {\n        size: Rect;\n        helper: CanvasHelper;\n        ctx: CanvasRenderingContext2D;\n    };\n    resized: {\n        size: Rect;\n        helper: CanvasHelper;\n        ctx: CanvasRenderingContext2D;\n    };\n    /**\n     * Pointerdown.\n     *\n     * Adds logicalX/Y to get logical pixel coordinate\n     */\n    pointerdown: PointerEvent & {\n        physicalX: number;\n        physicalY: number;\n    };\n    /**\n   * Pointerup.\n   *\n   * Adds logicalX/Y to get logical pixel coordinate\n   */\n    pointerup: PointerEvent & {\n        physicalX: number;\n        physicalY: number;\n    };\n    /**\n   * Pointermove\n   *\n   * Adds logicalX/Y to get logical pixel coordinate\n   */\n    pointermove: PointerEvent & {\n        physicalX: number;\n        physicalY: number;\n    };\n};\n/**\n * CanvasHelper options\n */\nexport type CanvasHelperOptions = Readonly<{\n    /**\n     * Automatic canvas resizing logic.\n     */\n    resizeLogic?: ElementResizeLogic;\n    /**\n     * By default, the helper emits pointer events from the canvas.\n     * Set this to _true_ to disable.\n     */\n    disablePointerEvents: boolean;\n    /**\n     * By default the display DPI is used for scaling.\n     * If this is set, this will override.\n     */\n    pixelZoom: number;\n    /**\n     * If _true_ (default) canvas is cleared when a resize happens\n     */\n    clearOnResize: boolean;\n    /**\n     * If true, it won't add any position CSS\n     */\n    skipCss: boolean;\n    coordinateScale: ScaleBy;\n    /**\n     * Callback when canvas is resized\n     * @param size\n     * @returns\n     */\n    onResizing?: (ctx: CanvasRenderingContext2D, size: Rect, helper: CanvasHelper) => void;\n    onResized?: (ctx: CanvasRenderingContext2D, size: Rect, helper: CanvasHelper) => void;\n    /**\n     * Logical width of canvas.\n     * This is used for establishing the desired aspect ratio.\n     */\n    width: number;\n    /**\n     * Logical height of canvas.\n     * This is used for establishing the desired aspect ratio.\n     */\n    height: number;\n    /**\n     * If set, the z-index for this canvas.\n     * By default, fullscreen canvas will be given -1\n     */\n    zIndex: number;\n    /**\n     * Colour space to use. Defaults to sRGB.\n     */\n    colourSpace: PredefinedColorSpace;\n    /**\n     * If specified, this function be called in an animation loop.\n     * @param ctx Drawing context\n     * @param size Viewport size\n     * @param helper CanvasHelper instance\n     * @returns\n     */\n    draw?: (ctx: CanvasRenderingContext2D, size: Rect, helper: CanvasHelper) => void;\n}>;\n/**\n * A wrapper for the CANVAS element that scales the canvas for high-DPI displays\n * and helps with resizing.\n *\n * ```js\n * const canvas = new CanvasHelper(`#my-canvas`, { resizeLogic: `both` });\n * const { ctx, width, height } = canvas.ctx; // Get drawing context, width & height\n * ```\n *\n * Draw whenever it is resized using the 'resize' event\n * ```js\n * canvas.addEventListener(`resize`, ({ctx, size}) => {\n *  // Use ctx...\n * });\n * ```\n *\n * Or provide a function when initialising:\n * ```js\n * const onResize = (ctx, size) => {\n *  // Do drawing\n * }\n * const canvas = new CanvasHelper(`#my-canvas`, { resizeLogic: `both`, onResize });\n * ```\n *\n * Automatically draw at animation speeds:\n * ```js\n * const draw = () => {\n * }\n * const canvas = new CanvasHelper(`#my-canvas`, { resizeLogic: `both`, draw });\n * ```\n */\nexport declare class CanvasHelper extends SimpleEventEmitter<CanvasEvents> {\n    #private;\n    readonly el: HTMLCanvasElement;\n    readonly opts: CanvasHelperOptions;\n    constructor(domQueryOrEl: Readonly<string | HTMLCanvasElement | undefined | null>, opts?: Partial<CanvasHelperOptions>);\n    getRectangle(): RectPositioned;\n    dispose(reason?: string): void;\n    /**\n     * Gets the drawable area of the canvas.\n     * This accounts for scaling due to high-DPI displays etc.\n     * @returns\n     */\n    getPhysicalSize(): {\n        width: number;\n        height: number;\n    };\n    /**\n     * Creates a drawing helper for the canvas.\n     * If one is already created it is reused.\n     */\n    getDrawHelper(): void;\n    setLogicalSize(logicalSize: Rect): void;\n    /**\n     * Clears the canvas.\n     *\n     * Shortcut for:\n     * `ctx.clearRect(0, 0, this.width, this.height)`\n     */\n    clear(): void;\n    /**\n     * Fills the canvas with a given colour.\n     *\n     * Shortcut for:\n     * ```js\n        * ctx.fillStyle = ``;\n     * ctx.fillRect(0, 0, this.width, this.height);\n     * ```\n     * @param colour Colour\n     */\n    fill(colour?: string): void;\n    /**\n     * Gets the drawing context\n     */\n    get ctx(): CanvasRenderingContext2D;\n    get viewport(): RectPositioned;\n    /**\n     * Gets the logical width of the canvas\n     * See also: {@link height}, {@link size}\n     */\n    get width(): number;\n    /**\n     * Gets the logical height of the canvas\n     * See also: {@link width}, {@link size}\n     */\n    get height(): number;\n    /**\n     * Gets the logical size of the canvas\n     * See also: {@link width}, {@link height}\n     */\n    get size(): Rect;\n    /**\n     * Gets the current scaling ratio being used\n     * to compensate for high-DPI display\n     */\n    get ratio(): number;\n    /**\n     * Returns the width or height, whichever is smallest\n     */\n    get dimensionMin(): number;\n    /**\n     * Returns the width or height, whichever is largest\n     */\n    get dimensionMax(): number;\n    drawBounds(strokeStyle?: string): void;\n    /**\n     * Returns a Scaler that converts from absolute\n     * to relative coordinates.\n     * This is based on the canvas size.\n     *\n     * ```js\n        * // Assuming a canvas of 800x500\n     * toRelative({ x: 800, y: 600 });  // { x: 1,   y: 1 }\n     * toRelative({ x: 0, y: 0 });   // { x: 0,   y: 0 }\n     * toRelative({ x: 400, y: 300 }); // { x: 0.5, y: 0.5 }\n     * ```\n     */\n    get toRelative(): import(\"@ixfx/geometry\").Scaler;\n    /**\n     * Returns a scaler for points based on width & height\n     */\n    get toAbsoluteFixed(): import(\"@ixfx/geometry\").Scaler;\n    /**\n     * Returns a scaler for points based on width & height\n     */\n    get toRelativeFixed(): import(\"@ixfx/geometry\").Scaler;\n    get logicalCenter(): {\n        x: number;\n        y: number;\n    };\n    /**\n   * Returns a Scaler that converts from relative to absolute\n   * coordinates.\n   * This is based on the canvas size.\n   *\n   * ```js\n   * // Assuming a canvas of 800x600\n   * toAbsolute({ x: 1, y: 1 });      // { x: 800, y: 600}\n   * toAbsolute({ x: 0, y: 0 });      // { x: 0, y: 0}\n   * toAbsolute({ x: 0.5, y: 0.5 });  // { x: 400, y: 300}\n   * ```\n   */\n    get toAbsolute(): import(\"@ixfx/geometry\").Scaler;\n    /**\n     * Gets the center coordinate of the canvas\n     */\n    get center(): {\n        x: number;\n        y: number;\n    };\n    /**\n     * Gets the image data for the canvas.\n     * Uses the 'physical' canvas size. Eg. A logical size of 400x400 might be\n     * 536x536 with a high-DPI display.\n     * @returns\n     */\n    getImageData(): ImageData;\n    /**\n     * Returns the canvas frame data as a writable grid.\n     * When editing, make as many edits as needed before calling\n     * `flip`, which writes buffer back to the canvas.\n     * ```js\n        * const g = helper.getWritableBuffer();\n     * // Get {r,g,b,opacity} of pixel 10,10\n     * const pixel = g.get({ x: 10, y: 10 });\n     *\n     * // Set a colour to pixel 10,10\n     * g.set({ r: 0.5, g: 1, b: 0, opacity: 0 }, { x: 10, y: 10 });\n     *\n     * // Write buffer to canvas\n     * g.flip();\n     * ```\n     *\n     * Uses 'physical' size of canvas. Eg with a high-DPI screen, this will\n     * mean a higher number of rows and columns compared to the logical size.\n     * @returns\n     */\n    getWritableBuffer(): {\n        grid: Grid;\n        get: import(\"@ixfx/geometry\").GridCellAccessor<import(\"./colour/types.js\").Rgb8Bit>;\n        set: import(\"@ixfx/geometry\").GridCellSetter<import(\"./colour/types.js\").Rgb>;\n        flip: () => void;\n    };\n}\n//# sourceMappingURL=canvas-helper.d.ts.map","import type { Rect, RectPositioned } from \"@ixfx/geometry/rect\";\nimport type { Point } from \"@ixfx/geometry/point\";\nimport type { CirclePositioned } from \"@ixfx/geometry/circle\";\nexport type CanvasRegionSpecRelativePositioned = {\n    relativePositioned: RectPositioned;\n    scale?: `independent`;\n};\nexport type CanvasRegionSpecAbsolutePositioned = {\n    absPositioned: RectPositioned;\n};\nexport type CanvasRegionSpecRelativeSized = {\n    relativeSize: Rect;\n    scale?: `independent`;\n    /**\n     * Cardinal directions, or 'center' (default)\n     */\n    position: `center` | `n` | `s`;\n};\nexport type CanvasRegionSpecMatched = {\n    match: HTMLElement | string;\n};\nexport type CanvasRegionSpec = {\n    marginPx?: number;\n} & (CanvasRegionSpecAbsolutePositioned | CanvasRegionSpecRelativePositioned | CanvasRegionSpecRelativeSized | CanvasRegionSpecMatched);\n/**\n * Manges the drawing for a region of a canvas\n */\nexport declare class CanvasSource {\n    #private;\n    constructor(canvasElementOrQuery: HTMLCanvasElement | string, sizeBasis?: `min` | `max`);\n    /**\n     * Set logical size for region\n     * @param size\n     * @returns\n     */\n    setLogicalSize(size: Rect): Rect;\n    /**\n     * Causes drawing context to be re-created\n     */\n    invalidateContext(): void;\n    /**\n     * Convert relative to absolute\n     * @param pt\n     * @param kind\n     * @returns\n     */\n    toAbsPoint(pt: Point, kind?: `independent`): {\n        x: number;\n        y: number;\n    };\n    /**\n     * Gets the offset x,y\n     */\n    get offset(): {\n        x: number;\n        y: number;\n    };\n    /**\n     * Converts an absolute point to relative\n     * @param pt\n     * @param source\n     * @param kind\n     * @param clamped\n     * @returns\n     */\n    toRelPoint(pt: Point, source: `screen` | `source`, kind?: `independent` | `skip`, clamped?: boolean): {\n        x: number;\n        y: number;\n    };\n    /**\n     * Converts a rectangle to absolute coordinates\n     * @param rect\n     * @param kind\n     * @returns\n     */\n    toAbsRect(rect: Rect | RectPositioned, kind?: `independent`): {\n        width: number;\n        height: number;\n        x: number;\n        y: number;\n    } | {\n        width: number;\n        height: number;\n    };\n    /**\n     * Creates a region\n     *\n     * Absolute positioned. Uses source coordinates which don't change\n     * ```js\n     * source.createRegion({\n     *  absPositioned: { x: 0, y: 0, width: 100, height: 100}\n     * });\n     * ```\n     *\n     * Relative positioned. Uses coordiantes relative to source dimensions.\n     * Updated if source changes.\n     * ```js\n     * source.createRegion({\n     *  relativePositioned: { x: 0, y:0, width: 1, height: 0.5 },\n     *  scale: `independent`\n     * });\n     * ```\n     *\n     * Relative sized. Uses size relative to source dimension. By default centers.\n     * ```js\n     * source.createRegion({\n     *  relativeSize: { width: 0.5, height: 0.5 }\n     *  position: `center`\n     * })\n     * ```\n     * @param spec\n     * @returns\n     */\n    createRegion(spec: CanvasRegionSpec): CanvasRegion;\n    /**\n     * Clears the region of the canvas\n     */\n    clear(): void;\n    /**\n     * Gets - or creates - the drawing context\n     */\n    get context(): CanvasRenderingContext2D;\n    /**\n     * Gets a scaler for size\n     */\n    get sizeScaler(): any;\n    /**\n     * Gets the logical width\n     */\n    get width(): number;\n    /**\n     * Gets the logical height\n     */\n    get height(): number;\n}\n/**\n * Draws on a canvas, constrained to a specific region\n */\nexport declare class CanvasRegion {\n    #private;\n    source: CanvasSource;\n    /**\n     * Creates, using coordinate in canvas coordinates\n     */\n    constructor(source: CanvasSource, regionCompute: (parent: CanvasSource) => RectPositioned);\n    /**\n     * Calls the original `regionCompute` function passed in to the constructor\n     * to recompute the absolute region\n     */\n    recomputeRegion(): void;\n    /**\n     * Converts a region-relative point (0..1) to an absolute\n     * point, which uses region-relative coordinates.\n     *\n     * Eg if the region had an x,y of 100,100, `toAbsRegion({x:0,y:0})`\n     * will return 0,0.\n     *\n     * @param regionRel\n     * @param scaleBy\n     * @returns\n     */\n    toAbsRegion(regionRel: Point, scaleBy?: `both`): {\n        x: number;\n        y: number;\n    };\n    /**\n     * Returns a copy of `p` offset by the region's x & y\n     * @param p\n     * @returns\n     */\n    applyRegionOffset(p: Point): {\n        x: number;\n        y: number;\n    };\n    /**\n     * Draws a line from a series of points.\n     * Assumes region-relative, % coordinates (ie 0..1 scale)\n     * @param relativePoints Points to connect, in region-relative coordinates\n     * @param strokeStyle Stroke style\n     * @param lineWidth Line with\n     */\n    drawConnectedPointsRelative(relativePoints: Point[], strokeStyle: string, lineWidth?: number): void;\n    /**\n     * Draws connected points in absolute coordinates,\n     * however with 0,0 being the top-left of the region.\n     *\n     * Thus, this will apply the region offset before drawing.\n     * @param points Points to draw\n     * @param strokeStyle Stroke style\n     * @param lineWidth Line width\n     */\n    drawConnectedPoints(points: Point[], strokeStyle: string, lineWidth?: number): void;\n    /**\n     * Fills text at a relative position\n     * @param text\n     * @param relPos Relative, meaning 0.5,0.5 is the middle of the region\n     * @param fillStyle\n     * @param baseline\n     * @param align\n     */\n    fillTextRelative(text: string, relPos: Point, fillStyle: string | undefined, font: string, baseline?: CanvasTextBaseline, align?: CanvasTextAlign): void;\n    /**\n     * Fills text at a region-relative position\n     * @param text\n     * @param point Region relative, meaning 0,0 is top-left of region\n     * @param fillStyle\n     * @param baseline\n     * @param align\n     */\n    fillText(text: string, point: Point, fillStyle: string | undefined, font: string, baseline?: CanvasTextBaseline, align?: CanvasTextAlign): void;\n    drawCircles(relativeCircles: CirclePositioned[], fillStyle: string, strokeStyle?: string, lineWidth?: number): void;\n    /**\n     * Clears the region\n     */\n    clear(): void;\n    /**\n     * Fills the region\n     * @param fillStyle\n     */\n    fill(fillStyle?: string): void;\n    /**\n     * For debugging, draws an outline of the bounds\n     * @param strokeStyle\n     * @param lineWidth\n     */\n    drawBounds(strokeStyle: string, lineWidth?: number): void;\n    /**\n     * Converts a  point to a region-relative one.\n     * @param pt\n     * @param kind\n     * @returns\n     */\n    toRelPoint(pt: Point, source?: `screen` | `source`, kind?: `independent`, clamped?: boolean): {\n        x: number;\n        y: number;\n    };\n    /**\n     * Converts absolute to region point\n     * @param pt\n     * @param source\n     * @param clamped\n     * @returns\n     */\n    absToRegionPoint(pt: Point, source: `screen`, clamped: boolean): {\n        x: number;\n        y: number;\n    };\n    /**\n     * Get center of region\n     */\n    get center(): Point;\n    /**\n     * Gets the drawing context\n     */\n    get context(): CanvasRenderingContext2D;\n    /**\n     * SEts the region\n     */\n    set region(value: RectPositioned);\n    /**\n     * Gets the region\n     */\n    get region(): RectPositioned;\n    /**\n     * Gets the width\n     */\n    get width(): number;\n    /**\n     * Gets the height\n     */\n    get height(): number;\n    /**\n     * Gets the x offset\n     */\n    get x(): number;\n    /**\n     * Gets they y offset\n     */\n    get y(): number;\n    /**\n     * Gets the width/height, whichever is smaller\n     */\n    get dimensionMin(): number;\n}\n//# sourceMappingURL=canvas-region.d.ts.map","export type Opts = {\n    readonly touchRadius?: number;\n    readonly mouseRadius?: number;\n    readonly trace?: boolean;\n    readonly hue?: number;\n};\n/**\n * Visualises pointer events within a given element.\n *\n * ```js\n * // Show pointer events for whole document\n * pointerVis(document);\n * ```\n *\n * Note you may need to set the following CSS properties on the target element:\n *\n * ```css\n * touch-action: none;\n * user-select: none;\n * overscroll-behavior: none;\n * ```\n *\n * Options\n * * touchRadius/mouseRadius: size of circle for these kinds of pointer events\n * * trace: if true, intermediate events are captured and displayed\n * @param elOrQuery Element to monitor\n * @param options Options\n */\nexport declare const pointerVisualise: (elOrQuery: HTMLElement | string, options?: Opts) => void;\n//# sourceMappingURL=pointer-visualise.d.ts.map","export type MarkerOpts = StrokeOpts & DrawingOpts & {\n    readonly id: string;\n    readonly markerWidth?: number;\n    readonly markerHeight?: number;\n    readonly orient?: string;\n    readonly viewBox?: string;\n    readonly refX?: number;\n    readonly refY?: number;\n};\n/**\n* Drawing options\n*/\nexport type DrawingOpts = {\n    /**\n     * Style for fill. Eg `black`.\n     * @see [fill](https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/fill)\n     */\n    readonly fillStyle?: string;\n    /**\n     * Opacity (0..1)\n     */\n    readonly opacity?: number;\n    /**\n     * If true, debug helpers are drawn\n     */\n    readonly debug?: boolean;\n};\nexport type StrokeOpts = {\n    /**\n     * Line cap\n     * @see [stroke-linecap](https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stroke-linecap)\n     */\n    readonly strokeLineCap?: `butt` | `round` | `square`;\n    /**\n     * Width of stroke, eg `2`\n     * @see [stroke-width](https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stroke-width)\n     */\n    readonly strokeWidth?: number;\n    /**\n     * Stroke dash pattern, eg `5`\n     * @see [stroke-dasharray](https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stroke-dasharray)\n     */\n    readonly strokeDash?: string;\n    /**\n     * Style for lines. Eg `white`.\n     * @see [stroke](https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stroke)\n     */\n    readonly strokeStyle?: string;\n};\n/**\n * Line drawing options\n */\nexport type LineDrawingOpts = DrawingOpts & MarkerDrawingOpts & StrokeOpts;\nexport type CircleDrawingOpts = DrawingOpts & StrokeOpts & MarkerDrawingOpts;\nexport type PathDrawingOpts = DrawingOpts & StrokeOpts & MarkerDrawingOpts;\nexport type MarkerDrawingOpts = {\n    readonly markerEnd?: MarkerOpts;\n    readonly markerStart?: MarkerOpts;\n    readonly markerMid?: MarkerOpts;\n};\n/**\n * Text drawing options\n */\nexport type TextDrawingOpts = StrokeOpts & DrawingOpts & {\n    readonly anchor?: `start` | `middle` | `end`;\n    readonly align?: `text-bottom` | `text-top` | `baseline` | `top` | `hanging` | `middle`;\n    readonly userSelect?: boolean;\n};\n/**\n * Text path drawing options\n */\nexport type TextPathDrawingOpts = TextDrawingOpts & {\n    readonly method?: `align` | `stretch`;\n    readonly side?: `left` | `right`;\n    readonly spacing?: `auto` | `exact`;\n    readonly startOffset?: number;\n    readonly textLength?: number;\n};\n//# sourceMappingURL=types.d.ts.map","import type { DrawingOpts } from \"./types.js\";\n/**\n * Applies drawing options to given SVG element.\n * Applies: fillStyle\n * @param elem Element\n * @param opts Drawing options\n */\nexport declare const applyOpts: (elem: SVGElement, opts: DrawingOpts) => void;\n//# sourceMappingURL=apply.d.ts.map","import { type Rect } from '@ixfx/geometry/rect';\n/**\n * Get the bounds of an SVG element (determined by its width/height attribs)\n * @param svg\n * @returns\n */\nexport declare const getBounds: (svg: SVGElement) => Rect;\n/**\n * Set the bounds of an element, using its width/height attribs.\n * @param svg\n * @param bounds\n */\nexport declare const setBounds: (svg: SVGElement, bounds: Rect) => void;\n//# sourceMappingURL=bounds.d.ts.map","/**\n * Creates an element of `type` and with `id` (if specified)\n * @param type Element type, eg `circle`\n * @param id Optional id to assign to element\n * @returns Element\n */\nexport declare const createEl: <V extends SVGElement>(type: string, id?: string) => V;\n/**\n * Creates and appends a SVG element.\n *\n * ```js\n * // Create a circle\n * const circleEl = createOrResolve(parentEl, `SVGCircleElement`);\n * ```\n *\n * If `queryOrExisting` is specified, it is used as a query to find an existing element. If\n * query starts with `#`, this will be set as the element id, if created.\n *\n * ```js\n * // Creates an element with id 'myCircle' if it doesn't exist\n * const circleEl = createOrResolve(parentEl, `SVGCircleElement`, `#myCircle`);\n * ```\n * @param parent Parent element\n * @param type Type of SVG element\n * @param queryOrExisting Query, eg `#id`\n * @returns\n */\nexport declare const createOrResolve: <V extends SVGElement>(parent: SVGElement, type: string, queryOrExisting?: string | V, suffix?: string) => V;\n//# sourceMappingURL=create.d.ts.map","import { Polar } from '@ixfx/geometry';\nimport type { CircleDrawingOpts, LineDrawingOpts, PathDrawingOpts, TextDrawingOpts, TextPathDrawingOpts } from './types.js';\nimport type { CirclePositioned } from '@ixfx/geometry/circle';\nimport type { Line } from '@ixfx/geometry/line';\nimport type { Point } from '@ixfx/geometry/point';\n/**\n * Creates and adds an SVG path element\n * @example\n * ```js\n * const paths = [\n *  `M300,200`,\n *  `a25,25 -30 0,1 50, -25 l 50,-25`\n * ]\n * const pathEl = path(paths, parentEl);\n * ```\n * @param svgOrArray Path syntax, or array of paths. Can be empty if path data will be added later\n * @param parent SVG parent element\n * @param opts Options Drawing options\n * @returns\n */\nexport declare const path: (svgOrArray: string | readonly string[], parent: SVGElement, opts?: PathDrawingOpts, queryOrExisting?: string | SVGPathElement) => SVGPathElement;\nexport declare const pathUpdate: (elem: SVGPathElement, opts?: PathDrawingOpts) => SVGPathElement;\n/**\n * Updates an existing `SVGCircleElement` with potentially updated circle data and drawing options\n * @param elem Element\n * @param circle Circle\n * @param opts Drawing options\n * @returns SVGCircleElement\n */\nexport declare const circleUpdate: (elem: SVGCircleElement, circle: CirclePositioned, opts?: CircleDrawingOpts) => SVGCircleElement;\n/**\n * Creates or reuses a `SVGCircleElement`.\n *\n * To update an existing element, use `circleUpdate`\n * @param circle\n * @param parent\n * @param opts\n * @param queryOrExisting\n * @returns\n */\nexport declare const circle: (circle: CirclePositioned, parent: SVGElement, opts?: CircleDrawingOpts, queryOrExisting?: string | SVGCircleElement) => SVGCircleElement;\n/**\n * Creates or resuses a `SVGGElement` (group)\n *\n * To update an existing elemnet, use `groupUpdate`\n * @param children\n * @param parent\n * @param queryOrExisting\n * @returns\n */\nexport declare const group: (children: readonly SVGElement[], parent: SVGElement, queryOrExisting?: string | SVGGElement) => SVGGElement;\nexport declare const groupUpdate: (elem: SVGGElement, children: readonly SVGElement[]) => SVGGElement;\n/**\n * Creates or reuses a SVGLineElement.\n *\n * @param line\n * @param parent\n * @param opts\n * @param queryOrExisting\n * @returns\n */\nexport declare const line: (line: Line, parent: SVGElement, opts?: LineDrawingOpts, queryOrExisting?: string | SVGLineElement) => SVGLineElement;\n/**\n * Updates a SVGLineElement instance with potentially changed line and drawing data\n * @param lineEl\n * @param line\n * @param opts\n * @returns\n */\nexport declare const lineUpdate: (lineEl: SVGLineElement, line: Line, opts?: LineDrawingOpts) => SVGLineElement;\nexport declare const polarRayUpdate: (lineEl: SVGLineElement, ray: Polar.PolarRay, opts?: LineDrawingOpts) => SVGLineElement;\n/**\n * Updates an existing SVGTextPathElement instance with text and drawing options\n * @param el\n * @param text\n * @param opts\n * @returns\n */\nexport declare const textPathUpdate: (el: SVGTextPathElement, text?: string, opts?: TextPathDrawingOpts) => SVGTextPathElement;\n/**\n * Creates or reuses a SVGTextPathElement.\n * @param pathReference\n * @param text\n * @param parent\n * @param opts\n * @param textQueryOrExisting\n * @param pathQueryOrExisting\n * @returns\n */\nexport declare const textPath: (pathReference: string, text: string, parent: SVGElement, opts?: TextPathDrawingOpts, textQueryOrExisting?: string | SVGTextElement, pathQueryOrExisting?: string | SVGTextPathElement) => SVGTextPathElement;\n/**\n * Updates an existing SVGTextElement instance with position, text and drawing options\n * @param el\n * @param pos\n * @param text\n * @param opts\n * @returns\n */\nexport declare const textUpdate: (el: SVGTextElement, pos?: Point, text?: string, opts?: TextDrawingOpts) => SVGTextElement;\n/**\n * Creates or reuses a SVGTextElement\n * @param pos Position of text\n * @param text Text\n * @param parent\n * @param opts\n * @param queryOrExisting\n * @returns\n */\nexport declare const text: (text: string, parent: SVGElement, pos?: Point, opts?: TextDrawingOpts, queryOrExisting?: string | SVGTextElement) => SVGTextElement;\n/**\n * Creates a square grid based at a center point, with cells having `spacing` height and width.\n *\n * It fits in as many cells as it can within `width` and `height`.\n *\n * Returns a SVG group, consisting of horizontal and vertical lines\n * @param parent Parent element\n * @param center Center point of grid\n * @param spacing Width/height of cells\n * @param width How wide grid should be\n * @param height How high grid should be\n * @param opts\n */\nexport declare const grid: (parent: SVGElement, center: Point, spacing: number, width: number, height: number, opts?: LineDrawingOpts) => SVGGElement;\n//# sourceMappingURL=elements.d.ts.map","import { Polar } from \"@ixfx/geometry\";\nimport type { Line } from \"@ixfx/geometry/line\";\nimport type { Point } from \"@ixfx/geometry/point\";\n/**\n * Returns a Line type from an SVGLineElement\n * @param el SVG Line Element\n * @returns\n */\nexport declare const lineFromSvgLine: (el: SVGLineElement) => Line;\nexport declare const polarRayFromSvgLine: (el: SVGLineElement, origin: Point) => Polar.PolarRay;\n//# sourceMappingURL=geometry.d.ts.map","import type { CircleDrawingOpts, DrawingOpts, LineDrawingOpts, PathDrawingOpts, StrokeOpts, TextDrawingOpts } from './types.js';\nimport type { Point } from '@ixfx/geometry/point';\nimport type { CirclePositioned } from '@ixfx/geometry/circle';\nimport type { Line } from '@ixfx/geometry/line';\n/**\n * Helper to make SVG elements with a common parent.\n *\n * Create with {@link makeHelper}.\n */\nexport type SvgHelper = {\n    remove(queryOrExisting: string | SVGElement): void;\n    /**\n     * Creates a text element\n     * @param text Text\n     * @param pos Position\n     * @param opts Drawing options\n     * @param queryOrExisting DOM query to look up existing element, or the element instance\n     */\n    text(text: string, pos: Point, opts?: TextDrawingOpts, queryOrExisting?: string | SVGTextElement): SVGTextElement;\n    /**\n     * Creates text on a path\n     * @param pathReference Reference to path element\n     * @param text Text\n     * @param opts Drawing options\n     * @param textQueryOrExisting DOM query to look up existing element, or the element instance\n     * @param pathQueryOrExisting DOM query to look up existing element, or the element instance\n     */\n    textPath(pathReference: string, text: string, opts?: TextDrawingOpts, textQueryOrExisting?: string | SVGTextElement, pathQueryOrExisting?: string | SVGTextPathElement): SVGTextPathElement;\n    /**\n     * Creates a line\n     * @param line Line\n     * @param opts Drawing options\n     * @param queryOrExisting DOM query to look up existing element, or the element instance\n     */\n    line(line: Line, opts?: LineDrawingOpts, queryOrExisting?: string | SVGLineElement): SVGLineElement;\n    /**\n     * Creates a circle\n     * @param circle Circle\n     * @param opts Drawing options\n     * @param queryOrExisting DOM query to look up existing element, or the element instance\n     */\n    circle(circle: CirclePositioned, opts?: CircleDrawingOpts, queryOrExisting?: string | SVGCircleElement): SVGCircleElement;\n    /**\n     * Creates a path\n     * @param svgString Path description, or empty string\n     * @param opts Drawing options\n     * @param queryOrExisting DOM query to look up existing element, or the element instance\n     */\n    path(svgString: string | readonly string[], opts?: PathDrawingOpts, queryOrExisting?: string | SVGPathElement): SVGPathElement;\n    /**\n     * Creates a grid of horizontal and vertical lines inside of a group\n     * @param center Grid origin\n     * @param spacing Cell size\n     * @param width Width of grid\n     * @param height Height of grid\n     * @param opts Drawing options\n     */\n    grid(center: Point, spacing: number, width: number, height: number, opts?: LineDrawingOpts): SVGGElement;\n    /**\n     * Returns an element if it exists in parent\n     * @param selectors Eg `#path`\n     */\n    query<V extends SVGElement>(selectors: string): V | null;\n    /**\n     * Gets/sets the width of the parent\n     */\n    get width(): number;\n    set width(width: number);\n    /**\n     * Gets the parent\n     */\n    get parent(): SVGElement;\n    /**\n     * Gets/sets the height of the parent\n     */\n    get height(): number;\n    set height(height: number);\n    /**\n     * Deletes all child elements\n     */\n    clear(): void;\n};\n/**\n * Creates a {@link SvgHelper} for the creating and management of SVG elements.\n * @param parent\n * @param parentOpts\n * @returns\n */\nexport declare const makeHelper: (parent: SVGElement, parentOpts?: DrawingOpts & StrokeOpts) => SvgHelper;\n//# sourceMappingURL=helper.d.ts.map","import type { DrawingOpts, MarkerOpts } from \"./types.js\";\nexport declare const createMarker: (id: string, opts: MarkerOpts, childCreator?: () => SVGElement) => SVGMarkerElement;\nexport declare const markerPrebuilt: (elem: SVGElement | null, opts: MarkerOpts, _context: DrawingOpts) => string;\n//# sourceMappingURL=markers.d.ts.map","import type { PathDrawingOpts } from \"./types.js\";\n/**\n * Applies path drawing options to given element\n * Applies: markerEnd, markerStart, markerMid\n * @param elem Element (presumed path)\n * @param opts Options\n */\nexport declare const applyPathOpts: (elem: SVGElement, opts: PathDrawingOpts) => void;\n//# sourceMappingURL=path.d.ts.map","/**\n * Removes an SVG element from a parent\n * @param parent Parent\n * @param queryOrExisting Query or existing element\n * @returns\n */\nexport declare const remove: <V extends SVGElement>(parent: SVGElement, queryOrExisting: string | V) => void;\n/**\n * Removes all children of `parent`, but not `parent` itself.\n * @param parent\n */\nexport declare const clear: (parent: SVGElement) => void;\n//# sourceMappingURL=remove.d.ts.map","import type { StrokeOpts } from \"./types.js\";\n/**\n * Applies drawing options to given SVG element.\n * Applies: strokeStyle, strokeWidth, strokeDash, strokeLineCap\n * @param elem Element\n * @param opts\n */\nexport declare const applyStrokeOpts: (elem: SVGElement, opts: StrokeOpts) => void;\n//# sourceMappingURL=stroke.d.ts.map","export * from './apply.js';\nexport * from './bounds.js';\nexport * from './create.js';\nexport * as Elements from './elements.js';\nexport * from './geometry.js';\nexport * from './helper.js';\nexport * from './markers.js';\nexport * from './path.js';\nexport * from './remove.js';\nexport * from './stroke.js';\nexport type * from './types.js';\n//# sourceMappingURL=index.d.ts.map","import { type IStackImmutable } from '@ixfx/collections/stack';\nimport { Beziers, Lines, Points, Rects, Triangles, type Arcs, type Circles, type Ellipses, type Paths } from '@ixfx/geometry';\nexport type CanvasContextQuery = null | string | CanvasRenderingContext2D | HTMLCanvasElement;\n/**\n * Gets a 2d drawing context from canvas element or query, or throws an error\n * @param canvasElementContextOrQuery Canvas element reference or DOM query\n * @returns Drawing context.\n */\nexport declare const getContext: (canvasElementContextOrQuery: CanvasContextQuery) => CanvasRenderingContext2D;\n/**\n * Makes a helper object that wraps together a bunch of drawing functions that all use the same drawing context\n * @param ctxOrCanvasEl Drawing context or canvs element reference\n * @param canvasBounds Bounds of drawing (optional). Used for limiting `textBlock`\n * @returns\n */\nexport declare const makeHelper: (ctxOrCanvasEl: CanvasContextQuery, canvasBounds?: Rects.Rect) => {\n    ctx: CanvasRenderingContext2D;\n    paths(pathsToDraw: Paths.Path[] | readonly Paths.Path[], opts?: DrawingOpts): void;\n    line(lineToDraw: Lines.Line | Lines.Line[], opts?: DrawingOpts): void;\n    rect(rectsToDraw: Rects.Rect | Rects.Rect[] | Rects.RectPositioned | Rects.RectPositioned[], opts?: RectOpts): void;\n    bezier(bezierToDraw: Beziers.QuadraticBezier | Beziers.CubicBezier, opts?: DrawingOpts): void;\n    connectedPoints(pointsToDraw: Points.Point[], opts?: DrawingOpts & Partial<ConnectedPointsOptions>): void;\n    pointLabels(pointsToDraw: Points.Point[], opts?: DrawingOpts): void;\n    dot(dotPosition: Points.Point | Points.Point[], opts?: DotOpts): void;\n    circle(circlesToDraw: Circles.CirclePositioned | Circles.CirclePositioned[], opts: DrawingOpts): void;\n    arc(arcsToDraw: Arcs.ArcPositioned | Arcs.ArcPositioned[], opts: DrawingOpts): void;\n    textBlock(lines: string[], opts: DrawingOpts & {\n        anchor: Points.Point;\n        anchorPadding?: number;\n        bounds?: Rects.RectPositioned;\n    }): void;\n};\n/**\n * Drawing options\n */\nexport type DrawingOpts = {\n    /**\n     * Stroke style\n     */\n    readonly strokeStyle?: string;\n    /**\n     * Fill style\n     */\n    readonly fillStyle?: string;\n    /**\n     * If true, diagnostic helpers will be drawn\n     */\n    readonly debug?: boolean;\n};\nexport type LineOpts = {\n    readonly lineWidth?: number;\n    readonly lineCap?: CanvasLineCap;\n    readonly lineJoin?: CanvasLineJoin;\n};\n/**\n * Draws one or more arcs.\n * @param ctx\n * @param arcs\n * @param opts\n */\nexport declare const arc: (ctx: CanvasRenderingContext2D, arcs: Arcs.ArcPositioned | readonly Arcs.ArcPositioned[], opts?: DrawingOpts) => void;\n/**\n * A drawing stack operation\n */\nexport type StackOp = (ctx: CanvasRenderingContext2D) => void;\n/**\n * A drawing stack (immutable)\n */\nexport type DrawingStack = {\n    /**\n     * Push a new drawing op\n     * @param ops Operation to add\n     * @returns stack with added op\n     */\n    push(...ops: readonly StackOp[]): DrawingStack;\n    /**\n     * Pops an operatiomn\n     * @returns Drawing stack with item popped\n     */\n    pop(): DrawingStack;\n    /**\n     * Applies drawing stack\n     */\n    apply(): DrawingStack;\n};\n/**\n * Creates and returns an immutable drawing stack for a context\n * @param ctx Context\n * @param stk Initial stack operations\n * @returns\n */\nexport declare const drawingStack: (ctx: CanvasRenderingContext2D, stk?: IStackImmutable<StackOp>) => DrawingStack;\n/**\n * Draws a curved line through a set of points\n * @param ctx\n * @param points\n * @param opts\n */\nexport declare const lineThroughPoints: (ctx: CanvasRenderingContext2D, points: readonly Points.Point[], opts?: DrawingOpts) => void;\n/**\n * Draws one or more circles. Will draw outline/fill depending on\n * whether `strokeStyle` or `fillStyle` params are present in the drawing options.\n *\n * ```js\n * // Draw a circle with radius of 10 at 0,0\n * circle(ctx, {radius:10});\n *\n * // Draw a circle of radius 10 at 100,100\n * circle(ctx, {radius: 10, x: 100, y: 100});\n *\n * // Draw two blue outlined circles\n * circle(ctx, [ {radius: 5}, {radius: 10} ], {strokeStyle:`blue`});\n * ```\n * @param ctx Drawing context\n * @param circlesToDraw Circle(s) to draw\n * @param opts Drawing options\n */\nexport declare const circle: (ctx: CanvasRenderingContext2D, circlesToDraw: Circles.CirclePositioned | readonly Circles.CirclePositioned[], opts?: DrawingOpts) => void;\n/**\n * Draws one or more ellipses. Will draw outline/fill depending on\n * whether `strokeStyle` or `fillStyle` params are present in the drawing options.\n * @param ctx\n * @param ellipsesToDraw\n * @param opts\n */\nexport declare const ellipse: (ctx: CanvasRenderingContext2D, ellipsesToDraw: Ellipses.EllipsePositioned | readonly Ellipses.EllipsePositioned[], opts?: DrawingOpts) => void;\n/**\n * Draws one or more paths.\n * supported paths are quadratic beziers and lines.\n * @param ctx\n * @param pathsToDraw\n * @param opts\n */\nexport declare const paths: (ctx: CanvasRenderingContext2D, pathsToDraw: readonly Paths.Path[] | Paths.Path, opts?: {\n    readonly strokeStyle?: string;\n    readonly debug?: boolean;\n}) => void;\nexport type ConnectedPointsOptions = {\n    readonly lineWidth: number;\n    readonly loop: boolean;\n    readonly fillStyle: string;\n    readonly strokeStyle: string;\n};\n/**\n * Draws a line between all the given points.\n * If a fillStyle is specified, it will be filled.\n *\n * See also:\n * * {@link line}: Draw one or more lines\n *\n * @param ctx\n * @param pts\n */\nexport declare const connectedPoints: (ctx: CanvasRenderingContext2D, pts: readonly Points.Point[], opts?: Partial<ConnectedPointsOptions>) => void;\n/**\n * Draws labels for a set of points\n * @param ctx\n * @param pts Points to draw\n * @param opts\n * @param labels Labels for points\n */\nexport declare const pointLabels: (ctx: CanvasRenderingContext2D, pts: readonly Points.Point[], opts?: {\n    readonly fillStyle?: string;\n}, labels?: readonly string[]) => void;\n/**\n * Returns `point` with the canvas's translation matrix applied\n * @param ctx\n * @param point\n * @returns\n */\nexport declare const translatePoint: (ctx: CanvasRenderingContext2D, point: Points.Point) => Points.Point;\n/**\n * Creates a new HTML IMG element with a snapshot of the\n * canvas. Element will need to be inserted into the document.\n *\n * ```\n * const myCanvas = document.getElementById('someCanvas');\n * const el = copyToImg(myCanvas);\n * document.getElementById('images').appendChild(el);\n * ```\n * @param canvasEl\n * @returns\n */\nexport declare const copyToImg: (canvasEl: HTMLCanvasElement) => HTMLImageElement;\nexport type DotOpts = DrawingOpts & {\n    readonly radius?: number;\n    readonly stroke?: boolean;\n    readonly filled?: boolean;\n    readonly strokeWidth?: number;\n};\n/**\n * Draws filled circle(s) at provided point(s)\n * @param ctx\n * @param pos\n * @param opts\n */\nexport declare const dot: (ctx: CanvasRenderingContext2D, pos: Points.Point | (Points.Point | Circles.CirclePositioned)[] | Circles.CirclePositioned, opts?: DotOpts) => void;\n/**\n * Draws a cubic or quadratic bezier\n * @param ctx\n * @param bezierToDraw\n * @param opts\n */\nexport declare const bezier: (ctx: CanvasRenderingContext2D, bezierToDraw: Beziers.QuadraticBezier | Beziers.CubicBezier, opts?: DrawingOpts) => void;\n/**\n * Draws one or more lines.\n *\n * Each line is drawn independently, ie it's not assumed lines are connected.\n *\n * See also:\n * * {@link connectedPoints}: Draw a series of connected points\n * @param ctx\n * @param toDraw\n * @param opts\n */\nexport declare const line: (ctx: CanvasRenderingContext2D, toDraw: Lines.Line | readonly Lines.Line[], opts?: LineOpts & DrawingOpts) => void;\n/**\n * Draws one or more triangles\n * @param ctx\n * @param toDraw\n * @param opts\n */\nexport declare const triangle: (ctx: CanvasRenderingContext2D, toDraw: Triangles.Triangle | readonly Triangles.Triangle[], opts?: DrawingOpts & {\n    readonly filled?: boolean;\n}) => void;\nexport type RectOpts = DrawingOpts & Readonly<Partial<{\n    stroke: boolean;\n    filled: boolean;\n    strokeWidth: number;\n    /**\n     * If true, diagonals are drawn\n     */\n    crossed: boolean;\n}>>;\n/**\n * Draws one or more rectangles.\n *\n * @param ctx\n * @param toDraw\n * @param opts\n */\nexport declare const rect: (ctx: CanvasRenderingContext2D, toDraw: Rects.Rect | Rects.Rect[] | Rects.RectPositioned | Rects.RectPositioned[], opts?: RectOpts) => void;\n/**\n * Returns the width of `text`. Rounds number up to nearest multiple if provided. If\n * text is empty or undefined, 0 is returned.\n * @param ctx\n * @param text\n * @param widthMultiple\n * @returns\n */\nexport declare const textWidth: (ctx: CanvasRenderingContext2D, text?: string | null, padding?: number, widthMultiple?: number) => number;\nexport declare const textRect: (ctx: CanvasRenderingContext2D, text?: string | null, padding?: number, widthMultiple?: number) => Rects.Rect;\nexport declare const textHeight: (ctx: CanvasRenderingContext2D, text?: string | null, padding?: number) => number;\n/**\n * Draws a block of text. Each array item is considered a line.\n * @param ctx\n * @param lines\n * @param opts\n */\nexport declare const textBlock: (ctx: CanvasRenderingContext2D, lines: readonly string[], opts: DrawingOpts & {\n    readonly anchor: Points.Point;\n    readonly align?: `top` | `center`;\n    readonly anchorPadding?: number;\n    readonly bounds?: Rects.RectPositioned;\n}) => void;\nexport type HorizAlign = `left` | `right` | `center`;\nexport type VertAlign = `top` | `center` | `bottom`;\n/**\n * Draws an aligned text block\n */\nexport declare const textBlockAligned: (ctx: CanvasRenderingContext2D, text: readonly string[] | string, opts: DrawingOpts & {\n    readonly bounds: Rects.RectPositioned;\n    readonly horiz?: HorizAlign;\n    readonly vert?: VertAlign;\n}) => void;\n//# sourceMappingURL=drawing.d.ts.map","import type { makeHelper } from \"./drawing.js\";\nexport type DrawingHelper = ReturnType<typeof makeHelper>;\n//# sourceMappingURL=types.d.ts.map","import { Grids } from '@ixfx/geometry';\nimport type { Rgb8Bit } from './colour/types.js';\nexport type Kernel<T> = readonly (readonly T[])[];\nexport type CellValueScalar<TCell, TKernel> = Grids.GridCellAndValue<TCell> & {\n    kernel: TKernel;\n};\nexport type KernelCompute = <V>(offset: Grids.GridCell, value: V) => V;\nexport type KernelReduce<TCell, TKernel> = (values: CellValueScalar<TCell, TKernel>[]) => TCell | undefined;\n/**\n * Multiply every element of kernel by the same `scalar` value.\n * Returns new result, input is unmodified\n * @param kernel\n * @param scalar\n * @returns\n */\nexport declare const multiply: (kernel: Kernel<number>, scalar: number) => Kernel<number>;\nexport declare function convolveCell<TCell, TKernel>(cell: Grids.GridCell, kernel: Kernel2dArray<TKernel>, source: Grids.GridReadable<TCell>, reduce: KernelReduce<TCell, TKernel>): TCell | undefined;\n/**\n * Performs kernel-based convolution over `image`.\n * @param kernel\n * @param image\n */\nexport declare function convolveImage(kernel: Kernel<number>, image: ImageData): Generator<Grids.GridCellAndValue<Rgb8Bit>, void, any>;\nexport declare function convolve<TCell, TKernel>(kernel: Kernel<TKernel>, source: Grids.GridReadable<TCell>, visitor: Iterable<Grids.GridCell>, reduce: KernelReduce<TCell, TKernel>, origin?: Grids.GridCell): IterableIterator<Grids.GridCellAndValue<TCell>>;\nexport type Kernel2dArray<T> = Grids.GridCellAndValue<T>[];\n/**\n * For a given kernel, returns an array of offsets. These\n * consist of a cell offset (eg `{x:-1,y:-1}`) and the value at that kernel position.\n * @param kernel\n * @param origin\n * @returns\n */\nexport declare const kernel2dToArray: <T>(kernel: Kernel<T>, origin?: Grids.GridCell) => Kernel2dArray<T>;\nexport declare const rgbReducer: KernelReduce<Rgb8Bit, number>;\nexport declare const identityKernel: number[][];\nexport declare const edgeDetectionKernel: number[][];\nexport declare const sharpenKernel: number[][];\nexport declare const boxBlurKernel: Kernel<number>;\nexport declare const gaussianBlur3Kernel: Kernel<number>;\nexport declare const gaussianBlur5Kernel: Kernel<number>;\nexport declare const unsharpMasking5Kernel: Kernel<number>;\n//# sourceMappingURL=convolve-2d.d.ts.map","import Colorizr from \"colorizr\";\nimport { type Colour, type Colourish, type ColourSpaces, type HslAbsolute, type HslScalar, type OkLchAbsolute, type OkLchScalar, type Rgb, type Rgb8Bit, type RgbScalar } from \"./types.js\";\nexport type ConvertDestinations = `hsl-scalar` | `hsl-absolute` | `oklch-scalar` | `oklch-absolute` | `srgb-8bit` | `srgb-scalar`;\nexport declare function convert<T extends ConvertDestinations>(colour: Colourish, destination: T): T extends \"oklch-absolute\" ? OkLchAbsolute : T extends \"oklch-scalar\" ? OkLchScalar : T extends \"srgb-8bit\" ? Rgb8Bit : T extends \"srgb-scalar\" ? RgbScalar : T extends \"hsl-scalar\" ? HslScalar : T extends \"hsl-absolute\" ? HslAbsolute : never;\n/**\n * Like {@link convert}, but result is a CSS colour string\n * @param colour\n * @param destination\n * @returns\n */\nexport declare function convertToString(colour: Colourish, destination: ConvertDestinations): string;\nexport declare function convertScalar<T extends ColourSpaces>(colour: Colourish, destination: T): T extends \"oklch\" ? OkLchScalar : T extends \"hsl\" ? HslScalar : T extends \"srgb\" ? RgbScalar : never;\nexport declare const toCssColour: (colour: Colourish | object) => string;\nexport declare const toLibraryColour: (colour: Colourish) => Colorizr;\nexport declare const guard: (colour: Colour) => void;\nexport declare const toColour: (colourish: any) => Colour;\n/**\n * Returns a CSS-ready string\n * representation.\n * ```js\n * element.style.backgroundColor = resolveToString(`red`);\n * ```\n *\n * Tries each parameter in turn, returning the value\n * for the first that resolves. This can be useful for\n * having fallback values.\n *\n * ```js\n * // Try a CSS variable, a object property or finally fallback to red.\n * element.style.backgroundColor = toStringFirst('--some-var', opts.background, `red`);\n * ```\n * @param colours Array of colours to resolve\n * @returns\n */\nexport declare const toStringFirst: (...colours: (Colourish | undefined)[]) => string;\nexport declare function rgbToHsl(rgb: Rgb, scalarResult: true): HslScalar;\nexport declare function rgbToHsl(rgb: Rgb, scalarResult: false): HslAbsolute;\n//# sourceMappingURL=conversion.d.ts.map","import type { Colour } from \"./types.js\";\n/**\n * Converts from some kind of colour that is legal in CSS\n * into a structured Colour type.\n *\n * Handles: hex format, CSS variables, colour names\n * ```js\n * fromCssColour(`#ffffff`);\n * fromCssColour(`blue`);\n * fromCssColour(`--some-variable`);\n * fromCssColour(`hsl(50, 50%, 50%)`);\n * fromCssColour(`rgb(50, 100, 100)`);\n * ```\n * @param colour\n * @returns\n */\nexport declare const fromCssColour: (colour: string) => Colour;\n/**\n * Resolves a named colour or CSS variable to a colour string.\n * Doesn't do conversion or parsing.\n *\n * ```js\n * resolveCss(`red`);\n * resolveCss(`my-var`);\n * ```\n * @param colour Colour\n * @param fallback Fallback if CSS variable is missing\n * @returns\n */\nexport declare const resolveCss: (colour: string, fallback?: string) => string;\nexport declare const cssDefinedHexColours: {\n    aliceblue: string;\n    antiquewhite: string;\n    aqua: string;\n    aquamarine: string;\n    azure: string;\n    beige: string;\n    bisque: string;\n    black: string;\n    blanchedalmond: string;\n    blue: string;\n    blueviolet: string;\n    brown: string;\n    burlywood: string;\n    cadetblue: string;\n    chartreuse: string;\n    chocolate: string;\n    coral: string;\n    cornflowerblue: string;\n    cornsilk: string;\n    crimson: string;\n    cyan: string;\n    darkblue: string;\n    darkcyan: string;\n    darkgoldenrod: string;\n    darkgray: string;\n    darkgreen: string;\n    darkkhaki: string;\n    darkmagenta: string;\n    darkolivegreen: string;\n    darkorange: string;\n    darkorchid: string;\n    darkred: string;\n    darksalmon: string;\n    darkseagreen: string;\n    darkslateblue: string;\n    darkslategray: string;\n    darkturquoise: string;\n    darkviolet: string;\n    deeppink: string;\n    deepskyblue: string;\n    dimgray: string;\n    dodgerblue: string;\n    firebrick: string;\n    floralwhite: string;\n    forestgreen: string;\n    fuchsia: string;\n    gainsboro: string;\n    ghostwhite: string;\n    gold: string;\n    goldenrod: string;\n    gray: string;\n    green: string;\n    greenyellow: string;\n    honeydew: string;\n    hotpink: string;\n    indianred: string;\n    indigo: string;\n    ivory: string;\n    khaki: string;\n    lavender: string;\n    lavenderblush: string;\n    lawngreen: string;\n    lemonchiffon: string;\n    lightblue: string;\n    lightcoral: string;\n    lightcyan: string;\n    lightgoldenrodyellow: string;\n    lightgray: string;\n    lightgreen: string;\n    lightpink: string;\n    lightsalmon: string;\n    lightseagreen: string;\n    lightskyblue: string;\n    lightslategray: string;\n    lightsteelblue: string;\n    lightyellow: string;\n    lime: string;\n    limegreen: string;\n    linen: string;\n    magenta: string;\n    maroon: string;\n    mediumaquamarine: string;\n    mediumblue: string;\n    mediumorchid: string;\n    mediumpurple: string;\n    mediumseagreen: string;\n    mediumslateblue: string;\n    mediumspringgreen: string;\n    mediumturquoise: string;\n    mediumvioletred: string;\n    midnightblue: string;\n    mintcream: string;\n    mistyrose: string;\n    moccasin: string;\n    navajowhite: string;\n    navy: string;\n    oldlace: string;\n    olive: string;\n    olivedrab: string;\n    orange: string;\n    orangered: string;\n    orchid: string;\n    palegoldenrod: string;\n    palegreen: string;\n    paleturquoise: string;\n    palevioletred: string;\n    papayawhip: string;\n    peachpuff: string;\n    peru: string;\n    pink: string;\n    plum: string;\n    powderblue: string;\n    purple: string;\n    rebeccapurple: string;\n    red: string;\n    rosybrown: string;\n    royalblue: string;\n    saddlebrown: string;\n    salmon: string;\n    sandybrown: string;\n    seagreen: string;\n    seashell: string;\n    sienna: string;\n    silver: string;\n    skyblue: string;\n    slateblue: string;\n    slategray: string;\n    snow: string;\n    springgreen: string;\n    steelblue: string;\n    tan: string;\n    teal: string;\n    thistle: string;\n    tomato: string;\n    turquoise: string;\n    violet: string;\n    wheat: string;\n    white: string;\n    whitesmoke: string;\n    yellow: string;\n    yellowgreen: string;\n    transparent: string;\n};\n//# sourceMappingURL=css-colours.d.ts.map","import { type RandomSource } from '@ixfx/random';\n/**\n * Returns a full HSL colour string (eg `hsl(20,50%,75%)`) based on a index.\n * It's useful for generating perceptually different shades as the index increments.\n *\n * ```\n * el.style.backgroundColor = goldenAgeColour(10);\n * ```\n *\n * Saturation and lightness can be specified, as numeric ranges of 0-1.\n *\n * @param saturation Saturation (0-1), defaults to 0.5\n * @param lightness Lightness (0-1), defaults to 0.75\n * @param alpha Opacity (0-1), defaults to 1.0\n * @returns HSL colour string eg `hsl(20,50%,75%)`\n */\nexport declare const goldenAngleColour: (index: number, saturation?: number, lightness?: number, alpha?: number) => string;\n/**\n * Returns a random hue component (0..359)\n *\n * ```\n * // Generate hue\n * const h = randomHue(); // 0-359\n *\n * // Generate hue and assign as part of a HSL string\n * el.style.backgroundColor = `hsl(${randomHue(), 50%, 75%})`;\n * ```\n * @param rand\n * @returns\n */\nexport declare const randomHue: (rand?: RandomSource) => number;\n//# sourceMappingURL=generate.d.ts.map","import type { Hsl, Rgb, OkLch, Colourish } from \"./types.js\";\nexport declare const isHsl: (v: any) => v is Hsl;\nexport declare const isRgb: (v: any) => v is Rgb;\n/**\n * If the input object has r,g&b properties, it will return a fully-\n * formed Rgb type with `unit` and `space` properties.\n *\n * If it lacks these basic three properties or they are out of range,\n *  _undefined_ is returned.\n *\n * If RGB values are less than 1 assumes unit:scalar. Otherwise unit:8bit.\n * If RGB values exceed 255, _undefined_ returned.\n * @param v\n * @returns\n */\nexport declare const tryParseObjectToRgb: (v: any) => Rgb | undefined;\nexport declare const tryParseObjectToHsl: (v: any) => Hsl | undefined;\nexport declare const isOkLch: (v: any) => v is OkLch;\nexport declare const isColourish: (v: any) => v is Colourish;\n//# sourceMappingURL=guards.d.ts.map","import type { Colourish, Hsl, OkLch, Rgb } from './types.js';\nexport declare function multiplyOpacity<T extends Colourish>(colourish: T, amount: number): T extends string ? string : T extends Hsl ? Hsl : T extends OkLch ? OkLch : T extends Rgb ? Rgb : never;\n/**\n * Does a computation with the opacity of a colour, returning colour string\n * @param colourish Colour\n * @param fn Function that takes original opacity as input and returns output opacity\n */\n/**\n * Does a computation with the opacity of a colour in a HSL structure\n * @param hsl Colour\n * @param fn Function that takes original opacity as input and returns output opacity\n */\n/**\n * Does a computation with the opacity of a colour in a RGB structure\n * @param colourish Colour\n * @param fn Function that takes original opacity as input and returns output opacity\n */\nexport declare function withOpacity<T extends Colourish>(colourish: T, fn: (scalarOpacity: number) => number): T extends string ? string : T extends Hsl ? Hsl : T extends OkLch ? OkLch : T extends Rgb ? Rgb : never;\nexport declare function setOpacity<T extends Colourish>(colourish: T, amount: number): T extends string ? string : T extends Hsl ? Hsl : T extends OkLch ? OkLch : T extends Rgb ? Rgb : never;\n//# sourceMappingURL=math.d.ts.map","import type { ColourInterpolationOpts, Colourish, ColourSpaces, ColourStepOpts, HslScalar, OkLchScalar, RgbScalar } from \"./types.js\";\n/**\n * Returns a CSS `linear-gradient` with stops corresponding to the given list of `colours`.\n * ```js\n * element.style.background = Colour.cssLinearGradient(['red','green','blue']);\n * ```\n * @param colours\n * @returns\n */\nexport declare const cssLinearGradient: (colours: Colourish[]) => string;\n/**\n * Returns a function that interpolates between two colours. Returns string colour values.\n * ```js\n * const i = interpolator(`blue`, `red`);\n * i(0.5); // Get the colour at 50%, as a string.\n * ```\n *\n * To work with structured colour values, use one of the space's `interpolate` functions.\n * @param colourA\n * @param colourB\n * @param options\n * @returns\n */\nexport declare const interpolator: (colourA: Colourish, colourB: Colourish, options?: Partial<ColourInterpolationOpts>) => (amount: number) => string;\n/**\n * Produces a stepped scale of colours.\n *\n * ```js\n * // A scale of from red to green, with three colours in-between\n * const steps = Colour.scale([ `red`, `green` ], { stepsBetween: 3 });\n * for (const step of steps) {\n *  // A CSS colour string\n * }\n * ```\n *\n * {@link cssLinearGradient} can produce a smooth gradient in CSS on the basis\n * of the stepped colours.\n * @param colours\n * @param opts\n * @returns\n */\nexport declare const scale: (colours: Colourish[], opts?: Partial<ColourStepOpts>) => string[];\nexport type CreateStepsOptions = Partial<{\n    space: ColourSpaces;\n    steps: number;\n    direction: `longer` | `shorter`;\n    exclusive: boolean;\n}>;\n/**\n * Creates discrete colour steps between two colours.\n *\n * Start and end colours are included (and counted as a step) unless `exclusive` is set to _true_\n *\n * ```js\n * // Array of five HslScalar\n * createSteps(`red`,`blue`, { steps: 5 });\n * ```\n *\n * Defaults to the oklch colour space, 5 steps and non-exclusive.\n * @param a Start colour\n * @param b End colour\n * @param options\n * @returns\n */\nexport declare function createSteps<T extends CreateStepsOptions>(a: Colourish | string, b: Colourish, options: T): T extends {\n    space: `oklch`;\n} ? OkLchScalar[] : T extends {\n    space: `srgb`;\n} ? RgbScalar[] : T extends {\n    space: `hsl`;\n} ? HslScalar[] : OkLchScalar[];\n//# sourceMappingURL=interpolate.d.ts.map","import * as C from \"colorizr\";\nimport type { Hsl, HslAbsolute, HslScalar, ParsingOptions, Rgb } from \"./types.js\";\nimport { type Angle } from \"@ixfx/geometry\";\n/**\n * Scales the opacity value of an input HSL value\n * ```js\n * withOpacity()\n * ```\n * @param value Colour\n * @param fn Function that calcules opacity based on input scalar value\n * @returns\n */\nexport declare const withOpacity: <T extends Hsl>(value: T, fn: (opacityScalar: number, value: T) => number) => T;\n/**\n * Increases or decreases lightness by this percentage, returning new colour\n *\n * Amount to change:\n * * 'fixed': a fixed amount\n * * 'delta': increase/decrease by this amount\n * * 'pdelta': proportion of current value to change by ('percentage delta')\n *\n * ```\n * const colour = { h: 0.5, s: 0.5, l: 0.5, space: `hsl`, unit: `scalar` };\n * changeLightness(colour, { pdelta: 0.1 }); // l: 0.55\n * changeLightness(colour, { delta: 0.1 });  // l: 0.6\n * changeLightness(colour, { fixed: 0.5 });  // l: 0.5\n * ```\n *\n * Keep in mind the numerical value will depend on the unit of `value`. If it's scalar,\n * lightness is 0..1 scale, otherwise 0..100 scale.\n *\n * Use negative values to decrease (does not apply to 'fixed')\n * @param value Hsl colour\n * @param amount Amount to change\n */\nexport declare const changeLightness: (value: Hsl, amount: Partial<{\n    pdelta: number;\n    delta: number;\n    fixed: number;\n}>) => Hsl;\nexport declare function fromHexString<T extends ParsingOptions<Hsl>>(hexString: string, scalar: T): T extends {\n    scalar: true;\n} ? HslScalar : HslAbsolute;\nexport declare function fromCss<T extends ParsingOptions<Hsl>>(value: string, options?: T): T extends {\n    scalar: true;\n} ? HslScalar : HslAbsolute;\nexport declare const toCssString: (hsl: Hsl) => string;\nexport declare const toAbsolute: (hslOrString: Hsl | Rgb | string) => HslAbsolute;\n/**\n * Generates a {@link HslScalar} value.\n *\n * ```js\n * generateScaler(10); // 10deg, default to full saturation, half lightness and full opacity\n *\n * // Generate HSL value from radian angle and 50% saturation\n * generateScalar(`10rad`, 0.5);\n *\n * // Generate from numeric CSS variable\n * generateScalar(`--hue`);\n * ```\n * @param absoluteHslOrVariable Hue angle or CSS variable\n * @param saturation\n * @param lightness\n * @param opacity\n */\nexport declare const generateScalar: (absoluteHslOrVariable: string | number | Angle, saturation?: number, lightness?: number, opacity?: number) => HslScalar;\n/**\n * Converts a {@link Hsl} value to scalar units, or parses a colour string\n * and converts it.\n *\n * ```js\n * toScalar({ h: 100, s: 50, l: 100, unit: `absolute` });\n * toScalar(`red`);\n * ```\n * @param hslOrString\n * @returns\n */\nexport declare const toScalar: (hslOrString: Rgb | Hsl | string) => HslScalar;\nexport declare const guard: (hsl: Hsl) => void;\nexport declare const interpolator: (a: Hsl | string, b: Hsl | string, direction?: `longer` | `shorter`) => (amount: number) => HslScalar;\n/**\n * Creates a HslScalar value from scalar (0..1) values\n * @param hue\n * @param sat\n * @param lightness\n * @param opacity\n * @returns\n */\nexport declare function scalar(hue?: number, sat?: number, lightness?: number, opacity?: number): HslScalar;\nexport declare function absolute(hue?: number, sat?: number, lightness?: number, opacity?: number): HslAbsolute;\n/**\n * It seems Colorizr can't handle 'deg' units\n * @param value\n */\nexport declare function parseCssHslFunction(value: string): Hsl;\n/**\n * Converts a Hsl structure (or CSS string) to Colorizr's RGB format\n * @param hsl HSL colour\n * @returns\n */\nexport declare function toLibraryRgb(hsl: Hsl | string): C.RGB;\n//# sourceMappingURL=hsl.d.ts.map","import type { OkLch, OkLchAbsolute, OkLchScalar, ParsingOptions } from \"./types.js\";\nimport * as C from \"colorizr\";\nimport { type Angle } from \"@ixfx/geometry\";\nexport declare const OKLCH_CHROMA_MAX = 0.4;\nexport declare const guard: (lch: OkLch) => void;\n/**\n * Coverts from the Colorizr library\n * Tests ranges:\n * * l: 0..1\n * * c: 0..1\n * * h: 0..360\n * * alpha: 0..1\n *\n * Default option: { scalar: true }\n * @param lch LCH value\n * @param parsingOptions Options for parsing\n * @returns\n */\nexport declare function fromLibrary<T extends ParsingOptions<OkLch>>(lch: C.LCH, parsingOptions: T): T extends {\n    scalar: true;\n} ? OkLchScalar : OkLchAbsolute;\n/**\n * Parse a HEX-formatted colour into OkLch structured format\n * @param hexString\n * @param options\n * @returns\n */\nexport declare const fromHexString: (hexString: string, options?: ParsingOptions<OkLch>) => OkLch;\n/**\n * Converts from some CSS-representation of colour to a structured OkLch format.\n *\n * ```js\n * fromCss(`yellow`);\n * fromCss(`rgb(100,200,90)`);\n * fromCss(`#ff00ff`);\n * ```\n *\n * By default returns a {@link OkLchScalar} (relative) representation. Use the flag 'scalar:true' to get back\n * {@link OkLchAbsolute}.\n * @param value\n * @param options\n */\nexport declare function fromCss<T extends ParsingOptions<OkLch>>(value: string, options: T): T extends {\n    scalar: true;\n} ? OkLchScalar : OkLchAbsolute;\n/**\n * Returns a string or {@link OkLch} value to absolute form.\n *\n * This means ranges are:\n * * lightness: 0..1\n * * chroma: 0...CHROMA_MAX (0.4)\n * * hue: 0..360\n * @param lchOrString\n * @returns\n */\nexport declare const toAbsolute: (lchOrString: OkLch | string) => OkLchAbsolute;\nexport declare const toScalar: (lchOrString: OkLch | string) => OkLchScalar;\n/**\n * Returns the colour as a CSS colour string: `oklch(l c h / opacity)`.\n *\n * @param lch Colour\n * @param precision Set precision of numbers, defaults to 3\n * @returns CSS colour string\n */\nexport declare const toCssString: (lch: OkLch, precision?: number) => string;\nexport declare const generateScalar: (absoluteHslOrVariable: string | number | Angle, chroma?: number, lightness?: number, opacity?: number) => OkLchScalar;\n/**\n * Scales the opacity value of an input Oklch value\n * ```js\n * withOpacity()\n * ```\n * @param value\n * @param fn\n * @returns\n */\nexport declare const withOpacity: <T extends OkLch>(value: T, fn: (opacityScalar: number, value: T) => number) => T;\nexport declare const interpolator: (a: OkLch | string, b: OkLch | string, direction?: `longer` | `shorter`) => (amount: number) => OkLchScalar;\nexport declare function scalar(lightness?: number, chroma?: number, hue?: number, opacity?: number): OkLchScalar;\n/**\n * Create an LCH colour using absolute hue\n * @param l Lightness 0..1\n * @param c Chroma 0..4\n * @param h Hue 0..360\n * @param opacity\n * @returns\n */\nexport declare const absolute: (l: number, c: number, h: number, opacity?: number) => OkLchAbsolute;\n//# sourceMappingURL=oklch.d.ts.map","import * as C from \"colorizr\";\nimport type { Hsl, ParsingOptions, Rgb, Rgb8Bit, RgbScalar } from \"./types.js\";\nexport declare const withOpacity: <T extends Rgb>(value: T, fn: (opacityScalar: number, value: T) => number) => T;\nexport declare function fromHexString<T extends boolean>(hexString: string, scalar: T): T extends true ? RgbScalar : Rgb8Bit;\nexport declare function fromCss<T extends ParsingOptions<Rgb>>(value: string, options: T): T extends {\n    scalar: true;\n} ? RgbScalar : Rgb8Bit;\nexport declare const toCssString: (rgb: Rgb) => string;\nexport declare const to8bit: (rgbOrString: Rgb | string) => Rgb8Bit;\nexport declare const toScalar: (rgbOrString: Rgb | Hsl | string) => RgbScalar;\nexport declare const guard: (rgb: Rgb) => void;\n/**\n * Sets the lightness value.\n *\n * Amount to change:\n * * 'fixed': a fixed amount\n * * 'delta': increase/decrease by this amount\n * * 'pdelta': proportion of current value to change by ('percentage delta')\n *\n * Use negative values to decrease\n * @param rgb Colour\n * @param amount Amount to change\n */\nexport declare const changeLightness: (rgb: Rgb, amount: Partial<{\n    pdelta: number;\n    delta: number;\n    fixed: number;\n}>) => Rgb;\n/**\n * Returns a lightness value (0..1) for an RGB input\n *\n * Calculates lightness by converting to Oklab and using the 'L' value\n * @param rgb\n * @returns\n */\nexport declare function lightness(rgb: Rgb): number;\n/**\n * Creates a Rgb8Bit value from 8bit (0..255) values\n * @param red\n * @param green\n * @param blue\n * @param opacity\n * @returns\n */\nexport declare function eightBit(red?: number, green?: number, blue?: number, opacity?: number): Rgb8Bit;\n/**\n * Creates a RgbScalar value from scalar (0..1) values\n * @param red\n * @param green\n * @param blue\n * @param opacity\n * @returns\n */\nexport declare function scalar(red?: number, green?: number, blue?: number, opacity?: number): RgbScalar;\n/**\n * It seems Colorizr can't handle % values properly :'(\n * @param value\n */\nexport declare function parseCssRgbFunction(value: string): Rgb;\n/**\n * Interpolates colours in Srgb space. Probably\n * really ugly, use OkLch space isntead.\n *\n * ```js\n * const i = interpolator(`red`, `blue`);\n * i(0.5); // Get 50% between these colours\n * ```\n * @param colourA\n * @param colourB\n * @returns\n */\nexport declare const interpolator: (colourA: Rgb | string, colourB: Rgb | string) => (amount: number) => RgbScalar;\n/**\n * Converts a Rgb structure (or CSS string) to Colorizr's HSL format\n * @param rgb\n * @returns\n */\nexport declare function toLibraryHsl(rgb: Rgb | string): C.HSL;\n//# sourceMappingURL=srgb.d.ts.map","export * from './conversion.js';\nexport * from './css-colours.js';\nexport * from './generate.js';\nexport * from './guards.js';\nexport * from './math.js';\nexport * from './interpolate.js';\nexport * as HslSpace from './hsl.js';\nexport * as OklchSpace from './oklch.js';\nexport * as SrgbSpace from './srgb.js';\nexport * from './types.js';\n//# sourceMappingURL=index.d.ts.map","import { Grids } from '@ixfx/geometry';\nimport type { Rgb, Rgb8Bit } from './colour/types.js';\n/**\n * Returns a {@link https://api.ixfx.fun/_ixfx/geometry/Grids/Grid/} based on the provided `image`\n * @param image ImageData\n * @returns Grid\n */\nexport declare const grid: (image: ImageData) => Grids.Grid;\n/**\n * Returns an object that allows get/set grid semantics on the underlying `image` data.\n * Uses 8-bit sRGB values, meaning 0..255 range for red, green, blue & opacity.\n *\n * ```js\n * // Get CANVAS element, drawing context and then image data\n * const canvasEl = document.querySelector(`#my-canvas`);\n * const ctx = canvasEl.getContext(`2d`);\n * const imageData = ctx.getImageData();\n *\n * // Now that we have image data, we can wrap it:\n * const asGrid = ImageDataGrid.wrap(imageData);\n * asGrid.get({ x:10, y: 20 }); // Get pixel at 10,20\n * asGrid.set(colour, { x:10, y: 20 }); // Set pixel value\n *\n * // Display changes back on the canvas\n * ctx.putImageData(imageData, 0, 0)\n * ```\n * @param image\n * @returns\n */\nexport declare const wrap: (image: ImageData) => Grids.GridWritable<Rgb8Bit> & Grids.GridReadable<Rgb8Bit>;\n/**\n * Returns a function to access pixel values by x,y\n * @param image\n * @returns\n */\nexport declare const accessor: (image: ImageData) => Grids.GridCellAccessor<Rgb8Bit>;\n/**\n * Returns a function that sets pixel values\n * @param image\n * @returns\n */\nexport declare const setter: (image: ImageData) => Grids.GridCellSetter<Rgb>;\n/**\n * Yields pixels of an image row by row\n * @param image\n */\nexport declare function byRow(image: ImageData): Generator<(Rgb8Bit | undefined)[], void, unknown>;\n/**\n * Yields pixels of an image column by column\n * @param image\n */\nexport declare function byColumn(image: ImageData): Generator<Rgb8Bit[], void, unknown>;\n//# sourceMappingURL=image-data-grid.d.ts.map","/**\n * Options\n */\nexport type BipolarViewOptions = Readonly<{\n    width?: number;\n    height?: number;\n    labelPrecision?: number;\n    labels?: [string, string];\n    axisColour?: string;\n    bgColour?: string;\n    whiskerColour?: string;\n    whiskerSize?: number;\n    dotColour?: string;\n    dotRadius?: number;\n    showWhiskers?: boolean;\n    showDot?: boolean;\n    showLabels?: boolean;\n    padding?: number;\n    labelColour?: string;\n    axisWidth?: number;\n    asPercentages?: boolean;\n    /**\n     * If non-zero, will render the last X number of values with increasing opacity.\n     * Default: 0\n     */\n    displayLastValues?: number;\n    /**\n     * If _true_, (default) negative y values are at the bottom.\n     * If _false_  negative y values are at the top.\n     */\n    yAxisBottomNegative?: boolean;\n    /**\n     * Custom rendering for background\n     */\n    renderBackground?: Render;\n}>;\nexport type Render = (ctx: CanvasRenderingContext2D, width: number, height: number) => void;\n/**\n * A function that plots a point on the graph\n */\nexport type BipolarView = (x: number, y: number) => void;\n/**\n * Initialises a plotter for bipolar values (-1...1)\n *\n * ```js\n * const p = BipolarView.init(`#my-canvas`);\n * // Shows the dot at 1, 0.5\n * p(1, 0.5);\n * ```\n * @param elementQuery\n * @param options\n * @returns\n */\nexport declare const init: (elementQuery: string, options?: BipolarViewOptions) => BipolarView;\n//# sourceMappingURL=bipolar-view.d.ts.map","export type TextStyle = {\n    font: string;\n    colour: string;\n    size: string;\n};\nexport type LineStyle = {\n    colour: string;\n    width: number;\n};\nexport type GridStyle = LineStyle & {\n    increments: number;\n    major: number;\n};\nexport type ShowOptions = {\n    axes: boolean;\n    axisValues: boolean;\n    grid: boolean;\n    whiskers: boolean;\n};\nexport type SeriesMeta = {\n    colour: string;\n    lineWidth: number;\n    dotRadius: number;\n};\n//# sourceMappingURL=types.d.ts.map","import type { GridStyle, LineStyle, ShowOptions, TextStyle } from \"./types.js\";\nimport type { Point } from \"@ixfx/geometry/point\";\nexport type PointMinMax = {\n    min: Point;\n    max: Point;\n    width: number;\n    height: number;\n    minDim: number;\n    maxDim: number;\n};\nexport type PlotPoint = Point & {\n    fillStyle?: string;\n    radius?: number;\n};\nexport type CartesianScaler = (pt: Point) => Point;\nexport type CartesianDataRange = {\n    /**\n     * Converts a data value to relative value (0..1)\n     */\n    absDataToRelative: CartesianScaler;\n    /**\n     * Converts a relative value to element-based coordinates\n     * (ie 0,0 is top-left of CANVAS)\n     */\n    relDataToCanvas: CartesianScaler;\n    canvasToRelData: CartesianScaler;\n    /**\n     * Converts canvas coordinate to relative\n     */\n    regionSpaceToRelative: CartesianScaler;\n    /**\n     * Converts relative coordinate to value\n     */\n    relDataToAbs: CartesianScaler;\n    range: PointMinMax;\n};\nexport type CartesianPlotOptions = {\n    clear: `region` | `canvas`;\n    onInvalidated: () => void;\n    /**\n   * Margin around whole plot area. Use\n   * to avoid dots being cut off by edge of canvas\n   */\n    visualPadding: number;\n    show: Partial<ShowOptions>;\n    /**\n     * If 'auto' (default), range of plot is based on data.\n     * Otherwise specify the range, eg:\n     * `{ min: {x:-1,y:-1}, {x:1,y:1}}`\n     *\n     */\n    range: `auto` | {\n        min: Point;\n        max: Point;\n    };\n    /**\n     * Gridline setting\n     */\n    grid: Partial<GridStyle>;\n    /**\n     * Drawing settings for axis (if 'showAxes' is enabled)\n     */\n    axisStyle: LineStyle;\n    /**\n     * How values are drawn. Default: 'dot'\n     */\n    valueStyle: `dot` | ``;\n    /**\n     * How values are connected. Default: '' (no connecting)\n     * Values are connected in order of dataset.\n     */\n    connectStyle: `` | `line`;\n    textStyle: TextStyle;\n    whiskerLength: number;\n};\nexport declare const computeMinMax: (mm: Point[]) => PointMinMax;\nexport declare const relativeCompute: (minMax: PointMinMax) => ((point: Point) => Point) | ((point: Point) => {\n    x: number;\n    y: number;\n});\nexport declare const absoluteCompute: (minMax: PointMinMax) => (point: Point) => {\n    x: number;\n    y: number;\n};\nexport type AxisMark = Point & {\n    major: boolean;\n};\nexport declare const computeAxisMark: (mm: PointMinMax, increments: number, major: number) => {\n    x: AxisMark[];\n    y: AxisMark[];\n};\n//# sourceMappingURL=cartesian.d.ts.map","export declare class DataSet<TValue, TSeriesMeta> {\n    #private;\n    lastChange: any;\n    constructor();\n    get metaCount(): any;\n    clear(): void;\n    set(series: string, data: TValue[]): void;\n    deleteBySeries(series: string): any;\n    setMeta(series: string, meta: TSeriesMeta): void;\n    hasMeta(series: string): any;\n    getMeta(series: string): any;\n    getValues(): Generator<any, void, any>;\n    getEntries(): Generator<any, void, any>;\n    getSeries(): Generator<any, void, any>;\n    add(value: TValue, series?: string): void;\n}\n//# sourceMappingURL=DataSet.d.ts.map","import { DataSet } from \"./DataSet.js\";\nimport * as Cart from './cartesian.js';\nimport type { LineStyle, SeriesMeta, ShowOptions } from \"./types.js\";\nimport type { RecursivePartial } from \"@ixfx/core\";\nimport type { CanvasRegion, CanvasRegionSpec } from \"../canvas-region.js\";\nimport { CanvasSource } from \"../canvas-region.js\";\nimport type { RectPositioned } from \"@ixfx/geometry/rect\";\nimport { Points } from \"@ixfx/geometry\";\nimport type { Line } from \"@ixfx/geometry/line\";\nimport type { Point } from \"@ixfx/geometry/point\";\nexport type InsertOptions = {\n    region?: CanvasRegionSpec;\n    /**\n     * Parent to insert CANVAS element into.\n     * If undefined, it will be added to the body.\n     */\n    parent?: HTMLElement | string;\n    /**\n     * How canvas should be sized\n     */\n    canvasResizeTo: `parent` | `viewport`;\n};\nexport declare const insert: (insertOptions: InsertOptions, options?: RecursivePartial<Cart.CartesianPlotOptions>) => CartesianCanvasPlot;\n/**\n * Simple plotting of cartesian values.\n *\n * Create a plot that fills screen\n * ```js\n * const p = Plot.insert({fill`viewport});\n * const dataSet = p.dataSet;\n *\n * // Add data\n * ds.add({ x: 1, y: 2 });\n *\n * // Draw\n * p.draw();\n * ```\n *\n * Create a plot that fills a container\n * ```js\n * const p = Plot.insert({parent:`#someel`});\n * ```\n *\n * Add data using the created data set\n * ```js\n *\n * // Add a value to the `alpha` series\n * p.dataSet.add({x:1,y:1}, `alpha`);\n * ```\n *\n * Set default series formatting\n * ```js\n * p.setMeta(`default`, {\n *  colour: `hsl(50,100%,50%)`,\n *  lineWidth: 10\n * });\n * ```\n *\n * Series can have metadata associated with it in the DataSet\n * ```js\n * // Use 'pink' by default for the series 'alpha'\n * p.setMeta(`alpha`, { colour: `pink` });\n * ``\n *\n */\nexport declare class CartesianCanvasPlot {\n    #private;\n    actualDataRange: RectPositioned;\n    visibleRange: RectPositioned;\n    show: ShowOptions;\n    whiskerLength: number;\n    axisRounder: (v: number) => number;\n    onInvalidated: undefined | (() => void);\n    /**\n     * List of lines to draw after drawing everything else.\n     * Lines are given in value-coordinate space\n     */\n    overlayLines: (Line & LineStyle)[];\n    constructor(cr: CanvasRegion, data: DataSet<Cart.PlotPoint, SeriesMeta>, options?: RecursivePartial<Cart.CartesianPlotOptions>);\n    getCurrentRange(): Cart.CartesianDataRange;\n    invalidateRange(): void;\n    /**\n     * Positions an element at the viewport location of `data` point.\n     * Ensure the element has `position:absolute` set.\n     * @param data\n     * @param elementToPosition\n     * @param by\n     */\n    positionElementAt(data: Point, elementToPosition: HTMLElement | string, by?: `middle` | `top-left`, relativeToQuery?: HTMLElement | string): void;\n    /**\n     * When range is auto, returns the range of the data\n     * Otherwise returns the user-provided range.\n     * @returns\n     */\n    getDataRange(): Cart.PointMinMax;\n    valueToScreenSpace(dataPoint: Point): {\n        x: number;\n        y: number;\n    };\n    valueToRegionSpace(dataValue: Point, debug?: boolean): {\n        x: number;\n        y: number;\n        z?: number;\n    };\n    /**\n     * Converts a point in pixel coordinates to a value.\n     * Useful for converting from user input coordinates.\n     * @param point\n     * @returns\n     */\n    pointToValue(point: Point, _source: `screen`): Points.Point;\n    getDefaultMeta(): SeriesMeta;\n    draw(): void;\n    /**\n     * Draws a line in value-coordinate space\n     * @param line\n     * @param colour\n     * @param width\n     */\n    drawLine(line: Line, colour: string, width: number): void;\n    setMeta(series: string, meta: Partial<SeriesMeta>): void;\n    get dataSet(): any;\n    get canvasRegion(): CanvasRegion;\n    get canvasSource(): CanvasSource;\n}\n//# sourceMappingURL=cartesian-canvas-plot.d.ts.map","export * as BipolarView from './bipolar-view.js';\nexport * from './cartesian.js';\nexport * from './cartesian-canvas-plot.js';\nexport * from './DataSet.js';\nexport type * from './types.js';\n//# sourceMappingURL=index.d.ts.map","export type Capturer = {\n    start(): void;\n    cancel(): void;\n    readonly canvasEl: HTMLCanvasElement;\n};\nexport type ManualCapturer = {\n    capture(): ImageData;\n    readonly canvasEl: HTMLCanvasElement;\n    dispose(): void;\n};\nexport type CaptureOpts = {\n    /**\n     * Delay between reading frames.\n     * Default: 0, reading as fast as possible\n     */\n    readonly maxIntervalMs?: number;\n    /**\n     * Whether to show the created capture canvas.\n     * Default: false\n     */\n    readonly showCanvas?: boolean;\n    readonly workerScript?: string;\n    readonly onFrame?: (pixels: ImageData) => void;\n};\nexport type ManualCaptureOpts = {\n    /**\n     * If true, the intermediate canvas is shown\n     * The intermediate canvas is where captures from the source are put in order\n     * to get the ImageData\n     */\n    readonly showCanvas?: boolean;\n    /**\n     * If specified, this function will be called after ImageData is captured\n     * from the intermediate canvs. This allows for drawing on top of the\n     * captured image.\n     */\n    readonly postCaptureDraw?: (ctx: CanvasRenderingContext2D, width: number, height: number) => void;\n    /**\n     * If specified, this is the canvas captured to\n     */\n    readonly canvasEl?: HTMLCanvasElement;\n};\n/**\n * Options for frames generator\n */\nexport type FramesOpts = {\n    /**\n     * Max frame rate (millis per frame), or 0 for animation speed\n     */\n    readonly maxIntervalMs?: number;\n    /**\n     * False by default, created canvas will be hidden\n     */\n    readonly showCanvas?: boolean;\n    /**\n     * If provided, this canvas will be used as the buffer rather than creating one.\n     */\n    readonly canvasEl?: HTMLCanvasElement;\n};\n/**\n * Generator that yields frames from a video element as [ImageData](https://developer.mozilla.org/en-US/docs/Web/API/ImageData).\n *\n * ```js\n * import { Video } from '@ixfx/visual.js'\n *\n * const ctx = canvasEl.getContext(`2d`);\n * for await (const frame of Video.frames(videoEl)) {\n *   // TODO: Some processing of pixels\n *\n *   // Draw image on to the visible canvas\n *   ctx.putImageData(frame, 0, 0);\n * }\n * ```\n *\n * Under the hood it creates a hidden canvas where frames are drawn to. This is necessary\n * to read back pixel data. An existing canvas can be used if it is passed in as an option.\n *\n * Options:\n * * `canvasEl`: CANVAS element to use as a buffer (optional)\n * * `maxIntervalMs`: Max frame rate (0 by default, ie runs as fast as possible)\n * * `showCanvas`: Whether buffer canvas will be shown (false by default)\n * @param sourceVideoEl\n * @param opts\n */\nexport declare function frames(sourceVideoEl: HTMLVideoElement, opts?: FramesOpts): AsyncIterable<ImageData>;\n/**\n * Captures frames from a video element. It can send pixel data to a function or post to a worker script.\n *\n * @example Using a function\n * ```js\n * // Capture from a VIDEO element, handling frame data\n * // imageData is ImageData type: https://developer.mozilla.org/en-US/docs/Web/API/ImageData\n * Video.capture(sourceVideoEl, {\n *  onFrame(imageData => {\n *    // Do something with pixels...\n *  });\n * });\n * ```\n *\n * @example Using a worker\n * ```js\n * Video.capture(sourceVideoEl, {\n *  workerScript: `./frameProcessor.js`\n * });\n * ```\n *\n * In frameProcessor.js:\n * ```\n * const process = (frame) => {\n *  // ...process frame\n *\n *  // Send image back?\n *  self.postMessage({frame});\n * };\n *\n * self.addEventListener(`message`, evt => {\n *   const {pixels, width, height} = evt.data;\n *   const frame = new ImageData(new Uint8ClampedArray(pixels),\n *     width, height);\n *\n *   // Process it\n *   process(frame);\n * });\n * ```\n *\n * Options:\n * * `canvasEl`: CANVAS element to use as a buffer (optional)\n * * `maxIntervalMs`: Max frame rate (0 by default, ie runs as fast as possible)\n * * `showCanvas`: Whether buffer canvas will be shown (false by default)\n * * `workerScript`: If this specified, this URL will be loaded as a Worker, and frame data will be automatically posted to it\n *\n * Implementation: frames are captured using a animation-speed loop to a hidden canvas. From there\n * the pixel data is extracted and sent to either destination. In future the intermediate drawing to a\n * canvas could be skipped if it becomes possible to get pixel data from an ImageBitmap.\n * @param sourceVideoEl Source VIDEO element\n * @param opts\n * @returns\n */\nexport declare const capture: (sourceVideoEl: HTMLVideoElement, opts?: CaptureOpts) => Capturer;\nexport declare const manualCapture: (sourceVideoEl: HTMLVideoElement, opts?: ManualCaptureOpts) => ManualCapturer;\n//# sourceMappingURL=video.d.ts.map","export * from './canvas-helper.js';\nexport * from './canvas-region.js';\nexport * from './pointer-visualise.js';\nexport * as Svg from './svg/index.js';\nexport type * from './types.js';\nexport * as Convolve2d from './convolve-2d.js';\nexport * as Colour from './colour/index.js';\nexport * as Drawing from './drawing.js';\n/**\n * Wraps [ImageData](https://developer.mozilla.org/en-US/docs/Web/API/ImageData) as an ixfx {@link https://api.ixfx.fun/_ixfx/geometry/Grids/Grid/} type.\n * This is useful because it's otherwise a one-dimensional array listing each rgba in turn.\n */\nexport * as ImageDataGrid from './image-data-grid.js';\nexport * as Plot from './plot/index.js';\n/**\n * Working with video, either playback from a file or stream from a video camera.\n *\n * Overview\n * * {@link frames}: Yields frames from a video camera\n * * {@link capture}: Capture frames from a VIDEO element\n *\n * @example Importing\n * ```js\n * // If library is stored two directories up under `ixfx/`\n * import {Video} from '../../ixfx/dist/visual.js';\n * // Import from web\n * import {Video} from '@ixfx/visual.js'\n * ```\n */\nexport * as Video from './video.js';\n//# sourceMappingURL=index.d.ts.map"],"mappings":"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,EkBrBL,QlBqBK,EAAA,MAAA,EkBrB0CC,alBqB1C,CkBrBwDP,OlBqBxD,CAAA,EAAA,MAAA,EkBrBkG,YlBqBlG,CkBrB6FF,KlBqB7F,CAAA,EAAA,MAAA,EkBrB6GM,YlBqB7G,CkBrB0HN,KlBqB1H,EkBrBiIE,OlBqBjI,CAAA,CAAA,EkBrB4IF,KlBqB5I,GAAA,SAAA;AAOzC;AAOA;AAMA;AASA;;AAAkByI,iBkB5CM9H,aAAAA,ClB4CN8H,MAAAA,EkB5C4B5I,MlB4C5B4I,CAAAA,MAAAA,CAAAA,EAAAA,KAAAA,EkB5CmD8F,SlB4CnD9F,CAAAA,EkB5C+DmE,SlB4C/DnE,CkB5CuG,gBlB4CvGA,CkB5CgGuB,OlB4ChGvB,CAAAA,EAAAA,IAAAA,EAAAA,GAAAA,CAAAA;AAAYuB,iBkB3CNlJ,QlB2CMkJ,CAAAA,KAAAA,EAAAA,OAAAA,CAAAA,CAAAA,MAAAA,EkB3C2BnK,MlB2C3BmK,CkB3CkC9J,OlB2ClC8J,CAAAA,EAAAA,MAAAA,EkB3C4E,YlB2C5EA,CkB3CuEhK,KlB2CvEgK,CAAAA,EAAAA,OAAAA,EkB3CwFjJ,QlB2CxFiJ,CkB3CsE,QlB2CtEA,CAAAA,EAAAA,MAAAA,EkB3C0H1J,YlB2C1H0J,CkB3CuIhK,KlB2CvIgK,EkB3C8I9J,OlB2C9I8J,CAAAA,EAAAA,MAAAA,CAAAA,EkB3CsI,QlB2CtIA,CAAAA,EkB3CkLhJ,gBlB2ClLgJ,CkB3C+N,gBlB2C/NA,CkB3C0NhK,KlB2C1NgK,CAAAA,CAAAA;AAAO,KkB1CzBvJ,alB0CyB,CAAA,CAAA,CAAA,GkB1CkB,gBlB0ClB,CkB1CiBkI,ClB0CjB,CAAA,EAAA;AACrC;AAmBA;;;;AAAwE;AACxE;AAMY1B,ckB7DShG,elB6DKtO,EAAAA,CAAAA,CAAS,CAAA,CAAA,MAAA,EkB7DekN,MlB6Df,CkB7DsB8I,ClB6DtB,CAAA,EAAA,MAAA,CAAA,EkB7DqB,QlB6DrB,EAAA,GkB7DsDlI,alB6DtD,CkB7DoEkI,ClB6DpE,CAAA;AAUvB3B,ckBtES9F,UlBsEI,EkBtEQZ,YlBsEI,CkBtES0J,OlBsET,EAAA,MA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"}