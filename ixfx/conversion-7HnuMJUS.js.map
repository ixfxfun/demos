{"version":3,"file":"conversion-7HnuMJUS.js","names":["withOpacity","fromHexString","fromLibrary","fromCss","rgbToLibraryHsl","toScalar","toCssString","abs","scalar","absolute","guard","opacity","vf","guard","opacity","fromLibrary","scalar","fromHexString","fromCss","rgbTo8bit","lch","Colorizr","toCssString","withOpacity","chroma","fromCss","scalar","hslToLibraryRgb","guard","opacity"],"sources":["../../../node_modules/.pnpm/colorizr@3.0.7/node_modules/colorizr/dist/index.mjs","../../visual/dist/src/colour/guards.js","../../visual/dist/src/colour/hsl.js","../../visual/dist/src/colour/oklch.js","../../visual/dist/src/colour/css-colours.js","../../visual/dist/src/colour/srgb.js","../../visual/dist/src/colour/conversion.js"],"sourcesContent":["var __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __export = (target, all) => {\n  for (var name2 in all)\n    __defProp(target, name2, { get: all[name2], enumerable: true });\n};\nvar __publicField = (obj, key, value) => __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n\n// src/modules/invariant.ts\nfunction invariant(condition, message) {\n  if (condition) {\n    return;\n  }\n  if (process.env.NODE_ENV !== \"production\") {\n    if (message === void 0) {\n      throw new Error(\"invariant requires an error message argument\");\n    }\n  }\n  const error = !message ? new Error(\n    \"Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.\"\n  ) : new Error(message);\n  error.name = \"colorizr\";\n  throw error;\n}\n\n// src/modules/constants.ts\nvar COLOR_KEYS = {\n  hsl: [\"h\", \"s\", \"l\"],\n  oklab: [\"l\", \"a\", \"b\"],\n  oklch: [\"l\", \"c\", \"h\"],\n  rgb: [\"r\", \"g\", \"b\"]\n};\nvar COLOR_MODELS = [\"hsl\", \"oklab\", \"oklch\", \"rgb\"];\nvar DEG2RAD = Math.PI / 180;\nvar LAB_TO_LMS = {\n  l: [0.3963377773761749, 0.2158037573099136],\n  m: [-0.1055613458156586, -0.0638541728258133],\n  s: [-0.0894841775298119, -1.2914855480194092]\n};\nvar LRGB_TO_LMS = {\n  l: [0.4122214708, 0.5363325363, 0.0514459929],\n  m: [0.2119034982, 0.6806995451, 0.1073969566],\n  s: [0.0883024619, 0.2817188376, 0.6299787005]\n};\nvar LSM_TO_LAB = {\n  l: [0.2104542553, 0.793617785, 0.0040720468],\n  a: [1.9779984951, 2.428592205, 0.4505937099],\n  b: [0.0259040371, 0.7827717662, 0.808675766]\n};\nvar LSM_TO_RGB = {\n  r: [4.076741636075958, -3.307711539258063, 0.2309699031821043],\n  g: [-1.2684379732850315, 2.609757349287688, -0.341319376002657],\n  b: [-0.0041960761386756, -0.7034186179359362, 1.7076146940746117]\n};\nvar SRGB_TO_P3 = [\n  [0.8224270476, 0.1775729524, 0],\n  [0.0331008087, 0.9668991913, 0],\n  [0.0170720188, 0.0723477973, 0.9105801839]\n];\nvar PRECISION = 5;\nvar RAD2DEG = 180 / Math.PI;\nvar MESSAGES = {\n  alpha: \"amount must be a number between 0 and 1\",\n  hueRange: \"hue must be a number between 0 and 360\",\n  input: \"input is required\",\n  inputHex: \"input is required and must be a hex\",\n  inputNumber: \"input is required and must be a number\",\n  inputString: \"input is required and must be a string\",\n  invalid: \"invalid input\",\n  invalidCSS: \"invalid CSS string\",\n  left: \"left is required and must be a string\",\n  lightnessRange: \"lightness must be a number between 0 and 1\",\n  options: \"invalid options\",\n  right: \"right is required and must be a string\",\n  threshold: \"threshold must be a number between 0 and 255\"\n};\n\n// src/modules/css-colors.ts\nvar cssColors = {\n  aliceblue: \"#f0f8ff\",\n  antiquewhite: \"#faebd7\",\n  aqua: \"#00ffff\",\n  aquamarine: \"#7fffd4\",\n  azure: \"#f0ffff\",\n  beige: \"#f5f5dc\",\n  bisque: \"#ffe4c4\",\n  black: \"#000000\",\n  blanchedalmond: \"#ffebcd\",\n  blue: \"#0000ff\",\n  blueviolet: \"#8a2be2\",\n  brown: \"#a52a2a\",\n  burlywood: \"#deb887\",\n  cadetblue: \"#5f9ea0\",\n  chartreuse: \"#7fff00\",\n  chocolate: \"#d2691e\",\n  coral: \"#ff7f50\",\n  cornflowerblue: \"#6495ed\",\n  cornsilk: \"#fff8dc\",\n  crimson: \"#dc143c\",\n  cyan: \"#00ffff\",\n  darkblue: \"#00008b\",\n  darkcyan: \"#008b8b\",\n  darkgoldenrod: \"#b8860b\",\n  darkgray: \"#a9a9a9\",\n  darkgreen: \"#006400\",\n  darkkhaki: \"#bdb76b\",\n  darkmagenta: \"#8b008b\",\n  darkolivegreen: \"#556b2f\",\n  darkorange: \"#ff8c00\",\n  darkorchid: \"#9932cc\",\n  darkred: \"#8b0000\",\n  darksalmon: \"#e9967a\",\n  darkseagreen: \"#8fbc8f\",\n  darkslateblue: \"#483d8b\",\n  darkslategray: \"#2f4f4f\",\n  darkslategrey: \"#2f4f4f\",\n  darkturquoise: \"#00ced1\",\n  darkviolet: \"#9400d3\",\n  deeppink: \"#ff1493\",\n  deepskyblue: \"#00bfff\",\n  dimgray: \"#696969\",\n  dimgrey: \"#696969\",\n  dodgerblue: \"#1e90ff\",\n  firebrick: \"#b22222\",\n  floralwhite: \"#fffaf0\",\n  forestgreen: \"#228b22\",\n  fuchsia: \"#ff00ff\",\n  gainsboro: \"#dcdcdc\",\n  ghostwhite: \"#f8f8ff\",\n  gold: \"#ffd700\",\n  goldenrod: \"#daa520\",\n  gray: \"#808080\",\n  grey: \"#808080\",\n  green: \"#008000\",\n  greenyellow: \"#adff2f\",\n  honeydew: \"#f0fff0\",\n  hotpink: \"#ff69b4\",\n  indianred: \"#cd5c5c\",\n  indigo: \"#4b0082\",\n  ivory: \"#fffff0\",\n  khaki: \"#f0e68c\",\n  lavender: \"#e6e6fa\",\n  lavenderblush: \"#fff0f5\",\n  lawngreen: \"#7cfc00\",\n  lemonchiffon: \"#fffacd\",\n  lightblue: \"#add8e6\",\n  lightcoral: \"#f08080\",\n  lightcyan: \"#e0ffff\",\n  lightgoldenrodyellow: \"#fafad2\",\n  lightgray: \"#d3d3d3\",\n  lightgreen: \"#90ee90\",\n  lightgrey: \"#d3d3d3\",\n  lightpink: \"#ffb6c1\",\n  lightsalmon: \"#ffa07a\",\n  lightseagreen: \"#20b2aa\",\n  lightskyblue: \"#87cefa\",\n  lightslategray: \"#778899\",\n  lightslategrey: \"#778899\",\n  lightsteelblue: \"#b0c4de\",\n  lightyellow: \"#ffffe0\",\n  lime: \"#00ff00\",\n  limegreen: \"#32cd32\",\n  linen: \"#faf0e6\",\n  magenta: \"#ff00ff\",\n  maroon: \"#800000\",\n  mediumaquamarine: \"#66cdaa\",\n  mediumblue: \"#0000cd\",\n  mediumorchid: \"#ba55d3\",\n  mediumpurple: \"#9370db\",\n  mediumseagreen: \"#3cb371\",\n  mediumslateblue: \"#7b68ee\",\n  mediumspringgreen: \"#00fa9a\",\n  mediumturquoise: \"#48d1cc\",\n  mediumvioletred: \"#c71585\",\n  midnightblue: \"#191970\",\n  mintcream: \"#f5fffa\",\n  mistyrose: \"#ffe4e1\",\n  moccasin: \"#ffe4b5\",\n  navajowhite: \"#ffdead\",\n  navy: \"#000080\",\n  oldlace: \"#fdf5e6\",\n  olive: \"#808000\",\n  olivedrab: \"#6b8e23\",\n  orange: \"#ffa500\",\n  orangered: \"#ff4500\",\n  orchid: \"#da70d6\",\n  palegoldenrod: \"#eee8aa\",\n  palegreen: \"#98fb98\",\n  paleturquoise: \"#afeeee\",\n  palevioletred: \"#db7093\",\n  papayawhip: \"#ffefd5\",\n  peachpuff: \"#ffdab9\",\n  peru: \"#cd853f\",\n  pink: \"#ffc0cb\",\n  plum: \"#dda0dd\",\n  powderblue: \"#b0e0e6\",\n  purple: \"#800080\",\n  rebeccapurple: \"#663399\",\n  red: \"#ff0000\",\n  rosybrown: \"#bc8f8f\",\n  royalblue: \"#4169e1\",\n  saddlebrown: \"#8b4513\",\n  salmon: \"#fa8072\",\n  sandybrown: \"#f4a460\",\n  seagreen: \"#2e8b57\",\n  seashell: \"#fff5ee\",\n  sienna: \"#a0522d\",\n  silver: \"#c0c0c0\",\n  skyblue: \"#87ceeb\",\n  slateblue: \"#6a5acd\",\n  slategray: \"#708090\",\n  slategrey: \"#708090\",\n  snow: \"#fffafa\",\n  springgreen: \"#00ff7f\",\n  steelblue: \"#4682b4\",\n  tan: \"#d2b48c\",\n  teal: \"#008080\",\n  thistle: \"#d8bfd8\",\n  tomato: \"#ff6347\",\n  turquoise: \"#40e0d0\",\n  violet: \"#ee82ee\",\n  wheat: \"#f5deb3\",\n  white: \"#ffffff\",\n  whitesmoke: \"#f5f5f5\",\n  yellow: \"#ffff00\",\n  yellowgreen: \"#9acd32\"\n};\n\n// src/modules/validators.ts\nfunction hasValidMatches(input) {\n  return Array.isArray(input) && input.length === 6;\n}\nfunction isNamedColor(input) {\n  return isString(input) && Object.keys(cssColors).includes(input.toLowerCase());\n}\nfunction isNumber(input) {\n  return typeof input === \"number\" && !Number.isNaN(input);\n}\nfunction isPlainObject(input) {\n  if (!input) {\n    return false;\n  }\n  const { toString } = Object.prototype;\n  const prototype = Object.getPrototypeOf(input);\n  return toString.call(input) === \"[object Object]\" && (prototype === null || prototype === Object.getPrototypeOf({}));\n}\nfunction isString(input, validate = true) {\n  const isValid = typeof input === \"string\";\n  if (validate) {\n    return isValid && !!input.trim().length;\n  }\n  return isValid;\n}\nfunction isValidColorModel(input) {\n  return isHSL(input) || isRGB(input) || isLAB(input) || isLCH(input);\n}\nfunction isHex(input) {\n  if (!isString(input)) {\n    return false;\n  }\n  return /^#([\\da-f]{3,4}|[\\da-f]{6,8})$/i.test(input);\n}\nfunction isHSL(input) {\n  if (!isPlainObject(input)) {\n    return false;\n  }\n  const entries = Object.entries(input);\n  return !!entries.length && entries.every(([key, value]) => {\n    if (key === \"h\") {\n      return value >= 0 && value <= 360;\n    }\n    if (key === \"alpha\") {\n      return value >= 0 && value <= 1;\n    }\n    return COLOR_KEYS.hsl.includes(key) && value >= 0 && value <= 100;\n  });\n}\nfunction isLAB(input) {\n  if (!isPlainObject(input)) {\n    return false;\n  }\n  const entries = Object.entries(input);\n  return !!entries.length && entries.every(([key, value]) => {\n    if (key === \"l\") {\n      return value >= 0 && value <= 100;\n    }\n    if (key === \"alpha\") {\n      return value >= 0 && value <= 1;\n    }\n    return COLOR_KEYS.oklab.includes(key) && value >= -1 && value <= 1;\n  });\n}\nfunction isLCH(input) {\n  if (!isPlainObject(input)) {\n    return false;\n  }\n  const entries = Object.entries(input);\n  return !!entries.length && entries.every(([key, value]) => {\n    if (key === \"l\") {\n      return value >= 0 && value <= 100;\n    }\n    if (key === \"alpha\") {\n      return value >= 0 && value <= 1;\n    }\n    return COLOR_KEYS.oklch.includes(key) && value >= 0 && value <= (key === \"h\" ? 360 : 1);\n  });\n}\nfunction isRGB(input) {\n  if (!isPlainObject(input)) {\n    return false;\n  }\n  const entries = Object.entries(input);\n  return !!entries.length && entries.every(([key, value]) => {\n    if (key === \"alpha\") {\n      return value >= 0 && value <= 1;\n    }\n    return COLOR_KEYS.rgb.includes(key) && value >= 0 && value <= 255;\n  });\n}\n\n// src/modules/utils.ts\nfunction addAlpha(input, alpha) {\n  invariant(isValidColorModel(input), MESSAGES.invalid);\n  let value = alpha;\n  if (!value) {\n    return input;\n  }\n  if (value > 1) {\n    value /= 100;\n  }\n  if (value === 1) {\n    return input;\n  }\n  return { ...input, alpha: value };\n}\nfunction clamp(value, min = 0, max = 100) {\n  return Math.min(Math.max(value, min), max);\n}\nfunction constrainDegrees(input, amount) {\n  invariant(isNumber(input), MESSAGES.inputNumber);\n  let value = input + amount;\n  if (value > 360) {\n    value %= 360;\n  }\n  if (value < 0) {\n    value += 360;\n  }\n  return Math.abs(value);\n}\nfunction limit(input, model, key) {\n  invariant(isNumber(input), \"Input is not a number\");\n  invariant(COLOR_MODELS.includes(model), `Invalid model${model ? `: ${model}` : \"\"}`);\n  invariant(COLOR_KEYS[model].includes(key), `Invalid key${key ? `: ${key}` : \"\"}`);\n  switch (model) {\n    case \"hsl\": {\n      invariant(COLOR_KEYS.hsl.includes(key), \"Invalid key\");\n      if ([\"s\", \"l\"].includes(key)) {\n        return clamp(input);\n      }\n      return clamp(input, 0, 360);\n    }\n    case \"rgb\": {\n      invariant(COLOR_KEYS.rgb.includes(key), \"Invalid key\");\n      return clamp(input, 0, 255);\n    }\n    /* c8 ignore next 3 */\n    default: {\n      throw new Error(\"Invalid inputs\");\n    }\n  }\n}\nfunction parseInput(input, model) {\n  const keys = COLOR_KEYS[model];\n  const validator = {\n    hsl: isHSL,\n    oklab: isLAB,\n    oklch: isLCH,\n    rgb: isRGB\n  };\n  invariant(isPlainObject(input) || Array.isArray(input), MESSAGES.invalid);\n  const value = Array.isArray(input) ? { [keys[0]]: input[0], [keys[1]]: input[1], [keys[2]]: input[2] } : input;\n  invariant(validator[model](value), `invalid ${model} color`);\n  return value;\n}\nfunction restrictValues(input, precision = PRECISION, forcePrecision = true) {\n  const output = new Map(Object.entries(input));\n  for (const [key, value] of output.entries()) {\n    output.set(key, round(value, precision, forcePrecision));\n  }\n  return Object.fromEntries(output);\n}\nfunction round(input, precision = 2, forcePrecision = true) {\n  if (!isNumber(input) || input === 0) {\n    return 0;\n  }\n  if (forcePrecision) {\n    const factor2 = 10 ** precision;\n    return Math.round(input * factor2) / factor2;\n  }\n  const absInput = Math.abs(input);\n  let digits = Math.abs(Math.ceil(Math.log(absInput) / Math.LN10));\n  if (digits === 0) {\n    digits = 2;\n  } else if (digits > precision) {\n    digits = precision;\n  }\n  let exponent = precision - (digits < 0 ? 0 : digits);\n  if (exponent <= 1 && precision > 1) {\n    exponent = 2;\n  } else if (exponent > precision || exponent === 0) {\n    exponent = precision;\n  }\n  const factor = 10 ** exponent;\n  return Math.round(input * factor) / factor;\n}\n\n// src/modules/hex-utils.ts\nfunction addAlphaToHex(input, alpha) {\n  invariant(isHex(input), MESSAGES.inputHex);\n  invariant(isNumber(alpha), MESSAGES.inputNumber);\n  if (alpha >= 1) {\n    return removeAlphaFromHex(input);\n  }\n  return `${removeAlphaFromHex(input)}${convertAlphaToHex(alpha)}`;\n}\nfunction convertAlphaToHex(input) {\n  invariant(isNumber(input), MESSAGES.inputNumber);\n  let alpha = input;\n  if (input > 1) {\n    alpha /= 100;\n  }\n  return Math.round(alpha * 255).toString(16).padStart(2, \"0\");\n}\nfunction extractAlphaFromHex(input) {\n  invariant(isHex(input), MESSAGES.inputString);\n  const alpha = input.substring(7, 9);\n  if (!alpha) {\n    return 1;\n  }\n  return round(parseInt(alpha, 16) / 255);\n}\nfunction hexadecimalToNumber(input) {\n  return round(parseInt(input, 16));\n}\nfunction removeAlphaFromHex(input) {\n  invariant(isHex(input), MESSAGES.inputHex);\n  if (input.length === 5) {\n    return input.substring(0, 4);\n  }\n  return input.substring(0, 7);\n}\n\n// src/converters/index.ts\nvar converters_exports = {};\n__export(converters_exports, {\n  hex2hsl: () => hex2hsl,\n  hex2oklab: () => hex2oklab,\n  hex2oklch: () => hex2oklch,\n  hex2rgb: () => hex2rgb,\n  hsl2hex: () => hsl2hex,\n  hsl2oklab: () => hsl2oklab,\n  hsl2oklch: () => hsl2oklch,\n  hsl2rgb: () => hsl2rgb,\n  oklab2hex: () => oklab2hex,\n  oklab2hsl: () => oklab2hsl,\n  oklab2oklch: () => oklab2oklch,\n  oklab2rgb: () => oklab2rgb,\n  oklch2hex: () => oklch2hex,\n  oklch2hsl: () => oklch2hsl,\n  oklch2oklab: () => oklch2oklab,\n  oklch2rgb: () => oklch2rgb,\n  rgb2hex: () => rgb2hex,\n  rgb2hsl: () => rgb2hsl,\n  rgb2oklab: () => rgb2oklab,\n  rgb2oklch: () => rgb2oklch\n});\n\n// src/format-hex.ts\nfunction formatHex(input) {\n  invariant(isHex(input), MESSAGES.inputHex);\n  let color = input.replace(\"#\", \"\");\n  if (color.length === 3 || color.length === 4) {\n    const values = [...color];\n    color = \"\";\n    values.forEach((d) => {\n      color += `${d}${d}`;\n    });\n  }\n  const hex = `#${color}`;\n  invariant(isHex(hex), \"invalid hex\");\n  return hex;\n}\n\n// src/converters/hex2rgb.ts\nfunction hex2rgb(input) {\n  invariant(isHex(input), MESSAGES.inputHex);\n  const hex = formatHex(input).slice(1);\n  return {\n    r: parseInt(hex.charAt(0) + hex.charAt(1), 16),\n    g: parseInt(hex.charAt(2) + hex.charAt(3), 16),\n    b: parseInt(hex.charAt(4) + hex.charAt(5), 16)\n  };\n}\n\n// src/converters/rgb2hsl.ts\nfunction rgb2hsl(input) {\n  const value = parseInput(input, \"rgb\");\n  const rLimit = limit(value.r, \"rgb\", \"r\") / 255;\n  const gLimit = limit(value.g, \"rgb\", \"g\") / 255;\n  const bLimit = limit(value.b, \"rgb\", \"b\") / 255;\n  const min = Math.min(rLimit, gLimit, bLimit);\n  const max = Math.max(rLimit, gLimit, bLimit);\n  const delta = max - min;\n  let h = 0;\n  let s;\n  const l = (max + min) / 2;\n  let rate;\n  switch (max) {\n    case rLimit:\n      rate = !delta ? 0 : (gLimit - bLimit) / delta;\n      h = 60 * rate;\n      break;\n    case gLimit:\n      rate = (bLimit - rLimit) / delta;\n      h = 60 * rate + 120;\n      break;\n    case bLimit:\n      rate = (rLimit - gLimit) / delta;\n      h = 60 * rate + 240;\n      break;\n    /* c8 ignore next 2 */\n    default:\n      break;\n  }\n  if (h < 0) {\n    h = 360 + h;\n  }\n  if (min === max) {\n    s = 0;\n  } else {\n    s = l < 0.5 ? delta / (2 * l) : delta / (2 - 2 * l);\n  }\n  return {\n    h: Math.abs(+(h % 360).toFixed(2)),\n    s: +(s * 100).toFixed(2),\n    l: +(l * 100).toFixed(2)\n  };\n}\n\n// src/converters/hex2hsl.ts\nfunction hex2hsl(input) {\n  invariant(isHex(input), MESSAGES.inputHex);\n  return rgb2hsl(hex2rgb(input));\n}\n\n// src/converters/rgb2oklab.ts\nvar { cbrt, sign } = Math;\nfunction rgb2lrgb(input) {\n  const abs2 = Math.abs(input);\n  if (abs2 < 0.04045) {\n    return input / 12.92;\n  }\n  return (sign(input) || 1) * ((abs2 + 0.055) / 1.055) ** 2.4;\n}\nfunction rgb2oklab(input, precision = PRECISION) {\n  const value = parseInput(input, \"rgb\");\n  const [lr, lg, lb] = [rgb2lrgb(value.r / 255), rgb2lrgb(value.g / 255), rgb2lrgb(value.b / 255)];\n  const l = cbrt(LRGB_TO_LMS.l[0] * lr + LRGB_TO_LMS.l[1] * lg + LRGB_TO_LMS.l[2] * lb);\n  const m = cbrt(LRGB_TO_LMS.m[0] * lr + LRGB_TO_LMS.m[1] * lg + LRGB_TO_LMS.m[2] * lb);\n  const s = cbrt(LRGB_TO_LMS.s[0] * lr + LRGB_TO_LMS.s[1] * lg + LRGB_TO_LMS.s[2] * lb);\n  const lab = {\n    l: LSM_TO_LAB.l[0] * l + LSM_TO_LAB.l[1] * m - LSM_TO_LAB.l[2] * s,\n    a: LSM_TO_LAB.a[0] * l - LSM_TO_LAB.a[1] * m + LSM_TO_LAB.a[2] * s,\n    b: LSM_TO_LAB.b[0] * l + LSM_TO_LAB.b[1] * m - LSM_TO_LAB.b[2] * s\n  };\n  return restrictValues(lab, precision);\n}\n\n// src/converters/hex2oklab.ts\nfunction hex2oklab(input, precision) {\n  invariant(isHex(input), MESSAGES.inputHex);\n  return rgb2oklab(hex2rgb(input), precision);\n}\n\n// src/converters/oklab2oklch.ts\nvar { atan2, sqrt } = Math;\nfunction oklab2oklch(input, precision) {\n  const { l, a, b } = restrictValues(parseInput(input, \"oklab\"));\n  const c = sqrt(a ** 2 + b ** 2);\n  let h = (atan2(b, a) * RAD2DEG + 360) % 360;\n  if (round(c * 1e4) === 0) {\n    h = 0;\n  }\n  return restrictValues({ l, c, h }, precision);\n}\n\n// src/converters/rgb2oklch.ts\nfunction rgb2oklch(input, precision) {\n  const value = parseInput(input, \"rgb\");\n  return oklab2oklch(rgb2oklab(value, precision), precision);\n}\n\n// src/converters/hex2oklch.ts\nfunction hex2oklch(input, precision) {\n  invariant(isHex(input), MESSAGES.inputHex);\n  return rgb2oklch(hex2rgb(input), precision);\n}\n\n// src/modules/hue2rgb.ts\nfunction hue2rgb(point, chroma2, h) {\n  invariant(isNumber(point) && isNumber(chroma2) && isNumber(h), \"point, chroma and h are required\");\n  let hue = h;\n  if (hue < 0) {\n    hue += 1;\n  }\n  if (hue > 1) {\n    hue -= 1;\n  }\n  if (hue < 1 / 6) {\n    return round(point + (chroma2 - point) * 6 * hue, 4);\n  }\n  if (hue < 1 / 2) {\n    return round(chroma2, 4);\n  }\n  if (hue < 2 / 3) {\n    return round(point + (chroma2 - point) * (2 / 3 - hue) * 6, 4);\n  }\n  return round(point, 4);\n}\n\n// src/converters/hsl2rgb.ts\nfunction hsl2rgb(input) {\n  const value = parseInput(input, \"hsl\");\n  const h = round(value.h) / 360;\n  const s = round(value.s) / 100;\n  const l = round(value.l) / 100;\n  let r;\n  let g;\n  let b;\n  let point;\n  let chroma2;\n  if (s === 0) {\n    r = l;\n    g = l;\n    b = l;\n  } else {\n    chroma2 = l < 0.5 ? l * (1 + s) : l + s - l * s;\n    point = 2 * l - chroma2;\n    r = hue2rgb(point, chroma2, h + 1 / 3);\n    g = hue2rgb(point, chroma2, h);\n    b = hue2rgb(point, chroma2, h - 1 / 3);\n  }\n  return {\n    r: Math.round(r * 255),\n    g: Math.round(g * 255),\n    b: Math.round(b * 255)\n  };\n}\n\n// src/converters/rgb2hex.ts\nfunction rgb2hex(input) {\n  const rgb = parseInput(input, \"rgb\");\n  return `#${Object.values(rgb).map((d) => `0${Math.floor(d).toString(16)}`.slice(-2)).join(\"\")}`;\n}\n\n// src/converters/hsl2hex.ts\nfunction hsl2hex(input) {\n  const value = parseInput(input, \"hsl\");\n  return rgb2hex(hsl2rgb(value));\n}\n\n// src/converters/hsl2oklab.ts\nfunction hsl2oklab(input, precision) {\n  const value = parseInput(input, \"hsl\");\n  return rgb2oklab(hsl2rgb(value), precision);\n}\n\n// src/converters/hsl2oklch.ts\nfunction hsl2oklch(input, precision) {\n  const value = parseInput(input, \"hsl\");\n  return rgb2oklch(hsl2rgb(value), precision);\n}\n\n// src/converters/oklab2rgb.ts\nvar { abs } = Math;\nfunction lrgb2rgb(input) {\n  const absoluteNumber = abs(input);\n  const sign2 = input < 0 ? -1 : 1;\n  if (absoluteNumber > 31308e-7) {\n    return sign2 * (absoluteNumber ** (1 / 2.4) * 1.055 - 0.055);\n  }\n  return input * 12.92;\n}\nfunction oklab2rgb(input, precision = 0) {\n  const { l: L, a: A, b: B } = parseInput(input, \"oklab\");\n  const l = (L + LAB_TO_LMS.l[0] * A + LAB_TO_LMS.l[1] * B) ** 3;\n  const m = (L + LAB_TO_LMS.m[0] * A + LAB_TO_LMS.m[1] * B) ** 3;\n  const s = (L + LAB_TO_LMS.s[0] * A + LAB_TO_LMS.s[1] * B) ** 3;\n  const r = 255 * lrgb2rgb(LSM_TO_RGB.r[0] * l + LSM_TO_RGB.r[1] * m + LSM_TO_RGB.r[2] * s);\n  const g = 255 * lrgb2rgb(LSM_TO_RGB.g[0] * l + LSM_TO_RGB.g[1] * m + LSM_TO_RGB.g[2] * s);\n  const b = 255 * lrgb2rgb(LSM_TO_RGB.b[0] * l + LSM_TO_RGB.b[1] * m + LSM_TO_RGB.b[2] * s);\n  return {\n    r: clamp(round(r, precision), 0, 255),\n    g: clamp(round(g, precision), 0, 255),\n    b: clamp(round(b, precision), 0, 255)\n  };\n}\n\n// src/converters/oklab2hex.ts\nfunction oklab2hex(input) {\n  const value = parseInput(input, \"oklab\");\n  return rgb2hex(oklab2rgb(value));\n}\n\n// src/converters/oklab2hsl.ts\nfunction oklab2hsl(input) {\n  const value = parseInput(input, \"oklab\");\n  return rgb2hsl(oklab2rgb(value));\n}\n\n// src/converters/oklch2oklab.ts\nvar { sin, cos } = Math;\nfunction oklch2oklab(input, precision) {\n  let { l, c, h } = parseInput(input, \"oklch\");\n  if (Number.isNaN(h) || h < 0) {\n    h = 0;\n  }\n  return restrictValues({ l, a: c * cos(h * DEG2RAD), b: c * sin(h * DEG2RAD) }, precision);\n}\n\n// src/converters/oklch2rgb.ts\nfunction oklch2rgb(input, precision = 0) {\n  const value = parseInput(input, \"oklch\");\n  return oklab2rgb(oklch2oklab(value), precision);\n}\n\n// src/converters/oklch2hex.ts\nfunction oklch2hex(input) {\n  const value = parseInput(input, \"oklch\");\n  return rgb2hex(oklch2rgb(value));\n}\n\n// src/converters/oklch2hsl.ts\nfunction oklch2hsl(input) {\n  const value = parseInput(input, \"oklch\");\n  return rgb2hsl(oklch2rgb(value));\n}\n\n// src/extract-color-parts.ts\nfunction extractColorParts(input) {\n  invariant(isString(input), MESSAGES.inputString);\n  if (isHex(input)) {\n    const keys2 = COLOR_KEYS.rgb;\n    const { r, g, b } = hex2rgb(input);\n    const alpha2 = extractAlphaFromHex(input);\n    return {\n      model: \"rgb\",\n      [keys2[0]]: r,\n      [keys2[1]]: g,\n      [keys2[2]]: b,\n      alpha: alpha2 < 1 ? alpha2 : void 0\n    };\n  }\n  const colorRegex = /(?:(rgb|hsl|oklab|oklch)a?\\s*\\(\\s*([\\d%.-]+)\\s*[ ,/]\\s*([\\d%.-]+)\\s*[ ,/]\\s*([\\d%.-]+)(?:\\s*[ ,/]\\s*([\\d%.-]+))?\\s*\\))/i;\n  const matches = colorRegex.exec(input);\n  invariant(hasValidMatches(matches), MESSAGES.invalidCSS);\n  const model = matches[1];\n  const keys = COLOR_KEYS[model];\n  let alpha = matches[5] ? parseFloat(matches[5]) : 1;\n  if (alpha > 1) {\n    alpha /= 100;\n  }\n  return {\n    model,\n    [keys[0]]: parseFloat(matches[2]),\n    [keys[1]]: parseFloat(matches[3]),\n    [keys[2]]: parseFloat(matches[4]),\n    alpha: alpha < 1 ? alpha : void 0\n  };\n}\n\n// src/parse-css.ts\nfunction parseCSS(input, format) {\n  invariant(isString(input), MESSAGES.inputString);\n  let result;\n  const value = isNamedColor(input) ? cssColors[input.toLowerCase()] : input;\n  const output = format ?? (isHex(value) ? \"hex\" : extractColorParts(value).model);\n  const colorParams = (params) => Object.values(params);\n  if (isHex(value)) {\n    const alpha = extractAlphaFromHex(value);\n    switch (output) {\n      case \"hsl\": {\n        result = addAlpha(hex2hsl(value), alpha);\n        break;\n      }\n      case \"oklab\": {\n        result = addAlpha(hex2oklab(value), alpha);\n        break;\n      }\n      case \"oklch\": {\n        result = addAlpha(hex2oklch(value), alpha);\n        break;\n      }\n      case \"rgb\": {\n        result = addAlpha(hex2rgb(value), alpha);\n        break;\n      }\n      default: {\n        result = `${removeAlphaFromHex(value)}${alpha !== 1 ? convertAlphaToHex(alpha) : \"\"}`;\n        break;\n      }\n    }\n    return result;\n  }\n  switch (output) {\n    case \"hsl\": {\n      const { alpha, model, ...color } = extractColorParts(value);\n      if ([\"oklab\", \"oklch\"].includes(model) && color.l > 1) {\n        color.l = round(color.l / 100, PRECISION);\n      }\n      result = addAlpha(\n        model === \"hsl\" ? color : converters_exports[`${model}2hsl`](colorParams(color)),\n        alpha\n      );\n      break;\n    }\n    case \"oklab\": {\n      const { alpha, model, ...color } = extractColorParts(value);\n      if ([\"oklab\", \"oklch\"].includes(model) && color.l > 1) {\n        color.l = round(color.l / 100, PRECISION);\n      }\n      result = addAlpha(\n        model === \"oklab\" ? color : converters_exports[`${model}2oklab`](colorParams(color)),\n        alpha\n      );\n      break;\n    }\n    case \"oklch\": {\n      const { alpha, model, ...color } = extractColorParts(value);\n      if ([\"oklab\", \"oklch\"].includes(model) && color.l > 1) {\n        color.l = round(color.l / 100, PRECISION);\n      }\n      result = addAlpha(\n        model === \"oklch\" ? color : converters_exports[`${model}2oklch`](colorParams(color)),\n        alpha\n      );\n      break;\n    }\n    case \"rgb\": {\n      const { alpha, model, ...color } = extractColorParts(value);\n      if ([\"oklab\", \"oklch\"].includes(model) && color.l > 1) {\n        color.l /= 100;\n      }\n      result = addAlpha(\n        model === \"rgb\" ? color : converters_exports[`${model}2rgb`](colorParams(color)),\n        alpha\n      );\n      break;\n    }\n    case \"hex\":\n    default: {\n      const { alpha, model, ...color } = extractColorParts(value);\n      let alphaPrefix = \"\";\n      if ([\"oklab\", \"oklch\"].includes(model) && color.l > 1) {\n        color.l = round(color.l / 100, PRECISION);\n      }\n      if (alpha) {\n        alphaPrefix = convertAlphaToHex(alpha);\n      }\n      result = `${converters_exports[`${model}2hex`](colorParams(color))}${alphaPrefix}`;\n      break;\n    }\n  }\n  return result;\n}\n\n// src/modules/parse-color.ts\nfunction parseColor(color) {\n  invariant(!!color, MESSAGES.input);\n  const output = {};\n  if (isString(color)) {\n    const { alpha = 1 } = extractColorParts(color);\n    const type = isHex(color) ? \"hex\" : extractColorParts(color).model;\n    output.hex = addAlphaToHex(parseCSS(color, \"hex\"), alpha);\n    output.hsl = addAlpha(parseCSS(color, \"hsl\"), alpha);\n    output.oklab = addAlpha(parseCSS(color, \"oklab\"), alpha);\n    output.oklch = addAlpha(parseCSS(color, \"oklch\"), alpha);\n    output.rgb = addAlpha(parseCSS(color, \"rgb\"), alpha);\n    output.alpha = alpha;\n    output.type = type;\n  } else if (isPlainObject(color)) {\n    const { alpha = 1 } = color;\n    if (isHSL(color)) {\n      output.hsl = {\n        h: limit(color.h, \"hsl\", \"h\"),\n        s: limit(color.s, \"hsl\", \"s\"),\n        l: limit(color.l, \"hsl\", \"l\")\n      };\n      output.rgb = hsl2rgb(output.hsl);\n      output.oklab = hsl2oklab(output.hsl);\n      output.oklch = hsl2oklch(output.hsl);\n      output.type = \"hsl\";\n    } else if (isLAB(color)) {\n      output.hsl = oklab2hsl(color);\n      output.oklab = color;\n      output.oklch = oklab2oklch(color);\n      output.rgb = oklab2rgb(color);\n      output.type = \"oklab\";\n    } else if (isLCH(color)) {\n      output.hsl = oklch2hsl(color);\n      output.oklab = oklch2oklab(color);\n      output.oklch = color;\n      output.rgb = oklch2rgb(color);\n      output.type = \"oklch\";\n    } else if (isRGB(color)) {\n      output.rgb = {\n        r: limit(color.r, \"rgb\", \"r\"),\n        g: limit(color.g, \"rgb\", \"g\"),\n        b: limit(color.b, \"rgb\", \"b\")\n      };\n      output.hsl = rgb2hsl(output.rgb);\n      output.oklab = rgb2oklab(output.rgb);\n      output.oklch = rgb2oklch(output.rgb);\n      output.type = \"rgb\";\n    } else {\n      throw new Error(\"invalid color\");\n    }\n    output.hex = addAlphaToHex(hsl2hex(output.hsl), alpha);\n    output.hsl = addAlpha(output.hsl, alpha);\n    output.oklab = addAlpha(output.oklab, alpha);\n    output.oklch = addAlpha(output.oklch, alpha);\n    output.rgb = addAlpha(output.rgb, alpha);\n    output.alpha = alpha;\n  } else {\n    throw new Error(MESSAGES.input);\n  }\n  return output;\n}\n\n// src/brightness-difference.ts\nfunction brightnessDifference(left, right, precision = PRECISION) {\n  invariant(isString(left), MESSAGES.left);\n  invariant(isString(right), MESSAGES.right);\n  const RGBLeft = parseCSS(left, \"rgb\");\n  const RGBRight = parseCSS(right, \"rgb\");\n  const brightnessLeft = (RGBLeft.r * 299 + RGBLeft.g * 587 + RGBLeft.b * 114) / 1e3;\n  const brightnessRight = (RGBRight.r * 299 + RGBRight.g * 587 + RGBRight.b * 114) / 1e3;\n  return round(Math.abs(brightnessRight - brightnessLeft), precision);\n}\n\n// src/chroma.ts\nfunction chroma(input) {\n  invariant(isString(input), MESSAGES.inputString);\n  const { r, g, b } = parseCSS(input, \"rgb\");\n  const max = Math.max(r, g, b);\n  const min = Math.min(r, g, b);\n  return round((max - min) / 255, 4);\n}\n\n// src/color-difference.ts\nfunction colorDifference(left, right) {\n  invariant(isString(left), MESSAGES.left);\n  invariant(isString(right), MESSAGES.right);\n  const RGBLeft = parseCSS(left, \"rgb\");\n  const RGBRight = parseCSS(right, \"rgb\");\n  return Math.max(RGBLeft.r, RGBRight.r) - Math.min(RGBLeft.r, RGBRight.r) + (Math.max(RGBLeft.g, RGBRight.g) - Math.min(RGBLeft.g, RGBRight.g)) + (Math.max(RGBLeft.b, RGBRight.b) - Math.min(RGBLeft.b, RGBRight.b));\n}\n\n// src/luminance.ts\nfunction luminance(input) {\n  invariant(isString(input), MESSAGES.inputString);\n  const { r, g, b } = parseCSS(input, \"rgb\");\n  const rgb = [r / 255, g / 255, b / 255];\n  for (let index = 0; index < rgb.length; index++) {\n    if (rgb[index] <= 0.03928) {\n      rgb[index] /= 12.92;\n    } else {\n      rgb[index] = ((rgb[index] + 0.055) / 1.055) ** 2.4;\n    }\n  }\n  return round(0.2126 * rgb[0] + 0.7152 * rgb[1] + 0.0722 * rgb[2], 4);\n}\n\n// src/contrast.ts\nfunction contrast(left, right) {\n  invariant(isString(left), MESSAGES.left);\n  invariant(isString(right), MESSAGES.right);\n  const LuminanceLeft = luminance(left);\n  const LuminanceRight = luminance(right);\n  return round(\n    LuminanceLeft >= LuminanceRight ? (LuminanceLeft + 0.05) / (LuminanceRight + 0.05) : (LuminanceRight + 0.05) / (LuminanceLeft + 0.05)\n  );\n}\n\n// src/compare.ts\nfunction compare(left, right) {\n  invariant(isString(left), MESSAGES.left);\n  invariant(isString(right), MESSAGES.right);\n  const colorThreshold = 500;\n  const brightnessThreshold = 125;\n  const colorDifference2 = colorDifference(left, right);\n  const contrast2 = contrast(left, right);\n  const brightnessDifference2 = brightnessDifference(left, right);\n  const isBright = brightnessDifference2 >= brightnessThreshold;\n  const hasEnoughDifference = colorDifference2 >= colorThreshold;\n  let compliant = 0;\n  if (isBright && hasEnoughDifference) {\n    compliant = 2;\n  } else if (isBright || hasEnoughDifference) {\n    compliant = 1;\n  }\n  return {\n    brightnessDifference: brightnessDifference2,\n    colorDifference: colorDifference2,\n    compliant,\n    contrast: contrast2,\n    largeAA: contrast2 >= 3,\n    largeAAA: contrast2 >= 4.5,\n    normalAA: contrast2 >= 4.5,\n    normalAAA: contrast2 >= 7\n  };\n}\n\n// src/format-css.ts\nfunction getColorModel(input) {\n  if (isHex(input) || isNamedColor(input)) {\n    return \"hex\";\n  }\n  if (isString(input)) {\n    return extractColorParts(input).model;\n  } else if (isHSL(input)) {\n    return \"hsl\";\n  } else if (isLAB(input)) {\n    return \"oklab\";\n  } else if (isLCH(input)) {\n    return \"oklch\";\n  } else if (isRGB(input)) {\n    return \"rgb\";\n  }\n  throw new Error(MESSAGES.invalid);\n}\nfunction getColorValue(input, output) {\n  const value = isNamedColor(input) ? cssColors[input.toLowerCase()] : input;\n  const from = getColorModel(value);\n  if (from === output) {\n    return value;\n  }\n  const converterKey = `${from}2${output}`;\n  const converter = converters_exports[converterKey];\n  if (!converter) {\n    throw new Error(`Converter not found for ${from} to ${output}`);\n  }\n  switch (from) {\n    case \"hex\": {\n      if (output === \"hex\") {\n        return value;\n      }\n      return converter(value);\n    }\n    case \"hsl\": {\n      if (output === \"hsl\") {\n        return value;\n      }\n      return converter(value);\n    }\n    case \"oklab\": {\n      if (output === \"oklab\") {\n        return value;\n      }\n      return converter(value);\n    }\n    case \"oklch\": {\n      if (output === \"oklch\") {\n        return value;\n      }\n      return converter(value);\n    }\n    default: {\n      if (output === \"rgb\") {\n        return value;\n      }\n      return converter(value);\n    }\n  }\n}\nfunction formatCSS(input, options = {}) {\n  invariant(isHex(input) || isValidColorModel(input), MESSAGES.invalid);\n  const { alpha, format = \"hex\", precision = PRECISION, separator: baseSeparator = \" \" } = options;\n  const opacity2 = alpha && alpha !== 1 ? `${round(alpha * 100)}%` : null;\n  let params = [];\n  let separator = baseSeparator;\n  switch (format) {\n    case \"hsl\": {\n      const { h, s, l } = getColorValue(input, \"hsl\");\n      params = [h, `${s}%`, `${l}%`];\n      break;\n    }\n    case \"oklab\": {\n      separator = \" \";\n      const { l, a, b } = restrictValues(getColorValue(input, \"oklab\"), precision);\n      params = [`${round(l * 100, precision)}%`, a, b];\n      break;\n    }\n    case \"oklch\": {\n      separator = \" \";\n      const { l, c, h } = restrictValues(getColorValue(input, \"oklch\"), precision);\n      params = [`${round(l * 100, precision)}%`, c, h];\n      break;\n    }\n    case \"rgb\": {\n      const { r, g, b } = getColorValue(input, \"rgb\");\n      params = [r, g, b];\n      break;\n    }\n    default: {\n      const hex = removeAlphaFromHex(getColorValue(input, \"hex\"));\n      if (alpha && alpha !== 1) {\n        return `${hex}${convertAlphaToHex(alpha)}`;\n      }\n      return hex;\n    }\n  }\n  return `${format}(${params.join(separator)}${opacity2 ? ` / ${opacity2}` : \"\"})`;\n}\n\n// src/modules/updater.ts\nfunction updater(key, operator, format) {\n  return (input, amount) => {\n    invariant(isString(input), MESSAGES.inputString);\n    invariant(isNumber(amount), MESSAGES.alpha);\n    const color = parseCSS(input, \"hsl\");\n    const output = isHex(input) || isNamedColor(input) ? \"hex\" : extractColorParts(input).model;\n    return formatCSS(\n      {\n        ...color,\n        [key]: clamp(color[key] + (operator === \"+\" ? amount : -amount), 0, 100)\n      },\n      { format: format ?? output }\n    );\n  };\n}\n\n// src/darken.ts\nfunction darken(input, amount, format) {\n  return updater(\"l\", \"-\", format)(input, amount);\n}\n\n// src/desaturate.ts\nfunction desaturate(input, amount, format) {\n  return updater(\"s\", \"-\", format)(input, amount);\n}\n\n// src/rotate.ts\nfunction rotate(input, degrees, format) {\n  invariant(isString(input), MESSAGES.inputString);\n  invariant(isNumber(degrees), \"degrees must be a number\");\n  const color = parseCSS(input, \"hsl\");\n  const output = isHex(input) || isNamedColor(input) ? \"hex\" : extractColorParts(input).model;\n  return formatCSS(\n    {\n      ...color,\n      h: constrainDegrees(color.h, degrees)\n    },\n    { format: format ?? output }\n  );\n}\n\n// src/invert.ts\nfunction invert(input) {\n  invariant(isString(input), MESSAGES.inputString);\n  const format = isHex(input) || isNamedColor(input) ? \"hex\" : extractColorParts(input).model;\n  const hex = parseCSS(input, \"hex\");\n  return formatCSS(rotate(hex, 180), { format });\n}\n\n// src/lighten.ts\nfunction lighten(input, amount, format) {\n  return updater(\"l\", \"+\", format)(input, amount);\n}\n\n// src/opacify.ts\nfunction opacify(input, alpha, format) {\n  invariant(isString(input), MESSAGES.inputString);\n  invariant(isNumber(alpha), MESSAGES.alpha);\n  const type = isHex(input) || isNamedColor(input) ? \"hex\" : extractColorParts(input).model;\n  const rgb = parseCSS(input, \"rgb\");\n  return formatCSS(rgb, { format: format ?? type, alpha });\n}\n\n// src/opacity.ts\nfunction opacity(input) {\n  invariant(isString(input), MESSAGES.inputString);\n  if (isHex(input)) {\n    return extractAlphaFromHex(input);\n  } else if (Object.keys(cssColors).includes(input)) {\n    return 1;\n  }\n  const { alpha } = extractColorParts(input);\n  if (!alpha) {\n    return 1;\n  }\n  return alpha;\n}\n\n// src/saturate.ts\nfunction saturate(input, amount, format) {\n  return updater(\"s\", \"+\", format)(input, amount);\n}\n\n// src/text-color.ts\nfunction textColor(input, options = {}) {\n  const { darkColor = \"#000000\", lightColor = \"#ffffff\", threshold = 128 } = options;\n  invariant(isString(input), MESSAGES.inputString);\n  invariant(threshold >= 0 && threshold <= 255, MESSAGES.threshold);\n  try {\n    const { r, g, b } = hex2rgb(parseCSS(input, \"hex\"));\n    const yiq = (r * 299 + g * 587 + b * 114) / 1e3;\n    return yiq >= threshold ? darkColor : lightColor;\n  } catch (error) {\n    console.warn(`Invalid color input: ${input}`);\n    console.warn(error);\n    return darkColor;\n  }\n}\n\n// src/transparentize.ts\nfunction transparentize(input, alpha, format) {\n  invariant(isString(input), MESSAGES.inputString);\n  invariant(isNumber(alpha), MESSAGES.alpha);\n  invariant(alpha >= -1 && alpha <= 1, MESSAGES.alpha);\n  const oklch = parseCSS(input, \"oklab\");\n  const value = round(clamp(opacity(input) - alpha, 0, 1));\n  return formatCSS(oklch, { format, alpha: value });\n}\n\n// src/colorizr.ts\nvar Colorizr = class {\n  constructor(color, options = {}) {\n    __publicField(this, \"alpha\");\n    __publicField(this, \"hex\");\n    __publicField(this, \"hsl\");\n    __publicField(this, \"oklab\");\n    __publicField(this, \"oklch\");\n    __publicField(this, \"rgb\");\n    __publicField(this, \"type\");\n    invariant(!!color, \"color is required\");\n    const { alpha, hex, hsl, oklab, oklch, rgb, type } = parseColor(color);\n    this.hex = hex;\n    this.hsl = hsl;\n    this.oklab = oklab;\n    this.oklch = oklch;\n    this.rgb = rgb;\n    this.alpha = alpha;\n    this.type = options.format ?? type;\n  }\n  /**\n   * Get css string\n   */\n  get css() {\n    return this.selectedColor;\n  }\n  /**\n   * Get the red value\n   */\n  get red() {\n    return Number(this.rgb.r);\n  }\n  /**\n   * Get the green value\n   */\n  get green() {\n    return Number(this.rgb.g);\n  }\n  /**\n   * Get the blue value\n   */\n  get blue() {\n    return Number(this.rgb.b);\n  }\n  /**\n   * Get the hue value\n   */\n  get hue() {\n    return Number(this.hsl.h);\n  }\n  /**\n   * Get the saturation value\n   */\n  get saturation() {\n    return Number(this.hsl.s);\n  }\n  /**\n   * Get the lightness value\n   */\n  get lightness() {\n    return Number(this.hsl.l);\n  }\n  /**\n   * Get the luminance value\n   */\n  get luminance() {\n    return luminance(this.selectedColor);\n  }\n  /**\n   * Get the chroma value\n   */\n  get chroma() {\n    return chroma(this.selectedColor);\n  }\n  get opacity() {\n    return opacity(this.selectedColor);\n  }\n  /**\n   * Get the contrasted color\n   */\n  get textColor() {\n    return textColor(this.selectedColor);\n  }\n  get selectedColor() {\n    return formatCSS(this[this.type], { format: this.type, alpha: this.alpha });\n  }\n  brightnessDifference(input) {\n    return brightnessDifference(this.selectedColor, input);\n  }\n  colorDifference(input) {\n    return colorDifference(this.selectedColor, input);\n  }\n  /**\n   * Test 2 colors for compliance\n   */\n  compare(input) {\n    return compare(this.selectedColor, input);\n  }\n  contrast(input) {\n    return contrast(this.selectedColor, input);\n  }\n  format(type, precision) {\n    return formatCSS(this.rgb, {\n      alpha: this.alpha,\n      format: type,\n      precision\n    });\n  }\n  /**\n   * Increase lightness\n   */\n  lighten(amount) {\n    return lighten(this.selectedColor, amount);\n  }\n  /**\n   * Decrease lightness\n   */\n  darken(amount) {\n    return darken(this.selectedColor, amount);\n  }\n  /**\n   * Increase saturation\n   */\n  saturate(amount) {\n    return saturate(this.selectedColor, amount);\n  }\n  /**\n   * Decrease saturation\n   */\n  desaturate(amount) {\n    return desaturate(this.selectedColor, amount);\n  }\n  /**\n   * Invert color\n   */\n  invert() {\n    return invert(this.selectedColor);\n  }\n  /**\n   * Add opacity to the color.\n   */\n  opacify(alpha = 0.9) {\n    return opacify(this.selectedColor, alpha, this.type);\n  }\n  /**\n   * Rotate color\n   */\n  rotate(degrees) {\n    return rotate(this.selectedColor, degrees);\n  }\n  /**\n   * Make the color more transparent\n   */\n  transparentize(alpha = 0.1) {\n    return transparentize(this.selectedColor, alpha, this.type);\n  }\n};\n\n// src/convert.ts\nfunction convert(input, format) {\n  const value = parseCSS(input, format);\n  return formatCSS(value, { format });\n}\n\n// src/is-valid-color.ts\nfunction isValidColor(input) {\n  try {\n    parseCSS(input);\n    return true;\n  } catch {\n    return false;\n  }\n}\n\n// src/name.ts\nfunction name(input) {\n  invariant(isString(input), MESSAGES.inputString);\n  const hex = parseCSS(input, \"hex\");\n  const [color] = Object.entries(cssColors).find(([, value]) => value === hex) || [];\n  return color ?? hex;\n}\n\n// src/palette.ts\nfunction palette(input, options = {}) {\n  invariant(isString(input), MESSAGES.inputString);\n  invariant(isPlainObject(options), MESSAGES.options);\n  const { format, lightness, saturation, size = 6, type } = options;\n  const hsl = parseCSS(input, \"hsl\");\n  const colorFormat = isHex(input) || isNamedColor(input) ? \"hex\" : extractColorParts(input).model;\n  const output = [];\n  if (type === \"monochromatic\") {\n    const step = 80 / size;\n    for (let index = size; index > 0; index--) {\n      output.push(hsl2hex({ ...hsl, l: step * index }));\n    }\n  } else {\n    const step = 360 / size;\n    output.push(hsl2hex({ ...hsl, l: lightness ?? hsl.l, s: saturation ?? hsl.s }));\n    for (let index = 1; index < size; index++) {\n      const color = rotate(input, hsl.h + step * index, \"hex\");\n      output.push(hsl2hex({ ...hex2hsl(color), l: lightness ?? hsl.l, s: saturation ?? hsl.s }));\n    }\n  }\n  return output.map((color) => convert(color, format ?? colorFormat));\n}\n\n// src/p3.ts\nfunction multiplyMatrix(matrix, vector) {\n  return [\n    matrix[0][0] * vector[0] + matrix[0][1] * vector[1] + matrix[0][2] * vector[2],\n    matrix[1][0] * vector[0] + matrix[1][1] * vector[1] + matrix[1][2] * vector[2],\n    matrix[2][0] * vector[0] + matrix[2][1] * vector[1] + matrix[2][2] * vector[2]\n  ];\n}\nfunction isInP3Gamut(color) {\n  const epsilon = 1e-6;\n  return color.every((component) => component >= 0 - epsilon && component <= 1 + epsilon);\n}\nfunction oklabToLinearSRGB(L, a, b) {\n  const l = (L + LAB_TO_LMS.l[0] * a + LAB_TO_LMS.l[1] * b) ** 3;\n  const m = (L + LAB_TO_LMS.m[0] * a + LAB_TO_LMS.m[1] * b) ** 3;\n  const s = (L + LAB_TO_LMS.s[0] * a + LAB_TO_LMS.s[1] * b) ** 3;\n  return [\n    LSM_TO_RGB.r[0] * l + LSM_TO_RGB.r[1] * m + LSM_TO_RGB.r[2] * s,\n    LSM_TO_RGB.g[0] * l + LSM_TO_RGB.g[1] * m + LSM_TO_RGB.g[2] * s,\n    LSM_TO_RGB.b[0] * l + LSM_TO_RGB.b[1] * m + LSM_TO_RGB.b[2] * s\n  ];\n}\nfunction oklabToLinearP3(L, a, b) {\n  const srgb = oklabToLinearSRGB(L, a, b);\n  return multiplyMatrix(SRGB_TO_P3, srgb);\n}\nfunction getOkLCHMaxChroma(input, precision = PRECISION) {\n  const { l, h } = isString(input) ? parseCSS(input, \"oklch\") : input;\n  invariant(isNumber(l) && l >= 0 && l <= 1, MESSAGES.lightnessRange);\n  invariant(isNumber(h) && h >= 0 && h <= 360, MESSAGES.hueRange);\n  const epsilon = 1e-6;\n  let low = 0;\n  let high = 0.5;\n  while (high - low > epsilon) {\n    const mid = (low + high) / 2;\n    const { l: L, a, b } = oklch2oklab({ l, c: mid, h }, 16);\n    const p3Color = oklabToLinearP3(L, a, b);\n    if (isInP3Gamut(p3Color)) {\n      low = mid;\n    } else {\n      high = mid;\n    }\n  }\n  return round(low, precision);\n}\nfunction getP3Color(input) {\n  const lch = isString(input) ? parseCSS(input, \"oklch\") : input;\n  return `oklch(${lch.l} ${getOkLCHMaxChroma(lch)} ${lch.h})`;\n}\n\n// src/random.ts\nfunction random(type = \"hex\") {\n  const hsl = {\n    h: Math.floor(Math.random() * 360) + 1,\n    s: Math.floor(Math.random() * 90) + 10,\n    l: Math.floor(Math.random() * 80) + 10\n  };\n  return formatCSS(hsl, { format: type });\n}\n\n// src/scheme.ts\nfunction scheme(input, typeOrOptions) {\n  invariant(isString(input), MESSAGES.inputString);\n  const { format, type = \"complementary\" } = isString(typeOrOptions) ? { type: typeOrOptions } : typeOrOptions ?? {};\n  const output = isHex(input) || isNamedColor(input) ? \"hex\" : extractColorParts(input).model;\n  const colors = [];\n  switch (type) {\n    case \"analogous\": {\n      colors.push(rotate(input, -30), input, rotate(input, 30));\n      break;\n    }\n    case \"complementary\": {\n      colors.push(input, rotate(input, 180));\n      break;\n    }\n    case \"split\":\n    case \"split-complementary\": {\n      colors.push(input, rotate(input, 150), rotate(input, 210));\n      break;\n    }\n    case \"triadic\": {\n      colors.push(input, rotate(input, 120), rotate(input, 240));\n      break;\n    }\n    case \"tetradic\":\n    case \"rectangle\": {\n      colors.push(input, rotate(input, 60), rotate(input, 180), rotate(input, 240));\n      break;\n    }\n    case \"square\": {\n      colors.push(input, rotate(input, 90), rotate(input, 180), rotate(input, 270));\n      break;\n    }\n    default: {\n      throw new TypeError(\"invalid type\");\n    }\n  }\n  return colors.map((color) => convert(color, format ?? output));\n}\n\n// src/swatch.ts\nfunction shadeColor(input, lightness) {\n  const { c, h } = input;\n  const chromaScale = c === 0 ? 1 : 4 * lightness * (1 - lightness);\n  const chroma2 = c * chromaScale;\n  const adjustedChroma = clamp(chroma2, 0, 0.4);\n  return { l: lightness, c: adjustedChroma, h };\n}\nfunction swatch(input, options = {}) {\n  invariant(isString(input), MESSAGES.inputString);\n  const {\n    format,\n    lightnessFactor = 1.5,\n    maxLightness = 0.97,\n    minLightness = 0.2,\n    scale = \"dynamic\",\n    variant = \"base\"\n  } = options;\n  invariant(\n    maxLightness > minLightness && maxLightness <= 1 && minLightness >= 0,\n    \"maxLightness must be greater than minLightness and within the range [0, 1].\"\n  );\n  const lch = parseCSS(input, \"oklch\");\n  const chromaScale = {\n    base: 1,\n    deep: 0.8,\n    neutral: 0.5,\n    pastel: 0.3,\n    subtle: 0.2,\n    vibrant: 1.25\n  }[variant];\n  lch.l = 0.7;\n  lch.c *= chromaScale;\n  if (variant === \"deep\") {\n    lch.l *= 0.7;\n  }\n  const colorFormat = isHex(input) || isNamedColor(input) ? \"hex\" : extractColorParts(input).model;\n  const steps = 11;\n  let palette2 = {};\n  if (scale === \"dynamic\") {\n    for (let index = 0; index < steps; index++) {\n      const lightness = maxLightness - (maxLightness - minLightness) * (index / (steps - 1)) ** lightnessFactor;\n      let tone = index * 100;\n      if (index === 0) {\n        tone = 50;\n      } else if (index === 10) {\n        tone = 950;\n      }\n      palette2[tone] = lightness;\n    }\n  } else {\n    palette2 = {\n      50: 0.97,\n      100: 0.92,\n      200: 0.85,\n      300: 0.78,\n      400: 0.69,\n      500: 0.57,\n      600: 0.46,\n      700: 0.35,\n      800: 0.24,\n      900: 0.18,\n      950: 0.1\n    };\n  }\n  const output = Object.entries(palette2).reduce(\n    (acc, [key, value]) => {\n      acc[Number(key)] = shadeColor(lch, value);\n      return acc;\n    },\n    {}\n  );\n  return Object.entries(output).reduce((acc, [key, value]) => {\n    return {\n      ...acc,\n      [key]: formatCSS(value, { format: format ?? colorFormat })\n    };\n  }, {});\n}\n\n// src/index.ts\nvar index_default = Colorizr;\nexport {\n  addAlphaToHex,\n  brightnessDifference,\n  chroma,\n  colorDifference,\n  compare,\n  contrast,\n  convert,\n  convertAlphaToHex,\n  darken,\n  index_default as default,\n  desaturate,\n  extractAlphaFromHex,\n  extractColorParts,\n  formatCSS,\n  formatHex,\n  getOkLCHMaxChroma,\n  getP3Color,\n  hex2hsl,\n  hex2oklab,\n  hex2oklch,\n  hex2rgb,\n  hexadecimalToNumber,\n  hsl2hex,\n  hsl2oklab,\n  hsl2oklch,\n  hsl2rgb,\n  isHSL,\n  isHex,\n  isLAB,\n  isLCH,\n  isRGB,\n  isValidColor,\n  lighten,\n  luminance,\n  name,\n  oklab2hex,\n  oklab2hsl,\n  oklab2oklch,\n  oklab2rgb,\n  oklch2hex,\n  oklch2hsl,\n  oklch2oklab,\n  oklch2rgb,\n  opacify,\n  opacity,\n  palette,\n  parseCSS,\n  random,\n  removeAlphaFromHex,\n  rgb2hex,\n  rgb2hsl,\n  rgb2oklab,\n  rgb2oklch,\n  rotate,\n  saturate,\n  scheme,\n  swatch,\n  textColor,\n  transparentize\n};\n//# sourceMappingURL=index.mjs.map","export const isHsl = (v) => {\n    if (typeof v !== `object`)\n        return false;\n    if (!(`h` in v))\n        return false;\n    if (!(`s` in v))\n        return false;\n    if (!(`l` in v))\n        return false;\n    if (!(`unit` in v))\n        return false;\n    if (!(`space` in v))\n        return false;\n    if (v.space !== `hsl`)\n        return false;\n    return true;\n};\nexport const isRgb = (v) => {\n    if (typeof v !== `object`)\n        return false;\n    if (!(`r` in v))\n        return false;\n    if (!(`g` in v))\n        return false;\n    if (!(`b` in v))\n        return false;\n    if (!(`space` in v))\n        return false;\n    if (!(`unit` in v))\n        return false;\n    if (v.space === `srgb`)\n        return true;\n    return false;\n};\n/**\n * If the input object has r,g&b properties, it will return a fully-\n * formed Rgb type with `unit` and `space` properties.\n *\n * If it lacks these basic three properties or they are out of range,\n *  _undefined_ is returned.\n *\n * If RGB values are less than 1 assumes unit:scalar. Otherwise unit:8bit.\n * If RGB values exceed 255, _undefined_ returned.\n * @param v\n * @returns\n */\nexport const tryParseObjectToRgb = (v) => {\n    if (!(`r` in v && `g` in v && `b` in v))\n        return;\n    if (!(`unit` in v)) {\n        if (v.r <= 1 && v.g <= 1 && v.b <= 1) {\n            v.unit = `scalar`;\n        }\n        else if (v.r > 255 && v.g <= 255 && v.b <= 255) {\n            return; // out of range\n        }\n        else {\n            v.unit = `8bit`;\n        }\n    }\n    if (!(`space` in v)) {\n        v.space = `srgb`;\n    }\n    return v;\n};\nexport const tryParseObjectToHsl = (v) => {\n    if (!(`h` in v && `s` in v && `l` in v))\n        return;\n    if (!(`unit` in v)) {\n        if (v.r <= 1 && v.g <= 1 && v.b <= 1) {\n            v.unit = `scalar`;\n        }\n        else if (v.s > 100 && v.l <= 100) {\n            return; // out of range\n        }\n        else {\n            v.unit = `absolute`;\n        }\n    }\n    if (!(`space` in v)) {\n        v.space = `hsl`;\n    }\n    return v;\n};\nexport const isOkLch = (v) => {\n    if (typeof v !== `object`)\n        return false;\n    if (!(`l` in v))\n        return false;\n    if (!(`c` in v))\n        return false;\n    if (!(`h` in v))\n        return false;\n    if (!(`unit` in v))\n        return false;\n    if (!(`space` in v))\n        return false;\n    if (v.space === `lch`)\n        return true;\n    if (v.space === `oklch`)\n        return true;\n    return false;\n};\nexport const isColourish = (v) => {\n    if (typeof v === `string`)\n        return true;\n    if (typeof v !== `object`)\n        return false;\n    if (isHsl(v))\n        return true;\n    if (isOkLch(v))\n        return true;\n    if (isRgb(v))\n        return true;\n    return false;\n};\n","import Colorizr, * as C from \"colorizr\";\nimport { numberInclusiveRangeTest, numberTest, percentTest } from \"@ixfx/guards\";\nimport { resultThrow } from \"@ixfx/guards\";\nimport { cssDefinedHexColours, resolveCss } from \"./css-colours.js\";\nimport { angleConvert, angleParse } from \"@ixfx/geometry\";\nimport { clamp, interpolate } from \"@ixfx/numbers\";\nimport { isRgb } from \"./guards.js\";\nimport { calculateHueDistance, wrapScalarHue } from \"./utility.js\";\nimport { parseCssRgbFunction, to8bit as rgbTo8bit, toLibraryHsl as rgbToLibraryHsl } from \"./srgb.js\";\n/**\n * Scales the opacity value of an input HSL value\n * ```js\n * withOpacity()\n * ```\n * @param value Colour\n * @param fn Function that calcules opacity based on input scalar value\n * @returns\n */\nexport const withOpacity = (value, fn) => {\n    switch (value.unit) {\n        case `absolute`:\n            return {\n                ...value,\n                opacity: fn((value.opacity ?? 100) / 100, value) * 100\n            };\n        case `scalar`:\n            return {\n                ...value,\n                opacity: fn((value.opacity ?? 1), value)\n            };\n    }\n};\n/**\n * Increases or decreases lightness by this percentage, returning new colour\n *\n * Amount to change:\n * * 'fixed': a fixed amount\n * * 'delta': increase/decrease by this amount\n * * 'pdelta': proportion of current value to change by ('percentage delta')\n *\n * ```\n * const colour = { h: 0.5, s: 0.5, l: 0.5, space: `hsl`, unit: `scalar` };\n * changeLightness(colour, { pdelta: 0.1 }); // l: 0.55\n * changeLightness(colour, { delta: 0.1 });  // l: 0.6\n * changeLightness(colour, { fixed: 0.5 });  // l: 0.5\n * ```\n *\n * Keep in mind the numerical value will depend on the unit of `value`. If it's scalar,\n * lightness is 0..1 scale, otherwise 0..100 scale.\n *\n * Use negative values to decrease (does not apply to 'fixed')\n * @param value Hsl colour\n * @param amount Amount to change\n */\nexport const changeLightness = (value, amount) => {\n    let newL = 0;\n    if (typeof amount.pdelta !== `undefined`) {\n        newL = value.l + (value.l * amount.pdelta);\n    }\n    else if (typeof amount.delta !== `undefined`) {\n        newL = amount.delta + value.l;\n    }\n    else if (typeof amount.fixed !== `undefined`) {\n        if (amount.fixed < 0)\n            throw new TypeError(`Cannot use negative value with 'fixed'`);\n        newL = amount.fixed;\n    }\n    else {\n        throw new TypeError(`Parameter 'amount' is missing 'delta/pdelta/fixed' properties`);\n    }\n    return {\n        ...value,\n        l: scaleProperty(value, newL, `l`)\n    };\n};\nconst scaleProperty = (hsl, value, property) => {\n    if (hsl.unit === `scalar`) {\n        // 0..1 scale\n        if (value > 1)\n            value = 1;\n        else if (value < 0)\n            value = 0;\n    }\n    else {\n        // 0..100 scale\n        if (value > 100)\n            value = 100;\n        else if (value < 0)\n            value = 0;\n    }\n    return value;\n};\nconst hslTransparent = Object.freeze({\n    h: 0, s: 0, l: 0, opacity: 0, unit: `absolute`, space: `hsl`\n});\nexport function fromHexString(hexString, options = {}) {\n    return fromLibrary(C.hex2hsl(hexString), options);\n}\nexport function fromCss(value, options = {}) {\n    value = value.toLowerCase();\n    if (value.startsWith(`hsla(`))\n        throw new Error(`hsla() not supported`);\n    if (value.startsWith(`rgba(`))\n        throw new Error(`rgba() not supported`);\n    if (value.startsWith(`#`)) {\n        return fromHexString(value, options);\n    }\n    if (value.startsWith(`--`)) {\n        try {\n            value = resolveCss(value);\n        }\n        catch (error) {\n            if (typeof options.fallbackString !== `undefined`)\n                value = options.fallbackString;\n            if (typeof options.fallbackColour !== `undefined`)\n                return options.fallbackColour;\n            throw error;\n        }\n    }\n    if (value === `transparent`)\n        return hslTransparent;\n    if (typeof cssDefinedHexColours[value] !== `undefined`) {\n        return fromHexString(cssDefinedHexColours[value], options);\n    }\n    if (value.startsWith(`rgb(`)) {\n        const hsl = rgbToLibraryHsl(value);\n        return fromLibrary(hsl, options);\n    }\n    if (!value.startsWith(`hsl(`)) {\n        try {\n            value = C.convert(value, `hsl`);\n        }\n        catch (error) {\n            if (options.fallbackString) {\n                value = options.fallbackString;\n            }\n            else {\n                throw error;\n            }\n        }\n    }\n    try {\n        // Hand-rolled hsl() parse because the package is broken\n        const hsl = parseCssHslFunction(value);\n        if (options.scalar)\n            return toScalar(hsl);\n        return toAbsolute(hsl);\n    }\n    catch (error) {\n        if (options.fallbackColour)\n            return options.fallbackColour;\n        throw error;\n    }\n}\nexport const toCssString = (hsl) => {\n    const abs = toAbsolute(hsl);\n    let css = `hsl(${abs.h}deg ${abs.s}% ${abs.l}%`;\n    if (`opacity` in abs && abs.opacity !== undefined && abs.opacity < 100) {\n        css += ` / ${abs.opacity}%`;\n    }\n    css += ')';\n    return css;\n};\nconst toLibrary = (hsl) => {\n    const abs = toAbsolute(hsl);\n    return {\n        h: abs.h,\n        s: abs.s,\n        l: abs.l,\n        alpha: abs.opacity,\n    };\n};\nfunction fromLibrary(hsl, parsingOptions = {}) {\n    if (typeof hsl === `undefined` || hsl === null) {\n        if (parsingOptions.fallbackColour)\n            return parsingOptions.fallbackColour;\n    }\n    const scalarOpt = parsingOptions.scalar ?? true;\n    // Library result is absolute\n    resultThrow(numberInclusiveRangeTest(hsl.h, 0, 360, `h`), numberInclusiveRangeTest(hsl.s, 0, 100, `s`), numberInclusiveRangeTest(hsl.l, 0, 100, `l`), percentTest((hsl.alpha ?? 1), `alpha`)\n    // () => hsl.alpha !== undefined ? numberInclusiveRangeTest(hsl.alpha, 0, 100, `alpha`) : { success: true, value: hsl },\n    );\n    if (scalarOpt) {\n        return scalar(hsl.h / 360, hsl.s / 100, hsl.l / 100, (hsl.alpha ?? 1));\n    }\n    else {\n        return absolute(hsl.h, hsl.s, hsl.l, (hsl.alpha ?? 1) * 100);\n    }\n}\nexport const toAbsolute = (hslOrString) => {\n    // if (typeof hslOrString === `string`) {\n    //   return toAbsolute(fromLibrary(C.parseCSS(hslOrString, `hsl`), { scalar: false }));\n    // }\n    if (typeof hslOrString === `string`) {\n        return fromCss(hslOrString, { scalar: false });\n        // try {\n        //   return toScalar(fromLibrary(C.parseCSS(hslOrString, `hsl`), { scalar: true }));\n        // } catch (error) {\n        //   console.error(`Hsl.toScalar: ${ hslOrString }`);\n        //   throw error;\n        // }\n    }\n    if (isRgb(hslOrString)) {\n        return toAbsolute(fromLibrary(rgbToLibraryHsl(hslOrString), { scalar: false }));\n    }\n    const hsl = hslOrString;\n    guard(hsl);\n    if (hsl.unit === `absolute`)\n        return hsl;\n    return {\n        h: hsl.h * 360,\n        s: hsl.s * 100,\n        l: hsl.l * 100,\n        opacity: (hsl.opacity ?? 1) * 100,\n        unit: `absolute`,\n        space: `hsl`\n    };\n};\n/**\n * Generates a {@link HslScalar} value.\n *\n * ```js\n * generateScaler(10); // 10deg, default to full saturation, half lightness and full opacity\n *\n * // Generate HSL value from radian angle and 50% saturation\n * generateScalar(`10rad`, 0.5);\n *\n * // Generate from numeric CSS variable\n * generateScalar(`--hue`);\n * ```\n * @param absoluteHslOrVariable Hue angle or CSS variable\n * @param saturation\n * @param lightness\n * @param opacity\n */\nexport const generateScalar = (absoluteHslOrVariable, saturation = 1, lightness = 0.5, opacity = 1) => {\n    if (typeof absoluteHslOrVariable === `string`) {\n        if (absoluteHslOrVariable.startsWith(`--`)) {\n            absoluteHslOrVariable = getComputedStyle(document.body).getPropertyValue(absoluteHslOrVariable).trim();\n        }\n    }\n    const hue = angleParse(absoluteHslOrVariable);\n    if (saturation > 1)\n        throw new TypeError(`Param 'saturation' must be between 0..1`);\n    if (lightness > 1)\n        throw new TypeError(`Param 'lightness' must be between 0..1`);\n    if (opacity > 1)\n        throw new TypeError(`Param 'opacity' must be between 0..1`);\n    const hueDeg = angleConvert(hue, `deg`).value / 360;\n    return {\n        h: hueDeg,\n        s: saturation,\n        l: lightness,\n        opacity: opacity,\n        unit: `scalar`,\n        space: `hsl`\n    };\n};\n/**\n * Converts a {@link Hsl} value to scalar units, or parses a colour string\n * and converts it.\n *\n * ```js\n * toScalar({ h: 100, s: 50, l: 100, unit: `absolute` });\n * toScalar(`red`);\n * ```\n * @param hslOrString\n * @returns\n */\nexport const toScalar = (hslOrString) => {\n    if (typeof hslOrString === `string`) {\n        return fromCss(hslOrString, { scalar: true });\n        // try {\n        //   return toScalar(fromLibrary(C.parseCSS(hslOrString, `hsl`), { scalar: true }));\n        // } catch (error) {\n        //   console.error(`Hsl.toScalar: ${ hslOrString }`);\n        //   throw error;\n        // }\n    }\n    if (isRgb(hslOrString)) {\n        return toScalar(fromLibrary(rgbToLibraryHsl(hslOrString), { scalar: true }));\n    }\n    const hsl = hslOrString;\n    guard(hsl);\n    if (hsl.unit === `scalar`)\n        return hsl;\n    return {\n        h: hsl.h / 360,\n        s: hsl.s / 100,\n        l: hsl.l / 100,\n        opacity: (hsl.opacity ?? 1) / 100,\n        unit: `scalar`,\n        space: `hsl`\n    };\n};\nexport const guard = (hsl) => {\n    const { h, s, l, opacity, space, unit } = hsl;\n    if (space !== `hsl`)\n        throw new Error(`Space is expected to be 'hsl'. Got: ${space}`);\n    if (unit === `absolute`) {\n        resultThrow(numberTest(h, `finite`, `h`), numberInclusiveRangeTest(s, 0, 100, `s`), numberInclusiveRangeTest(l, 0, 100, `l`), () => {\n            if (typeof opacity === `number`) {\n                return numberInclusiveRangeTest(opacity, 0, 100, `opacity`);\n            }\n        });\n    }\n    else if (unit === `scalar`) {\n        resultThrow(numberTest(h, `percentage`, `h`), numberTest(s, `percentage`, `s`), numberTest(l, `percentage`, `l`), () => {\n            if (typeof opacity === `number`) {\n                return numberTest(opacity, `percentage`, `opacity`);\n            }\n        });\n    }\n    else {\n        throw new Error(`Unit is expected to be 'absolute' or 'scalar'. Got: ${unit}`);\n    }\n};\nexport const interpolator = (a, b, direction = `shorter`) => {\n    a = toScalar(a);\n    b = toScalar(b);\n    const aOpacity = a.opacity ?? 1;\n    const distanceCalc = calculateHueDistance(a.h, b.h, 1);\n    const hueDistance = direction === `longer` ? distanceCalc.long : distanceCalc.short;\n    const satDistance = b.s - a.s;\n    const lightDistance = b.l - a.l;\n    const opacityDistance = (b.opacity ?? 1) - aOpacity;\n    return (amount) => {\n        amount = clamp(amount);\n        let h = interpolate(amount, 0, Math.abs(hueDistance));\n        if (hueDistance < 0)\n            h = a.h - h;\n        else\n            h = a.h + h;\n        const s = interpolate(amount, 0, satDistance);\n        const l = interpolate(amount, 0, lightDistance);\n        const o = interpolate(amount, 0, opacityDistance);\n        return scalar(wrapScalarHue(h), s + a.s, l + a.l, o + aOpacity);\n    };\n};\n/**\n * Creates a HslScalar value from scalar (0..1) values\n * @param hue\n * @param sat\n * @param lightness\n * @param opacity\n * @returns\n */\nexport function scalar(hue = 0.5, sat = 1, lightness = 0.5, opacity = 1) {\n    const hsl = {\n        unit: `scalar`,\n        space: `hsl`,\n        h: hue,\n        s: sat,\n        l: lightness,\n        opacity: opacity\n    };\n    guard(hsl);\n    return hsl;\n}\nexport function absolute(hue = 200, sat = 100, lightness = 50, opacity = 100) {\n    const hsl = {\n        unit: `absolute`,\n        space: `hsl`,\n        h: hue,\n        s: sat,\n        l: lightness,\n        opacity: opacity\n    };\n    guard(hsl);\n    return hsl;\n}\n/**\n * It seems Colorizr can't handle 'deg' units\n * @param value\n */\nexport function parseCssHslFunction(value) {\n    if (value.startsWith(`hsla`))\n        throw new Error(`hsla() is not supported`);\n    if (!value.startsWith(`hsl(`))\n        throw new Error(`Expected hsl(..) CSS colour`);\n    const start = value.indexOf('(');\n    const end = value.indexOf(')');\n    if (end < start)\n        throw new Error(`Is hsl() not terminated? Missing ')'`);\n    const part = value.substring(start + 1, end);\n    let split = part.split(/[\\s,]+/);\n    if (split.length < 3)\n        throw new Error(`Expected three tokens. Got: ${split.length} length`);\n    let returnRelative = false;\n    if (split[0].endsWith(`%`))\n        returnRelative = true;\n    if (split[1].endsWith(`%`) && split[2].endsWith(`%`))\n        returnRelative = true;\n    const valueAsScalar = (v, pos) => {\n        if (v === `none`)\n            return 0;\n        if (v.endsWith(`%`)) {\n            return Number.parseFloat(v.substring(0, v.length - 1)) / 100;\n        }\n        if (v.endsWith(`deg`) && pos === 0) {\n            v = v.substring(0, v.length - 3);\n        }\n        const vf = Number.parseFloat(v);\n        if (pos === 0)\n            return vf / 360;\n        if (pos === 3)\n            return vf; // opacity\n        return vf / 100;\n    };\n    const valueAsAbs = (v, pos) => {\n        if (v === `none`)\n            return 0;\n        if (v.endsWith(`%`)) {\n            const vf = Number.parseFloat(v.substring(0, v.length - 1));\n            if (pos === 0)\n                return vf * 360;\n            return vf;\n        }\n        if (v.endsWith(`deg`) && pos === 0) {\n            return Number.parseFloat(v.substring(0, v.length - 3));\n        }\n        const vf = Number.parseFloat(v);\n        return vf;\n    };\n    // Is there opacity?\n    if (split.length > 3) {\n        if (split[3] === '/') {\n            // Remove / part\n            split = [split[0], split[1], split[2], split[4]];\n        }\n    }\n    if (returnRelative) {\n        return scalar(valueAsScalar(split[0], 0), valueAsScalar(split[1], 1), valueAsScalar(split[2], 2), valueAsScalar(split[3] ?? `100%`, 3));\n    }\n    else {\n        // Return as absolute\n        return absolute(valueAsAbs(split[0], 0), valueAsAbs(split[1], 1), valueAsAbs(split[2], 2), valueAsAbs(split[3] ?? `100%`, 3));\n    }\n}\n/**\n * Converts a Hsl structure (or CSS string) to Colorizr's RGB format\n * @param hsl HSL colour\n * @returns\n */\nexport function toLibraryRgb(hsl) {\n    if (typeof hsl === `string`) {\n        const parseResult = fromCss(hsl, { scalar: false });\n        //console.log(`parseResult hsl: ${ hsl } pr: `, parseResult);\n        return toLibraryRgb(parseResult);\n    }\n    hsl = toAbsolute(hsl);\n    //console.log(`toLibraryRgb hsl`, hsl);\n    const rgb = C.hsl2rgb({ h: hsl.h, s: hsl.s, l: hsl.l });\n    return { ...rgb, alpha: (hsl.opacity ?? 100) / 100 * 255 };\n}\n","import { numberInclusiveRangeTest, percentTest, resultThrow } from \"@ixfx/guards\";\nimport Colorizr, * as C from \"colorizr\";\nimport { cssDefinedHexColours } from \"./css-colours.js\";\nimport { angleConvert, angleParse } from \"@ixfx/geometry\";\nimport { calculateHueDistance, wrapScalarHue } from \"./utility.js\";\nimport { clamp, interpolate } from \"@ixfx/numbers\";\nimport { parseCssRgbFunction, to8bit as rgbTo8bit } from \"./srgb.js\";\nexport const OKLCH_CHROMA_MAX = 0.4;\nexport const guard = (lch) => {\n    const { l, c, h, opacity, space, unit } = lch;\n    if (space !== `oklch`)\n        throw new Error(`Space is expected to be 'oklch'. Got: ${space}`);\n    if (unit === `absolute`) {\n        resultThrow(percentTest(l, `l`), () => {\n            if (typeof c === `number`) {\n                return numberInclusiveRangeTest(c, 0, OKLCH_CHROMA_MAX, `c`);\n            }\n        }, () => {\n            if (typeof h === `number`) {\n                return numberInclusiveRangeTest(c, 0, 360, `h`);\n            }\n        }, percentTest((opacity ?? 1), `opacity`));\n    }\n    else if (unit === `scalar`) {\n        // Percentage values for L,C,H\n        resultThrow(percentTest(l, `l`), percentTest(c, `c`), percentTest(h, `h`), percentTest((lch.opacity ?? 1), `opacity`));\n    }\n    else {\n        throw new Error(`Unit is expected to be 'absolute' or 'scalar'. Got: ${unit}`);\n    }\n};\n/**\n * Coverts from the Colorizr library\n * Tests ranges:\n * * l: 0..1\n * * c: 0..1\n * * h: 0..360\n * * alpha: 0..1\n *\n * Default option: { scalar: true }\n * @param lch LCH value\n * @param parsingOptions Options for parsing\n * @returns\n */\nexport function fromLibrary(lch, parsingOptions = {}) {\n    if (typeof lch === `undefined` || lch === null) {\n        if (parsingOptions.fallbackColour)\n            return parsingOptions.fallbackColour;\n    }\n    const scalarReturn = parsingOptions.scalar ?? true;\n    // Validate\n    resultThrow(percentTest(lch.l, `l`), percentTest(lch.c, `c`), numberInclusiveRangeTest(lch.h, 0, 360, `h`), percentTest((lch.alpha ?? 1), `alpha`));\n    if (scalarReturn) {\n        return scalar(lch.l, lch.c / OKLCH_CHROMA_MAX, lch.h / 360, (lch.alpha ?? 1));\n    }\n    else {\n        return absolute(lch.l, lch.c, lch.h, (lch.alpha ?? 1));\n    }\n}\nexport const fromHexString = (hexString, options = {}) => {\n    return fromLibrary(C.hex2oklch(hexString), options);\n};\nconst oklchTransparent = Object.freeze({\n    l: 0, c: 0, h: 0, opacity: 0, unit: `absolute`, space: `oklch`\n});\nexport function fromCss(value, options = {}) {\n    value = value.toLowerCase();\n    if (value.startsWith(`#`)) {\n        return fromHexString(value, options);\n    }\n    if (value === `transparent`)\n        return oklchTransparent;\n    if (typeof cssDefinedHexColours[value] !== `undefined`) {\n        return fromHexString(cssDefinedHexColours[value], options);\n    }\n    if (value.startsWith(`rgb(`)) {\n        const rgb = rgbTo8bit(parseCssRgbFunction(value));\n        const lch = C.rgb2oklch({ r: rgb.r, g: rgb.g, b: rgb.b });\n        return fromLibrary(lch, options);\n    }\n    if (!value.startsWith(`hsl(`) && !value.startsWith(`oklch(`)) {\n        try {\n            const converted = C.convert(value, `oklch`);\n            value = converted;\n        }\n        catch (error) {\n            if (options.fallbackString) {\n                value = options.fallbackString;\n            }\n            else {\n                throw error;\n            }\n        }\n    }\n    const cc = new Colorizr(value);\n    const lch = cc.oklch;\n    return fromLibrary(lch, options);\n    // const c = C.extractColorParts(value);\n    // if (c.model !== `oklch`) {\n    //   if (options.fallbackColour) return options.fallbackColour;\n    //   throw new Error(`Expecting OKLCH colour space. Got: ${ c.model }`);\n    // }\n    // return fromLibrary(c as any as C.LCH, options);\n}\n//export const fromCssScalar = (value: string, options: ParsingOptions<OkLchAbsolute> = {}): OkLchScalar => toScalar(fromCssAbsolute(value, options));\n/**\n * Returns a string or {@link OkLch} value to absolute form.\n *\n * This means ranges are:\n * * lightness: 0..1\n * * chroma: 0...CHROMA_MAX (0.4)\n * * hue: 0..360\n * @param lchOrString\n * @returns\n */\nexport const toAbsolute = (lchOrString) => {\n    if (typeof lchOrString === `string`) {\n        return toAbsolute(fromCss(lchOrString, { scalar: true }));\n    }\n    guard(lchOrString);\n    if (lchOrString.unit === `absolute`)\n        return lchOrString;\n    return {\n        space: `oklch`,\n        unit: `absolute`,\n        l: lchOrString.l,\n        c: lchOrString.c * OKLCH_CHROMA_MAX,\n        h: lchOrString.h * 360,\n        opacity: lchOrString.opacity\n    };\n};\nexport const toScalar = (lchOrString) => {\n    if (typeof lchOrString === `string`) {\n        return toScalar(fromCss(lchOrString, { scalar: true }));\n    }\n    const lch = lchOrString;\n    guard(lch);\n    //console.log(`toScalar input: ${ JSON.stringify(lchOrString) } lch: `, lch);\n    // Already relative\n    if (lch.unit === `scalar`)\n        return lch;\n    // Absolute values\n    return {\n        l: lch.l, // unchanged\n        c: lch.c / OKLCH_CHROMA_MAX,\n        h: lch.h / 360,\n        opacity: (lch.opacity ?? 1),\n        unit: `scalar`,\n        space: `oklch`\n    };\n};\nconst toLibrary = (lch) => {\n    const abs = toAbsolute(lch);\n    return {\n        l: abs.l,\n        c: abs.c,\n        h: abs.h,\n        alpha: abs.opacity,\n    };\n};\n// const libraryLchToScalar = (c: C.LCH): OkLchScalar => {\n//   return {\n//     l: c.h,\n//     c: c.c,\n//     h: c.h / 360,\n//     opacity: c.alpha ?? 1,\n//     unit: `scalar`,\n//     space: `oklch`\n//   }\n// }\n/**\n * Returns the colour as a CSS colour string: `oklch(l c h / opacity)`.\n *\n * @param lch Colour\n * @param precision Set precision of numbers, defaults to 3\n * @returns CSS colour string\n */\nexport const toCssString = (lch, precision = 3) => {\n    guard(lch);\n    const { l, c, h, opacity } = lch;\n    let css = ``;\n    switch (lch.unit) {\n        case `absolute`:\n            css = `oklch(${(l * 100).toFixed(precision)}% ${c.toFixed(precision)} ${h.toFixed(precision)}`;\n            break;\n        case `scalar`:\n            css = `oklch(${l.toFixed(precision)} ${(c * OKLCH_CHROMA_MAX).toFixed(precision)} ${(h * 360).toFixed(precision)}`;\n            break;\n    }\n    if (typeof opacity !== `undefined` && opacity !== 1) {\n        css += ` / ${opacity.toFixed(precision)}`;\n    }\n    css += `)`;\n    return css;\n};\n// export const oklchFromCss = (css: string): OkLchScalar => {\n//   if (css.startsWith(`#`)) {\n//     libraryLchToScalar(C.hex2oklch(css));\n//   }\n//   const p = C.extractColorParts(css);\n//   return libraryToScalar(p);\n// }\n// const libraryToScalar = (colour: unknown): OkLchScalar => {\n//   if (C.isLCH(colour)) {\n//     return libraryLchToScalar(colour);\n//   }\n//   if (C.isRGB(colour)) {\n//     return libraryToScalar(C.rgb2oklch(colour));\n//   }\n//   if (C.isLAB(colour)) {\n//     return libraryToScalar(C.oklab2oklch(colour));\n//   }\n//   if (C.isHSL(colour)) {\n//     return libraryToScalar(C.hsl2oklch(colour));\n//   }\n//   if (C.isHex(colour)) {\n//     return libraryLchToScalar(C.hex2oklch(colour));\n//   }\n//   throw new Error(`Unexpected colour format`);\n// }\n// export const oklchToColorJs = (lch: OkLch): ColorConstructor => {\n//   throwNumberTest(lch.l, `percentage`, `lch.l`);\n//   throwNumberTest(lch.c, `percentage`, `lch.c`);\n//   throwNumberTest(lch.h, `percentage`, `lch.h`);\n//   throwNumberTest(lch.opacity, `percentage`, `lch.opacity`);\n//   return {\n//     alpha: lch.opacity,\n//     coords: [ lch.l, lch.c * 0.4, lch.h * 360 ],\n//     spaceId: `oklch`\n//   }\n// }\n// const oklchToColorJs = (oklch: OkLch) => {\n//   throwNumberTest(oklch.l, `percentage`, `oklch.l`);\n//   throwNumberTest(oklch.c, `percentage`, `oklch.c`);\n//   throwNumberTest(oklch.h, `percentage`, `oklch.h`);\n//   throwNumberTest(oklch.opacity, `percentage`, `oklch.opacity`);\n//   const coords: [ number, number, number ] = [\n//     oklch.l,\n//     oklch.c * 0.4,\n//     oklch.h * 360\n//   ]\n//   return new ColorJs.default(`oklch`, coords, oklch.opacity);\n// }\n// export const isOklch = (p: Colourish | undefined | null): p is OkLch => {\n//   if (typeof p === `undefined` || p === null) return false;\n//   if (typeof p !== `object`) return false;\n//   // Check if Colourjs\n//   //if ((p as ColorJs.ColorObject).spaceId !== undefined) return false;\n//   //if ((p as ColorJs.ColorObject).coords !== undefined) return false;\n//   if (p.space !== `oklch`) return false;\n//   if (typeof p.l === `undefined`) return false;\n//   if (typeof p.c === `undefined`) return false;\n//   if (typeof p.h === `undefined`) return false;\n//   return true;\n// }\nexport const generateScalar = (absoluteHslOrVariable, chroma = 1, lightness = 0.5, opacity = 1) => {\n    if (typeof absoluteHslOrVariable === `string`) {\n        if (absoluteHslOrVariable.startsWith(`--`)) {\n            absoluteHslOrVariable = getComputedStyle(document.body).getPropertyValue(absoluteHslOrVariable).trim();\n        }\n    }\n    if (lightness > 1)\n        throw new TypeError(`Param 'lightness' must be between 0..1`);\n    if (chroma > 1)\n        throw new TypeError(`Param 'chroma' must be between 0..1`);\n    const hue = angleParse(absoluteHslOrVariable);\n    const hueDeg = angleConvert(hue, `deg`).value / 360;\n    if (opacity > 1)\n        throw new TypeError(`Param 'opacity' must be between 0..1`);\n    return {\n        l: lightness,\n        c: chroma,\n        h: hueDeg,\n        opacity: opacity,\n        unit: `scalar`,\n        space: `oklch`\n    };\n};\n/**\n * Scales the opacity value of an input Oklch value\n * ```js\n * withOpacity()\n * ```\n * @param value\n * @param fn\n * @returns\n */\nexport const withOpacity = (value, fn) => {\n    switch (value.unit) {\n        case `absolute`:\n            return {\n                ...value,\n                opacity: fn((value.opacity ?? 100) / 100, value) * 100\n            };\n        case `scalar`:\n            return {\n                ...value,\n                opacity: fn((value.opacity ?? 1), value)\n            };\n    }\n};\nexport const interpolator = (a, b, direction = `shorter`) => {\n    a = toScalar(a);\n    b = toScalar(b);\n    //console.log(`a`, a);\n    //console.log(`b`, b);\n    const aOpacity = a.opacity ?? 1;\n    const distanceCalc = calculateHueDistance(a.h, b.h, 1);\n    const hueDistance = direction === `longer` ? distanceCalc.long : distanceCalc.short;\n    const chromaDistance = b.c - a.c;\n    const lightDistance = b.l - a.l;\n    const opacityDistance = (b.opacity ?? 1) - aOpacity;\n    //console.log(`distanceCalc`, distanceCalc);\n    //console.log(`interpolator distances: hue: ${ hueDistance } c: ${ chromaDistance } light: ${ lightDistance } opacity: ${ opacityDistance }`);\n    return (amount) => {\n        amount = clamp(amount);\n        let h = interpolate(amount, 0, Math.abs(hueDistance));\n        if (hueDistance < 0)\n            h = a.h - h;\n        else\n            h = a.h + h;\n        const c = interpolate(amount, 0, chromaDistance);\n        const l = interpolate(amount, 0, lightDistance);\n        const o = interpolate(amount, 0, opacityDistance);\n        //console.log(`amount: ${ amount } h: ${ h } s: ${ s } l: ${ l } o: ${ o }`);\n        return scalar(l + a.l, c + a.c, wrapScalarHue(h), o + aOpacity);\n    };\n};\nexport function scalar(lightness = 0.7, chroma = 0.1, hue = 0.5, opacity = 1) {\n    const lch = {\n        unit: `scalar`,\n        space: `oklch`,\n        l: lightness,\n        c: chroma,\n        h: hue,\n        opacity: opacity\n    };\n    guard(lch);\n    return lch;\n}\n/**\n * Create an LCH colour using absolute hue\n * @param l Lightness 0..1\n * @param c Chroma 0..4\n * @param h Hue 0..360\n * @param opacity\n * @returns\n */\nexport const absolute = (l, c, h, opacity = 1) => {\n    const lch = {\n        space: `oklch`,\n        unit: `absolute`,\n        opacity,\n        l, c, h\n    };\n    guard(lch);\n    return lch;\n};\n","import * as SrgbSpace from \"./srgb.js\";\nimport * as HslSpace from './hsl.js';\nimport * as OklchSpace from './oklch.js';\n/**\n * Converts from some kind of colour that is legal in CSS\n * into a structured Colour type.\n *\n * Handles: hex format, CSS variables, colour names\n * ```js\n * fromCssColour(`#ffffff`);\n * fromCssColour(`blue`);\n * fromCssColour(`--some-variable`);\n * fromCssColour(`hsl(50, 50%, 50%)`);\n * fromCssColour(`rgb(50, 100, 100)`);\n * ```\n * @param colour\n * @returns\n */\nexport const fromCssColour = (colour) => {\n    if (colour.startsWith(`#`)) {\n        return SrgbSpace.fromHexString(colour, true);\n    }\n    if (typeof cssDefinedHexColours[colour] !== `undefined`) {\n        return SrgbSpace.fromHexString(cssDefinedHexColours[colour], true);\n    }\n    if (colour.startsWith(`--`)) {\n        const fromCss = getComputedStyle(document.body).getPropertyValue(colour).trim();\n        if (fromCss.length === 0 || fromCss === null)\n            throw new Error(`Variable missing: ${colour}`);\n        return fromCssColour(fromCss);\n    }\n    colour = colour.toLowerCase();\n    if (colour.startsWith(`hsl(`)) {\n        return HslSpace.fromCss(colour, { scalar: true });\n    }\n    if (colour.startsWith(`rgb(`)) {\n        return SrgbSpace.fromCss(colour, { scalar: true });\n    }\n    if (colour.startsWith(`oklch(`)) {\n        return OklchSpace.fromCss(colour, { scalar: true });\n    }\n    throw new Error(`String colour is not a hex colour, CSS variable nor well-defined colour. Input: '${colour}'`);\n};\n/**\n * Resolves a named colour or CSS variable to a colour string.\n * Doesn't do conversion or parsing.\n *\n * ```js\n * resolveCss(`red`);\n * resolveCss(`my-var`);\n * ```\n * @param colour Colour\n * @param fallback Fallback if CSS variable is missing\n * @returns\n */\nexport const resolveCss = (colour, fallback) => {\n    if (colour.startsWith(`--`)) {\n        const fromCss = getComputedStyle(document.body).getPropertyValue(colour).trim();\n        if (fromCss.length === 0 || fromCss === null) {\n            if (typeof fallback !== `undefined`)\n                return fallback;\n            throw new Error(`CSS variable missing: '${colour}'`);\n        }\n        return resolveCss(fromCss); // Recurse, because value might be a named colour\n    }\n    if (typeof cssDefinedHexColours[colour] !== `undefined`) {\n        return cssDefinedHexColours[colour];\n    }\n    return colour; // assume legit\n};\nexport const cssDefinedHexColours = {\n    \"aliceblue\": \"#f0f8ff\",\n    \"antiquewhite\": \"#faebd7\",\n    \"aqua\": \"#00ffff\",\n    \"aquamarine\": \"#7fffd4\",\n    \"azure\": \"#f0ffff\",\n    \"beige\": \"#f5f5dc\",\n    \"bisque\": \"#ffe4c4\",\n    \"black\": \"#000000\",\n    \"blanchedalmond\": \"#ffebcd\",\n    \"blue\": \"#0000ff\",\n    \"blueviolet\": \"#8a2be2\",\n    \"brown\": \"#a52a2a\",\n    \"burlywood\": \"#deb887\",\n    \"cadetblue\": \"#5f9ea0\",\n    \"chartreuse\": \"#7fff00\",\n    \"chocolate\": \"#d2691e\",\n    \"coral\": \"#ff7f50\",\n    \"cornflowerblue\": \"#6495ed\",\n    \"cornsilk\": \"#fff8dc\",\n    \"crimson\": \"#dc143c\",\n    \"cyan\": \"#00ffff\",\n    \"darkblue\": \"#00008b\",\n    \"darkcyan\": \"#008b8b\",\n    \"darkgoldenrod\": \"#b8860b\",\n    \"darkgray\": \"#a9a9a9\",\n    \"darkgreen\": \"#006400\",\n    \"darkkhaki\": \"#bdb76b\",\n    \"darkmagenta\": \"#8b008b\",\n    \"darkolivegreen\": \"#556b2f\",\n    \"darkorange\": \"#ff8c00\",\n    \"darkorchid\": \"#9932cc\",\n    \"darkred\": \"#8b0000\",\n    \"darksalmon\": \"#e9967a\",\n    \"darkseagreen\": \"#8fbc8f\",\n    \"darkslateblue\": \"#483d8b\",\n    \"darkslategray\": \"#2f4f4f\",\n    \"darkturquoise\": \"#00ced1\",\n    \"darkviolet\": \"#9400d3\",\n    \"deeppink\": \"#ff1493\",\n    \"deepskyblue\": \"#00bfff\",\n    \"dimgray\": \"#696969\",\n    \"dodgerblue\": \"#1e90ff\",\n    \"firebrick\": \"#b22222\",\n    \"floralwhite\": \"#fffaf0\",\n    \"forestgreen\": \"#228b22\",\n    \"fuchsia\": \"#ff00ff\",\n    \"gainsboro\": \"#dcdcdc\",\n    \"ghostwhite\": \"#f8f8ff\",\n    \"gold\": \"#ffd700\",\n    \"goldenrod\": \"#daa520\",\n    \"gray\": \"#808080\",\n    \"green\": \"#008000\",\n    \"greenyellow\": \"#adff2f\",\n    \"honeydew\": \"#f0fff0\",\n    \"hotpink\": \"#ff69b4\",\n    \"indianred\": \"#cd5c5c\",\n    \"indigo\": \"#4b0082\",\n    \"ivory\": \"#fffff0\",\n    \"khaki\": \"#f0e68c\",\n    \"lavender\": \"#e6e6fa\",\n    \"lavenderblush\": \"#fff0f5\",\n    \"lawngreen\": \"#7cfc00\",\n    \"lemonchiffon\": \"#fffacd\",\n    \"lightblue\": \"#add8e6\",\n    \"lightcoral\": \"#f08080\",\n    \"lightcyan\": \"#e0ffff\",\n    \"lightgoldenrodyellow\": \"#fafad2\",\n    \"lightgray\": \"#d3d3d3\",\n    \"lightgreen\": \"#90ee90\",\n    \"lightpink\": \"#ffb6c1\",\n    \"lightsalmon\": \"#ffa07a\",\n    \"lightseagreen\": \"#20b2aa\",\n    \"lightskyblue\": \"#87cefa\",\n    \"lightslategray\": \"#778899\",\n    \"lightsteelblue\": \"#b0c4de\",\n    \"lightyellow\": \"#ffffe0\",\n    \"lime\": \"#00ff00\",\n    \"limegreen\": \"#32cd32\",\n    \"linen\": \"#faf0e6\",\n    \"magenta\": \"#ff00ff\",\n    \"maroon\": \"#800000\",\n    \"mediumaquamarine\": \"#66cdaa\",\n    \"mediumblue\": \"#0000cd\",\n    \"mediumorchid\": \"#ba55d3\",\n    \"mediumpurple\": \"#9370db\",\n    \"mediumseagreen\": \"#3cb371\",\n    \"mediumslateblue\": \"#7b68ee\",\n    \"mediumspringgreen\": \"#00fa9a\",\n    \"mediumturquoise\": \"#48d1cc\",\n    \"mediumvioletred\": \"#c71585\",\n    \"midnightblue\": \"#191970\",\n    \"mintcream\": \"#f5fffa\",\n    \"mistyrose\": \"#ffe4e1\",\n    \"moccasin\": \"#ffe4b5\",\n    \"navajowhite\": \"#ffdead\",\n    \"navy\": \"#000080\",\n    \"oldlace\": \"#fdf5e6\",\n    \"olive\": \"#808000\",\n    \"olivedrab\": \"#6b8e23\",\n    \"orange\": \"#ffa500\",\n    \"orangered\": \"#ff4500\",\n    \"orchid\": \"#da70d6\",\n    \"palegoldenrod\": \"#eee8aa\",\n    \"palegreen\": \"#98fb98\",\n    \"paleturquoise\": \"#afeeee\",\n    \"palevioletred\": \"#db7093\",\n    \"papayawhip\": \"#ffefd5\",\n    \"peachpuff\": \"#ffdab9\",\n    \"peru\": \"#cd853f\",\n    \"pink\": \"#ffc0cb\",\n    \"plum\": \"#dda0dd\",\n    \"powderblue\": \"#b0e0e6\",\n    \"purple\": \"#800080\",\n    \"rebeccapurple\": \"#663399\",\n    \"red\": \"#ff0000\",\n    \"rosybrown\": \"#bc8f8f\",\n    \"royalblue\": \"#4169e1\",\n    \"saddlebrown\": \"#8b4513\",\n    \"salmon\": \"#fa8072\",\n    \"sandybrown\": \"#f4a460\",\n    \"seagreen\": \"#2e8b57\",\n    \"seashell\": \"#fff5ee\",\n    \"sienna\": \"#a0522d\",\n    \"silver\": \"#c0c0c0\",\n    \"skyblue\": \"#87ceeb\",\n    \"slateblue\": \"#6a5acd\",\n    \"slategray\": \"#708090\",\n    \"snow\": \"#fffafa\",\n    \"springgreen\": \"#00ff7f\",\n    \"steelblue\": \"#4682b4\",\n    \"tan\": \"#d2b48c\",\n    \"teal\": \"#008080\",\n    \"thistle\": \"#d8bfd8\",\n    \"tomato\": \"#ff6347\",\n    \"turquoise\": \"#40e0d0\",\n    \"violet\": \"#ee82ee\",\n    \"wheat\": \"#f5deb3\",\n    \"white\": \"#ffffff\",\n    \"whitesmoke\": \"#f5f5f5\",\n    \"yellow\": \"#ffff00\",\n    \"yellowgreen\": \"#9acd32\",\n    \"transparent\": \"#00000000\"\n};\n","import Colorizr, * as C from \"colorizr\";\nimport { numberInclusiveRangeTest, numberTest } from \"@ixfx/guards\";\nimport { resultThrow } from \"@ixfx/guards\";\nimport { cssDefinedHexColours } from \"./css-colours.js\";\nimport { clamp, interpolate } from \"@ixfx/numbers\";\nimport { toLibraryRgb as hslToLibraryRgb } from \"./hsl.js\";\nimport { isHsl } from \"./guards.js\";\nexport const withOpacity = (value, fn) => {\n    switch (value.unit) {\n        case `8bit`:\n            return {\n                ...value,\n                opacity: fn((value.opacity ?? 255) / 255, value) * 255\n            };\n        case `scalar`:\n            return {\n                ...value,\n                opacity: fn((value.opacity ?? 1), value)\n            };\n    }\n};\nexport function fromHexString(hexString, scalar = true) {\n    return fromLibrary(C.hex2rgb(hexString), { scalar });\n}\n;\nconst srgbTansparent = Object.freeze({\n    r: 0, g: 0, b: 0, opacity: 0, unit: `8bit`, space: `srgb`\n});\n/**\n * Converts a colour in a legal CSS form into Rgb value, by default RgbScalar (0..1) scale.\n * ```js\n * fromCss(`rebeccapurple`);\n * fromCss(`rgb(40% 20% 60%)`);\n *\n * // Get 8bit version on 0..255 scale\n * fromCss(`blue`, { scalar: false });\n * ```\n *\n * @param value\n * @param options\n * @returns\n */\nexport function fromCss(value, options = {}) {\n    value = value.toLowerCase();\n    if (value.startsWith(`hsla(`))\n        throw new Error(`hsla() not supported`);\n    if (value.startsWith(`rgba(`))\n        throw new Error(`rgba() not supported`);\n    const scalar = options.scalar ?? true;\n    // Convert from hex\n    if (value.startsWith(`#`))\n        return fromHexString(value, scalar);\n    // Special-case transparent\n    if (value === `transparent`)\n        return srgbTansparent;\n    // Convert from named colour\n    if (typeof cssDefinedHexColours[value] !== `undefined`)\n        fromHexString(cssDefinedHexColours[value], scalar);\n    if (value.startsWith(`hsl(`)) {\n        const rgb = hslToLibraryRgb(value);\n        return fromLibrary(rgb, options);\n    }\n    // if (value.startsWith(`hsl(`)) {\n    //   const hslRel = hslToScalar(parseCssHslFunction(value));\n    //   const rgb = C.hsl2rgb({ h: hslRel.h, s: hslRel.s, l: hslRel.l, alpha: hslRel.opacity ?? 1 });\n    //   return fromLibrary(rgb, options);\n    // }\n    // Convert to rgb() colour function\n    if (!value.startsWith(`rgb(`)) {\n        try {\n            value = C.convert(value, `rgb`);\n        }\n        catch (error) {\n            if (options.fallbackString) {\n                value = options.fallbackString;\n            }\n            else {\n                throw error;\n            }\n        }\n    }\n    try {\n        // Hand-rolled rgb() parse because the package is broken\n        const rgb = parseCssRgbFunction(value);\n        if (scalar)\n            return toScalar(rgb);\n        return to8bit(rgb);\n    }\n    catch (error) {\n        if (options.fallbackColour)\n            return options.fallbackColour;\n        throw error;\n    }\n}\nexport const toCssString = (rgb) => {\n    guard(rgb);\n    switch (rgb.unit) {\n        case `8bit`:\n            if (rgb.opacity === undefined || rgb.opacity === 255) {\n                return `rgb(${rgb.r} ${rgb.g} ${rgb.b})`;\n            }\n            return `rgb(${rgb.r} ${rgb.g} ${rgb.b} / ${(rgb.opacity ?? 255) / 255})`;\n        case `scalar`:\n            if (rgb.opacity === undefined || rgb.opacity === 1) {\n                return `rgb(${rgb.r * 100}% ${rgb.g * 100}% ${rgb.b * 100}%)`;\n            }\n            return `rgb(${rgb.r * 100}% ${rgb.g * 100}% ${rgb.b * 100}% / ${(rgb.opacity ?? 1) * 100}%)`;\n        default:\n            throw new Error(`Unknown unit: ${rgb.unit}`);\n    }\n};\nconst toLibrary = (rgb) => {\n    const abs = to8bit(rgb);\n    return {\n        r: abs.r,\n        g: abs.g,\n        b: abs.b,\n        alpha: abs.opacity,\n    };\n};\nfunction fromLibrary(rgb, parsingOptions = {}) {\n    if (parsingOptions.scalar) {\n        return {\n            r: rgb.r / 255,\n            g: rgb.g / 255,\n            b: rgb.b / 255,\n            opacity: rgb.alpha ?? 1,\n            unit: `scalar`,\n            space: `srgb`\n        };\n    }\n    else {\n        return {\n            r: rgb.r,\n            g: rgb.g,\n            b: rgb.b,\n            opacity: rgb.alpha ?? 255,\n            unit: `8bit`,\n            space: `srgb`\n        };\n    }\n}\nexport const to8bit = (rgbOrString) => {\n    if (typeof rgbOrString === `string`) {\n        return fromCss(rgbOrString, { scalar: false });\n    }\n    if (isHsl(rgbOrString)) {\n        return to8bit(fromLibrary(hslToLibraryRgb(rgbOrString), { scalar: false }));\n    }\n    guard(rgbOrString);\n    if (rgbOrString.unit === `8bit`)\n        return rgbOrString;\n    return {\n        r: rgbOrString.r * 255,\n        g: rgbOrString.g * 255,\n        b: rgbOrString.b * 255,\n        opacity: (rgbOrString.opacity ?? 1) * 255,\n        unit: `8bit`,\n        space: `srgb`\n    };\n};\nexport const toScalar = (rgbOrString) => {\n    if (typeof rgbOrString === `string`) {\n        return fromCss(rgbOrString, { scalar: true });\n    }\n    if (isHsl(rgbOrString)) {\n        return toScalar(fromLibrary(hslToLibraryRgb(rgbOrString), { scalar: true }));\n    }\n    guard(rgbOrString);\n    if (rgbOrString.unit === `scalar`)\n        return rgbOrString;\n    return {\n        r: rgbOrString.r / 255,\n        g: rgbOrString.g / 255,\n        b: rgbOrString.b / 255,\n        opacity: (rgbOrString.opacity ?? 1) / 255,\n        unit: `scalar`,\n        space: `srgb`\n    };\n};\nexport const guard = (rgb) => {\n    const { r, g, b, opacity, space, unit } = rgb;\n    if (space !== `srgb`)\n        throw new Error(`Space is expected to be 'srgb'. Got: ${space}`);\n    if (unit === `8bit`) {\n        resultThrow(numberInclusiveRangeTest(r, 0, 255, `r`), numberInclusiveRangeTest(g, 0, 255, `g`), numberInclusiveRangeTest(b, 0, 255, `b`), () => {\n            if (typeof opacity === `number`) {\n                return numberInclusiveRangeTest(opacity, 0, 255, `opacity`);\n            }\n        });\n    }\n    else if (unit === `scalar`) {\n        resultThrow(numberTest(r, `percentage`, `r`), numberTest(g, `percentage`, `g`), numberTest(b, `percentage`, `b`), () => {\n            if (typeof opacity === `number`) {\n                return numberTest(opacity, `percentage`, `opacity`);\n            }\n        });\n    }\n    else {\n        throw new Error(`Unit is expected to be '8bit' or 'scalar'. Got: ${unit}`);\n    }\n};\n/**\n * Sets the lightness value.\n *\n * Amount to change:\n * * 'fixed': a fixed amount\n * * 'delta': increase/decrease by this amount\n * * 'pdelta': proportion of current value to change by ('percentage delta')\n *\n * Use negative values to decrease\n * @param value\n * @param amount\n */\nexport const changeLightness = (rgb, amount) => {\n    let newL = 0;\n    const co = new Colorizr(toCssString(rgb));\n    const scalarUnit = rgb.unit === `scalar`;\n    if (typeof amount.pdelta !== `undefined`) {\n        newL = co.oklab.l + (co.oklab.l * amount.pdelta);\n    }\n    else if (typeof amount.delta !== `undefined`) {\n        newL = co.oklab.l + amount.delta;\n    }\n    else if (typeof amount.fixed !== `undefined`) {\n        if (amount.fixed < 0)\n            throw new TypeError(`Amount cannot be negative when using 'fixed'`);\n        newL = amount.fixed;\n    }\n    else {\n        throw new TypeError(`Parameter 'amount' is missing 'pdelta/delta/fixed' properties`);\n    }\n    if (newL < 0)\n        newL = 0;\n    else if (newL > 1)\n        newL = 1;\n    const rgbResult = C.oklab2rgb({ a: co.oklab.a, b: co.oklab.b, l: newL, alpha: co.oklab.alpha });\n    return fromLibrary(rgbResult, { scalar: scalarUnit });\n    //return eightBit ? fromLibrary8bit(rgbResult) : fromLibraryScalar(rgbResult);\n};\n/**\n * Returns a lightness value (0..1) for an RGB input\n *\n * Calculates lightness by converting to Oklab and using the 'L' value\n * @param rgb\n * @returns\n */\nexport function lightness(rgb) {\n    const co = new Colorizr(toCssString(rgb));\n    return co.oklab.l;\n}\nconst scaleProperty = (rgb, value, property) => {\n    if (rgb.unit === `scalar`) {\n        // 0..1 scale\n        if (value > 1)\n            value = 1;\n        else if (value < 0)\n            value = 0;\n    }\n    else {\n        // 0..255 scale\n        if (value > 255)\n            value = 255;\n        else if (value < 0)\n            value = 0;\n    }\n    return value;\n};\n/**\n * Creates a Rgb8Bit value from 8bit (0..255) values\n * @param red\n * @param green\n * @param blue\n * @param opacity\n * @returns\n */\nexport function eightBit(red = 100, green = 100, blue = 100, opacity = 255) {\n    const rgb = {\n        unit: `8bit`,\n        space: `srgb`,\n        r: red,\n        g: green,\n        b: blue,\n        opacity: opacity\n    };\n    guard(rgb);\n    return rgb;\n}\n/**\n * Creates a RgbScalar value from scalar (0..1) values\n * @param red\n * @param green\n * @param blue\n * @param opacity\n * @returns\n */\nexport function scalar(red = 0.5, green = 0.5, blue = 0.5, opacity = 1) {\n    const rgb = {\n        unit: `scalar`,\n        space: `srgb`,\n        r: red,\n        g: green,\n        b: blue,\n        opacity: opacity\n    };\n    guard(rgb);\n    return rgb;\n}\n/**\n * It seems Colorizr can't handle % values properly :'(\n * @param value\n */\nexport function parseCssRgbFunction(value) {\n    if (value.startsWith(`rgba`))\n        throw new Error(`RGBA is not supported`);\n    if (!value.startsWith(`rgb(`))\n        throw new Error(`Expected rgb(..) CSS colour`);\n    const start = value.indexOf('(');\n    const end = value.indexOf(')');\n    if (end < start)\n        throw new Error(`Is rgb() not terminated? Missing ')'`);\n    const part = value.substring(start + 1, end);\n    let split = part.split(/[\\s,]+/);\n    if (split.length < 3)\n        throw new Error(`Expected three tokens. Got: ${split.length} length`);\n    let relativeCount = 0;\n    for (const s of split) {\n        if (s.endsWith('%'))\n            relativeCount++;\n    }\n    const valueAsScalar = (v, pos) => {\n        if (v.endsWith(`%`)) {\n            return Number.parseFloat(v.substring(0, v.length - 1)) / 100;\n        }\n        if (pos < 3) {\n            // r, g or b\n            return Number.parseFloat(v) / 255;\n        }\n        else {\n            // opacity should already be in scalar value\n            return Number.parseFloat(v);\n        }\n    };\n    const valueAs8bit = (v, pos) => {\n        if (v.endsWith(`%`)) {\n            return Number.parseFloat(v.substring(0, v.length - 1)) / 100 * 255;\n        }\n        if (pos < 3) {\n            // r, g or b\n            return Number.parseFloat(v);\n        }\n        else {\n            // opacity should already be in scalar value\n            return Number.parseFloat(v) * 255;\n        }\n    };\n    // Is there opacity?\n    if (split.length > 3) {\n        if (split[3] === '/') {\n            // Remove / part\n            split = [split[0], split[1], split[2], split[4]];\n        }\n    }\n    if (relativeCount > 1) {\n        // Return as scalar\n        return scalar(valueAsScalar(split[0], 0), valueAsScalar(split[1], 1), valueAsScalar(split[2], 2), valueAsScalar(split[3] ?? `1`, 3));\n    }\n    else {\n        // Return as 8bit\n        return eightBit(valueAs8bit(split[0], 0), valueAs8bit(split[1], 1), valueAs8bit(split[2], 2), valueAs8bit(split[3] ?? `1`, 3));\n    }\n}\n/**\n * Interpolates colours in Srgb space. Probably\n * really ugly, use OkLch space isntead.\n *\n * ```js\n * const i = interpolator(`red`, `blue`);\n * i(0.5); // Get 50% between these colours\n * ```\n * @param colourA\n * @param colourB\n * @returns\n */\nexport const interpolator = (colourA, colourB) => {\n    const aa = toScalar(colourA);\n    const bb = toScalar(colourB);\n    const aOpacity = aa.opacity ?? 1;\n    const opacityDistance = (bb.opacity ?? 1) - aOpacity;\n    const r = bb.r - aa.r;\n    const g = bb.g - aa.g;\n    const b = bb.b - aa.b;\n    return (amount) => {\n        amount = clamp(amount);\n        return scalar(aa.r + interpolate(amount, 0, r), aa.g + interpolate(amount, 0, g), aa.b + interpolate(amount, 0, b), aOpacity + interpolate(amount, 0, opacityDistance));\n    };\n};\n/**\n * Converts a Rgb structure (or CSS string) to Colorizr's HSL format\n * @param rgb\n * @returns\n */\nexport function toLibraryHsl(rgb) {\n    if (typeof rgb === `string`) {\n        const parseResult = fromCss(rgb, { scalar: false });\n        return toLibraryHsl(parseResult);\n    }\n    rgb = to8bit(rgb);\n    const hsl = C.rgb2hsl({ r: rgb.r, g: rgb.g, b: rgb.b });\n    return { ...hsl, alpha: (rgb.opacity ?? 255) / 255 };\n}\n","import Colorizr, * as C from \"colorizr\";\nimport {} from \"./types.js\";\nimport * as SrgbSpace from \"./srgb.js\";\nimport * as HslSpace from './hsl.js';\nimport * as OkLchSpace from './oklch.js';\nimport { fromCssColour } from \"./css-colours.js\";\nimport { isHsl, isRgb, tryParseObjectToRgb, tryParseObjectToHsl, isColourish, isOkLch } from \"./guards.js\";\nimport { OklchSpace } from \"./index.js\";\n/**\n * Converts an object or string representation of colour to ixfx's\n * structured colour.\n * Use {@link convertToString} if you want a CSS colour string instead.\n * @param colour\n * @param destination\n * @returns\n */\nexport function convert(colour, destination) {\n    if (destination === `hsl-scalar`) {\n        if (typeof colour === `string` || isHsl(colour) || isRgb(colour)) {\n            return HslSpace.toScalar(colour);\n        }\n    }\n    else if (destination === `hsl-absolute`) {\n        if (typeof colour === `string` || isHsl(colour)) {\n            return HslSpace.toAbsolute(colour);\n        }\n    }\n    else if (destination === `oklch-scalar`) {\n        if (typeof colour === `string` || isOkLch(colour)) {\n            return OkLchSpace.toScalar(colour);\n        }\n    }\n    else if (destination === `oklch-absolute`) {\n        if (typeof colour === `string` || isOkLch(colour)) {\n            return OkLchSpace.toAbsolute(colour);\n        }\n    }\n    else if (destination === `srgb-8bit`) {\n        if (typeof colour === `string` || isRgb(colour)) {\n            return SrgbSpace.to8bit(colour);\n        }\n    }\n    else if (destination === `srgb-scalar`) {\n        if (typeof colour === `string` || isRgb(colour)) {\n            return SrgbSpace.toScalar(colour);\n        }\n    }\n    else {\n        throw new Error(`Destination '${destination}' not supported for input: ${JSON.stringify(colour)}`);\n    }\n    return convert(toCssColour(colour), destination);\n}\n/**\n * Like {@link convert}, but result is a CSS colour string\n * @param colour\n * @param destination\n * @returns\n */\nexport function convertToString(colour, destination) {\n    const c = convert(colour, destination);\n    return toCssColour(c);\n}\nexport function convertScalar(colour, destination) {\n    if (destination === `oklch`)\n        return convert(colour, `oklch-scalar`);\n    if (destination === `srgb`)\n        return convert(colour, `srgb-scalar`);\n    if (destination === `hsl`)\n        return convert(colour, `hsl-scalar`);\n    throw new Error(`Unknown destination: '${destination}'`);\n}\nexport const toCssColour = (colour) => {\n    if (typeof colour === `string`)\n        return colour;\n    if (isHsl(colour)) {\n        return HslSpace.toCssString(colour);\n    }\n    if (isRgb(colour)) {\n        return SrgbSpace.toCssString(colour);\n    }\n    if (isOkLch(colour)) {\n        return OklchSpace.toCssString(colour);\n    }\n    const asRgb = tryParseObjectToRgb(colour);\n    if (asRgb)\n        return SrgbSpace.toCssString(asRgb);\n    const asHsl = tryParseObjectToHsl(colour);\n    if (asHsl)\n        return HslSpace.toCssString(asHsl);\n    throw new Error(`Unknown colour format: '${JSON.stringify(colour)}'`);\n};\nexport const toLibraryColour = (colour) => {\n    const asCss = toCssColour(colour);\n    return new Colorizr(asCss);\n};\n// export const convertColourString = (colour: string, destination: 'hex' | 'hsl' | 'oklab' | 'oklch' | 'srgb' | `rgb`): string => {\n//   if (destination === `srgb`) destination = `rgb`;\n//   return C.convert(colour, destination);\n// }\nexport const guard = (colour) => {\n    switch (colour.space) {\n        case `hsl`:\n            HslSpace.guard(colour);\n            break;\n        case `srgb`:\n            SrgbSpace.guard(colour);\n            break;\n        case `oklch`:\n            OkLchSpace.guard(colour);\n            break;\n        default:\n            throw new Error(`Unsupported colour space: '${colour.space}'`);\n    }\n};\nexport const toColour = (colourish) => {\n    if (!isColourish(colourish))\n        throw new Error(`Could not parse input. Expected CSS colour string or structured colour {r,g,b}, {h,s,l} etc. Got: ${JSON.stringify(colourish)}`);\n    let c;\n    if (typeof colourish === `string`)\n        c = fromCssColour(colourish);\n    else\n        c = colourish;\n    if (c === undefined)\n        throw new Error(`Could not parse input. Expected CSS colour string or structured colour {r,g,b}, {h,s,l} etc.`);\n    guard(c);\n    return c;\n};\n/**\n * Returns a CSS-ready string\n * representation.\n * ```js\n * element.style.backgroundColor = resolveToString(`red`);\n * ```\n *\n * Tries each parameter in turn, returning the value\n * for the first that resolves. This can be useful for\n * having fallback values.\n *\n * ```js\n * // Try a CSS variable, a object property or finally fallback to red.\n * element.style.backgroundColor = toStringFirst('--some-var', opts.background, `red`);\n * ```\n * @param colours Array of colours to resolve\n * @returns\n */\nexport const toStringFirst = (...colours) => {\n    for (const colour of colours) {\n        if (colour === undefined)\n            continue;\n        if (colour === null)\n            continue;\n        try {\n            const c = toColour(colour);\n            return toCssColour(c);\n        }\n        catch { /* empty */ }\n    }\n    return `rebeccapurple`;\n};\nexport function rgbToHsl(rgb, scalarResult) {\n    // Needed because the Colorizr package has broken RGB to HSL\n    // Converts rgb { model: 'rgb', r: 40, g: 20, b: 60, alpha: undefined }\n    // to : { h: 270, s: 50, l: 0.06 }\n    // when it should be: { h: 270, s: 50, l: 40 }\n    // Source: https://www.jameslmilner.com/posts/converting-rgb-hex-hsl-colors/\n    let { r, g, b } = rgb;\n    const opacity = rgb.opacity ?? 1;\n    if (rgb.unit === `8bit`) {\n        r /= 255;\n        g /= 255;\n        b /= 255;\n    }\n    const max = Math.max(r, g, b);\n    const min = Math.min(r, g, b);\n    let h = (max + min) / 2;\n    let s = h;\n    const l = h;\n    if (max === min) {\n        // Achromatic\n        if (scalarResult) {\n            return HslSpace.scalar(0, 0, 0, opacity);\n        }\n        else {\n            return HslSpace.absolute(0, 0, 0, opacity);\n        }\n    }\n    const d = max - min;\n    s = l >= 0.5 ? d / (2 - (max + min)) : d / (max + min);\n    switch (max) {\n        case r:\n            h = ((g - b) / d + 0) * 60;\n            break;\n        case g:\n            h = ((b - r) / d + 2) * 60;\n            break;\n        case b:\n            h = ((r - g) / d + 4) * 60;\n            break;\n    }\n    if (scalarResult) {\n        return HslSpace.scalar(h / 360, s, l, opacity);\n    }\n    else {\n        return HslSpace.absolute(h, s * 100, l * 100, opacity);\n    }\n}\n"],"x_google_ignoreList":[0],"mappings":"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"}