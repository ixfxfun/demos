{"version":3,"file":"basic-Igpk8-Sv.js","names":["max","min","tally"],"sources":["../../process/dist/src/basic.js"],"sourcesContent":["/**\n * Outputs the current largest-seen value\n * @returns\n */\nexport const max = () => {\n    let max = Number.MIN_SAFE_INTEGER;\n    const compute = (value) => {\n        const valueArray = Array.isArray(value) ? value : [value];\n        for (const subValue of valueArray) {\n            if (typeof subValue !== `number`)\n                break;\n            max = Math.max(subValue, max);\n        }\n        return max;\n    };\n    return compute;\n};\n/**\n * Outputs the current smallest-seen value\n * @returns\n */\nexport const min = () => {\n    let min = Number.MAX_SAFE_INTEGER;\n    const compute = (value) => {\n        const valueArray = Array.isArray(value) ? value : [value];\n        for (const subValue of valueArray) {\n            if (typeof subValue !== `number`)\n                break;\n            min = Math.min(subValue, min);\n        }\n        return min;\n    };\n    return compute;\n};\n/**\n * Returns a sum of values\n * @returns\n */\nexport const sum = () => {\n    let t = 0;\n    const compute = (value) => {\n        const valueArray = Array.isArray(value) ? value : [value];\n        for (const subValue of valueArray) {\n            if (typeof subValue !== `number`)\n                continue;\n            t += subValue;\n        }\n        return t;\n    };\n    return compute;\n};\n/**\n * Returns the current average of input values\n * @returns\n */\nexport const average = () => {\n    let total = 0;\n    let tally = 0;\n    const compute = (value) => {\n        const valueArray = Array.isArray(value) ? value : [value];\n        for (const subValue of valueArray) {\n            if (typeof subValue !== `number`)\n                continue;\n            tally++;\n            total += subValue;\n        }\n        return total / tally;\n    };\n    return compute;\n};\n/**\n * Returns the tally (ie number of) values\n * @param countArrayItems\n * @returns\n */\nexport const tally = (countArrayItems) => {\n    let t = 0;\n    const compute = (value) => {\n        if (countArrayItems) {\n            if (Array.isArray(value))\n                t += value.length;\n            else\n                t++;\n        }\n        else {\n            t++;\n        }\n        return t;\n    };\n    return compute;\n};\n/**\n * Returns the 'best' value seen so far as determined by a ranking function.\n * This is similar to min/max but usable for objects.\n * @param r\n * @param options\n * @returns\n */\nexport function rank(r, options = {}) {\n    const includeType = options.includeType;\n    const emitEqualRanked = options.emitEqualRanked ?? false;\n    const emitRepeatHighest = options.emitRepeatHighest ?? false;\n    let best;\n    return (value) => {\n        if (includeType && typeof value !== includeType)\n            return;\n        if (best === undefined) {\n            best = value;\n            return best;\n        }\n        else {\n            const result = r(value, best);\n            //console.log(`result: ${ result } value: ${ JSON.stringify(value) } best: ${ JSON.stringify(best) }`);\n            if (result == `a`) {\n                // New value is the current best\n                best = value;\n                return best;\n            }\n            else if (result === `eq` && emitEqualRanked) {\n                // New value is same rank as previous, but we have flag on\n                return best;\n            }\n            else if (emitRepeatHighest) {\n                // Emit current highest due to flag\n                return best;\n            }\n        }\n    };\n}\n"],"mappings":";;;;;AAIA,MAAa,MAAM,MAAM;CACrB,IAAIA,QAAM,OAAO;CACjB,MAAM,UAAU,CAAC,UAAU;EACvB,MAAM,aAAa,MAAM,QAAQ,MAAM,GAAG,QAAQ,CAAC,KAAM;AACzD,OAAK,MAAM,YAAY,YAAY;AAC/B,OAAI,OAAO,aAAa,CAAC,MAAM,CAAC,CAC5B;GACJA,QAAM,KAAK,IAAI,UAAUA,MAAI;EAChC;AACD,SAAOA;CACV;AACD,QAAO;AACV;;;;;AAKD,MAAa,MAAM,MAAM;CACrB,IAAIC,QAAM,OAAO;CACjB,MAAM,UAAU,CAAC,UAAU;EACvB,MAAM,aAAa,MAAM,QAAQ,MAAM,GAAG,QAAQ,CAAC,KAAM;AACzD,OAAK,MAAM,YAAY,YAAY;AAC/B,OAAI,OAAO,aAAa,CAAC,MAAM,CAAC,CAC5B;GACJA,QAAM,KAAK,IAAI,UAAUA,MAAI;EAChC;AACD,SAAOA;CACV;AACD,QAAO;AACV;;;;;AAKD,MAAa,MAAM,MAAM;CACrB,IAAI,IAAI;CACR,MAAM,UAAU,CAAC,UAAU;EACvB,MAAM,aAAa,MAAM,QAAQ,MAAM,GAAG,QAAQ,CAAC,KAAM;AACzD,OAAK,MAAM,YAAY,YAAY;AAC/B,OAAI,OAAO,aAAa,CAAC,MAAM,CAAC,CAC5B;GACJ,KAAK;EACR;AACD,SAAO;CACV;AACD,QAAO;AACV;;;;;AAKD,MAAa,UAAU,MAAM;CACzB,IAAI,QAAQ;CACZ,IAAIC,UAAQ;CACZ,MAAM,UAAU,CAAC,UAAU;EACvB,MAAM,aAAa,MAAM,QAAQ,MAAM,GAAG,QAAQ,CAAC,KAAM;AACzD,OAAK,MAAM,YAAY,YAAY;AAC/B,OAAI,OAAO,aAAa,CAAC,MAAM,CAAC,CAC5B;GACJA;GACA,SAAS;EACZ;AACD,SAAO,QAAQA;CAClB;AACD,QAAO;AACV;;;;;;AAMD,MAAa,QAAQ,CAAC,oBAAoB;CACtC,IAAI,IAAI;CACR,MAAM,UAAU,CAAC,UAAU;AACvB,MAAI,gBACA,KAAI,MAAM,QAAQ,MAAM,EACpB,KAAK,MAAM;OAEX;OAGJ;AAEJ,SAAO;CACV;AACD,QAAO;AACV;;;;;;;;AAQD,SAAgB,KAAK,GAAG,UAAU,CAAE,GAAE;CAClC,MAAM,cAAc,QAAQ;CAC5B,MAAM,kBAAkB,QAAQ,mBAAmB;CACnD,MAAM,oBAAoB,QAAQ,qBAAqB;CACvD,IAAI;AACJ,QAAO,CAAC,UAAU;AACd,MAAI,eAAe,OAAO,UAAU,YAChC;AACJ,MAAI,SAAS,QAAW;GACpB,OAAO;AACP,UAAO;EACV,OACI;GACD,MAAM,SAAS,EAAE,OAAO,KAAK;AAE7B,OAAI,UAAU,CAAC,CAAC,CAAC,EAAE;IAEf,OAAO;AACP,WAAO;GACV,WACQ,WAAW,CAAC,EAAE,CAAC,IAAI,gBAExB,QAAO;YAEF,kBAEL,QAAO;EAEd;CACJ;AACJ"}