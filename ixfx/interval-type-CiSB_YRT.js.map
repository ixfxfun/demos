{"version":3,"file":"interval-type-CiSB_YRT.js","names":["interval: Interval | undefined","defaultNumber?: number","interval: number | Interval | undefined"],"sources":["../../packages/core/src/interval-type.ts"],"sourcesContent":["import { numberTest } from '@ixfx/guards';\nimport { round } from './util/round.js';\nimport type { Interval } from './types.js';\n\n// export function intervalToMs(interval: Interval | undefined): number | undefined;\n// export function intervalToMs(\n//   interval: Interval | undefined,\n//   defaultNumber: number\n// ): number;\n\n\n/**\n * Return the millisecond value of an Interval.\n * \n * ```js\n * intervalToMs(100); // 100\n * intervalToMs({ millis: 100 }); // 100\n * ```\n *\n * Use `defaultNumber` to return a default in the case of\n * _undefined_ or invalid input.\n *\n * ```js\n * intervalToMs(undefined);      // throws error\n * intervalToMs(undefined, 100); // 100\n * ```\n *\n * If no default is provided, an exception is thrown.\n * @param interval Interval\n * @param defaultNumber Default value if `interval` is _undefined_ or invalid\n * @returns Milliseconds\n */\nexport function intervalToMs(\n  interval: Interval | undefined,\n  defaultNumber?: number\n): number {\n  if (isInterval(interval)) {\n    // Number given, must be millis?\n    if (typeof interval === `number`) return interval;\n\n    let ms = interval.millis ?? 0;\n    ms += (interval.hours ?? 0) * 60 * 60 * 1000;\n    ms += (interval.mins ?? 0) * 60 * 1000;\n    ms += (interval.secs ?? 0) * 1000;\n    return ms;\n  } else {\n    if (typeof defaultNumber !== `undefined`) return defaultNumber;\n    throw new Error(`Not a valid interval: ${ interval }`);\n  }\n}\n\n/**\n * Returns _true_ if `interval` matches the {@link Interval} type.\n * @param interval \n * @returns _True_ if `interval` is an {@link Interval}.\n */\nexport function isInterval(interval: number | Interval | undefined): interval is Interval {\n  if (interval === undefined) return false;\n  if (interval === null) return false;\n  if (typeof interval === `number`) {\n    if (Number.isNaN(interval)) return false;\n    if (!Number.isFinite(interval)) return false;\n    return true;\n  } else if (typeof interval !== `object`) return false;\n\n  const hasMillis = `millis` in interval;\n  const hasSecs = `secs` in interval;\n  const hasMins = `mins` in interval;\n  const hasHours = `hours` in interval;\n  if (hasMillis && !numberTest(interval.millis)[ 0 ]) return false;\n  if (hasSecs && !numberTest(interval.secs)[ 0 ]) return false;\n  if (hasMins && !numberTest(interval.mins)[ 0 ]) return false;\n  if (hasHours && !numberTest(interval.hours)[ 0 ]) return false;\n  if (hasMillis || hasSecs || hasHours || hasMins) return true;\n  return false;\n}\n\n/**\n * Returns a human-readable representation\n * of some elapsed milliseconds\n * \n * @example\n * ```js\n * elapsedToHumanString(10);      // `10ms`\n * elapsedToHumanString(2000);    // `2s`\n * elapsedToHumanString(65*1000); // `1mins`\n * ```\n * @param millisOrFunction Milliseconds as a number, {@link Interval} or function that resolve to a number\n * @param rounding Rounding (default: 2)\n * @returns \n */\nexport const elapsedToHumanString = (millisOrFunction: number | (() => number) | Interval, rounding = 2): string => {\n  let interval: number | undefined = {} = 0;\n  if (typeof millisOrFunction === `function`) {\n    const intervalResult = millisOrFunction();\n    return elapsedToHumanString(intervalResult);\n  } else if (typeof millisOrFunction === `number`) {\n    interval = millisOrFunction;\n  } else if (typeof millisOrFunction === `object`) {\n    interval = intervalToMs(interval);\n  }\n\n  let ms = intervalToMs(interval);\n  if (typeof ms === `undefined`) return `(undefined)`;\n  if (ms < 1000) return `${ round(rounding, ms) }ms`;\n  ms /= 1000;\n  if (ms < 120) return `${ ms.toFixed(1) }secs`;\n  ms /= 60;\n  if (ms < 60) return `${ ms.toFixed(2) }mins`;\n  ms /= 60;\n  return `${ ms.toFixed(2) }hrs`;\n};"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAgCA,SAAgB,aACdA,UACAC,eACQ;AACR,KAAI,WAAW,SAAS,EAAE;AAExB,aAAW,cAAc,QAAS,QAAO;EAEzC,IAAI,KAAK,SAAS,UAAU;AAC5B,SAAO,SAAS,SAAS,KAAK,KAAK,KAAK;AACxC,SAAO,SAAS,QAAQ,KAAK,KAAK;AAClC,SAAO,SAAS,QAAQ,KAAK;AAC7B,SAAO;CACR,OAAM;AACL,aAAW,mBAAmB,WAAY,QAAO;AACjD,QAAM,IAAI,OAAO,wBAAyB,SAAU;CACrD;AACF;;;;;;AAOD,SAAgB,WAAWC,UAA+D;AACxF,KAAI,oBAAwB,QAAO;AACnC,KAAI,aAAa,KAAM,QAAO;AAC9B,YAAW,cAAc,SAAS;AAChC,MAAI,OAAO,MAAM,SAAS,CAAE,QAAO;AACnC,OAAK,OAAO,SAAS,SAAS,CAAE,QAAO;AACvC,SAAO;CACR,kBAAiB,cAAc,QAAS,QAAO;CAEhD,MAAM,aAAa,WAAW;CAC9B,MAAM,WAAW,SAAS;CAC1B,MAAM,WAAW,SAAS;CAC1B,MAAM,YAAY,UAAU;AAC5B,KAAI,cAAc,WAAW,SAAS,OAAO,CAAE,GAAK,QAAO;AAC3D,KAAI,YAAY,WAAW,SAAS,KAAK,CAAE,GAAK,QAAO;AACvD,KAAI,YAAY,WAAW,SAAS,KAAK,CAAE,GAAK,QAAO;AACvD,KAAI,aAAa,WAAW,SAAS,MAAM,CAAE,GAAK,QAAO;AACzD,KAAI,aAAa,WAAW,YAAY,QAAS,QAAO;AACxD,QAAO;AACR"}