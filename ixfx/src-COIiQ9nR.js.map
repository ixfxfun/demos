{"version":3,"file":"src-COIiQ9nR.js","names":["circle","applyOpts","arc","pos","line","__export","clamp","convert","withOpacity","fromHexString","fromLibrary","fromCssAbsolute","fromCssScalar","toScalar","toCssString","abs","toAbsolute","guard","generateScalar","withOpacity","fromHexString","fromLibrary","toCssString","guard","toScalar","#scaler","#scalerSize","#init","#logicalSize","#disposed","#resizer","#ctx","#drawHelper","#getContext","#handleEvents","#viewport","grid","guard","circle","el","#elementBase","#store","#aliases","#lastFallback","guard","capture","c"],"sources":["../packages/visual/dist/src/drawing.js","../node_modules/.pnpm/colorizr@3.0.7/node_modules/colorizr/dist/index.mjs","../packages/visual/dist/src/colour/hsl.js","../packages/visual/dist/src/colour/css-colours.js","../packages/visual/dist/src/colour/srgb.js","../packages/visual/dist/src/image-data-grid.js","../packages/visual/dist/src/canvas-helper.js","../packages/visual/dist/src/svg/apply.js","../packages/visual/dist/src/svg/create.js","../packages/visual/dist/src/colour/types.js","../packages/visual/dist/src/colour/conversion.js","../packages/visual/dist/src/svg/stroke.js","../packages/visual/dist/src/svg/elements.js","../packages/visual/dist/src/pointer-visualise.js","../packages/visual/dist/src/named-colour-palette.js","../packages/visual/dist/src/colour/generate.js","../packages/visual/dist/src/colour/math.js","../packages/visual/dist/src/colour/oklch.js","../packages/visual/dist/src/colour/index.js","../packages/visual/dist/src/video.js","../packages/visual/dist/src/index.js"],"sourcesContent":["import { arrayTest, resultThrow } from '@ixfx/guards';\nimport { Colour } from '@ixfx/visual';\nimport { resolveEl } from '@ixfx/dom';\n//import type { IStackImmutable } from '@ixfx/collections';\nimport { StackImmutable } from '@ixfx/collections/stack';\nimport { Beziers, Lines, Points, Rects, Triangles } from '@ixfx/geometry';\nimport { quantiseEvery } from '@ixfx/numbers';\n// import type { Point } from '../geometry/point/PointType.js';\n// import type { Line } from '../geometry/line/LineType.js';\n// import type { CirclePositioned } from '../geometry/circle/CircleType.js';\n// import type { Rect, RectPositioned } from '../geometry/rect/index.js';\n// import type { Path } from '../geometry/path/PathType.js';\n// import type { Triangle } from '../geometry/triangle/TriangleType.js';\n// import { Empty as RectsEmpty } from '../geometry/rect/Empty.js';\n// import { corners as RectsCorners } from '../geometry/rect/Corners.js';\n// import { isLine } from '../geometry/line/Guard.js';\n// import { quantiseEvery } from '../numbers/Quantise.js';\nconst PIPI = Math.PI * 2;\n/**\n * Gets a 2d drawing context from canvas element or query, or throws an error\n * @param canvasElementContextOrQuery Canvas element reference or DOM query\n * @returns Drawing context.\n */\nexport const getContext = (canvasElementContextOrQuery) => {\n    if (canvasElementContextOrQuery === null) {\n        throw new Error(`canvasElCtxOrQuery null. Must be a 2d drawing context or Canvas element`);\n    }\n    if (canvasElementContextOrQuery === undefined) {\n        throw new Error(`canvasElCtxOrQuery undefined. Must be a 2d drawing context or Canvas element`);\n    }\n    const ctx = canvasElementContextOrQuery instanceof CanvasRenderingContext2D\n        ? canvasElementContextOrQuery\n        : canvasElementContextOrQuery instanceof HTMLCanvasElement\n            ? canvasElementContextOrQuery.getContext(`2d`)\n            : typeof canvasElementContextOrQuery === `string`\n                ? resolveEl(canvasElementContextOrQuery).getContext(`2d`)\n                : canvasElementContextOrQuery;\n    if (ctx === null)\n        throw new Error(`Could not create 2d context for canvas`);\n    return ctx;\n};\n/**\n * Makes a helper object that wraps together a bunch of drawing functions that all use the same drawing context\n * @param ctxOrCanvasEl Drawing context or canvs element reference\n * @param canvasBounds Bounds of drawing (optional). Used for limiting `textBlock`\n * @returns\n */\nexport const makeHelper = (ctxOrCanvasEl, canvasBounds) => {\n    const ctx = getContext(ctxOrCanvasEl);\n    return {\n        ctx,\n        paths(pathsToDraw, opts) {\n            paths(ctx, pathsToDraw, opts);\n        },\n        line(lineToDraw, opts) {\n            line(ctx, lineToDraw, opts);\n        },\n        rect(rectsToDraw, opts) {\n            rect(ctx, rectsToDraw, opts);\n        },\n        bezier(bezierToDraw, opts) {\n            bezier(ctx, bezierToDraw, opts);\n        },\n        connectedPoints(pointsToDraw, opts) {\n            connectedPoints(ctx, pointsToDraw, opts);\n        },\n        pointLabels(pointsToDraw, opts) {\n            pointLabels(ctx, pointsToDraw, opts);\n        },\n        dot(dotPosition, opts) {\n            dot(ctx, dotPosition, opts);\n        },\n        circle(circlesToDraw, opts) {\n            circle(ctx, circlesToDraw, opts);\n        },\n        arc(arcsToDraw, opts) {\n            arc(ctx, arcsToDraw, opts);\n        },\n        textBlock(lines, opts) {\n            if (opts.bounds === undefined && canvasBounds !== undefined) {\n                opts = { ...opts, bounds: { ...canvasBounds, x: 0, y: 0 } };\n            }\n            textBlock(ctx, lines, opts);\n        },\n    };\n};\n/**\n * Creates a drawing op to apply provided options\n * @param opts Drawing options that apply\n * @returns Stack\n */\nconst optsOp = (opts) => coloringOp(opts.strokeStyle, opts.fillStyle);\n/**\n * Applies drawing options to `ctx`, returning a {@link DrawingStack}\n * @param ctx Context\n * @param opts Options\n * @returns\n */\nconst applyOpts = (ctx, opts = {}, ...additionalOps) => {\n    if (ctx === undefined)\n        throw new Error(`ctx undefined`);\n    // Create a drawing stack, pushing an op generated from drawing options\n    const stack = drawingStack(ctx).push(optsOp(opts), ...additionalOps);\n    // Apply stack to context\n    stack.apply();\n    return stack;\n};\n/**\n * Draws one or more arcs.\n * @param ctx\n * @param arcs\n * @param opts\n */\nexport const arc = (ctx, arcs, opts = {}) => {\n    applyOpts(ctx, opts);\n    const draw = (arc) => {\n        ctx.beginPath();\n        ctx.arc(arc.x, arc.y, arc.radius, arc.startRadian, arc.endRadian);\n        ctx.stroke();\n    };\n    const arcsArray = Array.isArray(arcs) ? arcs : [arcs];\n    for (const arc of arcsArray) {\n        draw(arc);\n    }\n};\n/**\n * Colouring drawing op. Applies `fillStyle` and `strokeStyle`\n * @param strokeStyle\n * @param fillStyle\n * @returns\n */\nconst coloringOp = (strokeStyle, fillStyle) => {\n    const apply = (ctx) => {\n        if (fillStyle)\n            ctx.fillStyle = fillStyle;\n        if (strokeStyle)\n            ctx.strokeStyle = strokeStyle;\n    };\n    return apply;\n};\nconst lineOp = (lineWidth, lineJoin, lineCap) => {\n    const apply = (ctx) => {\n        if (lineWidth)\n            ctx.lineWidth = lineWidth;\n        if (lineJoin)\n            ctx.lineJoin = lineJoin;\n        if (lineCap)\n            ctx.lineCap = lineCap;\n    };\n    return apply;\n};\n/**\n * Creates and returns an immutable drawing stack for a context\n * @param ctx Context\n * @param stk Initial stack operations\n * @returns\n */\nexport const drawingStack = (ctx, stk) => {\n    stk ??= new StackImmutable();\n    const push = (...ops) => {\n        stk ??= new StackImmutable();\n        const s = stk.push(...ops);\n        for (const o of ops)\n            o(ctx);\n        return drawingStack(ctx, s);\n    };\n    const pop = () => {\n        const s = stk?.pop();\n        return drawingStack(ctx, s);\n    };\n    const apply = () => {\n        if (stk === undefined)\n            return drawingStack(ctx);\n        for (const op of stk.data)\n            op(ctx);\n        return drawingStack(ctx, stk);\n    };\n    return { push, pop, apply };\n};\n/**\n * Draws a curved line through a set of points\n * @param ctx\n * @param points\n * @param opts\n */\nexport const lineThroughPoints = (ctx, points, opts) => {\n    applyOpts(ctx, opts);\n    // https://stackoverflow.com/questions/7054272/how-to-draw-smooth-curve-through-n-points-using-javascript-html5-canvas\n    ctx.moveTo(points[0].x, points[0].y);\n    for (const [index, p] of points.entries()) {\n        if (index + 2 >= points.length)\n            continue;\n        const pNext = points[index + 1];\n        const mid = {\n            x: (p.x + pNext.x) / 2,\n            y: (p.y + pNext.y) / 2,\n        };\n        const cpX1 = (mid.x + p.x) / 2;\n        const cpX2 = (mid.x + pNext.x) / 2;\n        ctx.quadraticCurveTo(cpX1, pNext.y, mid.x, mid.y);\n        ctx.quadraticCurveTo(cpX2, pNext.y, pNext.x, pNext.y);\n    }\n};\n/**\n * Draws one or more circles. Will draw outline/fill depending on\n * whether `strokeStyle` or `fillStyle` params are present in the drawing options.\n *\n * ```js\n * // Draw a circle with radius of 10 at 0,0\n * circle(ctx, {radius:10});\n *\n * // Draw a circle of radius 10 at 100,100\n * circle(ctx, {radius: 10, x: 100, y: 100});\n *\n * // Draw two blue outlined circles\n * circle(ctx, [ {radius: 5}, {radius: 10} ], {strokeStyle:`blue`});\n * ```\n * @param ctx Drawing context\n * @param circlesToDraw Circle(s) to draw\n * @param opts Drawing options\n */\nexport const circle = (ctx, circlesToDraw, opts = {}) => {\n    applyOpts(ctx, opts);\n    const draw = (c) => {\n        ctx.beginPath();\n        ctx.arc(c.x, c.y, c.radius, 0, PIPI);\n        if (opts.strokeStyle)\n            ctx.stroke();\n        if (opts.fillStyle)\n            ctx.fill();\n    };\n    if (Array.isArray(circlesToDraw)) {\n        for (const c of circlesToDraw)\n            draw(c);\n    }\n    else {\n        draw(circlesToDraw);\n    }\n};\n/**\n * Draws one or more ellipses. Will draw outline/fill depending on\n * whether `strokeStyle` or `fillStyle` params are present in the drawing options.\n * @param ctx\n * @param ellipsesToDraw\n * @param opts\n */\nexport const ellipse = (ctx, ellipsesToDraw, opts = {}) => {\n    applyOpts(ctx, opts);\n    const draw = (ellipse) => {\n        ctx.beginPath();\n        const rotation = ellipse.rotation ?? 0;\n        const startAngle = ellipse.startAngle ?? 0;\n        const endAngle = ellipse.endAngle ?? PIPI;\n        ctx.ellipse(ellipse.x, ellipse.y, ellipse.radiusX, ellipse.radiusY, rotation, startAngle, endAngle);\n        if (opts.strokeStyle)\n            ctx.stroke();\n        if (opts.fillStyle)\n            ctx.fill();\n    };\n    const ellipsesArray = Array.isArray(ellipsesToDraw) ? ellipsesToDraw : [ellipsesToDraw];\n    for (const ellipse of ellipsesArray) {\n        draw(ellipse);\n    }\n};\n/**\n * Draws one or more paths.\n * supported paths are quadratic beziers and lines.\n * @param ctx\n * @param pathsToDraw\n * @param opts\n */\nexport const paths = (ctx, pathsToDraw, opts = {}) => {\n    applyOpts(ctx, opts);\n    const draw = (path) => {\n        // Call appropriate drawing function depending on the type of path\n        if (Beziers.isQuadraticBezier(path))\n            quadraticBezier(ctx, path, opts);\n        else if (Lines.isLine(path))\n            line(ctx, path, opts);\n        else\n            throw new Error(`Unknown path type ${JSON.stringify(path)}`);\n    };\n    if (Array.isArray(pathsToDraw)) {\n        for (const p of pathsToDraw)\n            draw(p);\n    }\n    else {\n        draw(pathsToDraw);\n    }\n};\n/**\n * Draws a line between all the given points.\n * If a fillStyle is specified, it will be filled.\n *\n * See also:\n * * {@link line}: Draw one or more lines\n *\n * @param ctx\n * @param pts\n */\nexport const connectedPoints = (ctx, pts, opts = {}) => {\n    const shouldLoop = opts.loop ?? false;\n    resultThrow(arrayTest(pts, `pts`));\n    if (pts.length === 0)\n        return;\n    // Throw an error if any point is invalid\n    for (const [index, pt] of pts.entries())\n        Points.guard(pt, `Index ${index}`);\n    applyOpts(ctx, opts);\n    // Draw points\n    if (opts.lineWidth)\n        ctx.lineWidth = opts.lineWidth;\n    ctx.beginPath();\n    ctx.moveTo(pts[0].x, pts[0].y);\n    for (const pt of pts)\n        ctx.lineTo(pt.x, pt.y);\n    if (shouldLoop)\n        ctx.lineTo(pts[0].x, pts[0].y);\n    // if (opts.strokeStyle) ctx.strokeStyle = opts.strokeStyle;\n    if (opts.strokeStyle ||\n        (opts.strokeStyle === undefined && opts.fillStyle === undefined)) {\n        ctx.stroke();\n    }\n    if (opts.fillStyle) {\n        ctx.fill();\n    }\n};\n/**\n * Draws labels for a set of points\n * @param ctx\n * @param pts Points to draw\n * @param opts\n * @param labels Labels for points\n */\nexport const pointLabels = (ctx, pts, opts = {}, labels) => {\n    if (pts.length === 0)\n        return;\n    // Throw an error if any point is invalid\n    for (const [index, pt] of pts.entries())\n        Points.guard(pt, `Index ${index}`);\n    applyOpts(ctx, opts);\n    for (const [index, pt] of pts.entries()) {\n        const label = labels !== undefined && index < labels.length ? labels[index] : index.toString();\n        ctx.fillText(label.toString(), pt.x, pt.y);\n    }\n};\n/**\n * Returns `point` with the canvas's translation matrix applied\n * @param ctx\n * @param point\n * @returns\n */\nexport const translatePoint = (ctx, point) => {\n    const m = ctx.getTransform();\n    return {\n        x: point.x * m.a + point.y * m.c + m.e,\n        y: point.x * m.b + point.y * m.d + m.f,\n    };\n};\n/**\n * Creates a new HTML IMG element with a snapshot of the\n * canvas. Element will need to be inserted into the document.\n *\n * ```\n * const myCanvas = document.getElementById('someCanvas');\n * const el = copyToImg(myCanvas);\n * document.getElementById('images').appendChild(el);\n * ```\n * @param canvasEl\n * @returns\n */\nexport const copyToImg = (canvasEl) => {\n    const img = document.createElement(`img`);\n    img.src = canvasEl.toDataURL(`image/jpeg`);\n    return img;\n};\n/**\n * Draws filled circle(s) at provided point(s)\n * @param ctx\n * @param pos\n * @param opts\n */\nexport const dot = (ctx, pos, opts) => {\n    opts ??= {};\n    const radius = opts.radius ?? 10;\n    const positions = Array.isArray(pos) ? pos : [pos];\n    const stroke = opts.stroke ? opts.stroke : opts.strokeStyle !== undefined;\n    let filled = opts.filled ? opts.filled : opts.fillStyle !== undefined;\n    if (!stroke && !filled)\n        filled = true;\n    applyOpts(ctx, opts);\n    for (const pos of positions) {\n        ctx.beginPath();\n        if (`radius` in pos) {\n            ctx.arc(pos.x, pos.y, pos.radius, 0, 2 * Math.PI);\n        }\n        else {\n            ctx.arc(pos.x, pos.y, radius, 0, 2 * Math.PI);\n        }\n        if (filled) {\n            ctx.fill();\n        }\n        if (stroke) {\n            ctx.stroke();\n        }\n    }\n    // const makePath = () => {\n    //   ctx.beginPath();\n    //   // x&y for arc is the center of circle\n    //   if (Array.isArray(pos)) {\n    //     for (const p of pos) {\n    //       ctx.arc(p.x, p.y, radius, 0, 2 * Math.PI);\n    //     }\n    //   } else {\n    //     const p = pos as Point;\n    //     ctx.arc(p.x, p.y, radius, 0, 2 * Math.PI);\n    //   }\n    // }\n    // makePath();\n    // if (opts.filled || !opts.stroke) {\n    //   ctx.fill();\n    // }\n    // if (opts.stroke) {\n    //   if (opts.strokeWidth) ctx.lineWidth = opts.strokeWidth;\n    //   //makePath();\n    //   ctx.stroke();\n    // }\n};\n/**\n * Draws a cubic or quadratic bezier\n * @param ctx\n * @param bezierToDraw\n * @param opts\n */\nexport const bezier = (ctx, bezierToDraw, opts) => {\n    if (Beziers.isQuadraticBezier(bezierToDraw)) {\n        quadraticBezier(ctx, bezierToDraw, opts);\n    }\n    else if (Beziers.isCubicBezier(bezierToDraw)) {\n        cubicBezier(ctx, bezierToDraw, opts);\n    }\n};\nconst cubicBezier = (ctx, bezierToDraw, opts = {}) => {\n    let stack = applyOpts(ctx, opts);\n    const { a, b, cubic1, cubic2 } = bezierToDraw;\n    const isDebug = opts.debug ?? false;\n    if (isDebug) {\n        /*\n         * const ss = ctx.strokeStyle;\n         * ctx.strokeStyle = ss;\n         */\n    }\n    ctx.beginPath();\n    ctx.moveTo(a.x, a.y);\n    ctx.bezierCurveTo(cubic1.x, cubic1.y, cubic2.x, cubic2.y, b.x, b.y);\n    ctx.stroke();\n    if (isDebug) {\n        stack = stack.push(optsOp({\n            ...opts,\n            strokeStyle: Colour.multiplyOpacity(opts.strokeStyle ?? `silver`, 0.6),\n            fillStyle: Colour.multiplyOpacity(opts.fillStyle ?? `yellow`, 0.4),\n        }));\n        stack.apply();\n        ctx.moveTo(a.x, a.y);\n        ctx.lineTo(cubic1.x, cubic1.y);\n        ctx.stroke();\n        ctx.moveTo(b.x, b.y);\n        ctx.lineTo(cubic2.x, cubic2.y);\n        ctx.stroke();\n        ctx.fillText(`a`, a.x + 5, a.y);\n        ctx.fillText(`b`, b.x + 5, b.y);\n        ctx.fillText(`c1`, cubic1.x + 5, cubic1.y);\n        ctx.fillText(`c2`, cubic2.x + 5, cubic2.y);\n        dot(ctx, cubic1, { radius: 3 });\n        dot(ctx, cubic2, { radius: 3 });\n        dot(ctx, a, { radius: 3 });\n        dot(ctx, b, { radius: 3 });\n        stack = stack.pop();\n        stack.apply();\n    }\n};\nconst quadraticBezier = (ctx, bezierToDraw, opts = {}) => {\n    const { a, b, quadratic } = bezierToDraw;\n    const isDebug = opts.debug ?? false;\n    let stack = applyOpts(ctx, opts);\n    ctx.beginPath();\n    ctx.moveTo(a.x, a.y);\n    ctx.quadraticCurveTo(quadratic.x, quadratic.y, b.x, b.y);\n    ctx.stroke();\n    if (isDebug) {\n        /*\n         * const fs = ctx.fillStyle;\n         * const ss = ctx.strokeStyle;\n         * ctx.fillStyle = opts.strokeStyle ?? `gray`;\n         * ctx.strokeStyle = opts.strokeStyle ?? `gray`;\n         */\n        stack = stack.push(optsOp({\n            ...opts,\n            strokeStyle: Colour.multiplyOpacity(opts.strokeStyle ?? `silver`, 0.6),\n            fillStyle: Colour.multiplyOpacity(opts.fillStyle ?? `yellow`, 0.4),\n        }));\n        connectedPoints(ctx, [a, quadratic, b]);\n        ctx.fillText(`a`, a.x + 5, a.y);\n        ctx.fillText(`b`, b.x + 5, b.y);\n        ctx.fillText(`h`, quadratic.x + 5, quadratic.y);\n        dot(ctx, quadratic, { radius: 3 });\n        dot(ctx, a, { radius: 3 });\n        dot(ctx, b, { radius: 3 });\n        /*\n         * ctx.fillStyle = fs;\n         * ctx.strokeStyle = ss;\n         */\n        stack = stack.pop();\n        stack.apply();\n    }\n};\n/**\n * Draws one or more lines.\n *\n * Each line is drawn independently, ie it's not assumed lines are connected.\n *\n * See also:\n * * {@link connectedPoints}: Draw a series of connected points\n * @param ctx\n * @param toDraw\n * @param opts\n */\nexport const line = (ctx, toDraw, opts = {}) => {\n    const isDebug = opts.debug ?? false;\n    const o = lineOp(opts.lineWidth, opts.lineJoin, opts.lineCap);\n    applyOpts(ctx, opts, o);\n    const draw = (d) => {\n        const { a, b } = d;\n        ctx.beginPath();\n        ctx.moveTo(a.x, a.y);\n        ctx.lineTo(b.x, b.y);\n        if (isDebug) {\n            ctx.fillText(`a`, a.x, a.y);\n            ctx.fillText(`b`, b.x, b.y);\n            dot(ctx, a, { radius: 5, strokeStyle: `black` });\n            dot(ctx, b, { radius: 5, strokeStyle: `black` });\n        }\n        ctx.stroke();\n    };\n    if (Array.isArray(toDraw)) {\n        for (const t of toDraw)\n            draw(t);\n    }\n    else {\n        draw(toDraw);\n    }\n};\n/**\n * Draws one or more triangles\n * @param ctx\n * @param toDraw\n * @param opts\n */\nexport const triangle = (ctx, toDraw, opts = {}) => {\n    applyOpts(ctx, opts);\n    const draw = (t) => {\n        connectedPoints(ctx, Triangles.corners(t), { ...opts, loop: true });\n        if (opts.debug) {\n            pointLabels(ctx, Triangles.corners(t), undefined, [`a`, `b`, `c`]);\n        }\n    };\n    if (Array.isArray(toDraw)) {\n        for (const t of toDraw) {\n            draw(t);\n        }\n    }\n    else {\n        draw(toDraw);\n    }\n};\n/**\n * Draws one or more rectangles.\n *\n * @param ctx\n * @param toDraw\n * @param opts\n */\nexport const rect = (ctx, toDraw, opts = {}) => {\n    applyOpts(ctx, opts);\n    const filled = opts.filled ?? (opts.fillStyle === undefined ? false : true);\n    const stroke = opts.stroke ?? (opts.strokeStyle === undefined ? false : true);\n    const draw = (d) => {\n        const x = `x` in d ? d.x : 0;\n        const y = `y` in d ? d.y : 0;\n        if (filled)\n            ctx.fillRect(x, y, d.width, d.height);\n        if (stroke) {\n            if (opts.strokeWidth)\n                ctx.lineWidth = opts.strokeWidth;\n            //if (opts.strokeStyle) ctx.strokeStyle = opts.strokeStyle;\n            ctx.strokeRect(x, y, d.width, d.height);\n        }\n        if (opts.crossed) {\n            ctx.beginPath();\n            ctx.moveTo(x, y);\n            ctx.lineTo(d.width, d.height);\n            ctx.stroke();\n            ctx.moveTo(0, d.height);\n            ctx.lineTo(d.width, 0);\n            ctx.stroke();\n        }\n        if (opts.debug) {\n            pointLabels(ctx, Rects.corners(d), undefined, [`NW`, `NE`, `SE`, `SW`]);\n        }\n    };\n    if (Array.isArray(toDraw)) {\n        for (const t of toDraw) {\n            draw(t);\n        }\n    }\n    else {\n        draw(toDraw);\n    }\n};\n/**\n * Returns the width of `text`. Rounds number up to nearest multiple if provided. If\n * text is empty or undefined, 0 is returned.\n * @param ctx\n * @param text\n * @param widthMultiple\n * @returns\n */\nexport const textWidth = (ctx, text, padding = 0, widthMultiple) => {\n    const rect = textRect(ctx, text, padding, widthMultiple);\n    return rect.width;\n};\nexport const textRect = (ctx, text, padding = 0, widthMultiple) => {\n    if (text === undefined || text === null || text.length === 0)\n        return Rects.Empty;\n    const m = ctx.measureText(text);\n    const width = (widthMultiple) ? quantiseEvery(m.width, widthMultiple) + padding : m.width + padding;\n    return {\n        width: width,\n        height: m.actualBoundingBoxAscent + m.actualBoundingBoxDescent + padding + padding\n    };\n};\nexport const textHeight = (ctx, text, padding = 0) => {\n    const rect = textRect(ctx, text, padding);\n    return rect.height;\n    // if (text === undefined || text === null || text.length === 0) return 0;\n    // const m = ctx.measureText(text);\n    // return m.actualBoundingBoxAscent + m.actualBoundingBoxDescent + padding + padding;\n};\n/**\n * Draws a block of text. Each array item is considered a line.\n * @param ctx\n * @param lines\n * @param opts\n */\nexport const textBlock = (ctx, lines, opts) => {\n    applyOpts(ctx, opts);\n    const anchorPadding = opts.anchorPadding ?? 0;\n    const align = opts.align ?? `top`;\n    const anchor = opts.anchor;\n    const bounds = opts.bounds ?? { x: 0, y: 0, width: 1_000_000, height: 1_000_000 };\n    // Measure each line\n    const blocks = lines.map((l) => ctx.measureText(l));\n    // Get width and height\n    const widths = blocks.map((tm) => tm.width);\n    const heights = blocks.map((tm) => tm.actualBoundingBoxAscent + tm.actualBoundingBoxDescent + 3);\n    // Find extremes\n    const maxWidth = Math.max(...widths);\n    const totalHeight = heights.reduce((accumulator, value) => accumulator + value, 0);\n    let { x, y } = anchor;\n    if (anchor.x + maxWidth > bounds.width) {\n        x = bounds.width - (maxWidth + anchorPadding);\n    }\n    else\n        x -= anchorPadding;\n    if (x < bounds.x)\n        x = bounds.x + anchorPadding;\n    if (anchor.y + totalHeight > bounds.height) {\n        y = bounds.height - (totalHeight + anchorPadding);\n    }\n    else\n        y -= anchorPadding;\n    if (y < bounds.y)\n        y = bounds.y + anchorPadding;\n    if (align === `top`) {\n        ctx.textBaseline = `top`;\n    }\n    else {\n        ctx.textBaseline = `middle`;\n    }\n    for (const [index, line] of lines.entries()) {\n        ctx.fillText(line, x, y);\n        y += heights[index];\n    }\n};\n/**\n * Draws an aligned text block\n */\nexport const textBlockAligned = (ctx, text, opts) => {\n    const { bounds } = opts;\n    const { horiz = `left`, vert = `top` } = opts;\n    const lines = typeof text === `string` ? [text] : text;\n    applyOpts(ctx, opts);\n    ctx.save();\n    ctx.translate(bounds.x, bounds.y);\n    ctx.textAlign = `left`;\n    ctx.textBaseline = `top`;\n    const middleX = bounds.width / 2;\n    const middleY = bounds.height / 2;\n    // Measure each line\n    const blocks = lines.map((l) => ctx.measureText(l));\n    const heights = blocks.map((tm) => tm.actualBoundingBoxAscent + tm.actualBoundingBoxDescent);\n    const totalHeight = heights.reduce((accumulator, value) => accumulator + value, 0);\n    let y = 0;\n    if (vert === `center`)\n        y = middleY - totalHeight / 2;\n    else if (vert === `bottom`) {\n        y = bounds.height - totalHeight;\n    }\n    for (const [index, line] of lines.entries()) {\n        let x = 0;\n        if (horiz === `center`)\n            x = middleX - blocks[index].width / 2;\n        else if (horiz === `right`)\n            x = bounds.width - blocks[index].width;\n        ctx.fillText(line, x, y);\n        y += heights[index];\n    }\n    ctx.restore();\n};\n","var __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __export = (target, all) => {\n  for (var name2 in all)\n    __defProp(target, name2, { get: all[name2], enumerable: true });\n};\nvar __publicField = (obj, key, value) => __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n\n// src/modules/invariant.ts\nfunction invariant(condition, message) {\n  if (condition) {\n    return;\n  }\n  if (process.env.NODE_ENV !== \"production\") {\n    if (message === void 0) {\n      throw new Error(\"invariant requires an error message argument\");\n    }\n  }\n  const error = !message ? new Error(\n    \"Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.\"\n  ) : new Error(message);\n  error.name = \"colorizr\";\n  throw error;\n}\n\n// src/modules/constants.ts\nvar COLOR_KEYS = {\n  hsl: [\"h\", \"s\", \"l\"],\n  oklab: [\"l\", \"a\", \"b\"],\n  oklch: [\"l\", \"c\", \"h\"],\n  rgb: [\"r\", \"g\", \"b\"]\n};\nvar COLOR_MODELS = [\"hsl\", \"oklab\", \"oklch\", \"rgb\"];\nvar DEG2RAD = Math.PI / 180;\nvar LAB_TO_LMS = {\n  l: [0.3963377773761749, 0.2158037573099136],\n  m: [-0.1055613458156586, -0.0638541728258133],\n  s: [-0.0894841775298119, -1.2914855480194092]\n};\nvar LRGB_TO_LMS = {\n  l: [0.4122214708, 0.5363325363, 0.0514459929],\n  m: [0.2119034982, 0.6806995451, 0.1073969566],\n  s: [0.0883024619, 0.2817188376, 0.6299787005]\n};\nvar LSM_TO_LAB = {\n  l: [0.2104542553, 0.793617785, 0.0040720468],\n  a: [1.9779984951, 2.428592205, 0.4505937099],\n  b: [0.0259040371, 0.7827717662, 0.808675766]\n};\nvar LSM_TO_RGB = {\n  r: [4.076741636075958, -3.307711539258063, 0.2309699031821043],\n  g: [-1.2684379732850315, 2.609757349287688, -0.341319376002657],\n  b: [-0.0041960761386756, -0.7034186179359362, 1.7076146940746117]\n};\nvar SRGB_TO_P3 = [\n  [0.8224270476, 0.1775729524, 0],\n  [0.0331008087, 0.9668991913, 0],\n  [0.0170720188, 0.0723477973, 0.9105801839]\n];\nvar PRECISION = 5;\nvar RAD2DEG = 180 / Math.PI;\nvar MESSAGES = {\n  alpha: \"amount must be a number between 0 and 1\",\n  hueRange: \"hue must be a number between 0 and 360\",\n  input: \"input is required\",\n  inputHex: \"input is required and must be a hex\",\n  inputNumber: \"input is required and must be a number\",\n  inputString: \"input is required and must be a string\",\n  invalid: \"invalid input\",\n  invalidCSS: \"invalid CSS string\",\n  left: \"left is required and must be a string\",\n  lightnessRange: \"lightness must be a number between 0 and 1\",\n  options: \"invalid options\",\n  right: \"right is required and must be a string\",\n  threshold: \"threshold must be a number between 0 and 255\"\n};\n\n// src/modules/css-colors.ts\nvar cssColors = {\n  aliceblue: \"#f0f8ff\",\n  antiquewhite: \"#faebd7\",\n  aqua: \"#00ffff\",\n  aquamarine: \"#7fffd4\",\n  azure: \"#f0ffff\",\n  beige: \"#f5f5dc\",\n  bisque: \"#ffe4c4\",\n  black: \"#000000\",\n  blanchedalmond: \"#ffebcd\",\n  blue: \"#0000ff\",\n  blueviolet: \"#8a2be2\",\n  brown: \"#a52a2a\",\n  burlywood: \"#deb887\",\n  cadetblue: \"#5f9ea0\",\n  chartreuse: \"#7fff00\",\n  chocolate: \"#d2691e\",\n  coral: \"#ff7f50\",\n  cornflowerblue: \"#6495ed\",\n  cornsilk: \"#fff8dc\",\n  crimson: \"#dc143c\",\n  cyan: \"#00ffff\",\n  darkblue: \"#00008b\",\n  darkcyan: \"#008b8b\",\n  darkgoldenrod: \"#b8860b\",\n  darkgray: \"#a9a9a9\",\n  darkgreen: \"#006400\",\n  darkkhaki: \"#bdb76b\",\n  darkmagenta: \"#8b008b\",\n  darkolivegreen: \"#556b2f\",\n  darkorange: \"#ff8c00\",\n  darkorchid: \"#9932cc\",\n  darkred: \"#8b0000\",\n  darksalmon: \"#e9967a\",\n  darkseagreen: \"#8fbc8f\",\n  darkslateblue: \"#483d8b\",\n  darkslategray: \"#2f4f4f\",\n  darkslategrey: \"#2f4f4f\",\n  darkturquoise: \"#00ced1\",\n  darkviolet: \"#9400d3\",\n  deeppink: \"#ff1493\",\n  deepskyblue: \"#00bfff\",\n  dimgray: \"#696969\",\n  dimgrey: \"#696969\",\n  dodgerblue: \"#1e90ff\",\n  firebrick: \"#b22222\",\n  floralwhite: \"#fffaf0\",\n  forestgreen: \"#228b22\",\n  fuchsia: \"#ff00ff\",\n  gainsboro: \"#dcdcdc\",\n  ghostwhite: \"#f8f8ff\",\n  gold: \"#ffd700\",\n  goldenrod: \"#daa520\",\n  gray: \"#808080\",\n  grey: \"#808080\",\n  green: \"#008000\",\n  greenyellow: \"#adff2f\",\n  honeydew: \"#f0fff0\",\n  hotpink: \"#ff69b4\",\n  indianred: \"#cd5c5c\",\n  indigo: \"#4b0082\",\n  ivory: \"#fffff0\",\n  khaki: \"#f0e68c\",\n  lavender: \"#e6e6fa\",\n  lavenderblush: \"#fff0f5\",\n  lawngreen: \"#7cfc00\",\n  lemonchiffon: \"#fffacd\",\n  lightblue: \"#add8e6\",\n  lightcoral: \"#f08080\",\n  lightcyan: \"#e0ffff\",\n  lightgoldenrodyellow: \"#fafad2\",\n  lightgray: \"#d3d3d3\",\n  lightgreen: \"#90ee90\",\n  lightgrey: \"#d3d3d3\",\n  lightpink: \"#ffb6c1\",\n  lightsalmon: \"#ffa07a\",\n  lightseagreen: \"#20b2aa\",\n  lightskyblue: \"#87cefa\",\n  lightslategray: \"#778899\",\n  lightslategrey: \"#778899\",\n  lightsteelblue: \"#b0c4de\",\n  lightyellow: \"#ffffe0\",\n  lime: \"#00ff00\",\n  limegreen: \"#32cd32\",\n  linen: \"#faf0e6\",\n  magenta: \"#ff00ff\",\n  maroon: \"#800000\",\n  mediumaquamarine: \"#66cdaa\",\n  mediumblue: \"#0000cd\",\n  mediumorchid: \"#ba55d3\",\n  mediumpurple: \"#9370db\",\n  mediumseagreen: \"#3cb371\",\n  mediumslateblue: \"#7b68ee\",\n  mediumspringgreen: \"#00fa9a\",\n  mediumturquoise: \"#48d1cc\",\n  mediumvioletred: \"#c71585\",\n  midnightblue: \"#191970\",\n  mintcream: \"#f5fffa\",\n  mistyrose: \"#ffe4e1\",\n  moccasin: \"#ffe4b5\",\n  navajowhite: \"#ffdead\",\n  navy: \"#000080\",\n  oldlace: \"#fdf5e6\",\n  olive: \"#808000\",\n  olivedrab: \"#6b8e23\",\n  orange: \"#ffa500\",\n  orangered: \"#ff4500\",\n  orchid: \"#da70d6\",\n  palegoldenrod: \"#eee8aa\",\n  palegreen: \"#98fb98\",\n  paleturquoise: \"#afeeee\",\n  palevioletred: \"#db7093\",\n  papayawhip: \"#ffefd5\",\n  peachpuff: \"#ffdab9\",\n  peru: \"#cd853f\",\n  pink: \"#ffc0cb\",\n  plum: \"#dda0dd\",\n  powderblue: \"#b0e0e6\",\n  purple: \"#800080\",\n  rebeccapurple: \"#663399\",\n  red: \"#ff0000\",\n  rosybrown: \"#bc8f8f\",\n  royalblue: \"#4169e1\",\n  saddlebrown: \"#8b4513\",\n  salmon: \"#fa8072\",\n  sandybrown: \"#f4a460\",\n  seagreen: \"#2e8b57\",\n  seashell: \"#fff5ee\",\n  sienna: \"#a0522d\",\n  silver: \"#c0c0c0\",\n  skyblue: \"#87ceeb\",\n  slateblue: \"#6a5acd\",\n  slategray: \"#708090\",\n  slategrey: \"#708090\",\n  snow: \"#fffafa\",\n  springgreen: \"#00ff7f\",\n  steelblue: \"#4682b4\",\n  tan: \"#d2b48c\",\n  teal: \"#008080\",\n  thistle: \"#d8bfd8\",\n  tomato: \"#ff6347\",\n  turquoise: \"#40e0d0\",\n  violet: \"#ee82ee\",\n  wheat: \"#f5deb3\",\n  white: \"#ffffff\",\n  whitesmoke: \"#f5f5f5\",\n  yellow: \"#ffff00\",\n  yellowgreen: \"#9acd32\"\n};\n\n// src/modules/validators.ts\nfunction hasValidMatches(input) {\n  return Array.isArray(input) && input.length === 6;\n}\nfunction isNamedColor(input) {\n  return isString(input) && Object.keys(cssColors).includes(input.toLowerCase());\n}\nfunction isNumber(input) {\n  return typeof input === \"number\" && !Number.isNaN(input);\n}\nfunction isPlainObject(input) {\n  if (!input) {\n    return false;\n  }\n  const { toString } = Object.prototype;\n  const prototype = Object.getPrototypeOf(input);\n  return toString.call(input) === \"[object Object]\" && (prototype === null || prototype === Object.getPrototypeOf({}));\n}\nfunction isString(input, validate = true) {\n  const isValid = typeof input === \"string\";\n  if (validate) {\n    return isValid && !!input.trim().length;\n  }\n  return isValid;\n}\nfunction isValidColorModel(input) {\n  return isHSL(input) || isRGB(input) || isLAB(input) || isLCH(input);\n}\nfunction isHex(input) {\n  if (!isString(input)) {\n    return false;\n  }\n  return /^#([\\da-f]{3,4}|[\\da-f]{6,8})$/i.test(input);\n}\nfunction isHSL(input) {\n  if (!isPlainObject(input)) {\n    return false;\n  }\n  const entries = Object.entries(input);\n  return !!entries.length && entries.every(([key, value]) => {\n    if (key === \"h\") {\n      return value >= 0 && value <= 360;\n    }\n    if (key === \"alpha\") {\n      return value >= 0 && value <= 1;\n    }\n    return COLOR_KEYS.hsl.includes(key) && value >= 0 && value <= 100;\n  });\n}\nfunction isLAB(input) {\n  if (!isPlainObject(input)) {\n    return false;\n  }\n  const entries = Object.entries(input);\n  return !!entries.length && entries.every(([key, value]) => {\n    if (key === \"l\") {\n      return value >= 0 && value <= 100;\n    }\n    if (key === \"alpha\") {\n      return value >= 0 && value <= 1;\n    }\n    return COLOR_KEYS.oklab.includes(key) && value >= -1 && value <= 1;\n  });\n}\nfunction isLCH(input) {\n  if (!isPlainObject(input)) {\n    return false;\n  }\n  const entries = Object.entries(input);\n  return !!entries.length && entries.every(([key, value]) => {\n    if (key === \"l\") {\n      return value >= 0 && value <= 100;\n    }\n    if (key === \"alpha\") {\n      return value >= 0 && value <= 1;\n    }\n    return COLOR_KEYS.oklch.includes(key) && value >= 0 && value <= (key === \"h\" ? 360 : 1);\n  });\n}\nfunction isRGB(input) {\n  if (!isPlainObject(input)) {\n    return false;\n  }\n  const entries = Object.entries(input);\n  return !!entries.length && entries.every(([key, value]) => {\n    if (key === \"alpha\") {\n      return value >= 0 && value <= 1;\n    }\n    return COLOR_KEYS.rgb.includes(key) && value >= 0 && value <= 255;\n  });\n}\n\n// src/modules/utils.ts\nfunction addAlpha(input, alpha) {\n  invariant(isValidColorModel(input), MESSAGES.invalid);\n  let value = alpha;\n  if (!value) {\n    return input;\n  }\n  if (value > 1) {\n    value /= 100;\n  }\n  if (value === 1) {\n    return input;\n  }\n  return { ...input, alpha: value };\n}\nfunction clamp(value, min = 0, max = 100) {\n  return Math.min(Math.max(value, min), max);\n}\nfunction constrainDegrees(input, amount) {\n  invariant(isNumber(input), MESSAGES.inputNumber);\n  let value = input + amount;\n  if (value > 360) {\n    value %= 360;\n  }\n  if (value < 0) {\n    value += 360;\n  }\n  return Math.abs(value);\n}\nfunction limit(input, model, key) {\n  invariant(isNumber(input), \"Input is not a number\");\n  invariant(COLOR_MODELS.includes(model), `Invalid model${model ? `: ${model}` : \"\"}`);\n  invariant(COLOR_KEYS[model].includes(key), `Invalid key${key ? `: ${key}` : \"\"}`);\n  switch (model) {\n    case \"hsl\": {\n      invariant(COLOR_KEYS.hsl.includes(key), \"Invalid key\");\n      if ([\"s\", \"l\"].includes(key)) {\n        return clamp(input);\n      }\n      return clamp(input, 0, 360);\n    }\n    case \"rgb\": {\n      invariant(COLOR_KEYS.rgb.includes(key), \"Invalid key\");\n      return clamp(input, 0, 255);\n    }\n    /* c8 ignore next 3 */\n    default: {\n      throw new Error(\"Invalid inputs\");\n    }\n  }\n}\nfunction parseInput(input, model) {\n  const keys = COLOR_KEYS[model];\n  const validator = {\n    hsl: isHSL,\n    oklab: isLAB,\n    oklch: isLCH,\n    rgb: isRGB\n  };\n  invariant(isPlainObject(input) || Array.isArray(input), MESSAGES.invalid);\n  const value = Array.isArray(input) ? { [keys[0]]: input[0], [keys[1]]: input[1], [keys[2]]: input[2] } : input;\n  invariant(validator[model](value), `invalid ${model} color`);\n  return value;\n}\nfunction restrictValues(input, precision = PRECISION, forcePrecision = true) {\n  const output = new Map(Object.entries(input));\n  for (const [key, value] of output.entries()) {\n    output.set(key, round(value, precision, forcePrecision));\n  }\n  return Object.fromEntries(output);\n}\nfunction round(input, precision = 2, forcePrecision = true) {\n  if (!isNumber(input) || input === 0) {\n    return 0;\n  }\n  if (forcePrecision) {\n    const factor2 = 10 ** precision;\n    return Math.round(input * factor2) / factor2;\n  }\n  const absInput = Math.abs(input);\n  let digits = Math.abs(Math.ceil(Math.log(absInput) / Math.LN10));\n  if (digits === 0) {\n    digits = 2;\n  } else if (digits > precision) {\n    digits = precision;\n  }\n  let exponent = precision - (digits < 0 ? 0 : digits);\n  if (exponent <= 1 && precision > 1) {\n    exponent = 2;\n  } else if (exponent > precision || exponent === 0) {\n    exponent = precision;\n  }\n  const factor = 10 ** exponent;\n  return Math.round(input * factor) / factor;\n}\n\n// src/modules/hex-utils.ts\nfunction addAlphaToHex(input, alpha) {\n  invariant(isHex(input), MESSAGES.inputHex);\n  invariant(isNumber(alpha), MESSAGES.inputNumber);\n  if (alpha >= 1) {\n    return removeAlphaFromHex(input);\n  }\n  return `${removeAlphaFromHex(input)}${convertAlphaToHex(alpha)}`;\n}\nfunction convertAlphaToHex(input) {\n  invariant(isNumber(input), MESSAGES.inputNumber);\n  let alpha = input;\n  if (input > 1) {\n    alpha /= 100;\n  }\n  return Math.round(alpha * 255).toString(16).padStart(2, \"0\");\n}\nfunction extractAlphaFromHex(input) {\n  invariant(isHex(input), MESSAGES.inputString);\n  const alpha = input.substring(7, 9);\n  if (!alpha) {\n    return 1;\n  }\n  return round(parseInt(alpha, 16) / 255);\n}\nfunction hexadecimalToNumber(input) {\n  return round(parseInt(input, 16));\n}\nfunction removeAlphaFromHex(input) {\n  invariant(isHex(input), MESSAGES.inputHex);\n  if (input.length === 5) {\n    return input.substring(0, 4);\n  }\n  return input.substring(0, 7);\n}\n\n// src/converters/index.ts\nvar converters_exports = {};\n__export(converters_exports, {\n  hex2hsl: () => hex2hsl,\n  hex2oklab: () => hex2oklab,\n  hex2oklch: () => hex2oklch,\n  hex2rgb: () => hex2rgb,\n  hsl2hex: () => hsl2hex,\n  hsl2oklab: () => hsl2oklab,\n  hsl2oklch: () => hsl2oklch,\n  hsl2rgb: () => hsl2rgb,\n  oklab2hex: () => oklab2hex,\n  oklab2hsl: () => oklab2hsl,\n  oklab2oklch: () => oklab2oklch,\n  oklab2rgb: () => oklab2rgb,\n  oklch2hex: () => oklch2hex,\n  oklch2hsl: () => oklch2hsl,\n  oklch2oklab: () => oklch2oklab,\n  oklch2rgb: () => oklch2rgb,\n  rgb2hex: () => rgb2hex,\n  rgb2hsl: () => rgb2hsl,\n  rgb2oklab: () => rgb2oklab,\n  rgb2oklch: () => rgb2oklch\n});\n\n// src/format-hex.ts\nfunction formatHex(input) {\n  invariant(isHex(input), MESSAGES.inputHex);\n  let color = input.replace(\"#\", \"\");\n  if (color.length === 3 || color.length === 4) {\n    const values = [...color];\n    color = \"\";\n    values.forEach((d) => {\n      color += `${d}${d}`;\n    });\n  }\n  const hex = `#${color}`;\n  invariant(isHex(hex), \"invalid hex\");\n  return hex;\n}\n\n// src/converters/hex2rgb.ts\nfunction hex2rgb(input) {\n  invariant(isHex(input), MESSAGES.inputHex);\n  const hex = formatHex(input).slice(1);\n  return {\n    r: parseInt(hex.charAt(0) + hex.charAt(1), 16),\n    g: parseInt(hex.charAt(2) + hex.charAt(3), 16),\n    b: parseInt(hex.charAt(4) + hex.charAt(5), 16)\n  };\n}\n\n// src/converters/rgb2hsl.ts\nfunction rgb2hsl(input) {\n  const value = parseInput(input, \"rgb\");\n  const rLimit = limit(value.r, \"rgb\", \"r\") / 255;\n  const gLimit = limit(value.g, \"rgb\", \"g\") / 255;\n  const bLimit = limit(value.b, \"rgb\", \"b\") / 255;\n  const min = Math.min(rLimit, gLimit, bLimit);\n  const max = Math.max(rLimit, gLimit, bLimit);\n  const delta = max - min;\n  let h = 0;\n  let s;\n  const l = (max + min) / 2;\n  let rate;\n  switch (max) {\n    case rLimit:\n      rate = !delta ? 0 : (gLimit - bLimit) / delta;\n      h = 60 * rate;\n      break;\n    case gLimit:\n      rate = (bLimit - rLimit) / delta;\n      h = 60 * rate + 120;\n      break;\n    case bLimit:\n      rate = (rLimit - gLimit) / delta;\n      h = 60 * rate + 240;\n      break;\n    /* c8 ignore next 2 */\n    default:\n      break;\n  }\n  if (h < 0) {\n    h = 360 + h;\n  }\n  if (min === max) {\n    s = 0;\n  } else {\n    s = l < 0.5 ? delta / (2 * l) : delta / (2 - 2 * l);\n  }\n  return {\n    h: Math.abs(+(h % 360).toFixed(2)),\n    s: +(s * 100).toFixed(2),\n    l: +(l * 100).toFixed(2)\n  };\n}\n\n// src/converters/hex2hsl.ts\nfunction hex2hsl(input) {\n  invariant(isHex(input), MESSAGES.inputHex);\n  return rgb2hsl(hex2rgb(input));\n}\n\n// src/converters/rgb2oklab.ts\nvar { cbrt, sign } = Math;\nfunction rgb2lrgb(input) {\n  const abs2 = Math.abs(input);\n  if (abs2 < 0.04045) {\n    return input / 12.92;\n  }\n  return (sign(input) || 1) * ((abs2 + 0.055) / 1.055) ** 2.4;\n}\nfunction rgb2oklab(input, precision = PRECISION) {\n  const value = parseInput(input, \"rgb\");\n  const [lr, lg, lb] = [rgb2lrgb(value.r / 255), rgb2lrgb(value.g / 255), rgb2lrgb(value.b / 255)];\n  const l = cbrt(LRGB_TO_LMS.l[0] * lr + LRGB_TO_LMS.l[1] * lg + LRGB_TO_LMS.l[2] * lb);\n  const m = cbrt(LRGB_TO_LMS.m[0] * lr + LRGB_TO_LMS.m[1] * lg + LRGB_TO_LMS.m[2] * lb);\n  const s = cbrt(LRGB_TO_LMS.s[0] * lr + LRGB_TO_LMS.s[1] * lg + LRGB_TO_LMS.s[2] * lb);\n  const lab = {\n    l: LSM_TO_LAB.l[0] * l + LSM_TO_LAB.l[1] * m - LSM_TO_LAB.l[2] * s,\n    a: LSM_TO_LAB.a[0] * l - LSM_TO_LAB.a[1] * m + LSM_TO_LAB.a[2] * s,\n    b: LSM_TO_LAB.b[0] * l + LSM_TO_LAB.b[1] * m - LSM_TO_LAB.b[2] * s\n  };\n  return restrictValues(lab, precision);\n}\n\n// src/converters/hex2oklab.ts\nfunction hex2oklab(input, precision) {\n  invariant(isHex(input), MESSAGES.inputHex);\n  return rgb2oklab(hex2rgb(input), precision);\n}\n\n// src/converters/oklab2oklch.ts\nvar { atan2, sqrt } = Math;\nfunction oklab2oklch(input, precision) {\n  const { l, a, b } = restrictValues(parseInput(input, \"oklab\"));\n  const c = sqrt(a ** 2 + b ** 2);\n  let h = (atan2(b, a) * RAD2DEG + 360) % 360;\n  if (round(c * 1e4) === 0) {\n    h = 0;\n  }\n  return restrictValues({ l, c, h }, precision);\n}\n\n// src/converters/rgb2oklch.ts\nfunction rgb2oklch(input, precision) {\n  const value = parseInput(input, \"rgb\");\n  return oklab2oklch(rgb2oklab(value, precision), precision);\n}\n\n// src/converters/hex2oklch.ts\nfunction hex2oklch(input, precision) {\n  invariant(isHex(input), MESSAGES.inputHex);\n  return rgb2oklch(hex2rgb(input), precision);\n}\n\n// src/modules/hue2rgb.ts\nfunction hue2rgb(point, chroma2, h) {\n  invariant(isNumber(point) && isNumber(chroma2) && isNumber(h), \"point, chroma and h are required\");\n  let hue = h;\n  if (hue < 0) {\n    hue += 1;\n  }\n  if (hue > 1) {\n    hue -= 1;\n  }\n  if (hue < 1 / 6) {\n    return round(point + (chroma2 - point) * 6 * hue, 4);\n  }\n  if (hue < 1 / 2) {\n    return round(chroma2, 4);\n  }\n  if (hue < 2 / 3) {\n    return round(point + (chroma2 - point) * (2 / 3 - hue) * 6, 4);\n  }\n  return round(point, 4);\n}\n\n// src/converters/hsl2rgb.ts\nfunction hsl2rgb(input) {\n  const value = parseInput(input, \"hsl\");\n  const h = round(value.h) / 360;\n  const s = round(value.s) / 100;\n  const l = round(value.l) / 100;\n  let r;\n  let g;\n  let b;\n  let point;\n  let chroma2;\n  if (s === 0) {\n    r = l;\n    g = l;\n    b = l;\n  } else {\n    chroma2 = l < 0.5 ? l * (1 + s) : l + s - l * s;\n    point = 2 * l - chroma2;\n    r = hue2rgb(point, chroma2, h + 1 / 3);\n    g = hue2rgb(point, chroma2, h);\n    b = hue2rgb(point, chroma2, h - 1 / 3);\n  }\n  return {\n    r: Math.round(r * 255),\n    g: Math.round(g * 255),\n    b: Math.round(b * 255)\n  };\n}\n\n// src/converters/rgb2hex.ts\nfunction rgb2hex(input) {\n  const rgb = parseInput(input, \"rgb\");\n  return `#${Object.values(rgb).map((d) => `0${Math.floor(d).toString(16)}`.slice(-2)).join(\"\")}`;\n}\n\n// src/converters/hsl2hex.ts\nfunction hsl2hex(input) {\n  const value = parseInput(input, \"hsl\");\n  return rgb2hex(hsl2rgb(value));\n}\n\n// src/converters/hsl2oklab.ts\nfunction hsl2oklab(input, precision) {\n  const value = parseInput(input, \"hsl\");\n  return rgb2oklab(hsl2rgb(value), precision);\n}\n\n// src/converters/hsl2oklch.ts\nfunction hsl2oklch(input, precision) {\n  const value = parseInput(input, \"hsl\");\n  return rgb2oklch(hsl2rgb(value), precision);\n}\n\n// src/converters/oklab2rgb.ts\nvar { abs } = Math;\nfunction lrgb2rgb(input) {\n  const absoluteNumber = abs(input);\n  const sign2 = input < 0 ? -1 : 1;\n  if (absoluteNumber > 31308e-7) {\n    return sign2 * (absoluteNumber ** (1 / 2.4) * 1.055 - 0.055);\n  }\n  return input * 12.92;\n}\nfunction oklab2rgb(input, precision = 0) {\n  const { l: L, a: A, b: B } = parseInput(input, \"oklab\");\n  const l = (L + LAB_TO_LMS.l[0] * A + LAB_TO_LMS.l[1] * B) ** 3;\n  const m = (L + LAB_TO_LMS.m[0] * A + LAB_TO_LMS.m[1] * B) ** 3;\n  const s = (L + LAB_TO_LMS.s[0] * A + LAB_TO_LMS.s[1] * B) ** 3;\n  const r = 255 * lrgb2rgb(LSM_TO_RGB.r[0] * l + LSM_TO_RGB.r[1] * m + LSM_TO_RGB.r[2] * s);\n  const g = 255 * lrgb2rgb(LSM_TO_RGB.g[0] * l + LSM_TO_RGB.g[1] * m + LSM_TO_RGB.g[2] * s);\n  const b = 255 * lrgb2rgb(LSM_TO_RGB.b[0] * l + LSM_TO_RGB.b[1] * m + LSM_TO_RGB.b[2] * s);\n  return {\n    r: clamp(round(r, precision), 0, 255),\n    g: clamp(round(g, precision), 0, 255),\n    b: clamp(round(b, precision), 0, 255)\n  };\n}\n\n// src/converters/oklab2hex.ts\nfunction oklab2hex(input) {\n  const value = parseInput(input, \"oklab\");\n  return rgb2hex(oklab2rgb(value));\n}\n\n// src/converters/oklab2hsl.ts\nfunction oklab2hsl(input) {\n  const value = parseInput(input, \"oklab\");\n  return rgb2hsl(oklab2rgb(value));\n}\n\n// src/converters/oklch2oklab.ts\nvar { sin, cos } = Math;\nfunction oklch2oklab(input, precision) {\n  let { l, c, h } = parseInput(input, \"oklch\");\n  if (Number.isNaN(h) || h < 0) {\n    h = 0;\n  }\n  return restrictValues({ l, a: c * cos(h * DEG2RAD), b: c * sin(h * DEG2RAD) }, precision);\n}\n\n// src/converters/oklch2rgb.ts\nfunction oklch2rgb(input, precision = 0) {\n  const value = parseInput(input, \"oklch\");\n  return oklab2rgb(oklch2oklab(value), precision);\n}\n\n// src/converters/oklch2hex.ts\nfunction oklch2hex(input) {\n  const value = parseInput(input, \"oklch\");\n  return rgb2hex(oklch2rgb(value));\n}\n\n// src/converters/oklch2hsl.ts\nfunction oklch2hsl(input) {\n  const value = parseInput(input, \"oklch\");\n  return rgb2hsl(oklch2rgb(value));\n}\n\n// src/extract-color-parts.ts\nfunction extractColorParts(input) {\n  invariant(isString(input), MESSAGES.inputString);\n  if (isHex(input)) {\n    const keys2 = COLOR_KEYS.rgb;\n    const { r, g, b } = hex2rgb(input);\n    const alpha2 = extractAlphaFromHex(input);\n    return {\n      model: \"rgb\",\n      [keys2[0]]: r,\n      [keys2[1]]: g,\n      [keys2[2]]: b,\n      alpha: alpha2 < 1 ? alpha2 : void 0\n    };\n  }\n  const colorRegex = /(?:(rgb|hsl|oklab|oklch)a?\\s*\\(\\s*([\\d%.-]+)\\s*[ ,/]\\s*([\\d%.-]+)\\s*[ ,/]\\s*([\\d%.-]+)(?:\\s*[ ,/]\\s*([\\d%.-]+))?\\s*\\))/i;\n  const matches = colorRegex.exec(input);\n  invariant(hasValidMatches(matches), MESSAGES.invalidCSS);\n  const model = matches[1];\n  const keys = COLOR_KEYS[model];\n  let alpha = matches[5] ? parseFloat(matches[5]) : 1;\n  if (alpha > 1) {\n    alpha /= 100;\n  }\n  return {\n    model,\n    [keys[0]]: parseFloat(matches[2]),\n    [keys[1]]: parseFloat(matches[3]),\n    [keys[2]]: parseFloat(matches[4]),\n    alpha: alpha < 1 ? alpha : void 0\n  };\n}\n\n// src/parse-css.ts\nfunction parseCSS(input, format) {\n  invariant(isString(input), MESSAGES.inputString);\n  let result;\n  const value = isNamedColor(input) ? cssColors[input.toLowerCase()] : input;\n  const output = format ?? (isHex(value) ? \"hex\" : extractColorParts(value).model);\n  const colorParams = (params) => Object.values(params);\n  if (isHex(value)) {\n    const alpha = extractAlphaFromHex(value);\n    switch (output) {\n      case \"hsl\": {\n        result = addAlpha(hex2hsl(value), alpha);\n        break;\n      }\n      case \"oklab\": {\n        result = addAlpha(hex2oklab(value), alpha);\n        break;\n      }\n      case \"oklch\": {\n        result = addAlpha(hex2oklch(value), alpha);\n        break;\n      }\n      case \"rgb\": {\n        result = addAlpha(hex2rgb(value), alpha);\n        break;\n      }\n      default: {\n        result = `${removeAlphaFromHex(value)}${alpha !== 1 ? convertAlphaToHex(alpha) : \"\"}`;\n        break;\n      }\n    }\n    return result;\n  }\n  switch (output) {\n    case \"hsl\": {\n      const { alpha, model, ...color } = extractColorParts(value);\n      if ([\"oklab\", \"oklch\"].includes(model) && color.l > 1) {\n        color.l = round(color.l / 100, PRECISION);\n      }\n      result = addAlpha(\n        model === \"hsl\" ? color : converters_exports[`${model}2hsl`](colorParams(color)),\n        alpha\n      );\n      break;\n    }\n    case \"oklab\": {\n      const { alpha, model, ...color } = extractColorParts(value);\n      if ([\"oklab\", \"oklch\"].includes(model) && color.l > 1) {\n        color.l = round(color.l / 100, PRECISION);\n      }\n      result = addAlpha(\n        model === \"oklab\" ? color : converters_exports[`${model}2oklab`](colorParams(color)),\n        alpha\n      );\n      break;\n    }\n    case \"oklch\": {\n      const { alpha, model, ...color } = extractColorParts(value);\n      if ([\"oklab\", \"oklch\"].includes(model) && color.l > 1) {\n        color.l = round(color.l / 100, PRECISION);\n      }\n      result = addAlpha(\n        model === \"oklch\" ? color : converters_exports[`${model}2oklch`](colorParams(color)),\n        alpha\n      );\n      break;\n    }\n    case \"rgb\": {\n      const { alpha, model, ...color } = extractColorParts(value);\n      if ([\"oklab\", \"oklch\"].includes(model) && color.l > 1) {\n        color.l /= 100;\n      }\n      result = addAlpha(\n        model === \"rgb\" ? color : converters_exports[`${model}2rgb`](colorParams(color)),\n        alpha\n      );\n      break;\n    }\n    case \"hex\":\n    default: {\n      const { alpha, model, ...color } = extractColorParts(value);\n      let alphaPrefix = \"\";\n      if ([\"oklab\", \"oklch\"].includes(model) && color.l > 1) {\n        color.l = round(color.l / 100, PRECISION);\n      }\n      if (alpha) {\n        alphaPrefix = convertAlphaToHex(alpha);\n      }\n      result = `${converters_exports[`${model}2hex`](colorParams(color))}${alphaPrefix}`;\n      break;\n    }\n  }\n  return result;\n}\n\n// src/modules/parse-color.ts\nfunction parseColor(color) {\n  invariant(!!color, MESSAGES.input);\n  const output = {};\n  if (isString(color)) {\n    const { alpha = 1 } = extractColorParts(color);\n    const type = isHex(color) ? \"hex\" : extractColorParts(color).model;\n    output.hex = addAlphaToHex(parseCSS(color, \"hex\"), alpha);\n    output.hsl = addAlpha(parseCSS(color, \"hsl\"), alpha);\n    output.oklab = addAlpha(parseCSS(color, \"oklab\"), alpha);\n    output.oklch = addAlpha(parseCSS(color, \"oklch\"), alpha);\n    output.rgb = addAlpha(parseCSS(color, \"rgb\"), alpha);\n    output.alpha = alpha;\n    output.type = type;\n  } else if (isPlainObject(color)) {\n    const { alpha = 1 } = color;\n    if (isHSL(color)) {\n      output.hsl = {\n        h: limit(color.h, \"hsl\", \"h\"),\n        s: limit(color.s, \"hsl\", \"s\"),\n        l: limit(color.l, \"hsl\", \"l\")\n      };\n      output.rgb = hsl2rgb(output.hsl);\n      output.oklab = hsl2oklab(output.hsl);\n      output.oklch = hsl2oklch(output.hsl);\n      output.type = \"hsl\";\n    } else if (isLAB(color)) {\n      output.hsl = oklab2hsl(color);\n      output.oklab = color;\n      output.oklch = oklab2oklch(color);\n      output.rgb = oklab2rgb(color);\n      output.type = \"oklab\";\n    } else if (isLCH(color)) {\n      output.hsl = oklch2hsl(color);\n      output.oklab = oklch2oklab(color);\n      output.oklch = color;\n      output.rgb = oklch2rgb(color);\n      output.type = \"oklch\";\n    } else if (isRGB(color)) {\n      output.rgb = {\n        r: limit(color.r, \"rgb\", \"r\"),\n        g: limit(color.g, \"rgb\", \"g\"),\n        b: limit(color.b, \"rgb\", \"b\")\n      };\n      output.hsl = rgb2hsl(output.rgb);\n      output.oklab = rgb2oklab(output.rgb);\n      output.oklch = rgb2oklch(output.rgb);\n      output.type = \"rgb\";\n    } else {\n      throw new Error(\"invalid color\");\n    }\n    output.hex = addAlphaToHex(hsl2hex(output.hsl), alpha);\n    output.hsl = addAlpha(output.hsl, alpha);\n    output.oklab = addAlpha(output.oklab, alpha);\n    output.oklch = addAlpha(output.oklch, alpha);\n    output.rgb = addAlpha(output.rgb, alpha);\n    output.alpha = alpha;\n  } else {\n    throw new Error(MESSAGES.input);\n  }\n  return output;\n}\n\n// src/brightness-difference.ts\nfunction brightnessDifference(left, right, precision = PRECISION) {\n  invariant(isString(left), MESSAGES.left);\n  invariant(isString(right), MESSAGES.right);\n  const RGBLeft = parseCSS(left, \"rgb\");\n  const RGBRight = parseCSS(right, \"rgb\");\n  const brightnessLeft = (RGBLeft.r * 299 + RGBLeft.g * 587 + RGBLeft.b * 114) / 1e3;\n  const brightnessRight = (RGBRight.r * 299 + RGBRight.g * 587 + RGBRight.b * 114) / 1e3;\n  return round(Math.abs(brightnessRight - brightnessLeft), precision);\n}\n\n// src/chroma.ts\nfunction chroma(input) {\n  invariant(isString(input), MESSAGES.inputString);\n  const { r, g, b } = parseCSS(input, \"rgb\");\n  const max = Math.max(r, g, b);\n  const min = Math.min(r, g, b);\n  return round((max - min) / 255, 4);\n}\n\n// src/color-difference.ts\nfunction colorDifference(left, right) {\n  invariant(isString(left), MESSAGES.left);\n  invariant(isString(right), MESSAGES.right);\n  const RGBLeft = parseCSS(left, \"rgb\");\n  const RGBRight = parseCSS(right, \"rgb\");\n  return Math.max(RGBLeft.r, RGBRight.r) - Math.min(RGBLeft.r, RGBRight.r) + (Math.max(RGBLeft.g, RGBRight.g) - Math.min(RGBLeft.g, RGBRight.g)) + (Math.max(RGBLeft.b, RGBRight.b) - Math.min(RGBLeft.b, RGBRight.b));\n}\n\n// src/luminance.ts\nfunction luminance(input) {\n  invariant(isString(input), MESSAGES.inputString);\n  const { r, g, b } = parseCSS(input, \"rgb\");\n  const rgb = [r / 255, g / 255, b / 255];\n  for (let index = 0; index < rgb.length; index++) {\n    if (rgb[index] <= 0.03928) {\n      rgb[index] /= 12.92;\n    } else {\n      rgb[index] = ((rgb[index] + 0.055) / 1.055) ** 2.4;\n    }\n  }\n  return round(0.2126 * rgb[0] + 0.7152 * rgb[1] + 0.0722 * rgb[2], 4);\n}\n\n// src/contrast.ts\nfunction contrast(left, right) {\n  invariant(isString(left), MESSAGES.left);\n  invariant(isString(right), MESSAGES.right);\n  const LuminanceLeft = luminance(left);\n  const LuminanceRight = luminance(right);\n  return round(\n    LuminanceLeft >= LuminanceRight ? (LuminanceLeft + 0.05) / (LuminanceRight + 0.05) : (LuminanceRight + 0.05) / (LuminanceLeft + 0.05)\n  );\n}\n\n// src/compare.ts\nfunction compare(left, right) {\n  invariant(isString(left), MESSAGES.left);\n  invariant(isString(right), MESSAGES.right);\n  const colorThreshold = 500;\n  const brightnessThreshold = 125;\n  const colorDifference2 = colorDifference(left, right);\n  const contrast2 = contrast(left, right);\n  const brightnessDifference2 = brightnessDifference(left, right);\n  const isBright = brightnessDifference2 >= brightnessThreshold;\n  const hasEnoughDifference = colorDifference2 >= colorThreshold;\n  let compliant = 0;\n  if (isBright && hasEnoughDifference) {\n    compliant = 2;\n  } else if (isBright || hasEnoughDifference) {\n    compliant = 1;\n  }\n  return {\n    brightnessDifference: brightnessDifference2,\n    colorDifference: colorDifference2,\n    compliant,\n    contrast: contrast2,\n    largeAA: contrast2 >= 3,\n    largeAAA: contrast2 >= 4.5,\n    normalAA: contrast2 >= 4.5,\n    normalAAA: contrast2 >= 7\n  };\n}\n\n// src/format-css.ts\nfunction getColorModel(input) {\n  if (isHex(input) || isNamedColor(input)) {\n    return \"hex\";\n  }\n  if (isString(input)) {\n    return extractColorParts(input).model;\n  } else if (isHSL(input)) {\n    return \"hsl\";\n  } else if (isLAB(input)) {\n    return \"oklab\";\n  } else if (isLCH(input)) {\n    return \"oklch\";\n  } else if (isRGB(input)) {\n    return \"rgb\";\n  }\n  throw new Error(MESSAGES.invalid);\n}\nfunction getColorValue(input, output) {\n  const value = isNamedColor(input) ? cssColors[input.toLowerCase()] : input;\n  const from = getColorModel(value);\n  if (from === output) {\n    return value;\n  }\n  const converterKey = `${from}2${output}`;\n  const converter = converters_exports[converterKey];\n  if (!converter) {\n    throw new Error(`Converter not found for ${from} to ${output}`);\n  }\n  switch (from) {\n    case \"hex\": {\n      if (output === \"hex\") {\n        return value;\n      }\n      return converter(value);\n    }\n    case \"hsl\": {\n      if (output === \"hsl\") {\n        return value;\n      }\n      return converter(value);\n    }\n    case \"oklab\": {\n      if (output === \"oklab\") {\n        return value;\n      }\n      return converter(value);\n    }\n    case \"oklch\": {\n      if (output === \"oklch\") {\n        return value;\n      }\n      return converter(value);\n    }\n    default: {\n      if (output === \"rgb\") {\n        return value;\n      }\n      return converter(value);\n    }\n  }\n}\nfunction formatCSS(input, options = {}) {\n  invariant(isHex(input) || isValidColorModel(input), MESSAGES.invalid);\n  const { alpha, format = \"hex\", precision = PRECISION, separator: baseSeparator = \" \" } = options;\n  const opacity2 = alpha && alpha !== 1 ? `${round(alpha * 100)}%` : null;\n  let params = [];\n  let separator = baseSeparator;\n  switch (format) {\n    case \"hsl\": {\n      const { h, s, l } = getColorValue(input, \"hsl\");\n      params = [h, `${s}%`, `${l}%`];\n      break;\n    }\n    case \"oklab\": {\n      separator = \" \";\n      const { l, a, b } = restrictValues(getColorValue(input, \"oklab\"), precision);\n      params = [`${round(l * 100, precision)}%`, a, b];\n      break;\n    }\n    case \"oklch\": {\n      separator = \" \";\n      const { l, c, h } = restrictValues(getColorValue(input, \"oklch\"), precision);\n      params = [`${round(l * 100, precision)}%`, c, h];\n      break;\n    }\n    case \"rgb\": {\n      const { r, g, b } = getColorValue(input, \"rgb\");\n      params = [r, g, b];\n      break;\n    }\n    default: {\n      const hex = removeAlphaFromHex(getColorValue(input, \"hex\"));\n      if (alpha && alpha !== 1) {\n        return `${hex}${convertAlphaToHex(alpha)}`;\n      }\n      return hex;\n    }\n  }\n  return `${format}(${params.join(separator)}${opacity2 ? ` / ${opacity2}` : \"\"})`;\n}\n\n// src/modules/updater.ts\nfunction updater(key, operator, format) {\n  return (input, amount) => {\n    invariant(isString(input), MESSAGES.inputString);\n    invariant(isNumber(amount), MESSAGES.alpha);\n    const color = parseCSS(input, \"hsl\");\n    const output = isHex(input) || isNamedColor(input) ? \"hex\" : extractColorParts(input).model;\n    return formatCSS(\n      {\n        ...color,\n        [key]: clamp(color[key] + (operator === \"+\" ? amount : -amount), 0, 100)\n      },\n      { format: format ?? output }\n    );\n  };\n}\n\n// src/darken.ts\nfunction darken(input, amount, format) {\n  return updater(\"l\", \"-\", format)(input, amount);\n}\n\n// src/desaturate.ts\nfunction desaturate(input, amount, format) {\n  return updater(\"s\", \"-\", format)(input, amount);\n}\n\n// src/rotate.ts\nfunction rotate(input, degrees, format) {\n  invariant(isString(input), MESSAGES.inputString);\n  invariant(isNumber(degrees), \"degrees must be a number\");\n  const color = parseCSS(input, \"hsl\");\n  const output = isHex(input) || isNamedColor(input) ? \"hex\" : extractColorParts(input).model;\n  return formatCSS(\n    {\n      ...color,\n      h: constrainDegrees(color.h, degrees)\n    },\n    { format: format ?? output }\n  );\n}\n\n// src/invert.ts\nfunction invert(input) {\n  invariant(isString(input), MESSAGES.inputString);\n  const format = isHex(input) || isNamedColor(input) ? \"hex\" : extractColorParts(input).model;\n  const hex = parseCSS(input, \"hex\");\n  return formatCSS(rotate(hex, 180), { format });\n}\n\n// src/lighten.ts\nfunction lighten(input, amount, format) {\n  return updater(\"l\", \"+\", format)(input, amount);\n}\n\n// src/opacify.ts\nfunction opacify(input, alpha, format) {\n  invariant(isString(input), MESSAGES.inputString);\n  invariant(isNumber(alpha), MESSAGES.alpha);\n  const type = isHex(input) || isNamedColor(input) ? \"hex\" : extractColorParts(input).model;\n  const rgb = parseCSS(input, \"rgb\");\n  return formatCSS(rgb, { format: format ?? type, alpha });\n}\n\n// src/opacity.ts\nfunction opacity(input) {\n  invariant(isString(input), MESSAGES.inputString);\n  if (isHex(input)) {\n    return extractAlphaFromHex(input);\n  } else if (Object.keys(cssColors).includes(input)) {\n    return 1;\n  }\n  const { alpha } = extractColorParts(input);\n  if (!alpha) {\n    return 1;\n  }\n  return alpha;\n}\n\n// src/saturate.ts\nfunction saturate(input, amount, format) {\n  return updater(\"s\", \"+\", format)(input, amount);\n}\n\n// src/text-color.ts\nfunction textColor(input, options = {}) {\n  const { darkColor = \"#000000\", lightColor = \"#ffffff\", threshold = 128 } = options;\n  invariant(isString(input), MESSAGES.inputString);\n  invariant(threshold >= 0 && threshold <= 255, MESSAGES.threshold);\n  try {\n    const { r, g, b } = hex2rgb(parseCSS(input, \"hex\"));\n    const yiq = (r * 299 + g * 587 + b * 114) / 1e3;\n    return yiq >= threshold ? darkColor : lightColor;\n  } catch (error) {\n    console.warn(`Invalid color input: ${input}`);\n    console.warn(error);\n    return darkColor;\n  }\n}\n\n// src/transparentize.ts\nfunction transparentize(input, alpha, format) {\n  invariant(isString(input), MESSAGES.inputString);\n  invariant(isNumber(alpha), MESSAGES.alpha);\n  invariant(alpha >= -1 && alpha <= 1, MESSAGES.alpha);\n  const oklch = parseCSS(input, \"oklab\");\n  const value = round(clamp(opacity(input) - alpha, 0, 1));\n  return formatCSS(oklch, { format, alpha: value });\n}\n\n// src/colorizr.ts\nvar Colorizr = class {\n  constructor(color, options = {}) {\n    __publicField(this, \"alpha\");\n    __publicField(this, \"hex\");\n    __publicField(this, \"hsl\");\n    __publicField(this, \"oklab\");\n    __publicField(this, \"oklch\");\n    __publicField(this, \"rgb\");\n    __publicField(this, \"type\");\n    invariant(!!color, \"color is required\");\n    const { alpha, hex, hsl, oklab, oklch, rgb, type } = parseColor(color);\n    this.hex = hex;\n    this.hsl = hsl;\n    this.oklab = oklab;\n    this.oklch = oklch;\n    this.rgb = rgb;\n    this.alpha = alpha;\n    this.type = options.format ?? type;\n  }\n  /**\n   * Get css string\n   */\n  get css() {\n    return this.selectedColor;\n  }\n  /**\n   * Get the red value\n   */\n  get red() {\n    return Number(this.rgb.r);\n  }\n  /**\n   * Get the green value\n   */\n  get green() {\n    return Number(this.rgb.g);\n  }\n  /**\n   * Get the blue value\n   */\n  get blue() {\n    return Number(this.rgb.b);\n  }\n  /**\n   * Get the hue value\n   */\n  get hue() {\n    return Number(this.hsl.h);\n  }\n  /**\n   * Get the saturation value\n   */\n  get saturation() {\n    return Number(this.hsl.s);\n  }\n  /**\n   * Get the lightness value\n   */\n  get lightness() {\n    return Number(this.hsl.l);\n  }\n  /**\n   * Get the luminance value\n   */\n  get luminance() {\n    return luminance(this.selectedColor);\n  }\n  /**\n   * Get the chroma value\n   */\n  get chroma() {\n    return chroma(this.selectedColor);\n  }\n  get opacity() {\n    return opacity(this.selectedColor);\n  }\n  /**\n   * Get the contrasted color\n   */\n  get textColor() {\n    return textColor(this.selectedColor);\n  }\n  get selectedColor() {\n    return formatCSS(this[this.type], { format: this.type, alpha: this.alpha });\n  }\n  brightnessDifference(input) {\n    return brightnessDifference(this.selectedColor, input);\n  }\n  colorDifference(input) {\n    return colorDifference(this.selectedColor, input);\n  }\n  /**\n   * Test 2 colors for compliance\n   */\n  compare(input) {\n    return compare(this.selectedColor, input);\n  }\n  contrast(input) {\n    return contrast(this.selectedColor, input);\n  }\n  format(type, precision) {\n    return formatCSS(this.rgb, {\n      alpha: this.alpha,\n      format: type,\n      precision\n    });\n  }\n  /**\n   * Increase lightness\n   */\n  lighten(amount) {\n    return lighten(this.selectedColor, amount);\n  }\n  /**\n   * Decrease lightness\n   */\n  darken(amount) {\n    return darken(this.selectedColor, amount);\n  }\n  /**\n   * Increase saturation\n   */\n  saturate(amount) {\n    return saturate(this.selectedColor, amount);\n  }\n  /**\n   * Decrease saturation\n   */\n  desaturate(amount) {\n    return desaturate(this.selectedColor, amount);\n  }\n  /**\n   * Invert color\n   */\n  invert() {\n    return invert(this.selectedColor);\n  }\n  /**\n   * Add opacity to the color.\n   */\n  opacify(alpha = 0.9) {\n    return opacify(this.selectedColor, alpha, this.type);\n  }\n  /**\n   * Rotate color\n   */\n  rotate(degrees) {\n    return rotate(this.selectedColor, degrees);\n  }\n  /**\n   * Make the color more transparent\n   */\n  transparentize(alpha = 0.1) {\n    return transparentize(this.selectedColor, alpha, this.type);\n  }\n};\n\n// src/convert.ts\nfunction convert(input, format) {\n  const value = parseCSS(input, format);\n  return formatCSS(value, { format });\n}\n\n// src/is-valid-color.ts\nfunction isValidColor(input) {\n  try {\n    parseCSS(input);\n    return true;\n  } catch {\n    return false;\n  }\n}\n\n// src/name.ts\nfunction name(input) {\n  invariant(isString(input), MESSAGES.inputString);\n  const hex = parseCSS(input, \"hex\");\n  const [color] = Object.entries(cssColors).find(([, value]) => value === hex) || [];\n  return color ?? hex;\n}\n\n// src/palette.ts\nfunction palette(input, options = {}) {\n  invariant(isString(input), MESSAGES.inputString);\n  invariant(isPlainObject(options), MESSAGES.options);\n  const { format, lightness, saturation, size = 6, type } = options;\n  const hsl = parseCSS(input, \"hsl\");\n  const colorFormat = isHex(input) || isNamedColor(input) ? \"hex\" : extractColorParts(input).model;\n  const output = [];\n  if (type === \"monochromatic\") {\n    const step = 80 / size;\n    for (let index = size; index > 0; index--) {\n      output.push(hsl2hex({ ...hsl, l: step * index }));\n    }\n  } else {\n    const step = 360 / size;\n    output.push(hsl2hex({ ...hsl, l: lightness ?? hsl.l, s: saturation ?? hsl.s }));\n    for (let index = 1; index < size; index++) {\n      const color = rotate(input, hsl.h + step * index, \"hex\");\n      output.push(hsl2hex({ ...hex2hsl(color), l: lightness ?? hsl.l, s: saturation ?? hsl.s }));\n    }\n  }\n  return output.map((color) => convert(color, format ?? colorFormat));\n}\n\n// src/p3.ts\nfunction multiplyMatrix(matrix, vector) {\n  return [\n    matrix[0][0] * vector[0] + matrix[0][1] * vector[1] + matrix[0][2] * vector[2],\n    matrix[1][0] * vector[0] + matrix[1][1] * vector[1] + matrix[1][2] * vector[2],\n    matrix[2][0] * vector[0] + matrix[2][1] * vector[1] + matrix[2][2] * vector[2]\n  ];\n}\nfunction isInP3Gamut(color) {\n  const epsilon = 1e-6;\n  return color.every((component) => component >= 0 - epsilon && component <= 1 + epsilon);\n}\nfunction oklabToLinearSRGB(L, a, b) {\n  const l = (L + LAB_TO_LMS.l[0] * a + LAB_TO_LMS.l[1] * b) ** 3;\n  const m = (L + LAB_TO_LMS.m[0] * a + LAB_TO_LMS.m[1] * b) ** 3;\n  const s = (L + LAB_TO_LMS.s[0] * a + LAB_TO_LMS.s[1] * b) ** 3;\n  return [\n    LSM_TO_RGB.r[0] * l + LSM_TO_RGB.r[1] * m + LSM_TO_RGB.r[2] * s,\n    LSM_TO_RGB.g[0] * l + LSM_TO_RGB.g[1] * m + LSM_TO_RGB.g[2] * s,\n    LSM_TO_RGB.b[0] * l + LSM_TO_RGB.b[1] * m + LSM_TO_RGB.b[2] * s\n  ];\n}\nfunction oklabToLinearP3(L, a, b) {\n  const srgb = oklabToLinearSRGB(L, a, b);\n  return multiplyMatrix(SRGB_TO_P3, srgb);\n}\nfunction getOkLCHMaxChroma(input, precision = PRECISION) {\n  const { l, h } = isString(input) ? parseCSS(input, \"oklch\") : input;\n  invariant(isNumber(l) && l >= 0 && l <= 1, MESSAGES.lightnessRange);\n  invariant(isNumber(h) && h >= 0 && h <= 360, MESSAGES.hueRange);\n  const epsilon = 1e-6;\n  let low = 0;\n  let high = 0.5;\n  while (high - low > epsilon) {\n    const mid = (low + high) / 2;\n    const { l: L, a, b } = oklch2oklab({ l, c: mid, h }, 16);\n    const p3Color = oklabToLinearP3(L, a, b);\n    if (isInP3Gamut(p3Color)) {\n      low = mid;\n    } else {\n      high = mid;\n    }\n  }\n  return round(low, precision);\n}\nfunction getP3Color(input) {\n  const lch = isString(input) ? parseCSS(input, \"oklch\") : input;\n  return `oklch(${lch.l} ${getOkLCHMaxChroma(lch)} ${lch.h})`;\n}\n\n// src/random.ts\nfunction random(type = \"hex\") {\n  const hsl = {\n    h: Math.floor(Math.random() * 360) + 1,\n    s: Math.floor(Math.random() * 90) + 10,\n    l: Math.floor(Math.random() * 80) + 10\n  };\n  return formatCSS(hsl, { format: type });\n}\n\n// src/scheme.ts\nfunction scheme(input, typeOrOptions) {\n  invariant(isString(input), MESSAGES.inputString);\n  const { format, type = \"complementary\" } = isString(typeOrOptions) ? { type: typeOrOptions } : typeOrOptions ?? {};\n  const output = isHex(input) || isNamedColor(input) ? \"hex\" : extractColorParts(input).model;\n  const colors = [];\n  switch (type) {\n    case \"analogous\": {\n      colors.push(rotate(input, -30), input, rotate(input, 30));\n      break;\n    }\n    case \"complementary\": {\n      colors.push(input, rotate(input, 180));\n      break;\n    }\n    case \"split\":\n    case \"split-complementary\": {\n      colors.push(input, rotate(input, 150), rotate(input, 210));\n      break;\n    }\n    case \"triadic\": {\n      colors.push(input, rotate(input, 120), rotate(input, 240));\n      break;\n    }\n    case \"tetradic\":\n    case \"rectangle\": {\n      colors.push(input, rotate(input, 60), rotate(input, 180), rotate(input, 240));\n      break;\n    }\n    case \"square\": {\n      colors.push(input, rotate(input, 90), rotate(input, 180), rotate(input, 270));\n      break;\n    }\n    default: {\n      throw new TypeError(\"invalid type\");\n    }\n  }\n  return colors.map((color) => convert(color, format ?? output));\n}\n\n// src/swatch.ts\nfunction shadeColor(input, lightness) {\n  const { c, h } = input;\n  const chromaScale = c === 0 ? 1 : 4 * lightness * (1 - lightness);\n  const chroma2 = c * chromaScale;\n  const adjustedChroma = clamp(chroma2, 0, 0.4);\n  return { l: lightness, c: adjustedChroma, h };\n}\nfunction swatch(input, options = {}) {\n  invariant(isString(input), MESSAGES.inputString);\n  const {\n    format,\n    lightnessFactor = 1.5,\n    maxLightness = 0.97,\n    minLightness = 0.2,\n    scale = \"dynamic\",\n    variant = \"base\"\n  } = options;\n  invariant(\n    maxLightness > minLightness && maxLightness <= 1 && minLightness >= 0,\n    \"maxLightness must be greater than minLightness and within the range [0, 1].\"\n  );\n  const lch = parseCSS(input, \"oklch\");\n  const chromaScale = {\n    base: 1,\n    deep: 0.8,\n    neutral: 0.5,\n    pastel: 0.3,\n    subtle: 0.2,\n    vibrant: 1.25\n  }[variant];\n  lch.l = 0.7;\n  lch.c *= chromaScale;\n  if (variant === \"deep\") {\n    lch.l *= 0.7;\n  }\n  const colorFormat = isHex(input) || isNamedColor(input) ? \"hex\" : extractColorParts(input).model;\n  const steps = 11;\n  let palette2 = {};\n  if (scale === \"dynamic\") {\n    for (let index = 0; index < steps; index++) {\n      const lightness = maxLightness - (maxLightness - minLightness) * (index / (steps - 1)) ** lightnessFactor;\n      let tone = index * 100;\n      if (index === 0) {\n        tone = 50;\n      } else if (index === 10) {\n        tone = 950;\n      }\n      palette2[tone] = lightness;\n    }\n  } else {\n    palette2 = {\n      50: 0.97,\n      100: 0.92,\n      200: 0.85,\n      300: 0.78,\n      400: 0.69,\n      500: 0.57,\n      600: 0.46,\n      700: 0.35,\n      800: 0.24,\n      900: 0.18,\n      950: 0.1\n    };\n  }\n  const output = Object.entries(palette2).reduce(\n    (acc, [key, value]) => {\n      acc[Number(key)] = shadeColor(lch, value);\n      return acc;\n    },\n    {}\n  );\n  return Object.entries(output).reduce((acc, [key, value]) => {\n    return {\n      ...acc,\n      [key]: formatCSS(value, { format: format ?? colorFormat })\n    };\n  }, {});\n}\n\n// src/index.ts\nvar index_default = Colorizr;\nexport {\n  addAlphaToHex,\n  brightnessDifference,\n  chroma,\n  colorDifference,\n  compare,\n  contrast,\n  convert,\n  convertAlphaToHex,\n  darken,\n  index_default as default,\n  desaturate,\n  extractAlphaFromHex,\n  extractColorParts,\n  formatCSS,\n  formatHex,\n  getOkLCHMaxChroma,\n  getP3Color,\n  hex2hsl,\n  hex2oklab,\n  hex2oklch,\n  hex2rgb,\n  hexadecimalToNumber,\n  hsl2hex,\n  hsl2oklab,\n  hsl2oklch,\n  hsl2rgb,\n  isHSL,\n  isHex,\n  isLAB,\n  isLCH,\n  isRGB,\n  isValidColor,\n  lighten,\n  luminance,\n  name,\n  oklab2hex,\n  oklab2hsl,\n  oklab2oklch,\n  oklab2rgb,\n  oklch2hex,\n  oklch2hsl,\n  oklch2oklab,\n  oklch2rgb,\n  opacify,\n  opacity,\n  palette,\n  parseCSS,\n  random,\n  removeAlphaFromHex,\n  rgb2hex,\n  rgb2hsl,\n  rgb2oklab,\n  rgb2oklch,\n  rotate,\n  saturate,\n  scheme,\n  swatch,\n  textColor,\n  transparentize\n};\n//# sourceMappingURL=index.mjs.map","import * as C from \"colorizr\";\nimport { numberInclusiveRangeTest, numberTest } from \"@ixfx/guards\";\nimport { resultThrow } from \"@ixfx/guards\";\nimport { cssDefinedHexColours } from \"./css-colours.js\";\nimport { angleConvert, angleParse } from \"@ixfx/geometry\";\n/**\n * Scales the opacity value of an input HSL value\n * ```js\n * withOpacity()\n * ```\n * @param value\n * @param fn\n * @returns\n */\nexport const withOpacity = (value, fn) => {\n    switch (value.unit) {\n        case `absolute`:\n            return {\n                ...value,\n                opacity: fn((value.opacity ?? 100) / 100, value) * 100\n            };\n        case `scalar`:\n            return {\n                ...value,\n                opacity: fn((value.opacity ?? 1), value)\n            };\n    }\n};\nconst hslTransparent = Object.freeze({\n    h: 0, s: 0, l: 0, opacity: 0, unit: `absolute`, space: `hsl`\n});\nexport const fromHexString = (hexString) => fromLibrary(C.hex2hsl(hexString));\nexport const fromCssAbsolute = (value, options = {}) => {\n    value = value.toLowerCase();\n    if (value.startsWith(`#`)) {\n        return fromHexString(value);\n    }\n    if (value === `transparent`)\n        return hslTransparent;\n    if (typeof cssDefinedHexColours[value] !== `undefined`) {\n        return fromHexString(cssDefinedHexColours[value]);\n    }\n    if (!value.startsWith(`hsl(`) && !value.startsWith(`hsla(`)) {\n        try {\n            const converted = C.convert(value, `hsl`);\n            value = converted;\n            // eslint-disable-next-line unicorn/prevent-abbreviations\n        }\n        catch (e) {\n            if (options.fallbackString) {\n                value = options.fallbackString;\n            }\n            else {\n                throw e;\n            }\n        }\n    }\n    const c = C.extractColorParts(value);\n    if (c.model !== `hsl`) {\n        if (options.fallbackColour)\n            return options.fallbackColour;\n        throw new Error(`Expecting HSL colour space. Got: ${c.model}`);\n    }\n    return fromLibrary(c, options);\n};\nexport const fromCssScalar = (value, options = {}) => toScalar(fromCssAbsolute(value, options));\nexport const toCssString = (hsl) => {\n    const abs = toAbsolute(hsl);\n    let css = `hsl(${abs.h}deg ${abs.s}% ${abs.l}%`;\n    if (`opacity` in abs && abs.opacity !== undefined && abs.opacity < 100) {\n        css += ` / ${abs.opacity}%`;\n    }\n    css += ')';\n    return css;\n};\nconst toLibrary = (hsl) => {\n    const abs = toAbsolute(hsl);\n    return {\n        h: abs.h,\n        s: abs.s,\n        l: abs.l,\n        alpha: abs.opacity,\n    };\n};\nconst fromLibrary = (hsl, parsingOptions = {}) => {\n    if (typeof hsl === `undefined` || hsl === null) {\n        if (parsingOptions.fallbackColour)\n            return parsingOptions.fallbackColour;\n    }\n    resultThrow(numberInclusiveRangeTest(hsl.h, 0, 360, `h`), numberInclusiveRangeTest(hsl.s, 0, 100, `s`), numberInclusiveRangeTest(hsl.l, 0, 100, `l`), () => hsl.alpha !== undefined ? numberInclusiveRangeTest(hsl.alpha, 0, 100, `alpha`) : { success: true, value: hsl });\n    return {\n        h: hsl.h,\n        s: hsl.s,\n        l: hsl.l,\n        opacity: (hsl.alpha ?? 1) * 100,\n        unit: `absolute`,\n        space: `hsl`\n    };\n};\nexport const toAbsolute = (hsl) => {\n    guard(hsl);\n    if (hsl.unit === `absolute`)\n        return hsl;\n    return {\n        h: hsl.h * 360,\n        s: hsl.s * 100,\n        l: hsl.l * 100,\n        opacity: (hsl.opacity ?? 1) * 100,\n        unit: `absolute`,\n        space: `hsl`\n    };\n};\n/**\n * Generates a {@link HslScalar} value.\n *\n * ```js\n * generateScaler(10); // 10deg, default to full saturation, half lightness and full opacity\n *\n * // Generate HSL value from radian angle and 50% saturation\n * generateScalar(`10rad`, 0.5);\n *\n * // Generate from numeric CSS variable\n * generateScalar(`--hue`);\n * ```\n * @param absoluteHslOrVariable Hue angle or CSS variable\n * @param saturation\n * @param lightness\n * @param opacity\n */\nexport const generateScalar = (absoluteHslOrVariable, saturation = 1, lightness = 0.5, opacity = 1) => {\n    if (typeof absoluteHslOrVariable === `string`) {\n        if (absoluteHslOrVariable.startsWith(`--`)) {\n            absoluteHslOrVariable = getComputedStyle(document.body).getPropertyValue(absoluteHslOrVariable).trim();\n        }\n    }\n    const hue = angleParse(absoluteHslOrVariable);\n    if (saturation > 1)\n        throw new TypeError(`Param 'saturation' must be between 0..1`);\n    if (lightness > 1)\n        throw new TypeError(`Param 'lightness' must be between 0..1`);\n    if (opacity > 1)\n        throw new TypeError(`Param 'opacity' must be between 0..1`);\n    const hueDeg = angleConvert(hue, `deg`).value / 360;\n    return {\n        h: hueDeg,\n        s: saturation,\n        l: lightness,\n        opacity: opacity,\n        unit: `scalar`,\n        space: `hsl`\n    };\n};\nexport const toScalar = (hsl) => {\n    guard(hsl);\n    if (hsl.unit === `scalar`)\n        return hsl;\n    return {\n        h: hsl.h / 360,\n        s: hsl.s / 100,\n        l: hsl.l / 100,\n        opacity: (hsl.opacity ?? 1) / 100,\n        unit: `scalar`,\n        space: `hsl`\n    };\n};\nexport const guard = (hsl) => {\n    const { h, s, l, opacity, space, unit } = hsl;\n    if (space !== `hsl`)\n        throw new Error(`Space is expected to be 'hsl'. Got: ${space}`);\n    if (unit === `absolute`) {\n        resultThrow(numberTest(h, `finite`, `h`), numberInclusiveRangeTest(s, 0, 100, `s`), numberInclusiveRangeTest(l, 0, 100, `l`), () => {\n            if (typeof opacity === `number`) {\n                return numberInclusiveRangeTest(opacity, 0, 100, `opacity`);\n            }\n        });\n    }\n    else if (unit === `scalar`) {\n        resultThrow(numberTest(h, `percentage`, `h`), numberTest(s, `percentage`, `s`), numberTest(l, `percentage`, `l`), () => {\n            if (typeof opacity === `number`) {\n                return numberTest(opacity, `percentage`, `opacity`);\n            }\n        });\n    }\n    else {\n        throw new Error(`Unit is expected to be 'absolute' or 'scalar'. Got: ${unit}`);\n    }\n};\n","import * as SrgbSpace from \"./srgb.js\";\nimport * as HslSpace from './hsl.js';\n/**\n * Converts from some kind of colour that is legal in CSS\n * into a structured Colour type.\n *\n * Handles: hex format, CSS variables, colour names\n * ```js\n * fromCssColour(`#ffffff`);\n * fromCssColour(`blue`);\n * fromCssColour(`--some-variable`);\n * fromCssColour(`hsl(50, 50%, 50%)`);\n * fromCssColour(`rgb(50, 100, 100)`);\n * ```\n * @param colour\n * @returns\n */\nexport const fromCssColour = (colour) => {\n    if (colour.startsWith(`#`)) {\n        return SrgbSpace.fromHexString(colour);\n    }\n    if (typeof cssDefinedHexColours[colour] !== `undefined`) {\n        return SrgbSpace.fromHexString(cssDefinedHexColours[colour]);\n    }\n    if (colour.startsWith(`--`)) {\n        const fromCss = getComputedStyle(document.body).getPropertyValue(colour).trim();\n        if (fromCss.length === 0 || fromCss === null)\n            throw new Error(`Variable missing: ${colour}`);\n        return fromCssColour(fromCss);\n    }\n    colour = colour.toLowerCase();\n    if (colour.startsWith(`hsl(`) || colour.startsWith(`hsla(`)) {\n        return HslSpace.fromCssAbsolute(colour);\n    }\n    if (colour.startsWith(`rgb(`) || colour.startsWith(`rgba(`)) {\n        return SrgbSpace.fromCss8bit(colour);\n    }\n    throw new Error(`String colour is not a hex colour, CSS variable nor well-defined colour name: '${colour}'`);\n};\nexport const cssDefinedHexColours = {\n    \"aliceblue\": \"#f0f8ff\",\n    \"antiquewhite\": \"#faebd7\",\n    \"aqua\": \"#00ffff\",\n    \"aquamarine\": \"#7fffd4\",\n    \"azure\": \"#f0ffff\",\n    \"beige\": \"#f5f5dc\",\n    \"bisque\": \"#ffe4c4\",\n    \"black\": \"#000000\",\n    \"blanchedalmond\": \"#ffebcd\",\n    \"blue\": \"#0000ff\",\n    \"blueviolet\": \"#8a2be2\",\n    \"brown\": \"#a52a2a\",\n    \"burlywood\": \"#deb887\",\n    \"cadetblue\": \"#5f9ea0\",\n    \"chartreuse\": \"#7fff00\",\n    \"chocolate\": \"#d2691e\",\n    \"coral\": \"#ff7f50\",\n    \"cornflowerblue\": \"#6495ed\",\n    \"cornsilk\": \"#fff8dc\",\n    \"crimson\": \"#dc143c\",\n    \"cyan\": \"#00ffff\",\n    \"darkblue\": \"#00008b\",\n    \"darkcyan\": \"#008b8b\",\n    \"darkgoldenrod\": \"#b8860b\",\n    \"darkgray\": \"#a9a9a9\",\n    \"darkgreen\": \"#006400\",\n    \"darkkhaki\": \"#bdb76b\",\n    \"darkmagenta\": \"#8b008b\",\n    \"darkolivegreen\": \"#556b2f\",\n    \"darkorange\": \"#ff8c00\",\n    \"darkorchid\": \"#9932cc\",\n    \"darkred\": \"#8b0000\",\n    \"darksalmon\": \"#e9967a\",\n    \"darkseagreen\": \"#8fbc8f\",\n    \"darkslateblue\": \"#483d8b\",\n    \"darkslategray\": \"#2f4f4f\",\n    \"darkturquoise\": \"#00ced1\",\n    \"darkviolet\": \"#9400d3\",\n    \"deeppink\": \"#ff1493\",\n    \"deepskyblue\": \"#00bfff\",\n    \"dimgray\": \"#696969\",\n    \"dodgerblue\": \"#1e90ff\",\n    \"firebrick\": \"#b22222\",\n    \"floralwhite\": \"#fffaf0\",\n    \"forestgreen\": \"#228b22\",\n    \"fuchsia\": \"#ff00ff\",\n    \"gainsboro\": \"#dcdcdc\",\n    \"ghostwhite\": \"#f8f8ff\",\n    \"gold\": \"#ffd700\",\n    \"goldenrod\": \"#daa520\",\n    \"gray\": \"#808080\",\n    \"green\": \"#008000\",\n    \"greenyellow\": \"#adff2f\",\n    \"honeydew\": \"#f0fff0\",\n    \"hotpink\": \"#ff69b4\",\n    \"indianred\": \"#cd5c5c\",\n    \"indigo\": \"#4b0082\",\n    \"ivory\": \"#fffff0\",\n    \"khaki\": \"#f0e68c\",\n    \"lavender\": \"#e6e6fa\",\n    \"lavenderblush\": \"#fff0f5\",\n    \"lawngreen\": \"#7cfc00\",\n    \"lemonchiffon\": \"#fffacd\",\n    \"lightblue\": \"#add8e6\",\n    \"lightcoral\": \"#f08080\",\n    \"lightcyan\": \"#e0ffff\",\n    \"lightgoldenrodyellow\": \"#fafad2\",\n    \"lightgray\": \"#d3d3d3\",\n    \"lightgreen\": \"#90ee90\",\n    \"lightpink\": \"#ffb6c1\",\n    \"lightsalmon\": \"#ffa07a\",\n    \"lightseagreen\": \"#20b2aa\",\n    \"lightskyblue\": \"#87cefa\",\n    \"lightslategray\": \"#778899\",\n    \"lightsteelblue\": \"#b0c4de\",\n    \"lightyellow\": \"#ffffe0\",\n    \"lime\": \"#00ff00\",\n    \"limegreen\": \"#32cd32\",\n    \"linen\": \"#faf0e6\",\n    \"magenta\": \"#ff00ff\",\n    \"maroon\": \"#800000\",\n    \"mediumaquamarine\": \"#66cdaa\",\n    \"mediumblue\": \"#0000cd\",\n    \"mediumorchid\": \"#ba55d3\",\n    \"mediumpurple\": \"#9370db\",\n    \"mediumseagreen\": \"#3cb371\",\n    \"mediumslateblue\": \"#7b68ee\",\n    \"mediumspringgreen\": \"#00fa9a\",\n    \"mediumturquoise\": \"#48d1cc\",\n    \"mediumvioletred\": \"#c71585\",\n    \"midnightblue\": \"#191970\",\n    \"mintcream\": \"#f5fffa\",\n    \"mistyrose\": \"#ffe4e1\",\n    \"moccasin\": \"#ffe4b5\",\n    \"navajowhite\": \"#ffdead\",\n    \"navy\": \"#000080\",\n    \"oldlace\": \"#fdf5e6\",\n    \"olive\": \"#808000\",\n    \"olivedrab\": \"#6b8e23\",\n    \"orange\": \"#ffa500\",\n    \"orangered\": \"#ff4500\",\n    \"orchid\": \"#da70d6\",\n    \"palegoldenrod\": \"#eee8aa\",\n    \"palegreen\": \"#98fb98\",\n    \"paleturquoise\": \"#afeeee\",\n    \"palevioletred\": \"#db7093\",\n    \"papayawhip\": \"#ffefd5\",\n    \"peachpuff\": \"#ffdab9\",\n    \"peru\": \"#cd853f\",\n    \"pink\": \"#ffc0cb\",\n    \"plum\": \"#dda0dd\",\n    \"powderblue\": \"#b0e0e6\",\n    \"purple\": \"#800080\",\n    \"rebeccapurple\": \"#663399\",\n    \"red\": \"#ff0000\",\n    \"rosybrown\": \"#bc8f8f\",\n    \"royalblue\": \"#4169e1\",\n    \"saddlebrown\": \"#8b4513\",\n    \"salmon\": \"#fa8072\",\n    \"sandybrown\": \"#f4a460\",\n    \"seagreen\": \"#2e8b57\",\n    \"seashell\": \"#fff5ee\",\n    \"sienna\": \"#a0522d\",\n    \"silver\": \"#c0c0c0\",\n    \"skyblue\": \"#87ceeb\",\n    \"slateblue\": \"#6a5acd\",\n    \"slategray\": \"#708090\",\n    \"snow\": \"#fffafa\",\n    \"springgreen\": \"#00ff7f\",\n    \"steelblue\": \"#4682b4\",\n    \"tan\": \"#d2b48c\",\n    \"teal\": \"#008080\",\n    \"thistle\": \"#d8bfd8\",\n    \"tomato\": \"#ff6347\",\n    \"turquoise\": \"#40e0d0\",\n    \"violet\": \"#ee82ee\",\n    \"wheat\": \"#f5deb3\",\n    \"white\": \"#ffffff\",\n    \"whitesmoke\": \"#f5f5f5\",\n    \"yellow\": \"#ffff00\",\n    \"yellowgreen\": \"#9acd32\",\n    \"transparent\": \"#00000000\"\n};\n","import * as C from \"colorizr\";\nimport { numberInclusiveRangeTest, numberTest } from \"@ixfx/guards\";\nimport { resultThrow } from \"@ixfx/guards\";\nimport { cssDefinedHexColours } from \"./css-colours.js\";\nexport const withOpacity = (value, fn) => {\n    switch (value.unit) {\n        case `8bit`:\n            return {\n                ...value,\n                opacity: fn((value.opacity ?? 255) / 255, value) * 255\n            };\n        case `scalar`:\n            return {\n                ...value,\n                opacity: fn((value.opacity ?? 1), value)\n            };\n    }\n};\nexport const fromHexString = (hexString) => fromLibrary(C.hex2rgb(hexString));\nconst srgbTansparent = Object.freeze({\n    r: 0, g: 0, b: 0, opacity: 0, unit: `8bit`, space: `srgb`\n});\nexport const fromCss8bit = (value, options = {}) => {\n    value = value.toLowerCase();\n    if (value.startsWith(`#`)) {\n        return fromHexString(value);\n    }\n    if (value === `transparent`)\n        return srgbTansparent;\n    if (typeof cssDefinedHexColours[value] !== `undefined`) {\n        return fromHexString(cssDefinedHexColours[value]);\n    }\n    if (!value.startsWith(`rgb(`) && !value.startsWith(`rgba(`)) {\n        try {\n            const converted = C.convert(value, `rgb`);\n            value = converted;\n        }\n        catch (error) {\n            if (options.fallbackString) {\n                value = options.fallbackString;\n            }\n            else {\n                throw error;\n            }\n        }\n    }\n    const c = C.extractColorParts(value);\n    if (c.model !== `rgb`)\n        throw new Error(`Expecting RGB colour space. Got: ${c.model}`);\n    return fromLibrary(c);\n};\nexport const toCssString = (rgb) => {\n    guard(rgb);\n    switch (rgb.unit) {\n        case `8bit`:\n            if (rgb.opacity === undefined || rgb.opacity === 255) {\n                return `rgb(${rgb.r} ${rgb.b} ${rgb.g})`;\n            }\n            return `rgb(${rgb.r} ${rgb.b} ${rgb.g} / ${(rgb.opacity ?? 255) / 255})`;\n        case `scalar`:\n            if (rgb.opacity === undefined || rgb.opacity === 1) {\n                return `rgb(${rgb.r * 100}% ${rgb.b * 100}% ${rgb.g * 100}%)`;\n            }\n            return `rgb(${rgb.r * 100}% ${rgb.b * 100}% ${rgb.g * 100}% / ${(rgb.opacity ?? 1) * 100}%)`;\n        default:\n            throw new Error(`Unknown unit: ${rgb.unit}`);\n    }\n};\nconst toLibrary = (rgb) => {\n    const abs = to8bit(rgb);\n    return {\n        r: abs.r,\n        g: abs.g,\n        b: abs.b,\n        alpha: abs.opacity,\n    };\n};\nconst fromLibrary = (rgb) => {\n    return {\n        r: rgb.r,\n        g: rgb.g,\n        b: rgb.b,\n        opacity: rgb.alpha ?? 255,\n        unit: `8bit`,\n        space: `srgb`\n    };\n};\nexport const to8bit = (rgb) => {\n    guard(rgb);\n    if (rgb.unit === `8bit`)\n        return rgb;\n    return {\n        r: rgb.r * 255,\n        g: rgb.g * 255,\n        b: rgb.b * 255,\n        opacity: rgb.opacity ?? 255,\n        unit: `8bit`,\n        space: `srgb`\n    };\n};\nexport const toScalar = (rgb) => {\n    guard(rgb);\n    if (rgb.unit === `scalar`)\n        return rgb;\n    return {\n        r: rgb.r / 255,\n        g: rgb.g / 255,\n        b: rgb.b / 255,\n        opacity: (rgb.opacity ?? 1) / 255,\n        unit: `scalar`,\n        space: `srgb`\n    };\n};\nexport const guard = (rgb) => {\n    const { r, g, b, opacity, space, unit } = rgb;\n    if (space !== `srgb`)\n        throw new Error(`Space is expected to be 'srgb'. Got: ${space}`);\n    if (unit === `8bit`) {\n        resultThrow(numberInclusiveRangeTest(r, 0, 255, `r`), numberInclusiveRangeTest(g, 0, 255, `g`), numberInclusiveRangeTest(b, 0, 255, `b`), () => {\n            if (typeof opacity === `number`) {\n                return numberInclusiveRangeTest(opacity, 0, 255, `opacity`);\n            }\n        });\n    }\n    else if (unit === `scalar`) {\n        resultThrow(numberTest(r, `percentage`, `r`), numberTest(g, `percentage`, `g`), numberTest(b, `percentage`, `b`), () => {\n            if (typeof opacity === `number`) {\n                return numberTest(opacity, `percentage`, `opacity`);\n            }\n        });\n    }\n    else {\n        throw new Error(`Unit is expected to be '8bit' or 'scalar'. Got: ${unit}`);\n    }\n};\n//export const SrgbSpace = { withOpacity, toCssString, fromHexString, fromCss8bit, toLibrary, fromLibrary, guard, toScalar, to8bit };\n","import { Grids } from '@ixfx/geometry';\nimport * as SrgbSpace from './colour/srgb.js';\n/**\n * Returns a {@link @ixfx/geometry/Grids.Grid} based on the provided `image`\n * @param image ImageData\n * @returns Grid\n */\nexport const grid = (image) => {\n    const g = { rows: image.width, cols: image.height };\n    return g;\n};\n/**\n * Returns an object that allows get/set grid semantics on the underlying `image` data.\n * Uses 8-bit sRGB values, meaning 0..255 range for red, green, blue & opacity.\n *\n * ```js\n * // Get CANVAS element, drawing context and then image data\n * const canvasEl = document.querySelector(`#my-canvas`);\n * const ctx = canvasEl.getContext(`2d`);\n * const imageData = ctx.getImageData();\n *\n * // Now that we have image data, we can wrap it:\n * const asGrid = ImageDataGrid.wrap(imageData);\n * asGrid.get({ x:10, y: 20 }); // Get pixel at 10,20\n * asGrid.set(colour, { x:10, y: 20 }); // Set pixel value\n *\n * // Display changes back on the canvas\n * ctx.putImageData(imageData, 0, 0)\n * ```\n * @param image\n * @returns\n */\nexport const wrap = (image) => {\n    return {\n        ...grid(image),\n        get: accessor(image),\n        set: setter(image)\n    };\n};\n/**\n * Returns a function to access pixel values by x,y\n * @param image\n * @returns\n */\nexport const accessor = (image) => {\n    const g = grid(image);\n    const data = image.data;\n    const fn = (cell, bounds = `undefined`) => {\n        const index = Grids.indexFromCell(g, cell, bounds);\n        if (index === undefined)\n            return;\n        const pxIndex = index * 4;\n        return {\n            r: data[pxIndex],\n            g: data[pxIndex + 1],\n            b: data[pxIndex + 2],\n            opacity: data[pxIndex + 3],\n            unit: `8bit`,\n            space: `srgb`\n        };\n    };\n    return fn;\n};\n/**\n * Returns a function that sets pixel values\n * @param image\n * @returns\n */\nexport const setter = (image) => {\n    const g = grid(image);\n    const data = image.data;\n    const fn = (value, cell, bounds = `undefined`) => {\n        const index = Grids.indexFromCell(g, cell, bounds);\n        if (index === undefined)\n            throw new Error(`Cell out of range. ${cell.x},${cell.y}`);\n        const pixel = SrgbSpace.to8bit(value);\n        const pxIndex = index * 4;\n        data[pxIndex] = pixel.r;\n        data[pxIndex + 1] = pixel.g;\n        data[pxIndex + 2] = pixel.b;\n        data[pxIndex + 3] = pixel.opacity ?? 255;\n    };\n    return fn;\n};\n// export function* visit(image: ImageData, visitor: Grids.VisitGenerator) {\n//   const a = accessor(image);\n//   for (const cell of visitor) {\n//     yield a(cell, `undefined`);\n//   }\n// }\n/**\n * Yields pixels of an image row by row\n * @param image\n */\nexport function* byRow(image) {\n    const a = accessor(image);\n    const g = grid(image);\n    const v = Grids.As.rows(g, { x: 0, y: 0 });\n    for (const row of v) {\n        const pixels = row.map(p => a(p, `undefined`));\n        yield pixels;\n    }\n}\n/**\n * Yields pixels of an image column by column\n * @param image\n */\nexport function* byColumn(image) {\n    const a = accessor(image);\n    const g = grid(image);\n    for (let x = 0; x < g.cols; x++) {\n        const col = [];\n        for (let y = 0; y < g.rows; y++) {\n            const p = a({ x, y }, `undefined`);\n            if (p)\n                col.push(p);\n        }\n        yield col;\n    }\n}\n","import { ElementSizer, resolveEl } from '@ixfx/dom';\nimport { SimpleEventEmitter } from '@ixfx/events';\nimport { Rects, scaler } from '@ixfx/geometry';\nimport * as Drawing from './drawing.js';\nimport * as ImageDataGrid from './image-data-grid.js';\nimport { cloneFromFields } from '@ixfx/core/records';\n/**\n * A wrapper for the CANVAS element that scales the canvas for high-DPI displays\n * and helps with resizing.\n *\n * ```js\n * const canvas = new CanvasHelper(`#my-canvas`, { resizeLogic: `both` });\n * const { ctx, width, height } = canvas.ctx; // Get drawing context, width & height\n * ```\n *\n * Draw whenever it is resized using the 'resize' event\n * ```js\n * canvas.addEventListener(`resize`, ({ctx, size}) => {\n *  // Use ctx...\n * });\n * ```\n *\n * Or provide a function when initialising:\n * ```js\n * const onResize = (ctx, size) => {\n *  // Do drawing\n * }\n * const canvas = new CanvasHelper(`#my-canvas`, { resizeLogic: `both`, onResize });\n * ```\n *\n * Automatically draw at animation speeds:\n * ```js\n * const draw = () => {\n * }\n * const canvas = new CanvasHelper(`#my-canvas`, { resizeLogic: `both`, draw });\n * ```\n */\nexport class CanvasHelper extends SimpleEventEmitter {\n    el;\n    opts;\n    #scaler;\n    #scalerSize;\n    #viewport = Rects.EmptyPositioned;\n    #logicalSize = Rects.Empty;\n    #ctx;\n    #drawHelper;\n    #resizer;\n    #disposed = false;\n    constructor(domQueryOrEl, opts = {}) {\n        super();\n        if (!domQueryOrEl)\n            throw new Error(`Param 'domQueryOrEl' is null or undefined`);\n        this.el = resolveEl(domQueryOrEl);\n        if (this.el.nodeName !== `CANVAS`) {\n            throw new Error(`Expected CANVAS HTML element. Got: ${this.el.nodeName}`);\n        }\n        const size = this.el.getBoundingClientRect();\n        this.opts = {\n            resizeLogic: opts.resizeLogic ?? `none`,\n            disablePointerEvents: opts.disablePointerEvents ?? false,\n            pixelZoom: opts.pixelZoom ?? (window.devicePixelRatio || 1),\n            height: opts.height ?? size.height,\n            width: opts.width ?? size.width,\n            zIndex: opts.zIndex ?? -1,\n            coordinateScale: opts.coordinateScale ?? `both`,\n            onResize: opts.onResize,\n            clearOnResize: opts.clearOnResize ?? true,\n            draw: opts.draw,\n            skipCss: opts.skipCss ?? false,\n            colourSpace: `srgb`\n        };\n        this.#scaler = scaler(`both`);\n        this.#scalerSize = scaler(`both`, size);\n        this.#init();\n    }\n    getRectangle() {\n        return {\n            x: 0, y: 0,\n            ...this.#logicalSize\n        };\n    }\n    dispose(reason) {\n        if (this.#disposed)\n            return;\n        this.#disposed = true;\n        if (this.#resizer) {\n            this.#resizer.dispose(`CanvasHelper disposing ${reason}`.trim());\n            this.#resizer = undefined;\n        }\n    }\n    #getContext(reset = false) {\n        if (this.#ctx === undefined || reset) {\n            const ratio = this.ratio;\n            const c = this.el.getContext(`2d`);\n            if (c === null)\n                throw new Error(`Could not create drawing context`);\n            this.#ctx = c;\n            // Reset scale\n            c.setTransform(1, 0, 0, 1, 0, 0);\n            c.scale(ratio, ratio);\n        }\n        return this.#ctx;\n    }\n    ;\n    /**\n     * Gets the drawable area of the canvas.\n     * This accounts for scaling due to high-DPI displays etc.\n     * @returns\n     */\n    getPhysicalSize() {\n        return {\n            width: this.width * this.ratio,\n            height: this.height * this.ratio\n        };\n    }\n    /**\n     * Creates a drawing helper for the canvas.\n     * If one is already created it is reused.\n     */\n    getDrawHelper() {\n        if (!this.#drawHelper) {\n            this.#drawHelper = Drawing.makeHelper(this.#getContext(), {\n                width: this.width, height: this.height\n            });\n        }\n    }\n    setLogicalSize(logicalSize) {\n        Rects.guard(logicalSize, `logicalSize`);\n        const logicalSizeInteger = Rects.applyFields(v => Math.floor(v), logicalSize);\n        const ratio = this.opts.pixelZoom;\n        // Scaler for going between relative and logical units\n        this.#scaler = scaler(this.opts.coordinateScale, logicalSize);\n        this.#scalerSize = scaler(`both`, logicalSize);\n        // Scaled logical size for DPI\n        const pixelScaled = Rects.multiplyScalar(logicalSize, ratio);\n        // Canvas will actually be much larger, based on DPI\n        this.el.width = pixelScaled.width;\n        this.el.height = pixelScaled.height;\n        // But scaled down on screen\n        this.el.style.width = logicalSizeInteger.width.toString() + `px`;\n        this.el.style.height = logicalSizeInteger.height.toString() + `px`;\n        // Since dimensions have change, reset context\n        this.#getContext(true);\n        if (this.opts.clearOnResize) {\n            this.ctx.clearRect(0, 0, this.width, this.height);\n        }\n        this.#logicalSize = logicalSizeInteger;\n        //console.log(`setting logical size to ${ this.#logicalSize.width }x${ this.#logicalSize.height }`);\n        // Notify listeners of resize\n        const r = this.opts.onResize;\n        if (r) {\n            setTimeout(() => { r(this.ctx, this.size, this); }, 100);\n        }\n        this.fireEvent(`resize`, { ctx: this.ctx, size: this.#logicalSize, helper: this });\n    }\n    #init() {\n        //console.log(`init`, this.opts);\n        // If there is a 'draw' callback, set up an animation loop\n        const d = this.opts.draw;\n        if (d) {\n            const sched = () => {\n                d(this.ctx, this.#logicalSize, this);\n                requestAnimationFrame(sched);\n            };\n            setTimeout(() => { sched(); }, 100);\n        }\n        if (!this.opts.disablePointerEvents) {\n            this.#handleEvents();\n        }\n        const resizeLogic = this.opts.resizeLogic ?? `none`;\n        if (resizeLogic === `none`) {\n            this.setLogicalSize({ width: this.opts.width, height: this.opts.height });\n        }\n        else {\n            const resizerOptions = {\n                onSetSize: (size) => {\n                    if (Rects.isEqual(this.#logicalSize, size))\n                        return;\n                    this.setLogicalSize(size);\n                },\n                naturalSize: { width: this.opts.width, height: this.opts.height },\n                stretch: this.opts.resizeLogic ?? `none`\n            };\n            this.#resizer = new ElementSizer(this.el, resizerOptions);\n        }\n        this.#getContext();\n    }\n    #handleEvents() {\n        const handlePointerEvent = (event) => {\n            const { offsetX, offsetY } = event;\n            const physicalX = offsetX * this.ratio;\n            const physicalY = offsetY * this.ratio;\n            event = cloneFromFields(event);\n            const eventData = {\n                physicalX, physicalY,\n                // eslint-disable-next-line @typescript-eslint/no-misused-spread\n                ...event\n            };\n            switch (event.type) {\n                case `pointerup`: {\n                    {\n                        this.fireEvent(`pointerup`, eventData);\n                        break;\n                    }\n                    ;\n                }\n                case `pointermove`: {\n                    {\n                        this.fireEvent(`pointermove`, eventData);\n                        break;\n                    }\n                    ;\n                }\n                case `pointerdown`: {\n                    {\n                        this.fireEvent(`pointerup`, eventData);\n                        break;\n                    }\n                    ;\n                }\n            }\n            ;\n        };\n        this.el.addEventListener(`pointermove`, handlePointerEvent);\n        this.el.addEventListener(`pointerdown`, handlePointerEvent);\n        this.el.addEventListener(`pointerup`, handlePointerEvent);\n    }\n    /**\n     * Clears the canvas.\n     *\n     * Shortcut for:\n     * `ctx.clearRect(0, 0, this.width, this.height)`\n     */\n    clear() {\n        if (!this.#ctx)\n            return;\n        this.#ctx.clearRect(0, 0, this.width, this.height);\n    }\n    /**\n     * Fills the canvas with a given colour.\n     *\n     * Shortcut for:\n     * ```js\n        * ctx.fillStyle = ``;\n     * ctx.fillRect(0, 0, this.width, this.height);\n     * ```\n     * @param colour Colour\n     */\n    fill(colour) {\n        if (!this.#ctx)\n            return;\n        if (colour)\n            this.#ctx.fillStyle = colour;\n        this.#ctx.fillRect(0, 0, this.width, this.height);\n    }\n    /**\n     * Gets the drawing context\n     */\n    get ctx() {\n        if (this.#ctx === undefined)\n            throw new Error(`Context not available`);\n        return this.#getContext();\n    }\n    get viewport() {\n        return this.#viewport;\n    }\n    /**\n     * Gets the logical width of the canvas\n     * See also: {@link height}, {@link size}\n     */\n    get width() {\n        return this.#logicalSize.width;\n    }\n    /**\n     * Gets the logical height of the canvas\n     * See also: {@link width}, {@link size}\n     */\n    get height() {\n        return this.#logicalSize.height;\n    }\n    /**\n     * Gets the logical size of the canvas\n     * See also: {@link width}, {@link height}\n     */\n    get size() {\n        return this.#logicalSize;\n    }\n    /**\n     * Gets the current scaling ratio being used\n     * to compensate for high-DPI display\n     */\n    get ratio() {\n        return window.devicePixelRatio || 1;\n    }\n    /**\n     * Returns the width or height, whichever is smallest\n     */\n    get dimensionMin() {\n        return Math.min(this.width, this.height);\n    }\n    /**\n     * Returns the width or height, whichever is largest\n     */\n    get dimensionMax() {\n        return Math.max(this.width, this.height);\n    }\n    drawBounds(strokeStyle = `green`) {\n        const ctx = this.#getContext();\n        Drawing.rect(ctx, { x: 0, y: 0, width: this.width, height: this.height }, { crossed: true, strokeStyle, strokeWidth: 1 });\n        Drawing.rect(ctx, this.#viewport, { crossed: true, strokeStyle: `silver`, strokeWidth: 3 });\n    }\n    /**\n     * Returns a Scaler that converts from absolute\n     * to relative coordinates.\n     * This is based on the canvas size.\n     *\n     * ```js\n        * // Assuming a canvas of 800x500\n     * toRelative({ x: 800, y: 600 });  // { x: 1,   y: 1 }\n     * toRelative({ x: 0, y: 0 });   // { x: 0,   y: 0 }\n     * toRelative({ x: 400, y: 300 }); // { x: 0.5, y: 0.5 }\n     * ```\n     */\n    get toRelative() {\n        return this.#scaler.rel;\n    }\n    /**\n     * Returns a scaler for points based on width & height\n     */\n    get toAbsoluteFixed() {\n        return this.#scalerSize.abs;\n    }\n    /**\n     * Returns a scaler for points based on width & height\n     */\n    get toRelativeFixed() {\n        return this.#scalerSize.rel;\n    }\n    get logicalCenter() {\n        return {\n            x: this.#logicalSize.width / 2,\n            y: this.#logicalSize.height / 2\n        };\n    }\n    /**\n   * Returns a Scaler that converts from relative to absolute\n   * coordinates.\n   * This is based on the canvas size.\n   *\n   * ```js\n   * // Assuming a canvas of 800x600\n   * toAbsolute({ x: 1, y: 1 });      // { x: 800, y: 600}\n   * toAbsolute({ x: 0, y: 0 });      // { x: 0, y: 0}\n   * toAbsolute({ x: 0.5, y: 0.5 });  // { x: 400, y: 300}\n   * ```\n   */\n    get toAbsolute() {\n        return this.#scaler.abs;\n    }\n    /**\n     * Gets the center coordinate of the canvas\n     */\n    get center() {\n        return { x: this.width / 2, y: this.height / 2 };\n    }\n    /**\n     * Gets the image data for the canvas.\n     * Uses the 'physical' canvas size. Eg. A logical size of 400x400 might be\n     * 536x536 with a high-DPI display.\n     * @returns\n     */\n    getImageData() {\n        const size = this.getPhysicalSize();\n        const data = this.ctx.getImageData(0, 0, size.width, size.height, { colorSpace: this.opts.colourSpace });\n        // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n        if (data === null || data === undefined)\n            throw new Error(`Could not get image data from context`);\n        return data;\n    }\n    /**\n     * Returns the canvas frame data as a writable grid.\n     * When editing, make as many edits as needed before calling\n     * `flip`, which writes buffer back to the canvas.\n     * ```js\n        * const g = helper.getWritableBuffer();\n     * // Get {r,g,b,opacity} of pixel 10,10\n     * const pixel = g.get({ x: 10, y: 10 });\n     *\n     * // Set a colour to pixel 10,10\n     * g.set({ r: 0.5, g: 1, b: 0, opacity: 0 }, { x: 10, y: 10 });\n     *\n     * // Write buffer to canvas\n     * g.flip();\n     * ```\n     *\n     * Uses 'physical' size of canvas. Eg with a high-DPI screen, this will\n     * mean a higher number of rows and columns compared to the logical size.\n     * @returns\n     */\n    getWritableBuffer() {\n        const ctx = this.ctx;\n        const data = this.getImageData();\n        const grid = ImageDataGrid.grid(data);\n        const get = ImageDataGrid.accessor(data);\n        const set = ImageDataGrid.setter(data);\n        const flip = () => {\n            ctx.putImageData(data, 0, 0);\n        };\n        return { grid, get, set, flip };\n    }\n}\n// export const imageDataAsGrid = (canvas: HTMLCanvasElement, colorSpace: PredefinedColorSpace = `srgb`) => {\n//   const ctx = canvas.getContext(`2d`);\n//   if (!ctx) throw new Error(`Could not create context`);\n//   const data = ctx.getImageData(0, 0, canvas.width, canvas.height, { colorSpace });\n//   if (!data) throw new Error(`Could not get image data from context`);\n//   const get = ImageDataGrid.accessor(data);\n//   const set = ImageDataGrid.setter(data);\n// }\n","/**\n * Applies drawing options to given SVG element.\n * Applies: fillStyle\n * @param elem Element\n * @param opts Drawing options\n */\nexport const applyOpts = (elem, opts) => {\n    if (opts.fillStyle)\n        elem.setAttributeNS(null, `fill`, opts.fillStyle);\n    if (opts.opacity) {\n        elem.setAttributeNS(null, `opacity`, opts.opacity.toString());\n    }\n};\n","/**\n * Creates an element of `type` and with `id` (if specified)\n * @param type Element type, eg `circle`\n * @param id Optional id to assign to element\n * @returns Element\n */\nexport const createEl = (type, id) => {\n    const m = document.createElementNS(`http://www.w3.org/2000/svg`, type);\n    if (id) {\n        m.id = id;\n    }\n    return m;\n};\n/**\n * Creates and appends a SVG element.\n *\n * ```js\n * // Create a circle\n * const circleEl = createOrResolve(parentEl, `SVGCircleElement`);\n * ```\n *\n * If `queryOrExisting` is specified, it is used as a query to find an existing element. If\n * query starts with `#`, this will be set as the element id, if created.\n *\n * ```js\n * // Creates an element with id 'myCircle' if it doesn't exist\n * const circleEl = createOrResolve(parentEl, `SVGCircleElement`, `#myCircle`);\n * ```\n * @param parent Parent element\n * @param type Type of SVG element\n * @param queryOrExisting Query, eg `#id`\n * @returns\n */\nexport const createOrResolve = (parent, type, queryOrExisting, suffix) => {\n    let existing = null;\n    if (queryOrExisting !== undefined) {\n        existing = typeof queryOrExisting === `string` ? parent.querySelector(queryOrExisting) : queryOrExisting;\n    }\n    if (existing === null) {\n        const p = document.createElementNS(`http://www.w3.org/2000/svg`, type);\n        parent.append(p);\n        if (queryOrExisting && typeof queryOrExisting === `string` &&\n            queryOrExisting.startsWith(`#`)) {\n            p.id = suffix !== undefined && !queryOrExisting.endsWith(suffix) ? queryOrExisting.slice(1) + suffix : queryOrExisting.slice(1);\n        }\n        return p;\n    }\n    return existing;\n};\n","export const isHsl = (v) => {\n    if (typeof v === `object`) {\n        if (!(`h` in v && `s` in v && `l` in v))\n            return false;\n        if (!(`unit` in v))\n            return false;\n        if (`space` in v) {\n            if (v.space !== `hsl`)\n                return false;\n        }\n    }\n    return false;\n};\nexport const isRgb = (v) => {\n    if (typeof v === `object`) {\n        if (!(`r` in v && `g` in v && `b` in v))\n            return false;\n        if (!(`unit` in v))\n            return false;\n        if (`space` in v) {\n            if (v.space !== `srgb`)\n                return false;\n        }\n    }\n    return false;\n};\n/**\n * If the input object has r,g&b properties, it will return a fully-\n * formed Rgb type with `unit` and `space` properties.\n *\n * If it lacks these basic three properties or they are out of range,\n *  _undefined_ is returned.\n *\n * If RGB values are less than 1 assumes unit:scalar. Otherwise unit:8bit.\n * If RGB values exceed 255, _undefined_ returned.\n * @param v\n * @returns\n */\nexport const tryParseObjectToRgb = (v) => {\n    if (!(`r` in v && `g` in v && `b` in v))\n        return;\n    if (!(`unit` in v)) {\n        if (v.r <= 1 && v.g <= 1 && v.b <= 1) {\n            v.unit = `scalar`;\n        }\n        else if (v.r > 255 && v.g <= 255 && v.b <= 255) {\n            return; // out of range\n        }\n        else {\n            v.unit = `8bit`;\n        }\n    }\n    if (!(`space` in v)) {\n        v.space = `srgb`;\n    }\n    return v;\n};\nexport const tryParseObjectToHsl = (v) => {\n    if (!(`h` in v && `s` in v && `l` in v))\n        return;\n    if (!(`unit` in v)) {\n        if (v.r <= 1 && v.g <= 1 && v.b <= 1) {\n            v.unit = `scalar`;\n        }\n        else if (v.s > 100 && v.l <= 100) {\n            return; // out of range\n        }\n        else {\n            v.unit = `absolute`;\n        }\n    }\n    if (!(`space` in v)) {\n        v.space = `hsl`;\n    }\n    return v;\n};\nexport const isLch = (v) => {\n    if (typeof v === `object`) {\n        if (!(`l` in v && `c` in v && `h` in v))\n            return false;\n        if (!(`unit` in v))\n            return false;\n        if (`space` in v) {\n            if (v.space !== `lch` && v.space !== `oklch`)\n                return false;\n        }\n    }\n    return false;\n};\nexport const isColourish = (v) => {\n    if (typeof v === `string`)\n        return true;\n    if (typeof v !== `object`)\n        return false;\n    if (isHsl(v))\n        return true;\n    if (isLch(v))\n        return true;\n    if (isRgb(v))\n        return true;\n    return false;\n};\n","import * as C from \"colorizr\";\nimport { isColourish, isHsl, isRgb, tryParseObjectToHsl, tryParseObjectToRgb } from \"./types.js\";\nimport * as SrgbSpace from \"./srgb.js\";\nimport * as HslSpace from './hsl.js';\nimport { fromCssColour } from \"./css-colours.js\";\nexport const toCssColour = (colour) => {\n    if (typeof colour === `string`)\n        return colour;\n    if (isHsl(colour)) {\n        return HslSpace.toCssString(colour);\n    }\n    if (isRgb(colour)) {\n        return SrgbSpace.toCssString(colour);\n    }\n    const asRgb = tryParseObjectToRgb(colour);\n    if (asRgb)\n        return SrgbSpace.toCssString(asRgb);\n    const asHsl = tryParseObjectToHsl(colour);\n    if (asHsl)\n        return HslSpace.toCssString(asHsl);\n    throw new Error(`Unknown colour format: '${JSON.stringify(colour)}'`);\n};\nexport const convert = (colour, destination) => {\n    if (destination === `srgb`)\n        destination = `rgb`;\n    return C.convert(colour, destination);\n};\nexport const guard = (colour) => {\n    switch (colour.space) {\n        case `hsl`:\n            HslSpace.guard(colour);\n            break;\n        case `srgb`:\n            SrgbSpace.guard(colour);\n            break;\n        default:\n            throw new Error(`Unknown colour space: '${colour.space}'`);\n    }\n};\nexport const toColour = (colourish) => {\n    if (!isColourish(colourish))\n        throw new Error(`Could not parse input. Expected CSS colour string or structured colour {r,g,b}, {h,s,l} etc.`);\n    let c;\n    if (typeof colourish === `string`)\n        c = fromCssColour(colourish);\n    else\n        c = colourish;\n    if (c === undefined)\n        throw new Error(`Could not parse input. Expected CSS colour string or structured colour {r,g,b}, {h,s,l} etc.`);\n    guard(c);\n    return c;\n};\n/**\n * Returns a CSS-ready string\n * representation.\n * ```js\n * element.style.backgroundColor = resolveToString(`red`);\n * ```\n *\n * Tries each parameter in turn, returning the value\n * for the first that resolves. This can be useful for\n * having fallback values.\n *\n * ```js\n * // Try a CSS variable, a object property or finally fallback to red.\n * element.style.backgroundColor = toStringFirst('--some-var', opts.background, `red`);\n * ```\n * @param colours Array of colours to resolve\n * @returns\n */\nexport const toStringFirst = (...colours) => {\n    for (const colour of colours) {\n        if (colour === undefined)\n            continue;\n        if (colour === null)\n            continue;\n        try {\n            const c = toColour(colour);\n            return toCssColour(c);\n        }\n        catch { /* empty */ }\n    }\n    return `rebeccapurple`;\n};\n","/**\n * Applies drawing options to given SVG element.\n * Applies: strokeStyle, strokeWidth, strokeDash, strokeLineCap\n * @param elem Element\n * @param opts\n */\nexport const applyStrokeOpts = (elem, opts) => {\n    if (opts.strokeStyle)\n        elem.setAttributeNS(null, `stroke`, opts.strokeStyle);\n    if (opts.strokeWidth) {\n        elem.setAttributeNS(null, `stroke-width`, opts.strokeWidth.toString());\n    }\n    if (opts.strokeDash)\n        elem.setAttribute(`stroke-dasharray`, opts.strokeDash);\n    if (opts.strokeLineCap) {\n        elem.setAttribute(`stroke-linecap`, opts.strokeLineCap);\n    }\n};\n","//import type { CirclePositioned } from '../../geometry/circle/CircleType.js';\n//import type { Point } from '../../geometry/point/PointType.js';\n//import type { Line } from '../../geometry/line/LineType.js';\n//import * as Lines from '../geometry/line/index.js';\nimport { Lines, Polar } from '@ixfx/geometry';\n//import * as Svg from './index.js';\nimport { toStringFirst as ColourStringFirst } from '../colour/conversion.js';\nimport { applyOpts } from './apply.js';\nimport { applyStrokeOpts } from './stroke.js';\nimport { createEl, createOrResolve } from './create.js';\nimport { applyPathOpts } from './path.js';\n//import type { PolarRay } from 'src/geometry/polar/Types.js';\n//import { toCartesian as polarRayToCartesian } from 'src/geometry/polar/Ray.js';\n//import {Palette} from \".\";\nconst numberOrPercentage = (v) => {\n    if (v >= 0 && v <= 1)\n        return `${v * 100}%`;\n    return v.toString();\n};\n/**\n * Creates and adds an SVG path element\n * @example\n * ```js\n * const paths = [\n *  `M300,200`,\n *  `a25,25 -30 0,1 50, -25 l 50,-25`\n * ]\n * const pathEl = path(paths, parentEl);\n * ```\n * @param svgOrArray Path syntax, or array of paths. Can be empty if path data will be added later\n * @param parent SVG parent element\n * @param opts Options Drawing options\n * @returns\n */\nexport const path = (svgOrArray, parent, opts, queryOrExisting) => {\n    const elem = createOrResolve(parent, `path`, queryOrExisting);\n    const svg = typeof svgOrArray === `string` ? svgOrArray : svgOrArray.join(`\\n`);\n    elem.setAttributeNS(null, `d`, svg);\n    parent.append(elem);\n    return pathUpdate(elem, opts);\n};\nexport const pathUpdate = (elem, opts) => {\n    if (opts)\n        applyOpts(elem, opts);\n    if (opts)\n        applyStrokeOpts(elem, opts);\n    return elem;\n};\n/**\n * Updates an existing `SVGCircleElement` with potentially updated circle data and drawing options\n * @param elem Element\n * @param circle Circle\n * @param opts Drawing options\n * @returns SVGCircleElement\n */\nexport const circleUpdate = (elem, circle, opts) => {\n    elem.setAttributeNS(null, `cx`, circle.x.toString());\n    elem.setAttributeNS(null, `cy`, circle.y.toString());\n    elem.setAttributeNS(null, `r`, circle.radius.toString());\n    if (opts)\n        applyOpts(elem, opts);\n    if (opts)\n        applyStrokeOpts(elem, opts);\n    return elem;\n};\n/**\n * Creates or reuses a `SVGCircleElement`.\n *\n * To update an existing element, use `circleUpdate`\n * @param circle\n * @param parent\n * @param opts\n * @param queryOrExisting\n * @returns\n */\nexport const circle = (circle, parent, opts, queryOrExisting) => {\n    const p = createOrResolve(parent, `circle`, queryOrExisting);\n    return circleUpdate(p, circle, opts);\n};\n/**\n * Creates or resuses a `SVGGElement` (group)\n *\n * To update an existing elemnet, use `groupUpdate`\n * @param children\n * @param parent\n * @param queryOrExisting\n * @returns\n */\nexport const group = (children, parent, queryOrExisting) => {\n    const p = createOrResolve(parent, `g`, queryOrExisting);\n    return groupUpdate(p, children);\n};\nexport const groupUpdate = (elem, children) => {\n    for (const c of children) {\n        if (c.parentNode !== elem) {\n            elem.append(c);\n        }\n    }\n    return elem;\n};\n/**\n * Creates or reuses a SVGLineElement.\n *\n * @param line\n * @param parent\n * @param opts\n * @param queryOrExisting\n * @returns\n */\nexport const line = (line, parent, opts, queryOrExisting) => {\n    const lineEl = createOrResolve(parent, `line`, queryOrExisting);\n    return lineUpdate(lineEl, line, opts);\n};\n/**\n * Updates a SVGLineElement instance with potentially changed line and drawing data\n * @param lineEl\n * @param line\n * @param opts\n * @returns\n */\nexport const lineUpdate = (lineEl, line, opts) => {\n    lineEl.setAttributeNS(null, `x1`, line.a.x.toString());\n    lineEl.setAttributeNS(null, `y1`, line.a.y.toString());\n    lineEl.setAttributeNS(null, `x2`, line.b.x.toString());\n    lineEl.setAttributeNS(null, `y2`, line.b.y.toString());\n    if (opts)\n        applyOpts(lineEl, opts);\n    if (opts)\n        applyPathOpts(lineEl, opts);\n    if (opts)\n        applyStrokeOpts(lineEl, opts);\n    return lineEl;\n};\nexport const polarRayUpdate = (lineEl, ray, opts) => {\n    const l = Polar.Ray.toCartesian(ray);\n    lineEl.setAttributeNS(null, `x1`, l.a.x.toString());\n    lineEl.setAttributeNS(null, `y1`, l.a.y.toString());\n    lineEl.setAttributeNS(null, `x2`, l.b.x.toString());\n    lineEl.setAttributeNS(null, `y2`, l.b.y.toString());\n    if (opts)\n        applyOpts(lineEl, opts);\n    if (opts)\n        applyPathOpts(lineEl, opts);\n    if (opts)\n        applyStrokeOpts(lineEl, opts);\n    return lineEl;\n};\n/**\n * Updates an existing SVGTextPathElement instance with text and drawing options\n * @param el\n * @param text\n * @param opts\n * @returns\n */\nexport const textPathUpdate = (el, text, opts) => {\n    if (opts?.method)\n        el.setAttributeNS(null, `method`, opts.method);\n    if (opts?.side)\n        el.setAttributeNS(null, `side`, opts.side);\n    if (opts?.spacing)\n        el.setAttributeNS(null, `spacing`, opts.spacing);\n    if (opts?.startOffset) {\n        el.setAttributeNS(null, `startOffset`, numberOrPercentage(opts.startOffset));\n    }\n    if (opts?.textLength) {\n        el.setAttributeNS(null, `textLength`, numberOrPercentage(opts.textLength));\n    }\n    if (text) {\n        el.textContent = text;\n    }\n    if (opts)\n        applyOpts(el, opts);\n    if (opts)\n        applyStrokeOpts(el, opts);\n    return el;\n};\n/**\n * Creates or reuses a SVGTextPathElement.\n * @param pathReference\n * @param text\n * @param parent\n * @param opts\n * @param textQueryOrExisting\n * @param pathQueryOrExisting\n * @returns\n */\nexport const textPath = (pathReference, text, parent, opts, textQueryOrExisting, pathQueryOrExisting) => {\n    const textEl = createOrResolve(parent, `text`, textQueryOrExisting, `-text`);\n    // Update text properties, but don't pass in position or text\n    textUpdate(textEl, undefined, undefined, opts);\n    const p = createOrResolve(textEl, `textPath`, pathQueryOrExisting);\n    p.setAttributeNS(null, `href`, pathReference);\n    return textPathUpdate(p, text, opts);\n};\n/**\n * Updates an existing SVGTextElement instance with position, text and drawing options\n * @param el\n * @param pos\n * @param text\n * @param opts\n * @returns\n */\nexport const textUpdate = (el, pos, text, opts) => {\n    if (pos) {\n        el.setAttributeNS(null, `x`, pos.x.toString());\n        el.setAttributeNS(null, `y`, pos.y.toString());\n    }\n    if (text) {\n        el.textContent = text;\n    }\n    if (opts) {\n        applyOpts(el, opts);\n        if (opts)\n            applyStrokeOpts(el, opts);\n        if (opts.anchor)\n            el.setAttributeNS(null, `text-anchor`, opts.anchor);\n        if (opts.align)\n            el.setAttributeNS(null, `alignment-baseline`, opts.align);\n        const userSelect = opts.userSelect ?? true;\n        if (!userSelect) {\n            el.style.userSelect = `none`;\n        }\n    }\n    return el;\n};\n/**\n * Creates or reuses a SVGTextElement\n * @param pos Position of text\n * @param text Text\n * @param parent\n * @param opts\n * @param queryOrExisting\n * @returns\n */\nexport const text = (text, parent, pos, opts, queryOrExisting) => {\n    const p = createOrResolve(parent, `text`, queryOrExisting);\n    return textUpdate(p, pos, text, opts);\n};\n/**\n * Creates a square grid based at a center point, with cells having `spacing` height and width.\n *\n * It fits in as many cells as it can within `width` and `height`.\n *\n * Returns a SVG group, consisting of horizontal and vertical lines\n * @param parent Parent element\n * @param center Center point of grid\n * @param spacing Width/height of cells\n * @param width How wide grid should be\n * @param height How high grid should be\n * @param opts\n */\nexport const grid = (parent, center, spacing, width, height, opts = {}) => {\n    if (!opts.strokeStyle) {\n        opts = { ...opts, strokeStyle: ColourStringFirst(`bg-dim`, `silver`) };\n    }\n    if (!opts.strokeWidth)\n        opts = { ...opts, strokeWidth: 1 };\n    const g = createEl(`g`);\n    applyOpts(g, opts);\n    applyPathOpts(g, opts);\n    applyStrokeOpts(g, opts);\n    // Horizontals\n    let y = 0;\n    while (y < height) {\n        const horiz = Lines.fromNumbers(0, y, width, y);\n        line(horiz, g);\n        y += spacing;\n    }\n    // Verticals\n    let x = 0;\n    while (x < width) {\n        const vert = Lines.fromNumbers(x, 0, x, height);\n        line(vert, g);\n        x += spacing;\n    }\n    parent.append(g);\n    return g;\n};\n","import { PointsTracker } from '@ixfx/geometry/point';\nimport * as Svg from './svg/index.js';\nimport { ElementSizer, resolveEl } from '@ixfx/dom';\n/**\n * Visualises pointer events within a given element.\n *\n * ```js\n * // Show pointer events for whole document\n * pointerVis(document);\n * ```\n *\n * Note you may need to set the following CSS properties on the target element:\n *\n * ```css\n * touch-action: none;\n * user-select: none;\n * overscroll-behavior: none;\n * ```\n *\n * Options\n * * touchRadius/mouseRadius: size of circle for these kinds of pointer events\n * * trace: if true, intermediate events are captured and displayed\n * @param elOrQuery Element to monitor\n * @param options Options\n */\nexport const pointerVisualise = (elOrQuery, options = {}) => {\n    const touchRadius = options.touchRadius ?? 45;\n    const mouseRadius = options.touchRadius ?? 20;\n    const trace = options.trace ?? false;\n    const hue = options.hue ?? 100;\n    const startFillStyle = `hsla(${hue}, 100%, 10%, 10%)`;\n    let currentHue = hue;\n    const el = resolveEl(elOrQuery);\n    const tracker = new PointsTracker({\n        storeIntermediate: trace,\n    });\n    const svg = document.createElementNS(`http://www.w3.org/2000/svg`, `svg`);\n    svg.id = `pointerVis`;\n    svg.style.zIndex = `-1000`;\n    svg.style.position = `fixed`;\n    svg.style.top = `0`;\n    svg.style.left = `0`;\n    svg.style.width = `100%`;\n    svg.style.height = `100%`;\n    svg.style.boxSizing = `border-box`;\n    svg.style.border = `3px solid red`;\n    svg.style.pointerEvents = `none`;\n    svg.style.touchAction = `none`;\n    // const er = new ElementSizer(svg, {\n    //   containerEl:document.body,\n    //   stretch:`both`,\n    //   onSetSize(size) {\n    //     svg.setAttribute(`width`, size.width.toString());\n    //     svg.setAttribute(`height`, size.height.toString());\n    //   },\n    // })\n    const er = ElementSizer.svgViewport(svg);\n    //fullSizeElement(svg);\n    let pointerCount = 0;\n    const lostPointer = (event) => {\n        const id = event.pointerId.toString();\n        tracker.delete(id);\n        currentHue = hue;\n        svg.querySelector(`#pv-start-${id}`)?.remove();\n        for (let index = 0; index < pointerCount + 10; index++) {\n            svg.querySelector(`#pv-progress-${id}-${index}`)?.remove();\n        }\n        pointerCount = 0;\n    };\n    const trackPointer = async (event) => {\n        const id = event.pointerId.toString();\n        const pt = { x: event.x, y: event.y };\n        const type = event.pointerType;\n        if (event.type === `pointermove` && !tracker.has(id)) {\n            return;\n        }\n        const info = (await tracker.seen(event.pointerId.toString(), { x: event.clientX, y: event.clientY }));\n        if (info.values.length === 1) {\n            const el = Svg.Elements.circle({\n                ...info.values[0],\n                radius: type === `touch` ? touchRadius : mouseRadius,\n            }, svg, {\n                fillStyle: startFillStyle,\n            }, `#pv-start-${id}`);\n            el.style.pointerEvents = `none`;\n            el.style.touchAction = `none`;\n        }\n        const fillStyle = `hsla(${currentHue}, 100%, 50%, 50%)`;\n        const el2 = Svg.Elements.circle({ ...pt, radius: type === `touch` ? touchRadius : mouseRadius }, svg, {\n            fillStyle,\n        }, `#pv-progress-${id}-${info.values.length}`);\n        el2.style.pointerEvents = `none`;\n        el2.style.touchAction = `none`;\n        currentHue += 1;\n        pointerCount = info.values.length;\n    };\n    document.body.append(svg);\n    el.addEventListener(`pointerdown`, trackPointer);\n    el.addEventListener(`pointermove`, trackPointer);\n    el.addEventListener(`pointerup`, lostPointer);\n    el.addEventListener(`pointerleave`, lostPointer);\n    el.addEventListener(`contextmenu`, (event) => {\n        event.preventDefault();\n    });\n};\n","export const create = (fallbacks) => new NamedColourPaletteImpl(fallbacks);\nclass NamedColourPaletteImpl {\n    #store = new Map();\n    #aliases = new Map();\n    fallbacks;\n    #lastFallback = 0;\n    #elementBase;\n    constructor(fallbacks) {\n        if (fallbacks !== undefined)\n            this.fallbacks = fallbacks;\n        else\n            this.fallbacks = [`red`, `blue`, `green`, `orange`];\n        this.#elementBase = document.body;\n    }\n    setElementBase(el) {\n        this.#elementBase = el;\n    }\n    add(key, colour) {\n        this.#store.set(key, colour);\n    }\n    alias(from, to) {\n        this.#aliases.set(from, to);\n    }\n    get(key, fallback) {\n        const alias = this.#aliases.get(key);\n        if (alias !== undefined)\n            key = alias;\n        const c = this.#store.get(key);\n        if (c !== undefined)\n            return c;\n        const variableName = `--` + key;\n        let fromCss = getComputedStyle(this.#elementBase)\n            .getPropertyValue(variableName)\n            .trim();\n        // Not found\n        if (fromCss === undefined || fromCss.length === 0) {\n            if (fallback !== undefined)\n                return fallback;\n            fromCss = this.fallbacks[this.#lastFallback];\n            this.#lastFallback++;\n            if (this.#lastFallback === this.fallbacks.length)\n                this.#lastFallback = 0;\n        }\n        return fromCss;\n    }\n    getOrAdd(key, fallback) {\n        if (this.has(key))\n            return this.get(key);\n        const c = this.get(key, fallback);\n        this.add(key, c);\n        return c;\n    }\n    has(key) {\n        return this.#store.has(key);\n    }\n}\n","import { numberTest, resultThrow } from '@ixfx/guards';\nimport {} from '@ixfx/random';\n/**\n * Returns a full HSL colour string (eg `hsl(20,50%,75%)`) based on a index.\n * It's useful for generating perceptually different shades as the index increments.\n *\n * ```\n * el.style.backgroundColor = goldenAgeColour(10);\n * ```\n *\n * Saturation and lightness can be specified, as numeric ranges of 0-1.\n *\n * @param saturation Saturation (0-1), defaults to 0.5\n * @param lightness Lightness (0-1), defaults to 0.75\n * @param alpha Opacity (0-1), defaults to 1.0\n * @returns HSL colour string eg `hsl(20,50%,75%)`\n */\nexport const goldenAngleColour = (index, saturation = 0.5, lightness = 0.75, alpha = 1) => {\n    resultThrow(numberTest(index, `positive`, `index`), numberTest(saturation, `percentage`, `saturation`), numberTest(lightness, `percentage`, `lightness`), numberTest(alpha, `percentage`, `alpha`));\n    // Via Stackoverflow\n    const hue = index * 137.508; // use golden angle approximation\n    return alpha === 1 ? `hsl(${hue},${saturation * 100}%,${lightness * 100}%)` : `hsl(${hue},${saturation * 100}%,${lightness * 100}%,${alpha * 100}%)`;\n};\n/**\n * Returns a random hue component (0..359)\n * ```\n * // Generate hue\n * const h =randomHue(); // 0-359\n *\n * // Generate hue and assign as part of a HSL string\n * el.style.backgroundColor = `hsl(${randomHue(), 50%, 75%})`;\n * ```\n * @param rand\n * @returns\n */\nexport const randomHue = (rand = Math.random) => {\n    const r = rand();\n    return r * 360;\n};\n","import { toColour, toCssColour } from './conversion.js';\nimport * as HslSpace from './hsl.js';\nimport * as SrgbSpace from './srgb.js';\nimport { clamp } from '@ixfx/numbers';\nexport function multiplyOpacity(colourish, amount) {\n    return withOpacity(colourish, o => clamp(o * amount));\n}\nexport function withOpacity(colourish, fn) {\n    const colour = toColour(colourish);\n    let result;\n    switch (colour.space) {\n        case `hsl`:\n            result = HslSpace.withOpacity(colour, fn);\n            break;\n        case `srgb`:\n            result = SrgbSpace.withOpacity(colour, fn);\n            break;\n        default:\n            throw new Error(`Unknown space: '${colour.space}'. Expected hsl, srgb, oklch`);\n    }\n    if (!result)\n        throw new Error(`Is colour in correct form?`);\n    if (typeof colourish === `string`) {\n        // Convert back to string if input was a string\n        return toCssColour(result);\n    }\n    return result;\n}\n;\n// export const multiplySaturation = (colour: Colourish, amt: number): string => {\n//   throwNumberTest(amt, `percentage`, `amt`);\n//   const c = structuredToColorJs(colour);\n//   c.s = (c.s ?? 0) * amt;\n//   return c.toString();\n// };\n","import { numberInclusiveRangeTest, numberTest, resultThrow, throwIfFailed } from \"@ixfx/guards\";\nimport * as C from \"colorizr\";\nimport { cssDefinedHexColours } from \"./css-colours.js\";\nimport { angleConvert, angleParse } from \"@ixfx/geometry\";\n// const oklchGuard = (lch: OkLch) => {\n//   switch (lch.unit) {\n//     case `scalar`:\n//       throwIfFailed(\n//         numberTest(lch.l, `percentage`, `lch.l`),\n//         numberTest(lch.c, `percentage`, `lch.c`),\n//         numberTest(lch.h, `percentage`, `lch.h`),\n//         numberTest(lch.opacity, `percentage`, `lch.opacity`)\n//       );\n//       break;\n//     case `absolute`:\n//       throwIfFailed(\n//         numberTest(lch.l, `percentage`, `lch.l`),\n//         numberTest(lch.c, `percentage`, `lch.c`),\n//         numberTest(lch.opacity, `percentage`, `lch.opacity`)\n//       );\n//       break;\n//     default:\n//       // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n//       // @ts-expect-error\n//       throw new Error(`Unknown unit: ${ lch.unit }`);\n//   }\n// }\nexport const guard = (lch) => {\n    const { l, c, h, opacity, space, unit } = lch;\n    if (space !== `oklch`)\n        throw new Error(`Space is expected to be 'oklch'. Got: ${space}`);\n    if (unit === `absolute`) {\n        resultThrow(numberTest(l, `percentage`, `l`), numberTest(c, `percentage`, `c`), numberTest(h, `percentage`, `h`), () => {\n            if (typeof opacity === `number`) {\n                return numberInclusiveRangeTest(opacity, 0, 100, `opacity`);\n            }\n        });\n    }\n    else if (unit === `scalar`) {\n        resultThrow(numberTest(l, `percentage`, `l`), numberTest(c, `percentage`, `c`), numberTest(h, `percentage`, `h`), () => {\n            if (typeof opacity === `number`) {\n                return numberTest(opacity, `percentage`, `opacity`);\n            }\n        });\n    }\n    else {\n        throw new Error(`Unit is expected to be 'absolute' or 'scalar'. Got: ${unit}`);\n    }\n};\nconst fromLibrary = (lch, parsingOptions = {}) => {\n    if (typeof lch === `undefined` || lch === null) {\n        if (parsingOptions.fallbackColour)\n            return parsingOptions.fallbackColour;\n    }\n    resultThrow(numberInclusiveRangeTest(lch.l, 0, 360, `l`), numberInclusiveRangeTest(lch.c, 0, 100, `c`), numberInclusiveRangeTest(lch.h, 0, 100, `h`), () => lch.alpha !== undefined ? numberInclusiveRangeTest(lch.alpha, 0, 100, `alpha`) : { success: true, value: lch });\n    return {\n        l: lch.l,\n        c: lch.c,\n        h: lch.h,\n        opacity: (lch.alpha ?? 1) * 100,\n        unit: `absolute`,\n        space: `oklch`\n    };\n};\nexport const fromHexString = (hexString) => fromLibrary(C.hex2oklch(hexString));\nconst oklchTransparent = Object.freeze({\n    l: 0, c: 0, h: 0, opacity: 0, unit: `absolute`, space: `oklch`\n});\nexport const fromCssAbsolute = (value, options = {}) => {\n    value = value.toLowerCase();\n    if (value.startsWith(`#`)) {\n        return fromHexString(value);\n    }\n    if (value === `transparent`)\n        return oklchTransparent;\n    if (typeof cssDefinedHexColours[value] !== `undefined`) {\n        return fromHexString(cssDefinedHexColours[value]);\n    }\n    if (!value.startsWith(`hsl(`) && !value.startsWith(`oklch(`)) {\n        try {\n            const converted = C.convert(value, `oklch`);\n            value = converted;\n        }\n        catch (error) {\n            if (options.fallbackString) {\n                value = options.fallbackString;\n            }\n            else {\n                throw error;\n            }\n        }\n    }\n    const c = C.extractColorParts(value);\n    if (c.model !== `oklch`) {\n        if (options.fallbackColour)\n            return options.fallbackColour;\n        throw new Error(`Expecting OKLCH colour space. Got: ${c.model}`);\n    }\n    return fromLibrary(c, options);\n};\nexport const fromCssScalar = (value, options = {}) => toScalar(fromCssAbsolute(value, options));\nexport const toScalar = (lch) => {\n    guard(lch);\n    if (lch.unit === `scalar`)\n        return lch;\n    return {\n        l: lch.l / 360,\n        c: lch.c / 100,\n        h: lch.h / 100,\n        opacity: (lch.opacity ?? 1) / 100,\n        unit: `scalar`,\n        space: `oklch`\n    };\n};\nconst toLibrary = (lch) => {\n    const abs = toAbsolute(lch);\n    return {\n        l: abs.l,\n        c: abs.c,\n        h: abs.h,\n        alpha: abs.opacity,\n    };\n};\n// const libraryLchToScalar = (c: C.LCH): OkLchScalar => {\n//   return {\n//     l: c.h,\n//     c: c.c,\n//     h: c.h / 360,\n//     opacity: c.alpha ?? 1,\n//     unit: `scalar`,\n//     space: `oklch`\n//   }\n// }\nexport const toAbsolute = (lch) => {\n    if (lch.unit === `absolute`)\n        return lch;\n    return {\n        space: `oklch`,\n        unit: `absolute`,\n        l: lch.l * 100,\n        c: lch.c * 100,\n        h: lch.h * 360,\n        opacity: lch.opacity\n    };\n};\nexport const toCssString = (lch) => {\n    guard(lch);\n    const { l, c, h, opacity } = lch;\n    let css = ``;\n    switch (lch.unit) {\n        case `absolute`:\n            css = `lch(${l}% ${c}% ${h})`;\n    }\n    if (typeof opacity !== `undefined`) {\n        css += ` / ${opacity}`;\n    }\n    css += `)`;\n    return css;\n};\n// export const oklchFromCss = (css: string): OkLchScalar => {\n//   if (css.startsWith(`#`)) {\n//     libraryLchToScalar(C.hex2oklch(css));\n//   }\n//   const p = C.extractColorParts(css);\n//   return libraryToScalar(p);\n// }\n// const libraryToScalar = (colour: unknown): OkLchScalar => {\n//   if (C.isLCH(colour)) {\n//     return libraryLchToScalar(colour);\n//   }\n//   if (C.isRGB(colour)) {\n//     return libraryToScalar(C.rgb2oklch(colour));\n//   }\n//   if (C.isLAB(colour)) {\n//     return libraryToScalar(C.oklab2oklch(colour));\n//   }\n//   if (C.isHSL(colour)) {\n//     return libraryToScalar(C.hsl2oklch(colour));\n//   }\n//   if (C.isHex(colour)) {\n//     return libraryLchToScalar(C.hex2oklch(colour));\n//   }\n//   throw new Error(`Unexpected colour format`);\n// }\n// export const oklchToColorJs = (lch: OkLch): ColorConstructor => {\n//   throwNumberTest(lch.l, `percentage`, `lch.l`);\n//   throwNumberTest(lch.c, `percentage`, `lch.c`);\n//   throwNumberTest(lch.h, `percentage`, `lch.h`);\n//   throwNumberTest(lch.opacity, `percentage`, `lch.opacity`);\n//   return {\n//     alpha: lch.opacity,\n//     coords: [ lch.l, lch.c * 0.4, lch.h * 360 ],\n//     spaceId: `oklch`\n//   }\n// }\n// const oklchToColorJs = (oklch: OkLch) => {\n//   throwNumberTest(oklch.l, `percentage`, `oklch.l`);\n//   throwNumberTest(oklch.c, `percentage`, `oklch.c`);\n//   throwNumberTest(oklch.h, `percentage`, `oklch.h`);\n//   throwNumberTest(oklch.opacity, `percentage`, `oklch.opacity`);\n//   const coords: [ number, number, number ] = [\n//     oklch.l,\n//     oklch.c * 0.4,\n//     oklch.h * 360\n//   ]\n//   return new ColorJs.default(`oklch`, coords, oklch.opacity);\n// }\n// export const isOklch = (p: Colourish | undefined | null): p is OkLch => {\n//   if (typeof p === `undefined` || p === null) return false;\n//   if (typeof p !== `object`) return false;\n//   // Check if Colourjs\n//   //if ((p as ColorJs.ColorObject).spaceId !== undefined) return false;\n//   //if ((p as ColorJs.ColorObject).coords !== undefined) return false;\n//   if (p.space !== `oklch`) return false;\n//   if (typeof p.l === `undefined`) return false;\n//   if (typeof p.c === `undefined`) return false;\n//   if (typeof p.h === `undefined`) return false;\n//   return true;\n// }\nexport const generateScalar = (absoluteHslOrVariable, chroma = 1, lightness = 0.5, opacity = 1) => {\n    if (typeof absoluteHslOrVariable === `string`) {\n        if (absoluteHslOrVariable.startsWith(`--`)) {\n            absoluteHslOrVariable = getComputedStyle(document.body).getPropertyValue(absoluteHslOrVariable).trim();\n        }\n    }\n    if (lightness > 1)\n        throw new TypeError(`Param 'lightness' must be between 0..1`);\n    if (chroma > 1)\n        throw new TypeError(`Param 'chroma' must be between 0..1`);\n    const hue = angleParse(absoluteHslOrVariable);\n    const hueDeg = angleConvert(hue, `deg`).value / 360;\n    if (opacity > 1)\n        throw new TypeError(`Param 'opacity' must be between 0..1`);\n    return {\n        l: lightness,\n        c: chroma,\n        h: hueDeg,\n        opacity: opacity,\n        unit: `scalar`,\n        space: `oklch`\n    };\n};\n","export * from './conversion.js';\nexport * from './css-colours.js';\nexport * from './generate.js';\n//export * from './interpolate.js';\nexport * from './math.js';\nexport * as HslSpace from './hsl.js';\nexport * as OklchSpace from './oklch.js';\nexport * as SrgbSpace from './srgb.js';\n","import { continuously } from '@ixfx/core';\nimport { delayLoop } from '@ixfx/flow';\n/**\n * Generator that yields frames from a video element as [ImageData](https://developer.mozilla.org/en-US/docs/Web/API/ImageData).\n *\n * ```js\n * import { Video } from 'https://unpkg.com/ixfx/dist/visual.js'\n *\n * const ctx = canvasEl.getContext(`2d`);\n * for await (const frame of Video.frames(videoEl)) {\n *   // TODO: Some processing of pixels\n *\n *   // Draw image on to the visible canvas\n *   ctx.putImageData(frame, 0, 0);\n * }\n * ```\n *\n * Under the hood it creates a hidden canvas where frames are drawn to. This is necessary\n * to read back pixel data. An existing canvas can be used if it is passed in as an option.\n *\n * Options:\n * * `canvasEl`: CANVAS element to use as a buffer (optional)\n * * `maxIntervalMs`: Max frame rate (0 by default, ie runs as fast as possible)\n * * `showCanvas`: Whether buffer canvas will be shown (false by default)\n * @param sourceVideoEl\n * @param opts\n */\nexport async function* frames(sourceVideoEl, opts = {}) {\n    // TODO: Ideally use OffscreenCanvas when it has wider support?\n    // TODO: When ImageBitmap has possibility to get pixels, that might also help to avoid having to write to hidden canvas\n    const maxIntervalMs = opts.maxIntervalMs ?? 0;\n    const showCanvas = opts.showCanvas ?? false;\n    let canvasEl = opts.canvasEl;\n    let w, h;\n    w = h = 0;\n    // Create & setup canvas\n    if (canvasEl === undefined) {\n        canvasEl = document.createElement(`CANVAS`);\n        canvasEl.classList.add(`ixfx-frames`);\n        if (!showCanvas) {\n            canvasEl.style.display = `none`;\n        }\n        document.body.appendChild(canvasEl);\n    }\n    // Update size of canvas based on video\n    const updateSize = () => {\n        if (canvasEl === undefined)\n            return;\n        w = sourceVideoEl.videoWidth;\n        h = sourceVideoEl.videoHeight;\n        canvasEl.width = w;\n        canvasEl.height = h;\n    };\n    let c = null;\n    const looper = delayLoop(maxIntervalMs);\n    for await (const _ of looper) {\n        // If we don't yet have the size of video, get it\n        if (w === 0 || h === 0)\n            updateSize();\n        // If there is still no dimensions (ie stream has not started), there's nothing to do yet\n        if (w === 0 || h === 0)\n            continue;\n        // Draw current frame from video element to hidden canvas\n        if (c === null)\n            c = canvasEl.getContext(`2d`);\n        if (c === null)\n            return;\n        c.drawImage(sourceVideoEl, 0, 0, w, h);\n        // Get pixels\n        const pixels = c.getImageData(0, 0, w, h);\n        yield pixels;\n    }\n}\n/**\n * Captures frames from a video element. It can send pixel data to a function or post to a worker script.\n *\n * @example Using a function\n * ```js\n * import {Video} from 'https://unpkg.com/ixfx/dist/visual.js'\n *\n * // Capture from a VIDEO element, handling frame data\n * // imageData is ImageData type: https://developer.mozilla.org/en-US/docs/Web/API/ImageData\n * Video.capture(sourceVideoEl, {\n *  onFrame(imageData => {\n *    // Do something with pixels...\n *  });\n * });\n * ```\n *\n * @example Using a worker\n * ```js\n * import {Video} from 'https://unpkg.com/ixfx/dist/visual.js'\n *\n * Video.capture(sourceVideoEl, {\n *  workerScript: `./frameProcessor.js`\n * });\n * ```\n *\n * In frameProcessor.js:\n * ```\n * const process = (frame) => {\n *  // ...process frame\n *\n *  // Send image back?\n *  self.postMessage({frame});\n * };\n *\n * self.addEventListener(`message`, evt => {\n *   const {pixels, width, height} = evt.data;\n *   const frame = new ImageData(new Uint8ClampedArray(pixels),\n *     width, height);\n *\n *   // Process it\n *   process(frame);\n * });\n * ```\n *\n * Options:\n * * `canvasEl`: CANVAS element to use as a buffer (optional)\n * * `maxIntervalMs`: Max frame rate (0 by default, ie runs as fast as possible)\n * * `showCanvas`: Whether buffer canvas will be shown (false by default)\n * * `workerScript`: If this specified, this URL will be loaded as a Worker, and frame data will be automatically posted to it\n *\n * Implementation: frames are captured using a animation-speed loop to a hidden canvas. From there\n * the pixel data is extracted and sent to either destination. In future the intermediate drawing to a\n * canvas could be skipped if it becomes possible to get pixel data from an ImageBitmap.\n * @param sourceVideoEl Source VIDEO element\n * @param opts\n * @returns\n */\nexport const capture = (sourceVideoEl, opts = {}) => {\n    const maxIntervalMs = opts.maxIntervalMs ?? 0;\n    const showCanvas = opts.showCanvas ?? false;\n    const onFrame = opts.onFrame;\n    // Ideally use OffscreenCanvas when it has support?\n    const w = sourceVideoEl.videoWidth;\n    const h = sourceVideoEl.videoHeight;\n    // Create canvas\n    const canvasEl = document.createElement(`CANVAS`);\n    canvasEl.classList.add(`ixfx-capture`);\n    if (!showCanvas) {\n        canvasEl.style.display = `none`;\n    }\n    canvasEl.width = w;\n    canvasEl.height = h;\n    let c = null;\n    let worker;\n    if (opts.workerScript) {\n        worker = new Worker(opts.workerScript);\n    }\n    // Should we get image data?\n    const getPixels = worker || onFrame;\n    if (!getPixels && !showCanvas) {\n        console.warn(`Video will be captured to hidden element without any processing. Is this what you want?`);\n    }\n    const loop = continuously(() => {\n        // Draw current frame from video element to hidden canvas\n        if (c === null)\n            c = canvasEl.getContext(`2d`);\n        if (c === null)\n            return;\n        c.drawImage(sourceVideoEl, 0, 0, w, h);\n        let pixels;\n        if (getPixels) {\n            // ImageData necessary\n            pixels = c.getImageData(0, 0, w, h);\n        }\n        if (worker) {\n            // Send to worker\n            worker.postMessage({\n                pixels: pixels.data.buffer,\n                width: w,\n                height: h,\n                channels: 4,\n            }, [pixels.data.buffer]);\n        }\n        if (onFrame) {\n            // Send to callback\n            try {\n                onFrame(pixels);\n            }\n            catch (e) {\n                console.error(e);\n            }\n        }\n    }, maxIntervalMs);\n    return {\n        start: () => { loop.start(); },\n        cancel: () => { loop.cancel(); },\n        canvasEl,\n    };\n};\nexport const manualCapture = (sourceVideoEl, opts = {}) => {\n    const showCanvas = opts.showCanvas ?? false;\n    // Ideally use OffscreenCanvas when it has support?\n    const w = sourceVideoEl.videoWidth;\n    const h = sourceVideoEl.videoHeight;\n    // Create canvas if necessary\n    const definedCanvasEl = opts.canvasEl !== undefined;\n    let canvasEl = opts.canvasEl;\n    if (!canvasEl) {\n        canvasEl = document.createElement(`CANVAS`);\n        canvasEl.classList.add(`ixfx-capture`);\n        document.body.append(canvasEl);\n        if (!showCanvas)\n            canvasEl.style.display = `none`;\n    }\n    canvasEl.width = w;\n    canvasEl.height = h;\n    const capture = () => {\n        let c;\n        // Draw current frame from video element to canvas\n        if (!c)\n            c = canvasEl.getContext(`2d`, { willReadFrequently: true });\n        if (!c)\n            throw new Error(`Could not create graphics context`);\n        c.drawImage(sourceVideoEl, 0, 0, w, h);\n        const pixels = c.getImageData(0, 0, w, h);\n        pixels.currentTime = sourceVideoEl.currentTime;\n        if (opts.postCaptureDraw)\n            opts.postCaptureDraw(c, w, h);\n        return pixels;\n    };\n    const dispose = () => {\n        if (definedCanvasEl)\n            return; // we didn't create it\n        try {\n            canvasEl.remove();\n        }\n        catch (_) {\n            // no-op\n        }\n    };\n    const c = {\n        canvasEl,\n        capture,\n        dispose,\n    };\n    return c;\n};\n","export * from './canvas-helper.js';\nexport * from './pointer-visualise.js';\n// import * as Svg from './svg/index.js';\n// export * as Svg from './svg/index.js';\nimport * as NamedColourPalette from './named-colour-palette.js';\nimport * as Colour from './colour/index.js';\nexport * as Colour from './colour/index.js';\n//export type * from './types.js';\n//import * as SceneGraph from './SceneGraph.js';\nimport * as Video from './video.js';\n//export * from '../../dom/src/CanvasRegion.js';\n/**\n * Wraps [ImageData](https://developer.mozilla.org/en-US/docs/Web/API/ImageData) as an ixfx {@link @ixfx/geometry.Grid} type.\n * This is useful because it's otherwise a one-dimensional array listing each rgba in turn.\n */\nexport * as ImageDataGrid from './image-data-grid.js';\n//export * as BipolarView from '../../dom/src/plot/BipolarView.js';\n//export * as NamedColourPalette from './named-colour-palette.js';\n//export * as Plot2 from './Plot2.js';\n//export * as Plot from './plot/index.js';\n//export * as SceneGraph from './SceneGraph.js';\n//export * from './ScaleCanvas.js';\n//export * from './plot/CartesianCanvasPlot.js';\n/**\n * Working with video, either playback from a file or stream from a video camera.\n *\n * Overview\n * * {@link frames}: Yields frames from a video camera\n * * {@link capture}: Capture frames from a VIDEO element\n *\n * @example Importing\n * ```js\n * // If library is stored two directories up under `ixfx/`\n * import {Video} from '../../ixfx/dist/visual.js';\n * // Import from web\n * import {Video} from 'https://unpkg.com/ixfx/dist/visual.js'\n * ```\n */\nexport * as Video from './video.js';\ntry {\n    if (typeof window !== `undefined`) {\n        window.ixfx = {\n            ...window.ixfx,\n            Visuals: {\n                NamedColourPalette,\n                Colour,\n                Video,\n            },\n        };\n    }\n}\ncatch {\n    /* no-op */\n}\n"],"x_google_ignoreList":[1],"mappings":"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"}