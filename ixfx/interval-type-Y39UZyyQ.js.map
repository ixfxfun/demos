{"version":3,"file":"interval-type-Y39UZyyQ.js","names":[],"sources":["../../core/dist/src/util/round.js","../../core/dist/src/interval-type.js"],"sourcesContent":["import { integerTest, resultThrow } from \"@ixfx/guards\";\n/**\n * Rounds a number.\n *\n * If one parameter is given, it's the decimal places,\n * and a rounding function is returned:\n * ```js\n * const r = round(2);\n * r(10.12355); // 10.12\n * ```\n *\n * If two parameters are given, the first is decimal places,\n * the second the value to round.\n * ```js\n * round(2, 10.12355); // 10.12\n * ```\n * @param decimalPlaces\n * @returns\n */\nexport function round(a, b, roundUp) {\n    resultThrow(integerTest(a, `positive`, `decimalPlaces`));\n    const up = (typeof b === `boolean`) ? b : (roundUp ?? false);\n    let rounder;\n    if (a === 0) {\n        rounder = Math.round;\n    }\n    else {\n        const p = Math.pow(10, a);\n        if (up) {\n            rounder = (v) => Math.ceil(v * p) / p;\n        }\n        else {\n            rounder = (v) => Math.floor(v * p) / p;\n        }\n    }\n    if (typeof b === `number`)\n        return rounder(b);\n    return rounder;\n}\n","import { numberTest } from '@ixfx/guards';\nimport { round } from './util/round.js';\n// export function intervalToMs(interval: Interval | undefined): number | undefined;\n// export function intervalToMs(\n//   interval: Interval | undefined,\n//   defaultNumber: number\n// ): number;\n/**\n * Return the millisecond value of an Interval.\n *\n * ```js\n * intervalToMs(100); // 100\n * intervalToMs({ millis: 100 }); // 100\n * ```\n *\n * Use `defaultNumber` to return a default in the case of\n * _undefined_ or invalid input.\n *\n * ```js\n * intervalToMs(undefined);      // throws error\n * intervalToMs(undefined, 100); // 100\n * ```\n *\n * If no default is provided, an exception is thrown.\n * @param interval Interval\n * @param defaultNumber Default value if `interval` is _undefined_ or invalid\n * @returns Milliseconds\n */\nexport function intervalToMs(interval, defaultNumber) {\n    if (isInterval(interval)) {\n        // Number given, must be millis?\n        if (typeof interval === `number`)\n            return interval;\n        let ms = interval.millis ?? 0;\n        ms += (interval.hours ?? 0) * 60 * 60 * 1000;\n        ms += (interval.mins ?? 0) * 60 * 1000;\n        ms += (interval.secs ?? 0) * 1000;\n        return ms;\n    }\n    else {\n        if (typeof defaultNumber !== `undefined`)\n            return defaultNumber;\n        throw new Error(`Not a valid interval: ${JSON.stringify(interval)}`);\n    }\n}\n/**\n * Returns _true_ if `interval` matches the {@link Interval} type.\n * @param interval\n * @returns _True_ if `interval` is an {@link Interval}.\n */\nexport function isInterval(interval) {\n    if (typeof interval === `undefined`)\n        return false;\n    if (interval === null)\n        return false;\n    if (typeof interval === `number`) {\n        if (Number.isNaN(interval))\n            return false;\n        if (!Number.isFinite(interval))\n            return false;\n        return true;\n    }\n    if (typeof interval !== `object`)\n        return false;\n    const hasMillis = `millis` in interval;\n    const hasSecs = `secs` in interval;\n    const hasMins = `mins` in interval;\n    const hasHours = `hours` in interval;\n    if (hasMillis && !numberTest(interval.millis).success)\n        return false;\n    if (hasSecs && !numberTest(interval.secs).success)\n        return false;\n    if (hasMins && !numberTest(interval.mins).success)\n        return false;\n    if (hasHours && !numberTest(interval.hours).success)\n        return false;\n    if (hasMillis || hasSecs || hasHours || hasMins)\n        return true;\n    return false;\n}\n/**\n * Returns a human-readable representation\n * of some elapsed milliseconds\n *\n * @example\n * ```js\n * elapsedToHumanString(10);      // `10ms`\n * elapsedToHumanString(2000);    // `2s`\n * elapsedToHumanString(65*1000); // `1mins`\n * ```\n * @param millisOrFunction Milliseconds as a number, {@link Interval} or function that resolve to a number\n * @param rounding Rounding (default: 2)\n * @returns\n */\nexport const elapsedToHumanString = (millisOrFunction, rounding = 2) => {\n    let interval = 0;\n    if (typeof millisOrFunction === `function`) {\n        const intervalResult = millisOrFunction();\n        return elapsedToHumanString(intervalResult);\n    }\n    else if (typeof millisOrFunction === `number`) {\n        interval = millisOrFunction;\n    }\n    else if (typeof millisOrFunction === `object`) {\n        interval = intervalToMs(interval);\n    }\n    let ms = intervalToMs(interval);\n    if (typeof ms === `undefined`)\n        return `(undefined)`;\n    if (ms < 1000)\n        return `${round(rounding, ms)}ms`;\n    ms /= 1000;\n    if (ms < 120)\n        return `${ms.toFixed(1)}secs`;\n    ms /= 60;\n    if (ms < 60)\n        return `${ms.toFixed(2)}mins`;\n    ms /= 60;\n    return `${ms.toFixed(2)}hrs`;\n};\n"],"mappings":"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"}