{"version":3,"file":"visual.d.ts","names":["Point","Circle","CircleToSvg","CirclePositioned","CircleRandomPointOpts","Point","Line","PolyLine","ReadonlyArray","Point","Triangle","BarycentricCoord","Point","PolarToCartesian","Coord","PolarRay","Readonly","PolarRayWithOrigin","IStack","V","IStack","IStackImmutable","V","Point","Arc","ArcPositioned","ArcInterpolate","ArcToSvg","ArcSvgOpts","Path","Point","QuadraticBezier","QuadraticBezierPath","CubicBezier","CubicBezierPath","Point","Path","Ellipse","EllipsePositioned","fromDegrees","EllipticalPath","Point","degreeToRadian","radianInvert","degreeToGradian","gradianToDegree","radianToGradian","gradianToRadian","radianToDegree","radiansFromAxisX","radiansSum","degreesSum","radianArc","degreeArc","Angle","angleParse","angleConvert","turnToDegree","turnToRadian","degreeToTurn","radianToTurn","Point","Rect","Scaler","ScalerCombined","ScaleBy","scaler","Rects","Rect","Interval","ElementResizeLogic","ElementSizerOptions","HTMLElement","SVGElement","T","ElementSizer","HTMLCanvasElement","RectPositioned","ColorType","ColorModel","HSL","LAB","LCH","RGB","ColorModelKey","ColorModelKeys","TModel","Omit","ColorKeysTuple","ColorTuple","ColorTokens","ColorReturn","T","HEX","Colors","Alpha","ConverterParameters","Amount","Degrees","Analysis","PlainObject","Record","ColorizrOptions","Colorizr","brightnessDifference","chroma","colorDifference","compare","contrast","convert","darken","desaturate","ExtractColorPartsReturn","extractColorParts","FormatCSSOptions","formatCSS","formatHex","isValidColor","lighten","luminance","name","PaletteOptions","palette","opacify","opacity","getOkLCHMaxChroma","getP3Color","parseCSS","random","rotate","saturate","Scheme","SchemeOptions","scheme","Swatch","SwatchVariant","SwatchOptions","swatch","TextColorOptions","textColor","transparentize","hex2hsl","hex2oklab","hex2oklch","hex2rgb","hsl2hex","hsl2oklab","hsl2oklch","hsl2rgb","oklab2hex","oklab2hsl","oklab2oklch","oklab2rgb","oklch2hex","oklch2hsl","oklch2oklab","oklch2rgb","rgb2hex","rgb2hsl","rgb2oklab","rgb2oklch","addAlphaToHex","convertAlphaToHex","extractAlphaFromHex","hexadecimalToNumber","removeAlphaFromHex","isHex","isHSL","isLAB","isLCH","isRGB","default"],"sources":["../../geometry/dist/src/circle/circle-type.d.ts","../../geometry/dist/src/line/line-type.d.ts","../../geometry/dist/src/triangle/triangle-type.d.ts","../../geometry/dist/src/polar/types.d.ts","../../collections/dist/src/stack/IStack.d.ts","../../collections/dist/src/stack/IStackImmutable.d.ts","../../geometry/dist/src/arc/arc-type.d.ts","../../geometry/dist/src/bezier/bezier-type.d.ts","../../geometry/dist/src/ellipse.d.ts","../../geometry/dist/src/angles.d.ts","../../geometry/dist/src/scaler.d.ts","../../dom/dist/src/element-sizing.d.ts","../../../node_modules/.pnpm/colorizr@3.0.7/node_modules/colorizr/dist/index.d.mts","../../visual/src/colour/types.ts","../../visual/src/canvas-helper.ts","../../visual/src/pointer-visualise.ts","../../visual/src/svg/types.ts","../../visual/src/svg/apply.ts","../../visual/src/svg/bounds.ts","../../visual/src/svg/create.ts","../../visual/src/svg/elements.ts","../../visual/src/svg/geometry.ts","../../visual/src/svg/helper.ts","../../visual/src/svg/markers.ts","../../visual/src/svg/path.ts","../../visual/src/svg/remove.ts","../../visual/src/svg/stroke.ts","../../visual/src/svg/index.ts","../../visual/src/drawing.ts","../../visual/src/types.ts","../../visual/src/colour/conversion.ts","../../visual/src/colour/css-colours.ts","../../visual/src/colour/generate.ts","../../visual/src/colour/guards.ts","../../visual/src/colour/math.ts","../../visual/src/colour/interpolate.ts","../../visual/src/colour/hsl.ts","../../visual/src/colour/oklch.ts","../../visual/src/colour/srgb.ts","../../visual/src/colour/index.ts","../../visual/src/image-data-grid.ts","../../visual/src/plot/bipolar-view.ts","../../visual/src/plot/types.ts","../../visual/src/plot/cartesian.ts","../../visual/src/plot/DataSet.ts","../../visual/src/canvas-region.ts","../../visual/src/plot/cartesian-canvas-plot.ts","../../visual/src/plot/index.ts","../../visual/src/video.ts"],"sourcesContent":["import type { Point } from \"../point/point-type.js\";\n/**\n * A circle\n */\nexport type Circle = {\n    readonly radius: number;\n};\nexport type CircleToSvg = {\n    (circleOrRadius: Circle | number, sweep: boolean, origin: Point): readonly string[];\n    (circle: CirclePositioned, sweep: boolean): readonly string[];\n};\n/**\n * A {@link Circle} with position\n */\nexport type CirclePositioned = Point & Circle;\nexport type CircleRandomPointOpts = {\n    /**\n     * Algorithm to calculate random values.\n     * Default: 'uniform'\n     */\n    readonly strategy: `naive` | `uniform`;\n    /**\n     * Random number source.\n     * Default: Math.random\n     */\n    readonly randomSource: () => number;\n    /**\n     * Margin within shape to start generating random points\n     * Default: 0\n     */\n    readonly margin: number;\n};\n//# sourceMappingURL=circle-type.d.ts.map","import type { Point } from \"../point/point-type.js\";\n/**\n * A line, which consists of an `a` and `b` {@link Point}.\n */\nexport type Line = {\n    readonly a: Point;\n    readonly b: Point;\n};\n/**\n * A PolyLine, consisting of more than one line.\n */\nexport type PolyLine = ReadonlyArray<Line>;\n//# sourceMappingURL=line-type.d.ts.map","import type { Point } from \"../point/point-type.js\";\nexport type Triangle = {\n    readonly a: Point;\n    readonly b: Point;\n    readonly c: Point;\n};\nexport type BarycentricCoord = {\n    readonly a: number;\n    readonly b: number;\n    readonly c: number;\n};\n//# sourceMappingURL=triangle-type.d.ts.map","import type { Point } from \"../point/point-type.js\";\n/**\n * Converts to Cartesian coordiantes\n */\nexport type PolarToCartesian = {\n    (point: Coord, origin?: Point): Point;\n    (distance: number, angleRadians: number, origin?: Point): Point;\n};\n/**\n * A polar ray is a line in polar coordinates\n * It consists of an angle (in radians) with a given offset and length.\n */\nexport type PolarRay = Readonly<{\n    /**\n     * Angle of ray\n     */\n    angleRadian: number;\n    /**\n     * Starting point of a ray, defined as an\n     * offset from the polar origin.\n     */\n    offset: number;\n    /**\n     * Length of ray\n     */\n    length: number;\n    origin?: Point;\n}>;\nexport type PolarRayWithOrigin = PolarRay & Readonly<{\n    origin: Point;\n}>;\n/**\n * Polar coordinate, made up of a distance and angle in radians.\n * Most computations involving PolarCoord require an `origin` as well.\n */\nexport type Coord = {\n    readonly distance: number;\n    readonly angleRadian: number;\n};\n//# sourceMappingURL=types.d.ts.map","/**\n * Stack (immutable)\n *\n * @example Overview\n * ```js\n * stack.push(item); // Return a new stack with item(s) added\n * stack.pop();      // Return a new stack with top-most item removed (ie. newest)\n * stack.peek;       // Return what is at the top of the stack or undefined if empty\n * stack.isEmpty;\n * stack.isFull;\n * stack.length;     // How many items in stack\n * stack.data;       // Get the underlying array\n * ```\n *\n * @example\n * ```js\n * let sanga = new Stack();\n * sanga = sanga.push(`bread`, `tomato`, `cheese`);\n * sanga.peek;  // `cheese`\n * sanga = sanga.pop(); // removes `cheese`\n * sanga.peek;  // `tomato`\n * const sangaAlt = sanga.push(`lettuce`, `cheese`); // sanga stays [`bread`, `tomato`], while sangaAlt is [`bread`, `tomato`, `lettuce`, `cheese`]\n * ```\n *\n * Stack can also be created from the basis of an existing array. First index of array will be the bottom of the stack.\n * @class Stack\n * @typeParam V - Type of stored items\n */\nexport interface IStack<V> {\n    /**\n     * Enumerates stack from bottom-to-top\n     *\n     */\n    forEach(fn: (v: V) => void): void;\n    /**\n     * Enumerates stack from top-to-bottom\n     * @param fn\n     */\n    forEachFromTop(fn: (v: V) => void): void;\n    get data(): readonly V[];\n    /**\n     * _True_ if stack is empty\n     */\n    get isEmpty(): boolean;\n    /**\n     * _True_ if stack is at its capacity. _False_ if not, or if there is no capacity.\n     */\n    get isFull(): boolean;\n    /**\n     * Get the item at the top of the stack without removing it (like `pop` would do)\n     * @returns Item at the top of the stack, or _undefined_ if empty.\n     */\n    get peek(): V | undefined;\n    /**\n     * Number of items in stack\n     */\n    get length(): number;\n}\n//# sourceMappingURL=IStack.d.ts.map","import type { IStack } from './IStack.js';\nexport interface IStackImmutable<V> extends IStack<V> {\n    push(...toAdd: readonly V[]): IStackImmutable<V>;\n    pop(): IStackImmutable<V>;\n}\n//# sourceMappingURL=IStackImmutable.d.ts.map","import type { Point } from \"../point/point-type.js\";\n/**\n * Arc, defined by radius, start and end point in radians and direction\n */\nexport type Arc = {\n    /**\n     * Radius of arc\n     */\n    readonly radius: number;\n    /**\n     * Start radian\n     */\n    readonly startRadian: number;\n    /**\n     * End radian\n     */\n    readonly endRadian: number;\n    /**\n     * If true, arc runs in clockwise direction\n     */\n    readonly clockwise: boolean;\n};\n/**\n * An {@link Arc} that also has a center position, given in x, y\n */\nexport type ArcPositioned = Point & Arc;\n/**\n * Function which can interpolate along an {@link Arc} or {@link ArcPositioned}.\n */\nexport type ArcInterpolate = {\n    (amount: number, arc: Arc, allowOverflow: boolean, origin: Point): Point;\n    (amount: number, arc: ArcPositioned, allowOverflow?: boolean): Point;\n};\n/**\n * Function to convert an arc to SVG segments\n */\nexport type ArcToSvg = {\n    /**\n     * SVG path for arc description\n     * @param origin Origin of arc\n     * @param radius Radius\n     * @param startRadian Start\n     * @param endRadian End\n     */\n    (origin: Point, radius: number, startRadian: number, endRadian: number, opts?: ArcSvgOpts): readonly string[];\n    /**\n     * SVG path for non-positioned arc.\n     * If `arc` does have a position, `origin` will override it.\n     */\n    (arc: Arc, origin: Point, opts?: ArcSvgOpts): readonly string[];\n    /**\n     * SVG path for positioned arc\n     */\n    (arc: ArcPositioned, opts?: ArcSvgOpts): readonly string[];\n};\nexport type ArcSvgOpts = {\n    /**\n     * \"If the arc should be greater or less than 180 degrees\"\n     * ie. tries to maximise arc length\n     */\n    readonly largeArc?: boolean;\n    /**\n     * \"If the arc should begin moving at positive angles\"\n     * ie. the kind of bend it makes to reach end point\n     */\n    readonly sweep?: boolean;\n};\n//# sourceMappingURL=arc-type.d.ts.map","import type { Path } from \"../path/path-type.js\";\nimport type { Point } from \"../point/point-type.js\";\nexport type QuadraticBezier = {\n    readonly a: Point;\n    readonly b: Point;\n    readonly quadratic: Point;\n};\nexport type QuadraticBezierPath = Path & QuadraticBezier;\nexport type CubicBezier = {\n    readonly a: Point;\n    readonly b: Point;\n    readonly cubic1: Point;\n    readonly cubic2: Point;\n};\nexport type CubicBezierPath = Path & CubicBezier;\n//# sourceMappingURL=bezier-type.d.ts.map","import type { Point } from './point/point-type.js';\nimport type { Path } from './path/index.js';\n/**\n * An ellipse\n */\nexport type Ellipse = {\n    readonly radiusX: number;\n    readonly radiusY: number;\n    /**\n     * Rotation, in radians\n     */\n    readonly rotation?: number;\n    readonly startAngle?: number;\n    readonly endAngle?: number;\n};\n/**\n * A {@link Ellipse} with position\n */\nexport type EllipsePositioned = Point & Ellipse;\nexport declare const fromDegrees: (radiusX: number, radiusY: number, rotationDeg?: number, startAngleDeg?: number, endAngleDeg?: number) => Ellipse;\nexport type EllipticalPath = Ellipse & Path & {\n    readonly kind: `elliptical`;\n};\n//# sourceMappingURL=ellipse.d.ts.map","import type { Point } from './point/point-type.js';\n/**\n * Convert angle in degrees to angle in radians.\n * @param angleInDegrees\n * @returns\n */\nexport declare function degreeToRadian(angleInDegrees: number): number;\n/**\n * Convert angles in degrees to angles in radians\n * @param angleInDegrees\n */\nexport declare function degreeToRadian(angleInDegrees: readonly number[]): readonly number[];\n/**\n * Inverts the angle so it points in the opposite direction of a unit circle\n * @param angleInRadians\n * @returns\n */\nexport declare function radianInvert(angleInRadians: number): number;\nexport declare function degreeToGradian(angleInDegrees: number): number;\n/**\n * Returns the gradian value converted to degrees.\n * By default it wraps, so any value 360 or greater wraps around.\n * @param angleInGradians\n * @param wrap\n * @returns\n */\nexport declare function gradianToDegree(angleInGradians: number, wrap?: boolean): number;\nexport declare function radianToGradian(angleInRadians: number): number;\nexport declare function gradianToRadian(angleInGradian: number): number;\n/**\n * Convert angle in radians to angle in degrees\n * @param angleInRadians\n * @returns\n */\nexport declare function radianToDegree(angleInRadians: number): number;\n/**\n * Convert angles in radians to angles in degrees\n * @param angleInRadians\n */\nexport declare function radianToDegree(angleInRadians: readonly number[]): readonly number[];\n/**\n * Angle from x-axis to point (ie. `Math.atan2`)\n * @param point\n * @returns\n */\nexport declare const radiansFromAxisX: (point: Point) => number;\n/**\n * Sum angles together, accounting for the 'wrap around'.\n *\n * `clockwise` of _true_ (default) means angles are added in clockwise direction\n *\n * ```js\n * // From 180deg, add 90deg in the clockwise direction\n * radiansSum(Math.PI, Math.PI/2, true);\n * ```\n *\n * Orientation of angles is as follows:\n * ```\n *       90deg\n *       Pi/2\n *        |\n * Pi  ---+--- 0\n * 180    |\n *       3PI/2\n *       270deg\n * ```\n * {@link degreesSum} is the same, but uses degrees (0..360)\n * @param start Starting angle, in radian\n * @param amount Angle to add, in radian\n * @param clockwise Add in clockwise direction (default: _true_)\n * @returns Sum result, in radians\n */\nexport declare const radiansSum: (start: number, amount: number, clockwise?: boolean) => number;\n/**\n * Sum angles together, accounting for the 'wrap around'.\n *\n * `clockwise` of _true_ (default) means angles are added in clockwise direction\n *\n * ```js\n * // From 180deg, add 90deg in the clockwise direction\n * radiansSum(180, 90, true);\n * ```\n *\n * {@link radiansSum} is the same, but uses radians (0..2 Pi)\n *\n * Orientation of angles is as follows:\n * ```\n *       90\n *        |\n * 180 ---+--- 0\n *        |\n *       270\n * ```\n * @param start Starting angle, in degrees\n * @param amount Angle to add, in degrees\n * @param clockwise Add in clockwise direction (default: _true_)\n * @returns Sum result, in degrees\n */\nexport declare const degreesSum: (start: number, amount: number, clockwise?: boolean) => number;\n/**\n * Computes the angle arc between a start and end angle,\n * given in radians. It properly accounts for the wrap-around\n * values.\n *\n * ```js\n * // Between 0-90deg in clockwise direction\n * radianArc(0, Math.PI/2, true); // Yields: 3Pi/2 (270 deg)\n *\n * // In counter-clockwise direction\n * radianArc(0, Math.PI/2, false); // Yields: Math.PI/2 (90deg)\n * ```\n *\n * See {@link degreeArc} to operate in degrees.\n *\n * Orientation of angles is as follows:\n * ```\n *       90deg\n *       Pi/2\n *        |\n * Pi  ---+--- 0\n * 180    |\n *       3PI/2\n *       270deg\n * ```\n * @param start Start angle, in radians\n * @param end End angle, in radians\n * @param clockwise Calculate in clockwise direction (default: _true_)\n * @returns Angle of arc, in radians.\n */\nexport declare const radianArc: (start: number, end: number, clockwise?: boolean) => number;\n/**\n * Computes the angle arc between a start and end angle,\n * given in degrees. It properly accounts for the wrap-around\n * values.\n *\n * ```js\n * // Between 0-90 in clockwise direction\n * degreeArc(0, 90, true); // Yields: 270\n *\n * // In counter-clockwise direction\n * degreeArc(0, 90, false); // Yields: 90\n * ```\n *\n * See {@link radianArc} to operate in radians.\n *\n * Orientation of angles is as follows:\n * ```\n *       90\n *        |\n * 180 ---+--- 0\n *        |\n *       270\n * ```\n * @param start Start angle, in degrees\n * @param end End angle, in degrees\n * @param clockwise Calculate in clockwise direction (default: _true_)\n * @returns Angle of arc, in degrees.\n */\nexport declare const degreeArc: (start: number, end: number, clockwise?: boolean) => number;\nexport type Angle = {\n    value: number;\n    unit: `deg` | `rad` | `turn` | `grad`;\n};\n/**\n * Parses CSS-style angle strings. By default assumes degrees.\n *\n * ```js\n * angleParse(`100`);     // { value: 100, unit: `deg` }\n * angleParse(100);       // { value: 100, unit: `deg` }\n * angleParse(`100deg`);   // { value: 100, unit: `deg` }\n *\n * // More exotic units:\n * angleParse(`100rad`);  // { value: 100, unit: `rad` }\n * angleParse(`100turn`); // { value: 100, unit: `turn` }\n * angleParse(`100grad`); // { value: 100, unit: `grad` }\n * ```\n *\n * Once parsed in this format, use {@link angleConvert} to convert to\n * a different unit.\n * @param value\n * @returns\n */\nexport declare const angleParse: (value: string | number | Angle) => Angle;\n/**\n * Converts an angle to another representation.\n * Input value is assumed degrees unless it's an {@link Angle} type of has the unit.\n *\n * These are all identical inputs: 100, `100`, `100deg`\n * ```js\n * angleConvert(100, `rad`); // Converts 100deg to radians\n * ```\n *\n * Other units can be used for string input: `2turn`, `1grad`, `2rad`.\n * ```js\n * angleConvert(`2rad`, `deg`); // Converts 2radians to degrees\n * ```\n *\n * Can also use an object input:\n * ```js\n * angleConvert({ value: 10, unit: `deg`}, `rad`);\n * ```\n * @param angleOrDegrees\n * @param destination\n * @returns\n */\nexport declare const angleConvert: (angleOrDegrees: Angle | number | string, destination: Angle[`unit`]) => Angle;\n/**\n * Converts 'turns' to degrees. By defaults wraps the value, so\n * turn value of 1 or 2 equal 0deg instead of 360 or 720deg.\n * @param turns\n * @param wrap\n * @returns\n */\nexport declare const turnToDegree: (turns: number, wrap?: boolean) => number;\nexport declare const turnToRadian: (turns: number) => number;\nexport declare const degreeToTurn: (degrees: number) => number;\nexport declare const radianToTurn: (radians: number) => number;\n//# sourceMappingURL=angles.d.ts.map","import type { Point } from './point/point-type.js';\nimport type { Rect } from './rect/index.js';\n/**\n * A scale function that takes an input value to scale.\n * Input can be in the form of `{ x, y }` or two number parameters.\n *\n * ```js\n * scale(10, 20);\n * scale({ x:10, y:20 });\n * ```\n *\n * Output range can be specified as a `{ width, height }` or two number parameters.\n * If omitted, the default range\n * is used.\n *\n * ```js\n * // Scale 10,20 with range w:800 h:600\n * scale(10, 20, 800, 600);\n * scale({x:10, y:20}, 800, 600);\n * scale({x:10, y:20}, {width: 800, height: 600});\n * ```\n */\nexport type Scaler = (a: number | Point, b?: number | Rect, c?: number | Rect, d?: number) => Point;\n/**\n * A scaler than can convert to a from an output range\n */\nexport type ScalerCombined = {\n    /**\n     * Relative to absolute coordinates\n     */\n    readonly abs: Scaler;\n    /**\n     * Absolute to relative coordintes\n     */\n    readonly rel: Scaler;\n    readonly width: number;\n    readonly height: number;\n    computeScale(): Point;\n};\nexport type ScaleBy = `both` | `min` | `max` | `width` | `height`;\n/**\n * Returns a set of scaler functions, to convert to and from ranges.\n *\n * ```js\n * const scaler = Scaler.scaler(`both`, {width:window.innerWidth, height:window.innerHeight});\n * // Assuming screen of 800x400...\n * scaler.abs(400,200);          // Yields { x:0.5, y:0.5 }\n * scaler.abs({ x:400, y:200 }); // Yields { x:0.5, y:0.5 }\n *\n * scaler.rel(0.5, 0.5);         // Yields: { x:400, y:200 }\n * scaler.rel({ x:0.5, y:0.5 }); // Yields: { x:400, y:200 }\n * ```\n *\n * If no default range is provided, it must be given each time the scale function is used.\n *\n * ```js\n * const scaler = Scaler.scaler(`both`);\n *\n * scaler.abs(400, 200, 800, 400);\n * scaler.abs(400, 200, { width: 800, height: 400 });\n * scaler.abs({ x:400, y: 200}, { width: 800, height: 400 });\n * scaler.abs({ x:400, y: 200}, 800, 400);\n * // All are the same, yielding { x:0.5, y:0.5 }\n *\n * scaler.abs(400, 200); // Throws an exception because there is no scale\n * ```\n * @param scaleBy Dimension to scale by\n * @param defaultRect Default range\n * @returns\n */\nexport declare const scaler: (scaleBy?: ScaleBy, defaultRect?: Rect) => ScalerCombined;\n//# sourceMappingURL=scaler.d.ts.map","import { Rects } from \"@ixfx/geometry\";\nimport type { Rect } from \"@ixfx/geometry/rect\";\nimport { type Interval } from \"@ixfx/core\";\n/**\n * * width: use width of parent, set height based on original aspect ratio of element. Assumes parent has a determined width.\n * * height: use height of parent, set width based on original aspect ratio of element. Assumes parent has a determined height.\n * * both: use height & width of parent, so the element adopts the ratio of the parent. Be sure that parent has a width and height set.\n * * min: use the smallest dimension of parent\n * * max: use the largest dimension of parent\n */\nexport type ElementResizeLogic = `width` | `height` | `both` | `none` | `min` | `max`;\n/**\n * Options\n */\nexport type ElementSizerOptions<T extends HTMLElement | SVGElement> = {\n    /**\n     * @defaultValue 'none'\n     */\n    stretch?: ElementResizeLogic;\n    naturalSize?: Rects.Rect;\n    /**\n     * If not specified, the element's parent is used\n     */\n    containerEl?: HTMLElement | string;\n    onSizeChanging: (size: Rects.Rect, el: T) => void;\n    onSizeDone?: (size: Rects.Rect, el: T) => void;\n    debounceTimeout?: Interval;\n};\n/**\n * Consider using static methods:\n *\n * ```js\n * // Resize an <SVG> element to match viewport\n * Dom.ElementSizer.svgViewport(svg);\n *\n * // Resize canvas to match its parent\n * Dom.ElementSizer.canvasParent(canvas);\n *\n * // Resize canvas to match viewport\n * Dom.ElementSizer.canvasViewport(canvas);\n * ```\n */\nexport declare class ElementSizer<T extends HTMLElement | SVGElement> {\n    #private;\n    constructor(elOrQuery: T | string, options: ElementSizerOptions<T>);\n    dispose(reason?: string): void;\n    static canvasParent(canvasElementOrQuery: HTMLCanvasElement | string, options: ElementSizerOptions<HTMLCanvasElement>): ElementSizer<HTMLCanvasElement>;\n    static canvasViewport(canvasElementOrQuery: HTMLCanvasElement | string, options: {\n        zIndex?: number;\n    } & ElementSizerOptions<HTMLCanvasElement>): ElementSizer<HTMLCanvasElement>;\n    /**\n     * Size an SVG element to match viewport\n     * @param svg\n     * @returns\n     */\n    static svgViewport(svg: SVGElement, onSizeSet?: (size: Rects.Rect) => void): ElementSizer<SVGElement>;\n    /**\n     * Sets the 'natural' size of an element.\n     * This can also be specified when creating ElementSizer.\n     * @param size\n     */\n    setNaturalSize(size: Rect): void;\n    get naturalSize(): Rects.Rect;\n    get viewport(): Rects.RectPositioned;\n    set size(size: Rects.Rect);\n    get size(): Rects.Rect;\n}\n//# sourceMappingURL=element-sizing.d.ts.map","type ColorType = 'hex' | 'hsl' | 'oklab' | 'oklch' | 'rgb';\ntype ColorModel = HSL | LAB | LCH | RGB;\ntype ColorModelKey = 'hsl' | 'oklab' | 'oklch' | 'rgb';\ntype ColorModelKeys<TModel extends ColorModelKey> = TModel extends 'hsl' ? keyof Omit<HSL, 'alpha'> : TModel extends 'oklab' ? keyof Omit<LAB, 'alpha'> : TModel extends 'oklch' ? keyof Omit<LCH, 'alpha'> : TModel extends 'rgb' ? keyof Omit<RGB, 'alpha'> : never;\ntype ColorKeysTuple = [string, string, string];\ntype ColorTuple = [number, number, number];\ntype ColorTokens = 50 | 100 | 200 | 300 | 400 | 500 | 600 | 700 | 800 | 900;\ntype ColorReturn<T extends ColorType> = T extends 'hex' ? HEX : T extends 'hsl' ? HSL : T extends 'oklab' ? LAB : T extends 'oklch' ? LCH : T extends 'rgb' ? RGB : never;\ninterface Colors {\n    alpha: Alpha;\n    hex: HEX;\n    hsl: HSL;\n    oklab: LAB;\n    oklch: LCH;\n    rgb: RGB;\n    type: ColorType;\n}\ntype ConverterParameters<TModel extends ColorModel> = TModel | ColorTuple;\ntype Alpha = number;\ntype Amount = number;\ntype Degrees = number;\ntype HEX = `#${string}`;\ninterface HSL {\n    h: number;\n    s: number;\n    l: number;\n    alpha?: Alpha;\n}\ninterface LAB {\n    l: number;\n    a: number;\n    b: number;\n    alpha?: Alpha;\n}\ninterface LCH {\n    l: number;\n    c: number;\n    h: number;\n    alpha?: Alpha;\n}\ninterface RGB {\n    r: number;\n    g: number;\n    b: number;\n    alpha?: Alpha;\n}\ninterface Analysis {\n    brightnessDifference: number;\n    colorDifference: number;\n    compliant: number;\n    contrast: number;\n    largeAA: boolean;\n    largeAAA: boolean;\n    normalAA: boolean;\n    normalAAA: boolean;\n}\ntype PlainObject<T = any> = Record<string, T>;\n\ninterface ColorizrOptions {\n    /**\n     * Output color format.\n     *\n     * If not specified, the output will use the same format as the input color.\n     */\n    format?: ColorType;\n}\ndeclare class Colorizr {\n    alpha: Alpha;\n    hex: HEX;\n    hsl: HSL;\n    oklab: LAB;\n    oklch: LCH;\n    rgb: RGB;\n    type: ColorType;\n    constructor(color: string | HSL | LAB | LCH | RGB, options?: ColorizrOptions);\n    /**\n     * Get css string\n     */\n    get css(): string;\n    /**\n     * Get the red value\n     */\n    get red(): number;\n    /**\n     * Get the green value\n     */\n    get green(): number;\n    /**\n     * Get the blue value\n     */\n    get blue(): number;\n    /**\n     * Get the hue value\n     */\n    get hue(): number;\n    /**\n     * Get the saturation value\n     */\n    get saturation(): number;\n    /**\n     * Get the lightness value\n     */\n    get lightness(): number;\n    /**\n     * Get the luminance value\n     */\n    get luminance(): number;\n    /**\n     * Get the chroma value\n     */\n    get chroma(): number;\n    get opacity(): number;\n    /**\n     * Get the contrasted color\n     */\n    get textColor(): string;\n    private get selectedColor();\n    brightnessDifference(input: string): number;\n    colorDifference(input: string): number;\n    /**\n     * Test 2 colors for compliance\n     */\n    compare(input: string): Analysis;\n    contrast(input: string): number;\n    format(type: ColorType, precision?: number): string;\n    /**\n     * Increase lightness\n     */\n    lighten(amount: Amount): string;\n    /**\n     * Decrease lightness\n     */\n    darken(amount: Amount): string;\n    /**\n     * Increase saturation\n     */\n    saturate(amount: Amount): string;\n    /**\n     * Decrease saturation\n     */\n    desaturate(amount: Amount): string;\n    /**\n     * Invert color\n     */\n    invert(): string;\n    /**\n     * Add opacity to the color.\n     */\n    opacify(alpha?: Alpha): string;\n    /**\n     * Rotate color\n     */\n    rotate(degrees: Degrees): string;\n    /**\n     * Make the color more transparent\n     */\n    transparentize(alpha?: Alpha): string;\n}\n\n/**\n * Get the brightness difference between 2 colors.\n */\ndeclare function brightnessDifference(left: string, right: string, precision?: number): number;\n\n/**\n * Get the chroma of a color.\n */\ndeclare function chroma(input: string): number;\n\n/**\n * Get the difference between 2 colors.\n */\ndeclare function colorDifference(left: string, right: string): number;\n\n/**\n * Check 2 colors for WCAG compliance.\n */\ndeclare function compare(left: string, right: string): Analysis;\n\n/**\n * Get the color contrast between 2 colors.\n */\ndeclare function contrast(left: string, right: string): number;\n\n/**\n * Convert a color string to another format.\n */\ndeclare function convert(input: string, format: ColorType): string;\n\n/**\n * Decrease color lightness\n */\ndeclare function darken(input: string, amount: Amount, format?: ColorType): string;\n\n/**\n * Decrease color saturation\n */\ndeclare function desaturate(input: string, amount: Amount, format?: ColorType): string;\n\ntype ExtractColorPartsReturn = {\n    alpha?: number;\n    model: ColorModelKey;\n} & PlainObject<number>;\n/**\n * Extract the color parts from a CSS color string.\n * Hex colors are not supported.\n */\ndeclare function extractColorParts(input: string): ExtractColorPartsReturn;\n\ninterface FormatCSSOptions {\n    /**\n     * The alpha value of the color.\n     */\n    alpha?: Alpha;\n    /**\n     * Output color format.\n     * @default 'hex'\n     */\n    format?: ColorType;\n    /**\n     * The number of digits of the output.\n     * @default 5\n     */\n    precision?: number;\n    /**\n     * The separator between the values.\n     *\n     * oklab and oklch always use space as a separator.\n     * @default ' '\n     */\n    separator?: string;\n}\ndeclare function formatCSS<T extends ColorModel | HEX>(input: T, options?: FormatCSSOptions): string;\n\ndeclare function formatHex(input: string): HEX;\n\ndeclare function isValidColor(input: string): boolean;\n\n/**\n * Increase color lightness\n */\ndeclare function lighten(input: string, amount: Amount, format?: ColorType): string;\n\n/**\n * Get the luminance of a color.\n */\ndeclare function luminance(input: string): number;\n\n/**\n * Get the name of a color.\n * Returns the hex value if the color is not found.\n */\ndeclare function name(input: string): string;\n\ninterface PaletteOptions {\n    /**\n     * Output color format.\n     *\n     * If not specified, the output will use the same format as the input color.\n     */\n    format?: ColorType;\n    /**\n     * Adjusts the lightness of the base color before generating the palette.\n     *\n     * Value should be between 0 and 100.\n     */\n    lightness?: number;\n    /**\n     * Adjusts the saturation of the base color before generating the palette.\n     *\n     * Value should be between 0 and 100.\n     */\n    saturation?: number;\n    /**\n     * The number of colors to generate in the palette.\n     *\n     * Minimum value is 2.\n     * @default 6\n     */\n    size?: number;\n    /**\n     * Generate a monochromatic palette.\n     *\n     * For more options, use the `swatch` function.\n     */\n    type?: 'monochromatic';\n}\ndeclare function palette(input: string, options?: PaletteOptions): string[];\n\n/**\n * Make the color transparent\n */\ndeclare function opacify(input: string, alpha: Alpha, format?: ColorType): string;\n\ndeclare function opacity(input: string): number;\n\n/**\n * Get the maximum chroma for a given lightness and hue in the OkLCH color space\n */\ndeclare function getOkLCHMaxChroma(input: string | LCH, precision?: number): number;\n/**\n * Get a OkLCH color in the P3 color space.\n */\ndeclare function getP3Color(input: string | LCH): string;\n\n/**\n * Parse CSS color\n */\ndeclare function parseCSS<T extends ColorType>(input: string, format?: T): ColorReturn<T>;\n\n/**\n * Generate a random color.\n */\ndeclare function random(type?: ColorType): string;\n\n/**\n * Change the color hue\n */\ndeclare function rotate(input: string, degrees: Degrees, format?: ColorType): string;\n\n/**\n * Increase color saturation\n */\ndeclare function saturate(input: string, amount: number, format?: ColorType): string;\n\ntype Scheme = 'analogous' | 'complementary' | 'rectangle' | 'split' | 'split-complementary' | 'square' | 'tetradic' | 'triadic';\ninterface SchemeOptions {\n    /**\n     * Output color format.\n     *\n     * If not specified, the output will use the same format as the input color.\n     */\n    format?: ColorType;\n    /**\n     * The type of scheme to generate.\n     * @default 'complementary'\n     */\n    type?: Scheme;\n}\n/**\n * Get the scheme for a color.\n */\ndeclare function scheme(input: string, typeOrOptions?: Scheme | SchemeOptions): string[];\n\ntype Swatch = {\n    [key in ColorTokens]: string;\n};\ntype SwatchVariant = 'deep' | 'neutral' | 'pastel' | 'subtle' | 'vibrant';\ninterface SwatchOptions {\n    /**\n     * Output color format.\n     *\n     * Determines the format of the generated colors (e.g., HEX, RGB, OKLCH, etc.).\n     *\n     * If not specified, the output will match the format of the input color.\n     */\n    format?: ColorType;\n    /**\n     * The lightness tuning factor for the swatch.\n     * - 1: Linear lightness distribution.\n     * - >1: Lighter tones are emphasized.\n     * - <1: Darker tones are emphasized.\n     * @default 1.5\n     */\n    lightnessFactor?: number;\n    /**\n     * The maximum lightness value for the swatch.\n     *\n     * Defines the upper bound for the lightest color in the palette.\n     *\n     * A number between 0 and 1.\n     * @default 0.97\n     */\n    maxLightness?: number;\n    /**\n     * The minimum lightness value for the swatch.\n     *\n     * Defines the lower bound for the darkest color in the palette.\n     *\n     * A number between 0 and 1.\n     *\n     * @default 0.2\n     */\n    minLightness?: number;\n    /**\n     * Determines the scale type for the swatch.\n     * - 'fixed': Shades are distributed with pre-defined lightness intervals.\n     * - 'dynamic': Shades are distributed adaptively based on the input color.\n     * @default 'dynamic'\n     */\n    scale?: 'dynamic' | 'fixed';\n    /**\n     * The variant of the swatch.\n     * - 'deep': Generates rich and bold tones with significantly reduced lightness.\n     * - 'neutral': Generates muted tones by reducing chroma.\n     * - 'pastel': Produces soft and airy tones with significant chroma reduction.\n     * - 'subtle': Creates extremely desaturated tones, close to grayscale.\n     * - 'vibrant': Enhances chroma for bold and striking tones.\n     */\n    variant?: SwatchVariant;\n}\n/**\n * Generate a swatch of colors based on the input color\n *\n * This utility is ideal for designers and developers who need dynamic color\n * palettes for UI themes, design systems, or data visualization. Supports\n * multiple modes, scales, and variants for flexibility.\n */\ndeclare function swatch(input: string, options?: SwatchOptions): Swatch;\n\ninterface TextColorOptions {\n    /**\n     * The dark color to return if the input is light.\n     * @default '#000000'\n     */\n    darkColor?: string;\n    /**\n     * The light color to return if the input is dark.\n     * @default '#ffffff'\n     */\n    lightColor?: string;\n    /**\n     * The threshold to determine if the color is light or dark.\n     *\n     * A number between 0 and 255.\n     * @default 128\n     */\n    threshold?: number;\n}\n/**\n * Get the contrasted color for a given hex.\n */\ndeclare function textColor(input: string, options?: TextColorOptions): string;\n\n/**\n * Increase the color transparency.\n */\ndeclare function transparentize(input: string, alpha: Alpha, format?: ColorType): string;\n\n/** Convert HEX to HSL */\ndeclare function hex2hsl(input: string): HSL;\n\n/** Convert HEX to oklab */\ndeclare function hex2oklab(input: string, precision?: number): LAB;\n\n/** Convert HEX to oklch */\ndeclare function hex2oklch(input: string, precision?: number): LCH;\n\n/** Convert HEX to RGB */\ndeclare function hex2rgb(input: string): RGB;\n\n/** Convert HSL to HEX */\ndeclare function hsl2hex(input: ConverterParameters<HSL>): HEX;\n\n/** Convert HSL to oklab */\ndeclare function hsl2oklab(input: ConverterParameters<HSL>, precision?: number): LAB;\n\n/** Convert HSL to oklch */\ndeclare function hsl2oklch(input: ConverterParameters<HSL>, precision?: number): LCH;\n\n/** Convert HSL to RGB */\ndeclare function hsl2rgb(input: ConverterParameters<HSL>): RGB;\n\n/** Convert oklab to HEX */\ndeclare function oklab2hex(input: ConverterParameters<LAB>): HEX;\n\n/** Convert oklab to HSL */\ndeclare function oklab2hsl(input: ConverterParameters<LAB>): HSL;\n\n/** Convert oklab to oklch */\ndeclare function oklab2oklch(input: ConverterParameters<LAB>, precision?: number): LCH;\n\n/** Convert oklab to RGB */\ndeclare function oklab2rgb(input: ConverterParameters<LAB>, precision?: number): RGB;\n\n/** Convert oklch to HEX */\ndeclare function oklch2hex(input: ConverterParameters<LCH>): HEX;\n\n/** Convert oklch to HSL */\ndeclare function oklch2hsl(input: ConverterParameters<LCH>): HSL;\n\n/** Convert oklch to oklab */\ndeclare function oklch2oklab(input: ConverterParameters<LCH>, precision?: number): LAB;\n\n/** Convert oklch to RGB */\ndeclare function oklch2rgb(input: ConverterParameters<LCH>, precision?: number): RGB;\n\n/** Convert RGB to HEX */\ndeclare function rgb2hex(input: ConverterParameters<RGB>): HEX;\n\n/** Convert RGB to HSL */\ndeclare function rgb2hsl(input: ConverterParameters<RGB>): HSL;\n\n/** Convert RGB to oklab */\ndeclare function rgb2oklab(input: ConverterParameters<RGB>, precision?: number): LAB;\n\n/** Convert RGB to oklch */\ndeclare function rgb2oklch(input: ConverterParameters<RGB>, precision?: number): LCH;\n\n/**\n * Add an alpha value to a hex string\n */\ndeclare function addAlphaToHex(input: string, alpha: Alpha): string;\n/**\n * Convert an alpha value to a hex value.\n */\ndeclare function convertAlphaToHex(input: Alpha): string;\n/**\n * Extract the alpha value from a hex string\n */\ndeclare function extractAlphaFromHex(input: string): number;\ndeclare function hexadecimalToNumber(input: string): number;\n/**\n * Remove the alpha value from a hex string\n */\ndeclare function removeAlphaFromHex(input: string): string;\n\ndeclare function isHex(input: any): input is HEX;\n/**\n * Check if an object contains HSL values\n * The input must be an object with keys 'h', 's', and 'l'\n * with values between 0 and 360 for hue or 0 and 100 for the others.\n */\ndeclare function isHSL(input: unknown): input is HSL;\n/**\n * Check if an object contains LAB values\n * The input must be an object with keys 'l', 'a', and 'b' with values between -1 and 1.\n */\ndeclare function isLAB(input: unknown): input is LAB;\n/**\n * Check if an object contains LAB values\n * The input must be an object with keys 'l', 'c', and 'h' with values between 0 and 360.\n */\ndeclare function isLCH(input: unknown): input is LCH;\n/**\n * Check if an object contains RGB values.\n * The input must be an object with keys 'r', 'g', and 'b' with values between 0 and 255.\n */\ndeclare function isRGB(input: unknown): input is RGB;\n\nexport { type Alpha, type Amount, type Analysis, type ColorKeysTuple, type ColorModel, type ColorModelKey, type ColorModelKeys, type ColorReturn, type ColorTokens, type ColorTuple, type ColorType, type ColorizrOptions, type Colors, type ConverterParameters, type Degrees, type FormatCSSOptions, type HEX, type HSL, type LAB, type LCH, type PaletteOptions, type PlainObject, type RGB, type Scheme, type SchemeOptions, type Swatch, type SwatchOptions, type SwatchVariant, type TextColorOptions, addAlphaToHex, brightnessDifference, chroma, colorDifference, compare, contrast, convert, convertAlphaToHex, darken, Colorizr as default, desaturate, extractAlphaFromHex, extractColorParts, formatCSS, formatHex, getOkLCHMaxChroma, getP3Color, hex2hsl, hex2oklab, hex2oklch, hex2rgb, hexadecimalToNumber, hsl2hex, hsl2oklab, hsl2oklch, hsl2rgb, isHSL, isHex, isLAB, isLCH, isRGB, isValidColor, lighten, luminance, name, oklab2hex, oklab2hsl, oklab2oklch, oklab2rgb, oklch2hex, oklch2hsl, oklch2oklab, oklch2rgb, opacify, opacity, palette, parseCSS, random, removeAlphaFromHex, rgb2hex, rgb2hsl, rgb2oklab, rgb2oklch, rotate, saturate, scheme, swatch, textColor, transparentize };\n"],"x_google_ignoreList":[12],"mappings":"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"}